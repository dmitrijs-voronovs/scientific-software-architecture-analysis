id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/sofa-framework/sofa/issues/2#issuecomment-298850791:16,Deployability,update,update,16,@FabienPean any update on this ?; still an issue ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2#issuecomment-298850791
https://github.com/sofa-framework/sofa/issues/2#issuecomment-299291784:35,Availability,error,error,35,"Well initially I just reported the error and did not necessarily plan to look for the fix, so yes the the error still holds. It was just to try out the option but it was not a blocking issue as, I think, people uses double option or both.; So in the end, I decided to take a look at that. I think I solved the issue. PR to come.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2#issuecomment-299291784
https://github.com/sofa-framework/sofa/issues/2#issuecomment-299291784:106,Availability,error,error,106,"Well initially I just reported the error and did not necessarily plan to look for the fix, so yes the the error still holds. It was just to try out the option but it was not a blocking issue as, I think, people uses double option or both.; So in the end, I decided to take a look at that. I think I solved the issue. PR to come.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2#issuecomment-299291784
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:636,Performance,load,loader,636,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:787,Performance,load,loader,787,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:812,Performance,load,loader,812,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:838,Performance,load,loader,838,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:1277,Performance,load,loader,1277,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:1350,Performance,load,loader,1350,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:1375,Performance,load,loader,1375,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:1401,Performance,load,loader,1401,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063:341,Safety,Detect,Detection,341,"A link to an example scene : https://pastebin.com/iwCdMGBK. ```xml; <?xml version=""1.0""?>; <Node name=""Root"" dt=""0.02"" gravity=""0 -1 0"">; <VisualStyle name=""visualStyle1"" displayFlags=""showAll"" />; <RequiredPlugin name=""Cloth""/>; <DefaultPipeline name=""DefaultCollisionPipeline"" verbose=""0"" draw=""0"" depth=""6"" />; <BruteForceDetection name=""Detection"" />; <LocalMinDistance name=""Proximity"" alarmDistance=""1"" contactDistance=""0.5"" />; <DefaultContactManager name=""Response"" response=""default"" />; <DefaultCollisionGroupManager name=""Group"" />; ; <Node name=""moving"" > ; <EulerImplicitSolver/>; <CGLinearSolver/>; <GridMeshCreator name='loader' resolution = ""5 5"" rotation=""-90 -0 -0 "" scale3d =""3 3 3"" translation =""-2 2 2"" trianglePattern = ""1"" />; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" />; <TTriangleModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=0.3 contactStiffness=10 bothSide=1/>; <UniformMass/>; </Node>; ; <Node name=""fixed"" >; <EulerImplicitSolver/>; <CGLinearSolver/>; <MeshObjLoader name='loader' filename=""mesh/cube.obj""/>; <MeshTopology name='mesh' position=""@loader.position"" edges=""@loader.edges"" triangles=""@loader.triangles"" />; <MechanicalObject template=""Vec3d"" position=""0 0 0"" src=""@mesh"" translation=""0 -5 0"" scale3d=""10 1 10""/>; <TTriangleModel template=""Vec3d"" proximity=""0.1""contactStiffness=10 bothSide=1/>; <TPointModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <TLineModel template=""Vec3d"" proximity=""0.1"" contactStiffness=10 bothSide=1/>; <FixedConstraint template=""Vec3d"" fixAll=""1"" />; </Node>; </Node>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5#issuecomment-490817063
https://github.com/sofa-framework/sofa/pull/6#issuecomment-232028269:34,Deployability,patch,patch,34,Can one of the admins verify this patch?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/6#issuecomment-232028269
https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856:301,Integrability,interface,interface,301,I would not add a boolean because you would have a large number of tests in the case of a large mesh.; I would rather rename those functions and set them purely protected/private (then transforming them like utility methods for DrawToolGL). ; And then create other functions implementing the DrawTool interface (calling those private methods and glBegin(*)/glEnd calls),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856
https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856:67,Testability,test,tests,67,I would not add a boolean because you would have a large number of tests in the case of a large mesh.; I would rather rename those functions and set them purely protected/private (then transforming them like utility methods for DrawToolGL). ; And then create other functions implementing the DrawTool interface (calling those private methods and glBegin(*)/glEnd calls),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856
https://github.com/sofa-framework/sofa/pull/8#issuecomment-232290464:34,Deployability,patch,patch,34,Can one of the admins verify this patch?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/8#issuecomment-232290464
https://github.com/sofa-framework/sofa/issues/9#issuecomment-298854469:31,Security,validat,validating,31,Please submit a PR with a test validating the right behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-298854469
https://github.com/sofa-framework/sofa/issues/9#issuecomment-298854469:26,Testability,test,test,26,Please submit a PR with a test validating the right behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-298854469
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305125439:108,Performance,load,load,108,See #51; Partially fixed in PR #185 .; Last things to do is:; - to remove ImageBMP/ImagePNG/ImageQt code; - load CImgPlugin when you want to load images (force loading like SofaPython ? or wait PR #253 ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305125439
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305125439:141,Performance,load,load,141,See #51; Partially fixed in PR #185 .; Last things to do is:; - to remove ImageBMP/ImagePNG/ImageQt code; - load CImgPlugin when you want to load images (force loading like SofaPython ? or wait PR #253 ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305125439
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305125439:160,Performance,load,loading,160,See #51; Partially fixed in PR #185 .; Last things to do is:; - to remove ImageBMP/ImagePNG/ImageQt code; - load CImgPlugin when you want to load images (force loading like SofaPython ? or wait PR #253 ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305125439
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:359,Availability,avail,available,359,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:345,Deployability,install,installed,345,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:189,Integrability,depend,dependency,189,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:416,Integrability,depend,dependency,416,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:81,Modifiability,plugin,plugin,81,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:167,Modifiability,plugin,plugin,167,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:30,Performance,load,loader,30,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:95,Performance,load,loaded,95,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:133,Performance,load,loader,133,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:535,Deployability,configurat,configuration,535,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:97,Integrability,depend,dependency,97,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:678,Integrability,depend,dependency,678,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:77,Modifiability,plugin,plugin,77,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:535,Modifiability,config,configuration,535,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:45,Performance,load,loaders,45,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:275,Performance,load,load,275,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404
https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:357,Safety,detect,detects,357,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404
https://github.com/sofa-framework/sofa/pull/11#issuecomment-236527691:13,Usability,simpl,simple,13,I guess this simple change is not breaking SOFA.; @matthieu-nesme ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/11#issuecomment-236527691
https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253:109,Safety,avoid,avoid,109,One remark about commented blocks: couldn't they be simply removed if not used anymore? ; Would be better to avoid introducing commented/unmaintained/why-is-this-here code.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253
https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253:52,Usability,simpl,simply,52,One remark about commented blocks: couldn't they be simply removed if not used anymore? ; Would be better to avoid introducing commented/unmaintained/why-is-this-here code.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253
https://github.com/sofa-framework/sofa/pull/14#issuecomment-243443973:104,Modifiability,Plugin,Plugin,104,"Please create 2 feature branches for these 2 different topics: Bezier High Order elements removal, MSVC Plugin Manager fix.; I just sent you an email ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/14#issuecomment-243443973
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716:28,Modifiability,Flexible,Flexible,28,"I guess this will break the Flexible plugin compilation.; Do you plane to commit it back in a public plugin? In which case, Flexible could link with this plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716:37,Modifiability,plugin,plugin,37,"I guess this will break the Flexible plugin compilation.; Do you plane to commit it back in a public plugin? In which case, Flexible could link with this plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716:101,Modifiability,plugin,plugin,101,"I guess this will break the Flexible plugin compilation.; Do you plane to commit it back in a public plugin? In which case, Flexible could link with this plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716:124,Modifiability,Flexible,Flexible,124,"I guess this will break the Flexible plugin compilation.; Do you plane to commit it back in a public plugin? In which case, Flexible could link with this plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716:154,Modifiability,plugin,plugin,154,"I guess this will break the Flexible plugin compilation.; Do you plane to commit it back in a public plugin? In which case, Flexible could link with this plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:41,Modifiability,plugin,plugin,41,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:122,Modifiability,plugin,plugin,122,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:167,Modifiability,plugin,plugins,167,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:454,Modifiability,Flexible,Flexible,454,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:463,Modifiability,plugin,plugin,463,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:529,Modifiability,plugin,plugin,529,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:556,Modifiability,Flexible,Flexible,556,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:586,Modifiability,plugin,plugin,586,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905:113,Deployability,update,update,113,"Hi Hervé,. In general, I think it is a good idea to have a repo per plugin, even if it becomes more difficult to update them when the sofa core is modified.; But in this specific case, it would be great to add this plugin to this github repo, so Flexible can still benefit from your code. Another solution, could be to add a third plugin in your independent repository, that would link with both SOFA-HighOrderTopology and Flexible, and that would contain the high order shape functions. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905:68,Modifiability,plugin,plugin,68,"Hi Hervé,. In general, I think it is a good idea to have a repo per plugin, even if it becomes more difficult to update them when the sofa core is modified.; But in this specific case, it would be great to add this plugin to this github repo, so Flexible can still benefit from your code. Another solution, could be to add a third plugin in your independent repository, that would link with both SOFA-HighOrderTopology and Flexible, and that would contain the high order shape functions. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905:215,Modifiability,plugin,plugin,215,"Hi Hervé,. In general, I think it is a good idea to have a repo per plugin, even if it becomes more difficult to update them when the sofa core is modified.; But in this specific case, it would be great to add this plugin to this github repo, so Flexible can still benefit from your code. Another solution, could be to add a third plugin in your independent repository, that would link with both SOFA-HighOrderTopology and Flexible, and that would contain the high order shape functions. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905:246,Modifiability,Flexible,Flexible,246,"Hi Hervé,. In general, I think it is a good idea to have a repo per plugin, even if it becomes more difficult to update them when the sofa core is modified.; But in this specific case, it would be great to add this plugin to this github repo, so Flexible can still benefit from your code. Another solution, could be to add a third plugin in your independent repository, that would link with both SOFA-HighOrderTopology and Flexible, and that would contain the high order shape functions. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905:331,Modifiability,plugin,plugin,331,"Hi Hervé,. In general, I think it is a good idea to have a repo per plugin, even if it becomes more difficult to update them when the sofa core is modified.; But in this specific case, it would be great to add this plugin to this github repo, so Flexible can still benefit from your code. Another solution, could be to add a third plugin in your independent repository, that would link with both SOFA-HighOrderTopology and Flexible, and that would contain the high order shape functions. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905:423,Modifiability,Flexible,Flexible,423,"Hi Hervé,. In general, I think it is a good idea to have a repo per plugin, even if it becomes more difficult to update them when the sofa core is modified.; But in this specific case, it would be great to add this plugin to this github repo, so Flexible can still benefit from your code. Another solution, could be to add a third plugin in your independent repository, that would link with both SOFA-HighOrderTopology and Flexible, and that would contain the high order shape functions. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:466,Availability,avail,available,466,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:413,Deployability,install,installed,413,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:879,Deployability,update,update,879,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:74,Modifiability,Flexible,Flexible,74,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:122,Modifiability,plugin,plugin,122,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:243,Modifiability,plugin,plugin,243,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:305,Modifiability,plugin,plugin,305,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:344,Modifiability,plugin,plugins,344,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:491,Modifiability,Flexible,Flexible,491,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:831,Modifiability,plugin,plugin,831,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:983,Modifiability,plugin,plugin,983,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:1017,Modifiability,Flexible,Flexible,1017,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:1109,Modifiability,plugin,plugin,1109,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936:1204,Modifiability,Flexible,Flexible,1204,"yet an other option is to conditionnaly compile HighOrderTopology code in Flexible based on whether the HighOrderTopology plugin is existing or not (in cmakelists package_require(HighOrderTopology) if (HighOrderTopology_FOUND) ... ): ; - each plugin can live in its own repository ; - no need for a third plugin ; - should work whether all the plugins are compiled in the same cmake build project or are compiled/installed separately (well HighOrderTopology must be available when compiling Flexible) . thomas . ----- Mail original -----. > De: ""Matthieu Nesme"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > Hi Hervé,; > ; > In general, I think it is a good idea to have a repo per plugin, even if it; > becomes more difficult to update them when the sofa core is modified.; > But in this specific case, it would be great to add this plugin to this; > github repo, so Flexible can still benefit from your code.; > ; > Another solution, could be to add a third plugin in your independent; > repository, that would link with both SOFA-HighOrderTopology and Flexible,; > and that would contain the high order shape functions.; > ; > What do you think?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:906,Availability,avail,available,906,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:849,Deployability,install,installed,849,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:1357,Deployability,update,update,1357," SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:39,Modifiability,Flexible,Flexible,39,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:179,Modifiability,plugin,plugins,179,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:495,Modifiability,Flexible,Flexible,495,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:543,Modifiability,plugin,plugin,543,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:673,Modifiability,plugin,plugin,673,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:736,Modifiability,plugin,plugin,736,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:776,Modifiability,plugin,plugins,776,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:931,Modifiability,Flexible,Flexible,931,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:1301,Modifiability,plugin,plugin,1301," SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:1463,Modifiability,plugin,plugin,1463,"eral pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:1499,Modifiability,Flexible,Flexible,1499,"eral pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:1595,Modifiability,plugin,plugin,1595,"eral pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:1698,Modifiability,Flexible,Flexible,1698,"eral pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1601,Availability,avail,available,1601,"5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:186,Deployability,integrat,integrating,186,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:235,Deployability,continuous,continuous,235,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:246,Deployability,integrat,integration,246,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1543,Deployability,install,installed,1543,"5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2081,Deployability,update,update,2081," be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notif",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:186,Integrability,integrat,integrating,186,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:246,Integrability,integrat,integration,246,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:42,Modifiability,plugin,plugin,42,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:683,Modifiability,Flexible,Flexible,683,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:831,Modifiability,plugin,plugins,831,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1180,Modifiability,Flexible,Flexible,1180,"n issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it woul",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1228,Modifiability,plugin,plugin,1228,"n issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it woul",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1362,Modifiability,plugin,plugin,1362,"5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1427,Modifiability,plugin,plugin,1427,"5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1469,Modifiability,plugin,plugins,1469,"5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1626,Modifiability,Flexible,Flexible,1626,"5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2022,Modifiability,plugin,plugin,2022," be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notif",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2189,Modifiability,plugin,plugin,2189," > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2227,Modifiability,Flexible,Flexible,2227," > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2327,Modifiability,plugin,plugin,2327," > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2433,Modifiability,Flexible,Flexible,2433," > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225
https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:155,Deployability,continuous,continuous,155,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969
https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:166,Deployability,integrat,integration,166,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969
https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:166,Integrability,integrat,integration,166,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969
https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:314,Modifiability,plugin,plugin,314,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969
https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:455,Modifiability,Flexible,Flexible,455,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969
https://github.com/sofa-framework/sofa/issues/17#issuecomment-248837757:10,Testability,test,test,10,"I added a test (FileRepository_test) empathizing the problem.; Successing on linux, failing on windows.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/17#issuecomment-248837757
https://github.com/sofa-framework/sofa/issues/17#issuecomment-261488125:24,Safety,safe,safest,24,I guess the easiest and safest way to handle that would be to use boost::filesystem; http://www.boost.org/doc/libs/1_62_0/libs/filesystem/doc/index.htm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/17#issuecomment-261488125
https://github.com/sofa-framework/sofa/issues/20#issuecomment-300186820:123,Safety,detect,detected,123,I don't have the problem; neither on OSX nor on a Ubuntu Xenial VM. This problem looks Windows-specific (despite not being detected by our CI). Keeping investigating...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/20#issuecomment-300186820
https://github.com/sofa-framework/sofa/issues/21#issuecomment-248850189:36,Testability,test,tests,36,Problem demonstrated in the failing tests DataFileNameVector_test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-248850189
https://github.com/sofa-framework/sofa/issues/21#issuecomment-250735840:51,Usability,simpl,simply,51,"There was a SVector<T> class added in sofa::helper simply to change the stream operators to use commas to delimit values and [ ] to delimit the vector itself (allowing for vectors inside vectors), but I don't like this design because the type itself is different affecting all the code that uses it...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-250735840
https://github.com/sofa-framework/sofa/issues/21#issuecomment-251437176:320,Integrability,message,message,320,"A solution could be to replace the concerned Data with new Data **with different names** using SVector. The backward compatibility could be ensure by having a specific ""parse"" function, looking for the old data names, and filling the new SVector by splitting at every spaces (the old way). W/o forgetting the deprecated message. A similar process has been done in RigidMapping (Data 'rigidIndexPerPoint' replacing 'repartition').",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-251437176
https://github.com/sofa-framework/sofa/issues/21#issuecomment-254796313:107,Integrability,message,message,107,"The approach proposed by matthieu sounds ok to me. ; I strongly support the ""W/o forgetting the deprecated message"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-254796313
https://github.com/sofa-framework/sofa/issues/21#issuecomment-256926937:430,Deployability,update,update,430,"Fixed in a99443a98fed8052fe1159487d73639a6a6e2624. I finally changed DataFileNameVector that is now a SVector<string>, so be aware its string serialization changed. I made this choice because only OglShader is using DataFileNameVector in sofa-public, so the consequences of this change are small, and at least future usage of DataFileNameVector will be ok.; Of course if your private code is using DataFileNameVector, you have to update it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-256926937
https://github.com/sofa-framework/sofa/pull/22#issuecomment-260444799:14,Modifiability,plugin,plugin,14,@hugtalbot Is plugin Sensable now obsolete with the new Geomagic plugin out ?; Otherwise these fix were solving my issues at the time.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/22#issuecomment-260444799
https://github.com/sofa-framework/sofa/pull/22#issuecomment-260444799:65,Modifiability,plugin,plugin,65,@hugtalbot Is plugin Sensable now obsolete with the new Geomagic plugin out ?; Otherwise these fix were solving my issues at the time.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/22#issuecomment-260444799
https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658:176,Modifiability,refactor,refactoring,176,Just before the February school break we started a branch on our repo. The task #189 is complete (needs more testing to validate it) and is a prerequisite before real python 3 refactoring in SofaPython.; Stay tuned.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658
https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658:209,Performance,tune,tuned,209,Just before the February school break we started a branch on our repo. The task #189 is complete (needs more testing to validate it) and is a prerequisite before real python 3 refactoring in SofaPython.; Stay tuned.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658
https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658:120,Security,validat,validate,120,Just before the February school break we started a branch on our repo. The task #189 is complete (needs more testing to validate it) and is a prerequisite before real python 3 refactoring in SofaPython.; Stay tuned.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658
https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658:109,Testability,test,testing,109,Just before the February school break we started a branch on our repo. The task #189 is complete (needs more testing to validate it) and is a prerequisite before real python 3 refactoring in SofaPython.; Stay tuned.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658
https://github.com/sofa-framework/sofa/issues/23#issuecomment-284981648:102,Modifiability,plugin,plugin,102,The branch is: https://github.com/SofaDefrost/sofa/tree/SofaPython3; And it also moved the SofaPython plugin to SofaPython27 dirctory (for backward-compatibility),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-284981648
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:436,Availability,avail,available,436,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:776,Availability,reliab,reliable,776,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:390,Deployability,pipeline,pipeline,390,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:488,Deployability,update,updates,488,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:201,Modifiability,plugin,plugin,201,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:307,Modifiability,plugin,plugin,307,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:958,Modifiability,plugin,plugin,958,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:1076,Modifiability,plugin,plugin,1076,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:380,Safety,detect,detection,380,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:809,Safety,Detect,DetectionOutputVector,809,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:333,Usability,simpl,simple,333,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540:124,Deployability,integrat,integrated,124,"Dear all, @faichele @fjourdes @JeremieA . Should we include this as a new plugin in SOFA ? How should it be articulated and integrated in SOFA ?; Thanks for your input.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540
https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540:124,Integrability,integrat,integrated,124,"Dear all, @faichele @fjourdes @JeremieA . Should we include this as a new plugin in SOFA ? How should it be articulated and integrated in SOFA ?; Thanks for your input.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540
https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540:74,Modifiability,plugin,plugin,74,"Dear all, @faichele @fjourdes @JeremieA . Should we include this as a new plugin in SOFA ? How should it be articulated and integrated in SOFA ?; Thanks for your input.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:1149,Deployability,release,released,1149,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:144,Energy Efficiency,schedul,scheduling,144,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:439,Energy Efficiency,schedul,scheduling,439,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:78,Modifiability,plugin,plugin,78,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:117,Modifiability,plugin,plugin,117,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:406,Modifiability,plugin,plugin,406,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:62,Performance,Multi-thread,Multi-threading,62,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:1241,Performance,perform,performance,1241,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:169,Safety,detect,detection,169,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:909,Safety,avoid,avoid,909,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:966,Safety,avoid,avoids,966,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:1046,Safety,detect,detection,1046,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:1213,Testability,test,testing,1213,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:1222,Testability,Test,Tests,1222,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830
https://github.com/sofa-framework/sofa/issues/24#issuecomment-289836125:52,Modifiability,plugin,plugin,52,"I've prepared a local version of the MultiThreading plugin that uses STL classes instead of boost, minus currently:; - boost::thread_specific_ptr; - boost::pool. I can create a pull request for this if there is interest.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-289836125
https://github.com/sofa-framework/sofa/issues/24#issuecomment-292116327:41,Deployability,update,update,41,"hey @MaximeMoge,; From now on, could you update us about the progress on this workgroup?; Do not hesitate to use issues and the Project MT to describe you tasks and progress.; Cheers,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292116327
https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228:57,Deployability,integrat,integrated,57,"issofa_multithreading is a few commits behind our public integrated branch. ; Almost all the commits are directly related to the `Multithreading` plugin, see https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. There is also one particular fix related to the concurrent call to `DDGNode::update` method ; https://github.com/InSimo/sofa/commit/2e8d6f33b597ff6dbd568c67dfac7715850f8015",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228
https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228:335,Deployability,update,update,335,"issofa_multithreading is a few commits behind our public integrated branch. ; Almost all the commits are directly related to the `Multithreading` plugin, see https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. There is also one particular fix related to the concurrent call to `DDGNode::update` method ; https://github.com/InSimo/sofa/commit/2e8d6f33b597ff6dbd568c67dfac7715850f8015",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228
https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228:57,Integrability,integrat,integrated,57,"issofa_multithreading is a few commits behind our public integrated branch. ; Almost all the commits are directly related to the `Multithreading` plugin, see https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. There is also one particular fix related to the concurrent call to `DDGNode::update` method ; https://github.com/InSimo/sofa/commit/2e8d6f33b597ff6dbd568c67dfac7715850f8015",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228
https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228:146,Modifiability,plugin,plugin,146,"issofa_multithreading is a few commits behind our public integrated branch. ; Almost all the commits are directly related to the `Multithreading` plugin, see https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. There is also one particular fix related to the concurrent call to `DDGNode::update` method ; https://github.com/InSimo/sofa/commit/2e8d6f33b597ff6dbd568c67dfac7715850f8015",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228
https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228:234,Modifiability,plugin,plugins,234,"issofa_multithreading is a few commits behind our public integrated branch. ; Almost all the commits are directly related to the `Multithreading` plugin, see https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. There is also one particular fix related to the concurrent call to `DDGNode::update` method ; https://github.com/InSimo/sofa/commit/2e8d6f33b597ff6dbd568c67dfac7715850f8015",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228
https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228:306,Performance,concurren,concurrent,306,"issofa_multithreading is a few commits behind our public integrated branch. ; Almost all the commits are directly related to the `Multithreading` plugin, see https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. There is also one particular fix related to the concurrent call to `DDGNode::update` method ; https://github.com/InSimo/sofa/commit/2e8d6f33b597ff6dbd568c67dfac7715850f8015",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1386,Energy Efficiency,adapt,adapt,1386,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:547,Integrability,depend,depend,547,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1230,Integrability,depend,dependencies,1230,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1875,Integrability,depend,dependent,1875," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1931,Integrability,depend,dependent,1931," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1386,Modifiability,adapt,adapt,1386,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:294,Performance,concurren,concurrent,294,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1444,Performance,perform,performance,1444," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:266,Safety,safe,safe,266,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1213,Safety,predict,predict,1213,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1320,Safety,predict,predict,1320,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:100,Security,access,accesses,100,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:209,Security,access,accesses,209,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:276,Security,access,accesses,276,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:646,Security,access,accesses,646,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1048,Security,access,accesses,1048,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1337,Security,access,accesses,1337,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1588,Security,access,access,1588," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1623,Security,access,access,1623," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:16,Usability,feedback,feedback,16,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:11,Deployability,update,update,11,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1470,Energy Efficiency,schedul,schedule,1470," data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the bl",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2601,Energy Efficiency,schedul,schedule,2601," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2762,Energy Efficiency,schedul,scheduling,2762," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2896,Energy Efficiency,schedul,scheduling,2896," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:349,Integrability,depend,depending,349,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1396,Integrability,depend,dependencies,1396," data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the bl",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1450,Integrability,depend,dependency,1450," data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the bl",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2534,Integrability,depend,dependency,2534," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:36,Performance,perform,perform,36,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1785,Performance,perform,performed,1785," of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:455,Security,access,access,455,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:914,Security,access,accesses,914,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:961,Security,access,accesses,961,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1077,Security,access,accesses,1077,"tion on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1215,Security,access,accessed,1215,"tiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and task",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1300,Security,access,accesses,1300,"implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2125,Security,access,accesses,2125," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2208,Security,access,accesses,2208," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2427,Security,access,accesses,2427," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2487,Security,access,accessed,2487," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2103,Testability,log,logging,2103," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2200,Testability,log,log,2200," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2884,Testability,log,logging,2884," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289
https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:398,Modifiability,inherit,inheritance,398,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601
https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:72,Security,validat,validation,72,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601
https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:597,Security,validat,validated,597,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601
https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:555,Testability,test,tests,555,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601
https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:634,Testability,test,tests,634,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292202592:119,Availability,Mask,Mask,119,"The project has been renamed to ""Sparse Matrix"" and ""Sparse Vector"" representation because we have similar issues with Mask, mapping, constraints, solvers etc... due to the lack of unified ""sparse"" representation of vectors and matrices in SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292202592
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:397,Energy Efficiency,efficient,efficient,397,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:106,Safety,avoid,avoid,106,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:225,Usability,Simpl,Simplify,225,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:380,Usability,simpl,simple,380,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:735,Modifiability,plugin,plugin,735,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:1466,Performance,perform,performance-wise,1466,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:1501,Testability,benchmark,benchmarking,1501,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:943,Usability,simpl,simplest,943,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:184,Availability,mask,mask,184,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:339,Availability,down,down,339,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:407,Deployability,configurat,configuration,407,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:238,Modifiability,Flexible,Flexible,238,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:407,Modifiability,config,configuration,407,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:37,Usability,clear,clear,37,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:1644,Modifiability,plugin,plugin,1644,"virtual calls. The back_inserter of the default type could decompose all the chunks in scalars, while implementations dedicated to 3x3 chunks could push them in vector<Triplet<Mat3x3>>. Pr. Francois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:2383,Performance,perform,performance-wise,2383,"ois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPgaJpZM4KLEE1>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:698,Safety,avoid,avoid,698,"+1; Back-inserting triplets combines flexibility and efficiency. It is used in Eigen.; However, I think we have to seriously consider the demand for small dense chunks rather than scalars, since a significant number of applications use only 3D points as DOFs, and sorting such chunks can be much faster than scalars.; This may be easily handled using a choice of triplets, (such as Triplet<Mat3x3>) provided that we restrain the choice of chunk types to a reasonable number. All the square sizes from 1 to 12 should be way enough, and more could be added if necessary. (I am not sure that other sizes than 3x3 would be used in practice); The sparse matrix type could be a compile-time parameter to avoid virtual calls. The back_inserter of the default type could decompose all the chunks in scalars, while implementations dedicated to 3x3 chunks could push them in vector<Triplet<Mat3x3>>. Pr. Francois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/force",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:2418,Testability,benchmark,benchmarking,2418,"ois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPgaJpZM4KLEE1>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:1859,Usability,simpl,simplest,1859,"t3x3>>. Pr. Francois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPg",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871:180,Availability,avail,available,180,"@francoisfaure It is true that having dense matrix blocks is a must-have for some applications, but I wonder about the API: . - for efficiency reasons, we need the DOF types to be available if we want to implement this proposal; - it is quite difficult to recover actual DOF types *from outside* the mapping/forcefield, except when working with a component at the same graph level as the mapping/forcefield, so it seems restrictive to expect the caller to know the DOF types (or is it not?). Which leaves us with the following: back-inserting typed triplets into a container with `template`/overloaded insertion methods, one for each data chunk type. This way the mapping/forcefield DOF types are not part of the API (only the container type is), yet the mapping/forcefield calls the appropriate container method knowing its own DOF types. Of course, the overloaded insertion method must not be `virtual`, which would defeat the whole point. The container must know how to push typed chunks into its internal state (easy), but also how to use/recover it (harder since it needs to remember the types, e.g. for sorting typed triplets later on). This is not unfeasible, but it is not straightforward either. It also adds some complexity/overhead compared to scalar-only back-insertion. Is this worth it? . In order to remember ""typed contexts"" easily, we can draw inspiration from c++14's `std::variant`, where a small integer stores a type index from a variadic argument list, and this index is used for jumping in a static dispatch table. (I can expand on that if needed)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871:256,Availability,recover,recover,256,"@francoisfaure It is true that having dense matrix blocks is a must-have for some applications, but I wonder about the API: . - for efficiency reasons, we need the DOF types to be available if we want to implement this proposal; - it is quite difficult to recover actual DOF types *from outside* the mapping/forcefield, except when working with a component at the same graph level as the mapping/forcefield, so it seems restrictive to expect the caller to know the DOF types (or is it not?). Which leaves us with the following: back-inserting typed triplets into a container with `template`/overloaded insertion methods, one for each data chunk type. This way the mapping/forcefield DOF types are not part of the API (only the container type is), yet the mapping/forcefield calls the appropriate container method knowing its own DOF types. Of course, the overloaded insertion method must not be `virtual`, which would defeat the whole point. The container must know how to push typed chunks into its internal state (easy), but also how to use/recover it (harder since it needs to remember the types, e.g. for sorting typed triplets later on). This is not unfeasible, but it is not straightforward either. It also adds some complexity/overhead compared to scalar-only back-insertion. Is this worth it? . In order to remember ""typed contexts"" easily, we can draw inspiration from c++14's `std::variant`, where a small integer stores a type index from a variadic argument list, and this index is used for jumping in a static dispatch table. (I can expand on that if needed)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871:1043,Availability,recover,recover,1043,"@francoisfaure It is true that having dense matrix blocks is a must-have for some applications, but I wonder about the API: . - for efficiency reasons, we need the DOF types to be available if we want to implement this proposal; - it is quite difficult to recover actual DOF types *from outside* the mapping/forcefield, except when working with a component at the same graph level as the mapping/forcefield, so it seems restrictive to expect the caller to know the DOF types (or is it not?). Which leaves us with the following: back-inserting typed triplets into a container with `template`/overloaded insertion methods, one for each data chunk type. This way the mapping/forcefield DOF types are not part of the API (only the container type is), yet the mapping/forcefield calls the appropriate container method knowing its own DOF types. Of course, the overloaded insertion method must not be `virtual`, which would defeat the whole point. The container must know how to push typed chunks into its internal state (easy), but also how to use/recover it (harder since it needs to remember the types, e.g. for sorting typed triplets later on). This is not unfeasible, but it is not straightforward either. It also adds some complexity/overhead compared to scalar-only back-insertion. Is this worth it? . In order to remember ""typed contexts"" easily, we can draw inspiration from c++14's `std::variant`, where a small integer stores a type index from a variadic argument list, and this index is used for jumping in a static dispatch table. (I can expand on that if needed)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871:256,Safety,recover,recover,256,"@francoisfaure It is true that having dense matrix blocks is a must-have for some applications, but I wonder about the API: . - for efficiency reasons, we need the DOF types to be available if we want to implement this proposal; - it is quite difficult to recover actual DOF types *from outside* the mapping/forcefield, except when working with a component at the same graph level as the mapping/forcefield, so it seems restrictive to expect the caller to know the DOF types (or is it not?). Which leaves us with the following: back-inserting typed triplets into a container with `template`/overloaded insertion methods, one for each data chunk type. This way the mapping/forcefield DOF types are not part of the API (only the container type is), yet the mapping/forcefield calls the appropriate container method knowing its own DOF types. Of course, the overloaded insertion method must not be `virtual`, which would defeat the whole point. The container must know how to push typed chunks into its internal state (easy), but also how to use/recover it (harder since it needs to remember the types, e.g. for sorting typed triplets later on). This is not unfeasible, but it is not straightforward either. It also adds some complexity/overhead compared to scalar-only back-insertion. Is this worth it? . In order to remember ""typed contexts"" easily, we can draw inspiration from c++14's `std::variant`, where a small integer stores a type index from a variadic argument list, and this index is used for jumping in a static dispatch table. (I can expand on that if needed)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871:1043,Safety,recover,recover,1043,"@francoisfaure It is true that having dense matrix blocks is a must-have for some applications, but I wonder about the API: . - for efficiency reasons, we need the DOF types to be available if we want to implement this proposal; - it is quite difficult to recover actual DOF types *from outside* the mapping/forcefield, except when working with a component at the same graph level as the mapping/forcefield, so it seems restrictive to expect the caller to know the DOF types (or is it not?). Which leaves us with the following: back-inserting typed triplets into a container with `template`/overloaded insertion methods, one for each data chunk type. This way the mapping/forcefield DOF types are not part of the API (only the container type is), yet the mapping/forcefield calls the appropriate container method knowing its own DOF types. Of course, the overloaded insertion method must not be `virtual`, which would defeat the whole point. The container must know how to push typed chunks into its internal state (easy), but also how to use/recover it (harder since it needs to remember the types, e.g. for sorting typed triplets later on). This is not unfeasible, but it is not straightforward either. It also adds some complexity/overhead compared to scalar-only back-insertion. Is this worth it? . In order to remember ""typed contexts"" easily, we can draw inspiration from c++14's `std::variant`, where a small integer stores a type index from a variadic argument list, and this index is used for jumping in a static dispatch table. (I can expand on that if needed)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292881871
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292885804:224,Availability,avail,available,224,"> ; > @francoisfaure <https://github.com/francoisfaure> It is true that having dense matrix blocks is a must-have for some applications, but I wonder about the API:; > ; > for efficiency reasons, we need the DOF types to be available if we want to implement this proposal; Why ? The dense matrix blocks could be of arbitrary compile-time types, the same way as SReal. E.g. Mat<3,3,SReal> . Which may remove most of your objections. ; I don’t know if it is worth it. I am just raising the question, since we (Anatoscope) do not use this.; It is time for potential users to speak up. FF",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292885804
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877:852,Performance,optimiz,optimize,852,"@francoisfaure ; > E.g. Mat<3,3,SReal>. This just shifts the same issue to chunk types, then :-) . I probably misunderstood your proposal: you mentioned having the sparse matrix type passed as a template parameter for efficiency reasons. I was simply pointing out that this template type cannot be known outside of the component, and so cannot appear in the `back_insert_iterator` type which is part of the hypothetical API I hinted to. Maybe you had this in mind from the start and I did not get it. @fjourdes Maybe it would be preferable not to *return* a `std::vector`, but instead to push to an existing one like so:. ```c++; class BaseForceField; {; public: ; virtual void getMatrixChunks(std::vector<MatrixChunkType>& chunks) const = 0; ; };; ```. This way you make no assumption as to whom should manage the memory, and leave the opportunity to optimize memory allocations. . I assume the `MatrixChunkType` holds the type index, so you can `std::visit` it and dispatch using its actual type? Having a type index per chunk means having one dispatch per chunk, and I am afraid this would somewhat bring us back to the ""one virtual call per element"" issue :-/ But maybe the compiler would be clever enough to optimize this? . More problematic, each chunk would have the size of the largest element in the tagged union, unless we use an extra indirection. . I was more thinking of having one `std::vector` per chunk type in the chunk container like so: . ```c++. struct chunk_container {; // add more as needed; using chunk_vector = std::variant< std::vector< chunk<1, 1> >, ; std::vector< chunk<2, 2,> > >;; ; chunk_vector storage[2]; // size can be inferred automatically; ; template<int I, int J>; void push(chunk<I, J> c) {; static constexpr int index = chunk_index<I, J>(); // correct index in chunk_storage; std::get< std::vector<I, J> >(storage[index]).push_back(c);; }; };",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877:1213,Performance,optimiz,optimize,1213,"@francoisfaure ; > E.g. Mat<3,3,SReal>. This just shifts the same issue to chunk types, then :-) . I probably misunderstood your proposal: you mentioned having the sparse matrix type passed as a template parameter for efficiency reasons. I was simply pointing out that this template type cannot be known outside of the component, and so cannot appear in the `back_insert_iterator` type which is part of the hypothetical API I hinted to. Maybe you had this in mind from the start and I did not get it. @fjourdes Maybe it would be preferable not to *return* a `std::vector`, but instead to push to an existing one like so:. ```c++; class BaseForceField; {; public: ; virtual void getMatrixChunks(std::vector<MatrixChunkType>& chunks) const = 0; ; };; ```. This way you make no assumption as to whom should manage the memory, and leave the opportunity to optimize memory allocations. . I assume the `MatrixChunkType` holds the type index, so you can `std::visit` it and dispatch using its actual type? Having a type index per chunk means having one dispatch per chunk, and I am afraid this would somewhat bring us back to the ""one virtual call per element"" issue :-/ But maybe the compiler would be clever enough to optimize this? . More problematic, each chunk would have the size of the largest element in the tagged union, unless we use an extra indirection. . I was more thinking of having one `std::vector` per chunk type in the chunk container like so: . ```c++. struct chunk_container {; // add more as needed; using chunk_vector = std::variant< std::vector< chunk<1, 1> >, ; std::vector< chunk<2, 2,> > >;; ; chunk_vector storage[2]; // size can be inferred automatically; ; template<int I, int J>; void push(chunk<I, J> c) {; static constexpr int index = chunk_index<I, J>(); // correct index in chunk_storage; std::get< std::vector<I, J> >(storage[index]).push_back(c);; }; };",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877:244,Usability,simpl,simply,244,"@francoisfaure ; > E.g. Mat<3,3,SReal>. This just shifts the same issue to chunk types, then :-) . I probably misunderstood your proposal: you mentioned having the sparse matrix type passed as a template parameter for efficiency reasons. I was simply pointing out that this template type cannot be known outside of the component, and so cannot appear in the `back_insert_iterator` type which is part of the hypothetical API I hinted to. Maybe you had this in mind from the start and I did not get it. @fjourdes Maybe it would be preferable not to *return* a `std::vector`, but instead to push to an existing one like so:. ```c++; class BaseForceField; {; public: ; virtual void getMatrixChunks(std::vector<MatrixChunkType>& chunks) const = 0; ; };; ```. This way you make no assumption as to whom should manage the memory, and leave the opportunity to optimize memory allocations. . I assume the `MatrixChunkType` holds the type index, so you can `std::visit` it and dispatch using its actual type? Having a type index per chunk means having one dispatch per chunk, and I am afraid this would somewhat bring us back to the ""one virtual call per element"" issue :-/ But maybe the compiler would be clever enough to optimize this? . More problematic, each chunk would have the size of the largest element in the tagged union, unless we use an extra indirection. . I was more thinking of having one `std::vector` per chunk type in the chunk container like so: . ```c++. struct chunk_container {; // add more as needed; using chunk_vector = std::variant< std::vector< chunk<1, 1> >, ; std::vector< chunk<2, 2,> > >;; ; chunk_vector storage[2]; // size can be inferred automatically; ; template<int I, int J>; void push(chunk<I, J> c) {; static constexpr int index = chunk_index<I, J>(); // correct index in chunk_storage; std::get< std::vector<I, J> >(storage[index]).push_back(c);; }; };",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292928137:91,Availability,down,down,91,"@maxime-tournier : indeed that makes a lot more sense to do as you suggested. I just wrote down something to emphasize on what you mentioned above, which is that the concrete chunk type that will be used in the end could not be inferred beforehand at the level of the API, since it is something that depends on the template type.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292928137
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292928137:300,Integrability,depend,depends,300,"@maxime-tournier : indeed that makes a lot more sense to do as you suggested. I just wrote down something to emphasize on what you mentioned above, which is that the concrete chunk type that will be used in the end could not be inferred beforehand at the level of the API, since it is something that depends on the template type.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292928137
https://github.com/sofa-framework/sofa/issues/26#issuecomment-306769498:736,Deployability,update,updates,736,"A first implementation is proposed in PR #276. This work aims at handling sparse matrices in all components like mapping, forcefields and so on. It is based on the existing functions applyJ and applyJT. The idea is to handle sparse matrices at the solver level, and could find the information of sparsity within forcefield (addKToMatrix for assembled cases). Work remains todo. The PR adds a new function into the MechanicalObject (buildIdentityBlocksInJacobian), but this is a work in progress to make a proof of concept. PR will therefore be merged (after 17.06) but a mention “experimental” must be first added. Since the implementation and the concept is open to discussion while a POC is implemented, it would be nice to have more updates in the associated GitHub discussion. A final POC will be presented at the STC#4. It looks to me that the most important aspect is to **discuss here technical aspect and the global implementation, and keep people updated of the progress**. @JeremieA I add you since the topic was of interest for you as well. Thank you all for discussing it today, let's carry on the work! Nice work @olivier-goury",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-306769498
https://github.com/sofa-framework/sofa/issues/26#issuecomment-306769498:956,Deployability,update,updated,956,"A first implementation is proposed in PR #276. This work aims at handling sparse matrices in all components like mapping, forcefields and so on. It is based on the existing functions applyJ and applyJT. The idea is to handle sparse matrices at the solver level, and could find the information of sparsity within forcefield (addKToMatrix for assembled cases). Work remains todo. The PR adds a new function into the MechanicalObject (buildIdentityBlocksInJacobian), but this is a work in progress to make a proof of concept. PR will therefore be merged (after 17.06) but a mention “experimental” must be first added. Since the implementation and the concept is open to discussion while a POC is implemented, it would be nice to have more updates in the associated GitHub discussion. A final POC will be presented at the STC#4. It looks to me that the most important aspect is to **discuss here technical aspect and the global implementation, and keep people updated of the progress**. @JeremieA I add you since the topic was of interest for you as well. Thank you all for discussing it today, let's carry on the work! Nice work @olivier-goury",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-306769498
https://github.com/sofa-framework/sofa/issues/27#issuecomment-254795808:80,Integrability,message,message,80,You can add a thumb-up (with the Add your reaction icon... in the header of the message)) then sort by reactions in the issues listing.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/27#issuecomment-254795808
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:1070,Availability,error,error,1070,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:1076,Integrability,message,message,1076,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:238,Modifiability,plugin,plugin,238,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:1206,Modifiability,plugin,plugin,1206,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:374,Usability,simpl,simply,374,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-257830798:177,Security,Validat,Validation,177,"Hi @guparan , @damienmarchal ,. Indeed this is a real subject.; It is also related to the project of having a smaller, lighter and cleaner version of SOFA.; About the FEM, the [Validation workgroup](https://github.com/sofa-framework/sofa/issues/25) is going to investigate it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-257830798
https://github.com/sofa-framework/sofa/issues/29#issuecomment-251075920:242,Performance,perform,performances,242,Computing bounding boxes can have a non trivial runtime cost. In fact it's one of the first things we disable in our simulations to gain up to 5%. So if it is added in more components it should be done in a way that is transparent in term of performances (such as computed on the first iteration only by default).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-251075920
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:962,Deployability,Update,UpdateBBox,962,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:1344,Deployability,update,update,1344,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:1476,Deployability,update,updates,1476,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:1075,Energy Efficiency,schedul,schedule,1075,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:200,Usability,simpl,simply,200,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/30#issuecomment-251669737:39,Availability,error,error,39,"I've tried with Qt5.2 and got the same error. The error seems to come from RealGUI::screenshot() after the first screenshot is taken . RealGUI.cpp:2148. ```; if ( filename != """" ); {; std::ostringstream ofilename;; const char* begin = filename.toStdString().c_str();; const char* end = strrchr ( begin,'_' );; if ( !end ); end = begin + filename.length();; ofilename << std::string ( begin, end );; ofilename << ""_"";; getViewer()->setPrefix ( ofilename.str() );. getViewer()->screenshot ( filename.toStdString() );; }; ```. In my case, the pointer _begin_ is initialized to an empty string. The weird thing is that if I put a breakpoint there with gdb, and manually call _filename.toStdString().c_str()_, the _begin_ pointer will be populated correctly, as if there was a latent initialization. Next, even if this works with your computer, _ofilename_ will be populated with the complete path of the file until the last occurrence of ""_"" is found. _getViewer()->setPrefix_ will then be called and prepend the _getScreenshotDirectoryPath_ to the already full path _ofilename_. . BaseViewer.cpp:128. ```; void BaseViewer::setPrefix(const std::string& prefix); {; const std::string fullPrefix = sofa::gui::BaseGUI::getScreenshotDirectoryPath() + ""/"" + prefix;; (...); }; ```. See pull request https://github.com/sofa-framework/sofa/pull/31",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/30#issuecomment-251669737
https://github.com/sofa-framework/sofa/issues/30#issuecomment-251669737:50,Availability,error,error,50,"I've tried with Qt5.2 and got the same error. The error seems to come from RealGUI::screenshot() after the first screenshot is taken . RealGUI.cpp:2148. ```; if ( filename != """" ); {; std::ostringstream ofilename;; const char* begin = filename.toStdString().c_str();; const char* end = strrchr ( begin,'_' );; if ( !end ); end = begin + filename.length();; ofilename << std::string ( begin, end );; ofilename << ""_"";; getViewer()->setPrefix ( ofilename.str() );. getViewer()->screenshot ( filename.toStdString() );; }; ```. In my case, the pointer _begin_ is initialized to an empty string. The weird thing is that if I put a breakpoint there with gdb, and manually call _filename.toStdString().c_str()_, the _begin_ pointer will be populated correctly, as if there was a latent initialization. Next, even if this works with your computer, _ofilename_ will be populated with the complete path of the file until the last occurrence of ""_"" is found. _getViewer()->setPrefix_ will then be called and prepend the _getScreenshotDirectoryPath_ to the already full path _ofilename_. . BaseViewer.cpp:128. ```; void BaseViewer::setPrefix(const std::string& prefix); {; const std::string fullPrefix = sofa::gui::BaseGUI::getScreenshotDirectoryPath() + ""/"" + prefix;; (...); }; ```. See pull request https://github.com/sofa-framework/sofa/pull/31",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/30#issuecomment-251669737
https://github.com/sofa-framework/sofa/issues/33#issuecomment-258133408:147,Integrability,depend,dependencies,147,"`boost::intrusive_ptr`is very widely used within Sofa, and is not part of `c++11`, so this part of boost has to be there, even if most other boost dependencies may be able to be removed (on thread-related classes for instance). This initial idea of miniBoost was to make it easier to handle this dependency without having to maintain OS and compiler-specific binaries of the full boost libs, in cases where we only need small header-only libraries from boost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258133408
https://github.com/sofa-framework/sofa/issues/33#issuecomment-258133408:296,Integrability,depend,dependency,296,"`boost::intrusive_ptr`is very widely used within Sofa, and is not part of `c++11`, so this part of boost has to be there, even if most other boost dependencies may be able to be removed (on thread-related classes for instance). This initial idea of miniBoost was to make it easier to handle this dependency without having to maintain OS and compiler-specific binaries of the full boost libs, in cases where we only need small header-only libraries from boost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258133408
https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230:194,Availability,redundant,redundant,194,"I would vote for yes too. This has been discussed for a long time now. Online documentation is already updated to ""use your own Boost"".; Cleaning as much as possible Boost dependencies that are redundant with C++11 features is another topic in my opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230
https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230:103,Deployability,update,updated,103,"I would vote for yes too. This has been discussed for a long time now. Online documentation is already updated to ""use your own Boost"".; Cleaning as much as possible Boost dependencies that are redundant with C++11 features is another topic in my opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230
https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230:172,Integrability,depend,dependencies,172,"I would vote for yes too. This has been discussed for a long time now. Online documentation is already updated to ""use your own Boost"".; Cleaning as much as possible Boost dependencies that are redundant with C++11 features is another topic in my opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230
https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230:194,Safety,redund,redundant,194,"I would vote for yes too. This has been discussed for a long time now. Online documentation is already updated to ""use your own Boost"".; Cleaning as much as possible Boost dependencies that are redundant with C++11 features is another topic in my opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:294,Integrability,message,message,294,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:510,Testability,log,log,510,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:16,Usability,simpl,simply,16,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1402,Deployability,update,update,1402,"fferently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think about the differnt appraoch ? ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:848,Integrability,message,message,848,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:877,Integrability,message,message,877,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1044,Integrability,message,message,1044," blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_posi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1272,Integrability,message,message,1272,"users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1385,Integrability,message,message,1385,"fferently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think about the differnt appraoch ? ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:680,Usability,usab,usability,680,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-258292916:452,Usability,simpl,simplify,452,"I have implemented a component ""MakeAlias"" to explicitely specify the Alias of a component (not a data) at the beginning of its scene. It is commited in https://github.com/sofa-framework/sofa/commit/92753c42b7eaa076ace4b3840aa4cac6c18172a7. Example of use: . ``` xml; <xml/>; <Node name=""Root"">; <MakeAlias targetcomponent=""TPointModel"" alias=""Point"">; ...; <Point> ; <Point> ; <Point> ; ...; </Node>; ```. With this approach people that want alias to simplify their scene...have them...but:; - there is not alias by default; - alias are explict so anyone reading the scene now that the object ""TPointModel"" will be named ""Point"". I'm looking on how to implement something equivalent for Data. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-258292916
https://github.com/sofa-framework/sofa/issues/36#issuecomment-257833518:406,Availability,error,error,406,"Hi @damienmarchal ,. So point by point,; - _totalMass is set as readOnly in DiagonalMass while it is not in UniformMass_ : This should be implemented in a uniform way. On my opinion, mass components can (should) be initialized either with a massDensity or a totalMass (so not readOnly).; - _readOnly flag_ : I never really used this flag. But readOnly is not a bad thing, but it should be working !; - _no error message associated to readOnly_ : a warning should indeed be notified; - _totalMass parameter is re-computed in the un-specialized implementation of the reinit function_ sounds ok to me, but indeed, the specialization for rigid/vec should forward to this implementation; - _data f_mass_ : I consider the name of this data pretty bad, it denotes the computed nodal mass. So readOnly can have a sense. What do you mean exactly with ""not tagged in the same way as totalMass"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257833518
https://github.com/sofa-framework/sofa/issues/36#issuecomment-257833518:412,Integrability,message,message,412,"Hi @damienmarchal ,. So point by point,; - _totalMass is set as readOnly in DiagonalMass while it is not in UniformMass_ : This should be implemented in a uniform way. On my opinion, mass components can (should) be initialized either with a massDensity or a totalMass (so not readOnly).; - _readOnly flag_ : I never really used this flag. But readOnly is not a bad thing, but it should be working !; - _no error message associated to readOnly_ : a warning should indeed be notified; - _totalMass parameter is re-computed in the un-specialized implementation of the reinit function_ sounds ok to me, but indeed, the specialization for rigid/vec should forward to this implementation; - _data f_mass_ : I consider the name of this data pretty bad, it denotes the computed nodal mass. So readOnly can have a sense. What do you mean exactly with ""not tagged in the same way as totalMass"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257833518
https://github.com/sofa-framework/sofa/issues/36#issuecomment-257843781:590,Usability,clear,clear,590,"Hi @hugtalbot. In diagonalmass.cpp can you confirm that the following are bugs to fix: . The specialization for rigid3f ::init() & rigid3d ::init() are totally different. Seems to me they shouldn't. You said that ""totalMass parameter is re-computed in the un-specialized implementation of the reinit function sounds ok to me, but indeed, the specialization for rigid/vec should forward to this implementation"". ; I have the impression that the forwarding to the implementation is not missing in the specialized(rigid3) version. About the last point of your answer, sorry for not being very clear with ""not tagged"", I was in fact referring to the non usage of the readOnly flag.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257843781
https://github.com/sofa-framework/sofa/issues/36#issuecomment-268264030:381,Integrability,message,messages,381,"Hi damien,; I was looking at the DigaongalMass and I saw you already committed the change about the init(). Thanks !. A general initialization process based on either mass or totalMass should still be implemented.; However, the DiagonalMass is not the most important mass to consider, the MeshMatrixMass is instead. Remaining (but a bit wider topics) : readOnly flags and readOnly messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268264030
https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516:233,Modifiability,plugin,plugins,233,"Hi Hugo,. If I remember correctly there is still an inconsistency between the internal logic between DiagonalMass and UniformMass. I started with these two because I wanted to review all the component we are using in our soft-robots plugins. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516
https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516:87,Testability,log,logic,87,"Hi Hugo,. If I remember correctly there is still an inconsistency between the internal logic between DiagonalMass and UniformMass. I started with these two because I wanted to review all the component we are using in our soft-robots plugins. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516
https://github.com/sofa-framework/sofa/issues/36#issuecomment-290764107:36,Deployability,release,release,36,Working on it ! I should be able to release it next week !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-290764107
https://github.com/sofa-framework/sofa/issues/38#issuecomment-257834318:87,Deployability,update,updated,87,"From what I know, it is supposed to tell if the indices included in the BoxROI must be updated at each time step or not. So it's not the expected behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-257834318
https://github.com/sofa-framework/sofa/issues/38#issuecomment-257963158:77,Deployability,update,update,77,"I believe it's a hack that is probably no longer required. It was forcing an update at each step, probably from an ancien time when this code was not an Engine or when Engines were not implemented correctly. Now the Engine is automatically updated when someone read its output and any input changed so that this flag should no longer make any difference.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-257963158
https://github.com/sofa-framework/sofa/issues/38#issuecomment-257963158:240,Deployability,update,updated,240,"I believe it's a hack that is probably no longer required. It was forcing an update at each step, probably from an ancien time when this code was not an Engine or when Engines were not implemented correctly. Now the Engine is automatically updated when someone read its output and any input changed so that this flag should no longer make any difference.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-257963158
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258116723:63,Deployability,update,update,63,I agree with Hugo this make sense to be able to control if the update happens or not. . So I finally fixed the doUpdate behavior. If you want to have a look at this happens in commit: ; https://github.com/sofa-framework/sofa/commit/111e21cc23a76c7d3c0844ce7b64aa81e381d614,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258116723
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258117944:50,Deployability,update,update,50,"I don't agree, the correct way to have BoxROI not update itself, like any other engine, is to link it to inputs that are not changing, i.e. rest_position instead of position. Otherwise this will break updates after topological changes for instance...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258117944
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258117944:201,Deployability,update,updates,201,"I don't agree, the correct way to have BoxROI not update itself, like any other engine, is to link it to inputs that are not changing, i.e. rest_position instead of position. Otherwise this will break updates after topological changes for instance...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258117944
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:623,Modifiability,refactor,refactoring,623,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:589,Testability,log,logics,589,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:15,Usability,feedback,feedbacks,15,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258131540:380,Deployability,update,updates,380,"It's something that is too general to make it specific to BoxROI. What about SphereROI, EllipsoidROI, ... ?; There are several ways to handle this use case (using an Engine to compute something once or only at specific triggers):; 1. don't use a link but copy the data manually (but easily) using python for instance; 2. add a new link syntax that would not automatically trigger updates, or that would break itself after the first update / the init is done (which is a common request for use-cases for computing initial positions for instance); 3. add a new component that can be used instead of a Link for use cases where we want more control. In our codes we use the third option, we added a trivial component that we call `ValueStore`, which has a Data `value` inside with the ability to copy the value (and implicitly request the update of an Engine linked to it) to another Data manually (but as efficiently as a Link) at specific times (currently after each time step, but it could be customised).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258131540
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258131540:432,Deployability,update,update,432,"It's something that is too general to make it specific to BoxROI. What about SphereROI, EllipsoidROI, ... ?; There are several ways to handle this use case (using an Engine to compute something once or only at specific triggers):; 1. don't use a link but copy the data manually (but easily) using python for instance; 2. add a new link syntax that would not automatically trigger updates, or that would break itself after the first update / the init is done (which is a common request for use-cases for computing initial positions for instance); 3. add a new component that can be used instead of a Link for use cases where we want more control. In our codes we use the third option, we added a trivial component that we call `ValueStore`, which has a Data `value` inside with the ability to copy the value (and implicitly request the update of an Engine linked to it) to another Data manually (but as efficiently as a Link) at specific times (currently after each time step, but it could be customised).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258131540
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258131540:835,Deployability,update,update,835,"It's something that is too general to make it specific to BoxROI. What about SphereROI, EllipsoidROI, ... ?; There are several ways to handle this use case (using an Engine to compute something once or only at specific triggers):; 1. don't use a link but copy the data manually (but easily) using python for instance; 2. add a new link syntax that would not automatically trigger updates, or that would break itself after the first update / the init is done (which is a common request for use-cases for computing initial positions for instance); 3. add a new component that can be used instead of a Link for use cases where we want more control. In our codes we use the third option, we added a trivial component that we call `ValueStore`, which has a Data `value` inside with the ability to copy the value (and implicitly request the update of an Engine linked to it) to another Data manually (but as efficiently as a Link) at specific times (currently after each time step, but it could be customised).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258131540
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258131540:902,Energy Efficiency,efficient,efficiently,902,"It's something that is too general to make it specific to BoxROI. What about SphereROI, EllipsoidROI, ... ?; There are several ways to handle this use case (using an Engine to compute something once or only at specific triggers):; 1. don't use a link but copy the data manually (but easily) using python for instance; 2. add a new link syntax that would not automatically trigger updates, or that would break itself after the first update / the init is done (which is a common request for use-cases for computing initial positions for instance); 3. add a new component that can be used instead of a Link for use cases where we want more control. In our codes we use the third option, we added a trivial component that we call `ValueStore`, which has a Data `value` inside with the ability to copy the value (and implicitly request the update of an Engine linked to it) to another Data manually (but as efficiently as a Link) at specific times (currently after each time step, but it could be customised).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258131540
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258133556:156,Energy Efficiency,efficient,efficient,156,"Ok, I am no expert in design and I did not understand this data flow meaning of Engines.; Well, third option is ok, and the first one is yet basic but more efficient.; Thank you for the discussion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258133556
https://github.com/sofa-framework/sofa/issues/40#issuecomment-254765592:144,Integrability,depend,dependency,144,"Hi Mathieu,. Thanks for the tick reporting ;). . FlowVR is currently used in DistanceField.cpp to load .fmesh files. We can probably refine the dependency to FlowVR to allow DistanceField object to work but without the fmesh support. This seems easy and I will try to do that. Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254765592
https://github.com/sofa-framework/sofa/issues/40#issuecomment-254765592:98,Performance,load,load,98,"Hi Mathieu,. Thanks for the tick reporting ;). . FlowVR is currently used in DistanceField.cpp to load .fmesh files. We can probably refine the dependency to FlowVR to allow DistanceField object to work but without the fmesh support. This seems easy and I will try to do that. Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254765592
https://github.com/sofa-framework/sofa/issues/40#issuecomment-254772225:115,Testability,test,test,115,The commit that fix that is ; 910d498493f13ca0c670e7df32e99b8674e7c29d; in the defrost branch. Cherry-picking it & test it is ready to go into master.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254772225
https://github.com/sofa-framework/sofa/issues/40#issuecomment-254783994:0,Testability,Test,Test,0,Test OK. Pushed to master.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254783994
https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868:11,Deployability,patch,patch,11,"There is a patch in the daccord repository on forge. . Here are the commit messages (which contains possible interaction with other sofa part):. ```; [FIX]: Allow sofa to save in xml & pyscn the scene. This may break some scene. Once stabilized this may go to the main Sofa. Several issues needed to be adresse to make this system work. first (to try to minimize the amount of un-needed saved informations making the file unreadable) ):; - all the Data<> are now non persistent by default.; - a Data<> become persistent if:; * it is loaded from a file or from a python script.; * it is modified in the GUI. second (hacky stuff on top of old hack stuff):; during the parsing of xml some component ""converts"" XML attributes to other (and possibility none) dataField). As only the dataField can be saved...these attributes are ""lost"". ; The solution was to stop doing with a minimal number of changes the Sofa behavior. . third (quirck stuffs on pile of quirck stuffs):; some important XML attributes are interpreted on the fly and have very specific meaning but there is no associated data field. The solution was to add the corresponding datafield to allow them to be saved.; This is the case for ""src"", ""template"", ""name"", ""type"" .... Given the amount of changed on base classes logics...some scene may have problem to load or save. Please tell if this is the case.; ```. The case that probably could cause some problem is the replacement of the 'src', 'template' with real data field.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868
https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868:75,Integrability,message,messages,75,"There is a patch in the daccord repository on forge. . Here are the commit messages (which contains possible interaction with other sofa part):. ```; [FIX]: Allow sofa to save in xml & pyscn the scene. This may break some scene. Once stabilized this may go to the main Sofa. Several issues needed to be adresse to make this system work. first (to try to minimize the amount of un-needed saved informations making the file unreadable) ):; - all the Data<> are now non persistent by default.; - a Data<> become persistent if:; * it is loaded from a file or from a python script.; * it is modified in the GUI. second (hacky stuff on top of old hack stuff):; during the parsing of xml some component ""converts"" XML attributes to other (and possibility none) dataField). As only the dataField can be saved...these attributes are ""lost"". ; The solution was to stop doing with a minimal number of changes the Sofa behavior. . third (quirck stuffs on pile of quirck stuffs):; some important XML attributes are interpreted on the fly and have very specific meaning but there is no associated data field. The solution was to add the corresponding datafield to allow them to be saved.; This is the case for ""src"", ""template"", ""name"", ""type"" .... Given the amount of changed on base classes logics...some scene may have problem to load or save. Please tell if this is the case.; ```. The case that probably could cause some problem is the replacement of the 'src', 'template' with real data field.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868
https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868:533,Performance,load,loaded,533,"There is a patch in the daccord repository on forge. . Here are the commit messages (which contains possible interaction with other sofa part):. ```; [FIX]: Allow sofa to save in xml & pyscn the scene. This may break some scene. Once stabilized this may go to the main Sofa. Several issues needed to be adresse to make this system work. first (to try to minimize the amount of un-needed saved informations making the file unreadable) ):; - all the Data<> are now non persistent by default.; - a Data<> become persistent if:; * it is loaded from a file or from a python script.; * it is modified in the GUI. second (hacky stuff on top of old hack stuff):; during the parsing of xml some component ""converts"" XML attributes to other (and possibility none) dataField). As only the dataField can be saved...these attributes are ""lost"". ; The solution was to stop doing with a minimal number of changes the Sofa behavior. . third (quirck stuffs on pile of quirck stuffs):; some important XML attributes are interpreted on the fly and have very specific meaning but there is no associated data field. The solution was to add the corresponding datafield to allow them to be saved.; This is the case for ""src"", ""template"", ""name"", ""type"" .... Given the amount of changed on base classes logics...some scene may have problem to load or save. Please tell if this is the case.; ```. The case that probably could cause some problem is the replacement of the 'src', 'template' with real data field.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868
https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868:1319,Performance,load,load,1319,"There is a patch in the daccord repository on forge. . Here are the commit messages (which contains possible interaction with other sofa part):. ```; [FIX]: Allow sofa to save in xml & pyscn the scene. This may break some scene. Once stabilized this may go to the main Sofa. Several issues needed to be adresse to make this system work. first (to try to minimize the amount of un-needed saved informations making the file unreadable) ):; - all the Data<> are now non persistent by default.; - a Data<> become persistent if:; * it is loaded from a file or from a python script.; * it is modified in the GUI. second (hacky stuff on top of old hack stuff):; during the parsing of xml some component ""converts"" XML attributes to other (and possibility none) dataField). As only the dataField can be saved...these attributes are ""lost"". ; The solution was to stop doing with a minimal number of changes the Sofa behavior. . third (quirck stuffs on pile of quirck stuffs):; some important XML attributes are interpreted on the fly and have very specific meaning but there is no associated data field. The solution was to add the corresponding datafield to allow them to be saved.; This is the case for ""src"", ""template"", ""name"", ""type"" .... Given the amount of changed on base classes logics...some scene may have problem to load or save. Please tell if this is the case.; ```. The case that probably could cause some problem is the replacement of the 'src', 'template' with real data field.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868
https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868:1279,Testability,log,logics,1279,"There is a patch in the daccord repository on forge. . Here are the commit messages (which contains possible interaction with other sofa part):. ```; [FIX]: Allow sofa to save in xml & pyscn the scene. This may break some scene. Once stabilized this may go to the main Sofa. Several issues needed to be adresse to make this system work. first (to try to minimize the amount of un-needed saved informations making the file unreadable) ):; - all the Data<> are now non persistent by default.; - a Data<> become persistent if:; * it is loaded from a file or from a python script.; * it is modified in the GUI. second (hacky stuff on top of old hack stuff):; during the parsing of xml some component ""converts"" XML attributes to other (and possibility none) dataField). As only the dataField can be saved...these attributes are ""lost"". ; The solution was to stop doing with a minimal number of changes the Sofa behavior. . third (quirck stuffs on pile of quirck stuffs):; some important XML attributes are interpreted on the fly and have very specific meaning but there is no associated data field. The solution was to add the corresponding datafield to allow them to be saved.; This is the case for ""src"", ""template"", ""name"", ""type"" .... Given the amount of changed on base classes logics...some scene may have problem to load or save. Please tell if this is the case.; ```. The case that probably could cause some problem is the replacement of the 'src', 'template' with real data field.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868
https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556:447,Usability,simpl,simply,447,"What is the ""daccord repository""?. I would be happy to talk about saving a sofa scene (and to help making it work). first: indeed that's critical and it would do most of the job. second: most of the time these are other ways to describe existing Data (e.g. the Data 'translation' is a Vec3 , but the parse function is able to read scalars 'tx', 'ty' and 'tz'). In that case the Data ""translation"" is modified and should be saved. In Fact we could simply forbid parsing stuff that is not filling existing Data. third:; 'src' is not a problem, it is simply a way to automatically link Data together, so if a Data is modified, it will be saved (the saved scene would not have the 'src' arguments, but all the explicit Data links).; 'template' is not a problem, it is already working (you just have to always export the template name); 'name' is already a data.; what is 'type'?. I would add that saving a scene in the middle of a simulation could bring more problems:; - the states (pos,vel,rest_pos) of every *independent* dofs (only the mechanical objects at the roots of the mapping graph) should be exported.; - maybe others stuffs to find (external_forces of every dofs?); - maybe Data links broken by a copy-on-write should be exported.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556
https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556:548,Usability,simpl,simply,548,"What is the ""daccord repository""?. I would be happy to talk about saving a sofa scene (and to help making it work). first: indeed that's critical and it would do most of the job. second: most of the time these are other ways to describe existing Data (e.g. the Data 'translation' is a Vec3 , but the parse function is able to read scalars 'tx', 'ty' and 'tz'). In that case the Data ""translation"" is modified and should be saved. In Fact we could simply forbid parsing stuff that is not filling existing Data. third:; 'src' is not a problem, it is simply a way to automatically link Data together, so if a Data is modified, it will be saved (the saved scene would not have the 'src' arguments, but all the explicit Data links).; 'template' is not a problem, it is already working (you just have to always export the template name); 'name' is already a data.; what is 'type'?. I would add that saving a scene in the middle of a simulation could bring more problems:; - the states (pos,vel,rest_pos) of every *independent* dofs (only the mechanical objects at the roots of the mapping graph) should be exported.; - maybe others stuffs to find (external_forces of every dofs?); - maybe Data links broken by a copy-on-write should be exported.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:157,Deployability,integrat,integration,157,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:583,Deployability,update,updated,583,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:157,Integrability,integrat,integration,157,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:510,Testability,test,tests,510,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:693,Usability,feedback,feedback,693,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845:461,Performance,load,loaded,461,"`sofa::helper::io::Mesh*` has been deprecated since many years, replace by `MeshLoader` components, it would be indeed good now to clean it up ;); The biggest chunk of work required is to remove all the `""filename""` Data still around in quite a few components (BaseMeshTopology, MechanicalObject, DiagonalMass, UniformMass, VisualModelImpl, SpringForceField, RigidMapping, RigidRigidMapping), which would be easy except that we need clear warnings if an XML is loaded still using this, as those components are used everywhere. A quick search in Sofa examples directory finds 500 instances of OglModel with a filename or fileMesh attribute...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845
https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845:433,Usability,clear,clear,433,"`sofa::helper::io::Mesh*` has been deprecated since many years, replace by `MeshLoader` components, it would be indeed good now to clean it up ;); The biggest chunk of work required is to remove all the `""filename""` Data still around in quite a few components (BaseMeshTopology, MechanicalObject, DiagonalMass, UniformMass, VisualModelImpl, SpringForceField, RigidMapping, RigidRigidMapping), which would be easy except that we need clear warnings if an XML is loaded still using this, as those components are used everywhere. A quick search in Sofa examples directory finds 500 instances of OglModel with a filename or fileMesh attribute...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845
https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553:259,Deployability,integrat,integration,259,"👍 for removing sofa::helper::io::Mesh*. There is however an issue that the support for loading texture coordinates was removed from MeshObjLoader, so the OglModel version on the master can only have textures when using these deprecated loaders. In our latest integration branch we reverted this removal of texcoords support and fixed it to have the same level of support using MeshObjLoader+OglModel as when loading the file directly in OglModel (most notably handling of ""seams"" where a single vertex has multiple texture coordinates). The relevant commits are:; - https://github.com/InSimo/sofa/commit/915ee46368efe140b242759a0110682f71200dc1; - https://github.com/InSimo/sofa/commit/08493b9ab5c8ea376ba9a7f9a2cea3e81f513511; - https://github.com/InSimo/sofa/commit/e6bec10562ab797963027003c2282cbc24a53bb9; - https://github.com/InSimo/sofa/commit/1925b381b7d8cb939d250ab24e92fb28df918c0b. To be merged to the master the first commit need to be done in a cleaner way than a full revert, which removed later refactorings like apparently the introduction of a File class.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553
https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553:259,Integrability,integrat,integration,259,"👍 for removing sofa::helper::io::Mesh*. There is however an issue that the support for loading texture coordinates was removed from MeshObjLoader, so the OglModel version on the master can only have textures when using these deprecated loaders. In our latest integration branch we reverted this removal of texcoords support and fixed it to have the same level of support using MeshObjLoader+OglModel as when loading the file directly in OglModel (most notably handling of ""seams"" where a single vertex has multiple texture coordinates). The relevant commits are:; - https://github.com/InSimo/sofa/commit/915ee46368efe140b242759a0110682f71200dc1; - https://github.com/InSimo/sofa/commit/08493b9ab5c8ea376ba9a7f9a2cea3e81f513511; - https://github.com/InSimo/sofa/commit/e6bec10562ab797963027003c2282cbc24a53bb9; - https://github.com/InSimo/sofa/commit/1925b381b7d8cb939d250ab24e92fb28df918c0b. To be merged to the master the first commit need to be done in a cleaner way than a full revert, which removed later refactorings like apparently the introduction of a File class.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553
https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553:1009,Modifiability,refactor,refactorings,1009,"👍 for removing sofa::helper::io::Mesh*. There is however an issue that the support for loading texture coordinates was removed from MeshObjLoader, so the OglModel version on the master can only have textures when using these deprecated loaders. In our latest integration branch we reverted this removal of texcoords support and fixed it to have the same level of support using MeshObjLoader+OglModel as when loading the file directly in OglModel (most notably handling of ""seams"" where a single vertex has multiple texture coordinates). The relevant commits are:; - https://github.com/InSimo/sofa/commit/915ee46368efe140b242759a0110682f71200dc1; - https://github.com/InSimo/sofa/commit/08493b9ab5c8ea376ba9a7f9a2cea3e81f513511; - https://github.com/InSimo/sofa/commit/e6bec10562ab797963027003c2282cbc24a53bb9; - https://github.com/InSimo/sofa/commit/1925b381b7d8cb939d250ab24e92fb28df918c0b. To be merged to the master the first commit need to be done in a cleaner way than a full revert, which removed later refactorings like apparently the introduction of a File class.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553
https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553:87,Performance,load,loading,87,"👍 for removing sofa::helper::io::Mesh*. There is however an issue that the support for loading texture coordinates was removed from MeshObjLoader, so the OglModel version on the master can only have textures when using these deprecated loaders. In our latest integration branch we reverted this removal of texcoords support and fixed it to have the same level of support using MeshObjLoader+OglModel as when loading the file directly in OglModel (most notably handling of ""seams"" where a single vertex has multiple texture coordinates). The relevant commits are:; - https://github.com/InSimo/sofa/commit/915ee46368efe140b242759a0110682f71200dc1; - https://github.com/InSimo/sofa/commit/08493b9ab5c8ea376ba9a7f9a2cea3e81f513511; - https://github.com/InSimo/sofa/commit/e6bec10562ab797963027003c2282cbc24a53bb9; - https://github.com/InSimo/sofa/commit/1925b381b7d8cb939d250ab24e92fb28df918c0b. To be merged to the master the first commit need to be done in a cleaner way than a full revert, which removed later refactorings like apparently the introduction of a File class.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553
https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553:236,Performance,load,loaders,236,"👍 for removing sofa::helper::io::Mesh*. There is however an issue that the support for loading texture coordinates was removed from MeshObjLoader, so the OglModel version on the master can only have textures when using these deprecated loaders. In our latest integration branch we reverted this removal of texcoords support and fixed it to have the same level of support using MeshObjLoader+OglModel as when loading the file directly in OglModel (most notably handling of ""seams"" where a single vertex has multiple texture coordinates). The relevant commits are:; - https://github.com/InSimo/sofa/commit/915ee46368efe140b242759a0110682f71200dc1; - https://github.com/InSimo/sofa/commit/08493b9ab5c8ea376ba9a7f9a2cea3e81f513511; - https://github.com/InSimo/sofa/commit/e6bec10562ab797963027003c2282cbc24a53bb9; - https://github.com/InSimo/sofa/commit/1925b381b7d8cb939d250ab24e92fb28df918c0b. To be merged to the master the first commit need to be done in a cleaner way than a full revert, which removed later refactorings like apparently the introduction of a File class.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553
https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553:408,Performance,load,loading,408,"👍 for removing sofa::helper::io::Mesh*. There is however an issue that the support for loading texture coordinates was removed from MeshObjLoader, so the OglModel version on the master can only have textures when using these deprecated loaders. In our latest integration branch we reverted this removal of texcoords support and fixed it to have the same level of support using MeshObjLoader+OglModel as when loading the file directly in OglModel (most notably handling of ""seams"" where a single vertex has multiple texture coordinates). The relevant commits are:; - https://github.com/InSimo/sofa/commit/915ee46368efe140b242759a0110682f71200dc1; - https://github.com/InSimo/sofa/commit/08493b9ab5c8ea376ba9a7f9a2cea3e81f513511; - https://github.com/InSimo/sofa/commit/e6bec10562ab797963027003c2282cbc24a53bb9; - https://github.com/InSimo/sofa/commit/1925b381b7d8cb939d250ab24e92fb28df918c0b. To be merged to the master the first commit need to be done in a cleaner way than a full revert, which removed later refactorings like apparently the introduction of a File class.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:60,Modifiability,plugin,plugins,60,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:794,Modifiability,rewrite,rewrite,794,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:124,Testability,test,test,124,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:257,Testability,test,tested,257,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:485,Testability,test,tests,485,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:549,Testability,test,tests,549,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:608,Testability,test,tested,608,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:698,Testability,test,test,698,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:808,Testability,test,tests,808,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:899,Testability,test,tests,899,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381
https://github.com/sofa-framework/sofa/issues/43#issuecomment-264822755:22,Testability,test,tests,22,Are you still writing tests for Topological operations @epernod ? ; What is the status of this issue ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-264822755
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:637,Performance,load,loadFromMemory,637,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:76,Testability,test,test,76,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:654,Testability,test,testscene,654,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:739,Testability,test,test,739,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:234,Usability,simpl,simple,234,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255293984:565,Modifiability,refactor,refactoring,565,"I Maxime,. Thanks to rise up this kind of debate. . I agree with you that the cost for data init may be large. I see two problems:; - a lot of informations are duplicated in each instance of the component while most of the time they are per component informations (like the namestring, the helping docstring, etc...). I would be great to have that shared informations to be factored somewhere either it is per-class or per data.; - the iniData done in the constructor. As you mentioned the cost may be large at component creation. Do you have a code suggestion for refactoring so that we can have an idea on: ; - how invasive would it be (number of line of code to change :)) ? ; - what would be the performance difference ? . I do add Data at run time from time to time but it is not crucial for me and I could be handle by something called a DynamicData :) . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255293984
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255293984:700,Performance,perform,performance,700,"I Maxime,. Thanks to rise up this kind of debate. . I agree with you that the cost for data init may be large. I see two problems:; - a lot of informations are duplicated in each instance of the component while most of the time they are per component informations (like the namestring, the helping docstring, etc...). I would be great to have that shared informations to be factored somewhere either it is per-class or per data.; - the iniData done in the constructor. As you mentioned the cost may be large at component creation. Do you have a code suggestion for refactoring so that we can have an idea on: ; - how invasive would it be (number of line of code to change :)) ? ; - what would be the performance difference ? . I do add Data at run time from time to time but it is not crucial for me and I could be handle by something called a DynamicData :) . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255293984
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2309,Availability,error,errors,2309,"ance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:107,Integrability,depend,depends,107,"Hello Damien, and thanks for your feedback. Let met address your points one by one:. ## Invasiveness. That depends on the use cases for `Data` embedded in a component. From the code in `Base.h`, it seems that components essentially should be able to:; - Enumerate all its `Data`; - Associate a name to a `Data`; - Adding/removing `Data`. Assuming it's all there is to `Data` management in a component, then the following changes could enable opt-in, class-based data management when needed:; 1. Make all the associated methods virtual: `Base::findData, Base::addData, Base::removeData, Base::getDataFields`, possibly changing return type in the case of `Base::getDataFields` from `const VecData&` to `VecData`. In the latter case it would probably be even better to change the iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:1761,Performance,optimiz,optimized,1761,"iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2345,Performance,Perform,Performance,2345,"eData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2971,Performance,perform,performance,2971,"apping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models, there are _at the very least_ 50+ `Data` created, each of which can cause up to 6 heap allocations. . **That is 300+ heap allocations potentially saved for a single collision, before even doing anything.**. Now one can always argue that by grouping objects in mechanical objects one can minimize the number of contact classes, but firstly for complex scenes this is a very tedious/complex thing to do, and secondly there should be a way of not paying for features you don't use (this is c++ after all). So I think it is s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2623,Safety,avoid,avoid,2623,"a::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models, there are _at the very least_ 50+ `Data` created, each of which can cause up to 6 heap allocations. . **That is 300+ heap allocations potentially saved ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:3981,Safety,safe,safe,3981,"basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models, there are _at the very least_ 50+ `Data` created, each of which can cause up to 6 heap allocations. . **That is 300+ heap allocations potentially saved for a single collision, before even doing anything.**. Now one can always argue that by grouping objects in mechanical objects one can minimize the number of contact classes, but firstly for complex scenes this is a very tedious/complex thing to do, and secondly there should be a way of not paying for features you don't use (this is c++ after all). So I think it is safe to say that the potential benefits significantly outweigh the cost :-). I hope the above addressed your questions, please let me know if this sounds reasonable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2442,Security,access,accessing,2442,"easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:34,Usability,feedback,feedback,34,"Hello Damien, and thanks for your feedback. Let met address your points one by one:. ## Invasiveness. That depends on the use cases for `Data` embedded in a component. From the code in `Base.h`, it seems that components essentially should be able to:; - Enumerate all its `Data`; - Associate a name to a `Data`; - Adding/removing `Data`. Assuming it's all there is to `Data` management in a component, then the following changes could enable opt-in, class-based data management when needed:; 1. Make all the associated methods virtual: `Base::findData, Base::addData, Base::removeData, Base::getDataFields`, possibly changing return type in the case of `Base::getDataFields` from `const VecData&` to `VecData`. In the latter case it would probably be even better to change the iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255351195:421,Testability,test,test,421,"Hello Maxime,. Thanks for the precise analysis that is really helpful as well as on tracking the 'hidden overheads' in sofa. . All that sound reasonable to me and I share your view that the cost hit of creating object in case of collision is a strong point for doing something. . Maybe people interested in this topic could experiment in a dedicated branch so that we have an alternative implementation as well as a real test benchmark illustrating the speedup (eg: an hardcoded component creating a huge amount of collisions). . Regards, ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255351195
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255351195:426,Testability,benchmark,benchmark,426,"Hello Maxime,. Thanks for the precise analysis that is really helpful as well as on tracking the 'hidden overheads' in sofa. . All that sound reasonable to me and I share your view that the cost hit of creating object in case of collision is a strong point for doing something. . Maybe people interested in this topic could experiment in a dedicated branch so that we have an alternative implementation as well as a real test benchmark illustrating the speedup (eg: an hardcoded component creating a huge amount of collisions). . Regards, ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255351195
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255388630:168,Deployability,update,update,168,"Max, if I follow correctly, the way you propose would not break existing code? And we could have both regular Data and Class-handled Data at the same time? So we could update components little by little? It definitively worth trying it. Something tricky with actual Data is the multithreading management, maybe someone at InSimo could tell us a word about that?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255388630
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:597,Testability,test,testing,597,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:1032,Usability,clear,clear,1032,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:1131,Usability,feedback,feedback,1131,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557
https://github.com/sofa-framework/sofa/issues/44#issuecomment-256028112:1980,Performance,concurren,concurrently,1980,"s dynamic data instances would be adding quite a lot of complexity. However the current system could be improved based on your observations :; 1. `VecLink m_vecLink` in `BaseData` will only ever contain { &inputs, &outputs }. `VecLink` could be changed to `helper::fixed_array<BaseLink*,2>` to remove those allocations (`BaseData::addLink()` should then be removed or a NOP like in `DDGNode`); 2. Reducing dynamic allocations is why `help`/`group`/`widget` were stored as `const char*` instead of `std::string` (as in most case they are compile time constants). However this did create some bugs in components, so I would be in favor of always storing strings. But one [new issue with c++11 is that std::string is no longer allowed to use copy-on-write](http://stackoverflow.com/questions/12199710/legality-of-cow-stdstring-implementation-in-c11) to share a single buffer between instances, therefore this introduces new allocations with gcc 5 for instance (and `name` is currently copied multiple times). One option would be to use a different string implementation (such as `fbstring` as used by facebook and detailed in the [CppCon 2016 talk “The strange details of std::string at Facebook""](https://youtu.be/kPR8h4-qZdk)). An alternative that would help is to use the new move semantics to minimize the number of copies involved. Regarding multithreading, it is indeed an issue. Currently constructing an object and all its Data is a local operation that can happen in parallel in any thread, but adding/removing them within a given scene graph is supposed to be done sequentially. There is the ""aspect"" mechanism that allow to provide a ""frozen"" version of the graph to another thread while it is being changed through adding and removing node and objects. But adding (and removing) Data in objects is not covered by this mechanism, and is not supported if multiple threads are accessing it concurrently. Which basically limit the creation of dynamic Data to the sequential initialization phase.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256028112
https://github.com/sofa-framework/sofa/issues/44#issuecomment-256028112:1967,Security,access,accessing,1967,"s dynamic data instances would be adding quite a lot of complexity. However the current system could be improved based on your observations :; 1. `VecLink m_vecLink` in `BaseData` will only ever contain { &inputs, &outputs }. `VecLink` could be changed to `helper::fixed_array<BaseLink*,2>` to remove those allocations (`BaseData::addLink()` should then be removed or a NOP like in `DDGNode`); 2. Reducing dynamic allocations is why `help`/`group`/`widget` were stored as `const char*` instead of `std::string` (as in most case they are compile time constants). However this did create some bugs in components, so I would be in favor of always storing strings. But one [new issue with c++11 is that std::string is no longer allowed to use copy-on-write](http://stackoverflow.com/questions/12199710/legality-of-cow-stdstring-implementation-in-c11) to share a single buffer between instances, therefore this introduces new allocations with gcc 5 for instance (and `name` is currently copied multiple times). One option would be to use a different string implementation (such as `fbstring` as used by facebook and detailed in the [CppCon 2016 talk “The strange details of std::string at Facebook""](https://youtu.be/kPR8h4-qZdk)). An alternative that would help is to use the new move semantics to minimize the number of copies involved. Regarding multithreading, it is indeed an issue. Currently constructing an object and all its Data is a local operation that can happen in parallel in any thread, but adding/removing them within a given scene graph is supposed to be done sequentially. There is the ""aspect"" mechanism that allow to provide a ""frozen"" version of the graph to another thread while it is being changed through adding and removing node and objects. But adding (and removing) Data in objects is not covered by this mechanism, and is not supported if multiple threads are accessing it concurrently. Which basically limit the creation of dynamic Data to the sequential initialization phase.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256028112
https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737:571,Energy Efficiency,allocate,allocate,571,"Thank you Jeremie for this valuable feedback. . I started working towards a faster initialization path for `Data` and `Link` in a separate branch, I will post some results here if I get anything meaningful. The main use-case is a scene with many contacts, thus many components/data are added and removed at each time step due to collision handling. We'll see whether this is worth the effort. A small thing: I've seen that the DataTypeInfo for fixed array-like types (RigidCoord, Vec, and the like) all enable the CopyOnWrite flag, which makes any Data holding such type allocate on the heap on construction. Is this needed?. Thanks again for your help.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737
https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737:36,Usability,feedback,feedback,36,"Thank you Jeremie for this valuable feedback. . I started working towards a faster initialization path for `Data` and `Link` in a separate branch, I will post some results here if I get anything meaningful. The main use-case is a scene with many contacts, thus many components/data are added and removed at each time step due to collision handling. We'll see whether this is worth the effort. A small thing: I've seen that the DataTypeInfo for fixed array-like types (RigidCoord, Vec, and the like) all enable the CopyOnWrite flag, which makes any Data holding such type allocate on the heap on construction. Is this needed?. Thanks again for your help.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270089387:0,Deployability,Update,Update,0,Update ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270089387
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:160,Availability,down,down,160,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:1060,Integrability,depend,depend,1060,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:277,Performance,optimiz,optimize,277,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:319,Performance,optimiz,optimize,319,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:965,Performance,optimiz,optimization,965,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:500,Safety,detect,detection,500,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:415,Testability,test,test,415,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:89,Usability,feedback,feedback,89,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-271520439:27,Usability,feedback,feedback,27,"Hi Maxime,. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-271520439
https://github.com/sofa-framework/sofa/issues/44#issuecomment-276748182:673,Safety,detect,detection,673,"Hi all,. In some of my work I tend to add new Data to Base object and as rightly pointed by @matthieu-nesme this may have a significant cost. To have more insight I just made a quick test with the following result:; The time to create 200 000 (empty) component (without calling their init() function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So, one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). My question now is should we stop adding Data to Base or do we find a solution to decrease the cost of all the initData ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276748182
https://github.com/sofa-framework/sofa/issues/44#issuecomment-276748182:183,Testability,test,test,183,"Hi all,. In some of my work I tend to add new Data to Base object and as rightly pointed by @matthieu-nesme this may have a significant cost. To have more insight I just made a quick test with the following result:; The time to create 200 000 (empty) component (without calling their init() function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So, one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). My question now is should we stop adding Data to Base or do we find a solution to decrease the cost of all the initData ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276748182
https://github.com/sofa-framework/sofa/issues/44#issuecomment-276933049:55,Usability,learn,learn,55,@matthieu-nesme I like so much your concision I should learn from that when writing ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276933049
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:23,Deployability,update,update,23,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:940,Integrability,Depend,Dependency,940,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:1141,Integrability,depend,dependency,1141,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:901,Performance,optimiz,optimize,901,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:1371,Safety,avoid,avoid,1371,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:265,Usability,simpl,simplified,265,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257862434:146,Usability,feedback,feedback,146,"For me, it makes no sense to have two different values based on the template in BilateralInteractionConstraint. But it would be nice to have some feedback from real expert on Constraints.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257862434
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:721,Availability,toler,tolerance,721,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:873,Deployability,patch,patch,873,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:676,Modifiability,refactor,refactoring,676,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:709,Security,expose,expose,709,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:498,Testability,log,log,498,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:10,Usability,simpl,simple,10,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/47#issuecomment-261506881:438,Energy Efficiency,efficient,efficient,438,"The Rigid SphereModel was added ""recently"" and the comment is not up-to-date. Rigid Spheres can rotate (Particle spheres cannot), and modeling the contact directly at their surfaces allows extra behaviors such as friction. On the other hand, adding contact points at the surfaces of particle spheres would only add unnecessary extra cost (mapping+mstate). Creating a spring/constraint directly between the particle sphere centers is more efficient w/o restriction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/47#issuecomment-261506881
https://github.com/sofa-framework/sofa/issues/47#issuecomment-262492386:219,Usability,clear,clear,219,Thank Mathieu for the info. So you are confirming that the name getContactPointWithSurfacePoint mismatch the behavior of what is actually implemented for vec3. Shouln't we separate the two behavior in two function with clear naming ?. DM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/47#issuecomment-262492386
https://github.com/sofa-framework/sofa/pull/48#issuecomment-261490351:3,Integrability,depend,depends,3,"It depends on your Qt version. The actual code is for Qt4 while removing QApplication::UnicodeUTF8 (like in your proposal) is for Qt5. A #ifdef should be added to check the Qt version. But what about renaming ""gridLayout"" in ""_14""?!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-261490351
https://github.com/sofa-framework/sofa/pull/48#issuecomment-264161178:22,Deployability,update,update,22,@BehnamBinesh can you update your pull-request ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264161178
https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683:244,Security,access,access,244,"@damienmarchal it is not the right place, but it is the right moment, in case you did not know it.; It is easy to modify an existing PR. You simply have to add the fork containing the PR in your local repo (`git remote add`), you can then have access to the PR like any other branch. The pb with this specific PR, is that the branch is the master of the BehnamBinesh fork, it is quite disturbing to modify the master of someone else, but I guess it is ok here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683
https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683:141,Usability,simpl,simply,141,"@damienmarchal it is not the right place, but it is the right moment, in case you did not know it.; It is easy to modify an existing PR. You simply have to add the fork containing the PR in your local repo (`git remote add`), you can then have access to the PR like any other branch. The pb with this specific PR, is that the branch is the master of the BehnamBinesh fork, it is quite disturbing to modify the master of someone else, but I guess it is ok here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683
https://github.com/sofa-framework/sofa/pull/48#issuecomment-264839355:129,Modifiability,variab,variable,129,"I have no preference.; Either at each QApplication::translate (more verbose but more explicit) or using a more global preprocess variable (less verbose, as suggested by Damien)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264839355
https://github.com/sofa-framework/sofa/pull/48#issuecomment-265967322:15,Safety,safe,safe,15,"The code looks safe, the topic seems enough discussed and everyone seems ok. Very unlikely to break anything in the current state, I merge it. ; If it breaks something, please report it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-265967322
https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665:468,Deployability,integrat,integrate,468,"Instead of adding `libjpeg` as a dependency on the core of Sofa, I would support doing the opposite, i.e. removing `libpng+zlib` by only keeping the abstract `Image` class in `sofa::helper`, and including the derived classes in plugins, where we could only use by default the Qt-based implementation, so only for projects choosing not to include the Qt GUI they would have to enable the other implementations based on libpng/libjpeg, or CImg, or whatever is easier to integrate, given that it's a nearly trivial piece of code to implement to plug any image library. But it does require to be consistent in the resulting format (in particular whether the data is provided `TopDown` or `BottomUp`).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665
https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665:33,Integrability,depend,dependency,33,"Instead of adding `libjpeg` as a dependency on the core of Sofa, I would support doing the opposite, i.e. removing `libpng+zlib` by only keeping the abstract `Image` class in `sofa::helper`, and including the derived classes in plugins, where we could only use by default the Qt-based implementation, so only for projects choosing not to include the Qt GUI they would have to enable the other implementations based on libpng/libjpeg, or CImg, or whatever is easier to integrate, given that it's a nearly trivial piece of code to implement to plug any image library. But it does require to be consistent in the resulting format (in particular whether the data is provided `TopDown` or `BottomUp`).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665
https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665:468,Integrability,integrat,integrate,468,"Instead of adding `libjpeg` as a dependency on the core of Sofa, I would support doing the opposite, i.e. removing `libpng+zlib` by only keeping the abstract `Image` class in `sofa::helper`, and including the derived classes in plugins, where we could only use by default the Qt-based implementation, so only for projects choosing not to include the Qt GUI they would have to enable the other implementations based on libpng/libjpeg, or CImg, or whatever is easier to integrate, given that it's a nearly trivial piece of code to implement to plug any image library. But it does require to be consistent in the resulting format (in particular whether the data is provided `TopDown` or `BottomUp`).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665
https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665:228,Modifiability,plugin,plugins,228,"Instead of adding `libjpeg` as a dependency on the core of Sofa, I would support doing the opposite, i.e. removing `libpng+zlib` by only keeping the abstract `Image` class in `sofa::helper`, and including the derived classes in plugins, where we could only use by default the Qt-based implementation, so only for projects choosing not to include the Qt GUI they would have to enable the other implementations based on libpng/libjpeg, or CImg, or whatever is easier to integrate, given that it's a nearly trivial piece of code to implement to plug any image library. But it does require to be consistent in the resulting format (in particular whether the data is provided `TopDown` or `BottomUp`).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665
https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759:43,Integrability,depend,dependency,43,"Ok, CImg seems to do the job as well.; The dependency is already in plugin image, we just need to move it back to SOFA (licence is compatible).; And then this one-header-only include will allow us to read jpeg.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759
https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759:68,Modifiability,plugin,plugin,68,"Ok, CImg seems to do the job as well.; The dependency is already in plugin image, we just need to move it back to SOFA (licence is compatible).; And then this one-header-only include will allow us to read jpeg.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169:289,Modifiability,plugin,plugin,289,"The CImgPlugin has been implemented. It can read bmp, png, jpeg, etc. using the CImg API.; ( http://cimg.eu ); The idea would be to remove ImageQt indeed (original goal of this issue) but also ImagePNG and ImageBMP which are in the core of Sofa.; So the remaining question is : should the plugin be in the core of Sofa (SofaKernel) ? or we consider the fact to read images as optional and the plugin will be in applications/plugins (or in the future in an other repository)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169:393,Modifiability,plugin,plugin,393,"The CImgPlugin has been implemented. It can read bmp, png, jpeg, etc. using the CImg API.; ( http://cimg.eu ); The idea would be to remove ImageQt indeed (original goal of this issue) but also ImagePNG and ImageBMP which are in the core of Sofa.; So the remaining question is : should the plugin be in the core of Sofa (SofaKernel) ? or we consider the fact to read images as optional and the plugin will be in applications/plugins (or in the future in an other repository)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169:424,Modifiability,plugin,plugins,424,"The CImgPlugin has been implemented. It can read bmp, png, jpeg, etc. using the CImg API.; ( http://cimg.eu ); The idea would be to remove ImageQt indeed (original goal of this issue) but also ImagePNG and ImageBMP which are in the core of Sofa.; So the remaining question is : should the plugin be in the core of Sofa (SofaKernel) ? or we consider the fact to read images as optional and the plugin will be in applications/plugins (or in the future in an other repository)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281630604:64,Modifiability,plugin,plugin,64,"A remark about cimg : if I remember well it is an extlib of the plugin 'image', it would be great to share it in-between plugins (by moving it back as a sofa extlib?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281630604
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281630604:121,Modifiability,plugin,plugins,121,"A remark about cimg : if I remember well it is an extlib of the plugin 'image', it would be great to share it in-between plugins (by moving it back as a sofa extlib?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281630604
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942:176,Integrability,depend,dependencies,176,"To me loading textures and logos is not a core functionality of a physics library, so I would vote for not putting it in SofaKernel. What is important is that this removes the dependencies to `zlib` and `libpng` from sofahelper, correct ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942:6,Performance,load,loading,6,"To me loading textures and logos is not a core functionality of a physics library, so I would vote for not putting it in SofaKernel. What is important is that this removes the dependencies to `zlib` and `libpng` from sofahelper, correct ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942:27,Testability,log,logos,27,"To me loading textures and logos is not a core functionality of a physics library, so I would vote for not putting it in SofaKernel. What is important is that this removes the dependencies to `zlib` and `libpng` from sofahelper, correct ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281636038:12,Integrability,depend,dependency,12,"`zlib` is a dependency of `libpng`, which is why it was needed up to now. But indeed it is hopefully not used for anything else inside `sofahelper`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281636038
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344:66,Integrability,depend,dependencies,66,"Then I will change the CMakefiles in SofaKernel to remove useless dependencies.; Note that the CImgPlugin does not have a hard dependency on libpng (and zlib). If it does not find `libpng`/`zlib`, it will just not be able to read png files. So even if CImgPlugin is inside SofaKernel, `libpng `and `zlib ` wont be necessary.; (for now, CImgPlugin is searching for `libpng `for PNG, `libjpeg `for JPEG, `libtiff `for TIFF, and can load BMP files without any deps. It would be possible to read other kind of files with imagemagick but I dont consider it necessary)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344:127,Integrability,depend,dependency,127,"Then I will change the CMakefiles in SofaKernel to remove useless dependencies.; Note that the CImgPlugin does not have a hard dependency on libpng (and zlib). If it does not find `libpng`/`zlib`, it will just not be able to read png files. So even if CImgPlugin is inside SofaKernel, `libpng `and `zlib ` wont be necessary.; (for now, CImgPlugin is searching for `libpng `for PNG, `libjpeg `for JPEG, `libtiff `for TIFF, and can load BMP files without any deps. It would be possible to read other kind of files with imagemagick but I dont consider it necessary)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344
https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344:430,Performance,load,load,430,"Then I will change the CMakefiles in SofaKernel to remove useless dependencies.; Note that the CImgPlugin does not have a hard dependency on libpng (and zlib). If it does not find `libpng`/`zlib`, it will just not be able to read png files. So even if CImgPlugin is inside SofaKernel, `libpng `and `zlib ` wont be necessary.; (for now, CImgPlugin is searching for `libpng `for PNG, `libjpeg `for JPEG, `libtiff `for TIFF, and can load BMP files without any deps. It would be possible to read other kind of files with imagemagick but I dont consider it necessary)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053:499,Energy Efficiency,green,green,499,"Hi Damien,. Actually, Jenkins is already doing this, here is a regression: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/(root)/ImagePNG_test/ImagePNG_NoFile/. We can also access this results with a GET request: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/api/json?pretty=true; Just search for ""REGRESSION"". So it is possible to count them in the ""post build"" step :). About colors, I don't agree with you because it would make people think ""It's green, I don't care about new tests failing"". If we are adding (failing) tests, it is precisely because we want to warn people that something is broken and needs to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053:197,Security,access,access,197,"Hi Damien,. Actually, Jenkins is already doing this, here is a regression: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/(root)/ImagePNG_test/ImagePNG_NoFile/. We can also access this results with a GET request: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/api/json?pretty=true; Just search for ""REGRESSION"". So it is possible to count them in the ""post build"" step :). About colors, I don't agree with you because it would make people think ""It's green, I don't care about new tests failing"". If we are adding (failing) tests, it is precisely because we want to warn people that something is broken and needs to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053:135,Testability,test,testReport,135,"Hi Damien,. Actually, Jenkins is already doing this, here is a regression: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/(root)/ImagePNG_test/ImagePNG_NoFile/. We can also access this results with a GET request: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/api/json?pretty=true; Just search for ""REGRESSION"". So it is possible to count them in the ""post build"" step :). About colors, I don't agree with you because it would make people think ""It's green, I don't care about new tests failing"". If we are adding (failing) tests, it is precisely because we want to warn people that something is broken and needs to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053:297,Testability,test,testReport,297,"Hi Damien,. Actually, Jenkins is already doing this, here is a regression: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/(root)/ImagePNG_test/ImagePNG_NoFile/. We can also access this results with a GET request: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/api/json?pretty=true; Just search for ""REGRESSION"". So it is possible to count them in the ""post build"" step :). About colors, I don't agree with you because it would make people think ""It's green, I don't care about new tests failing"". If we are adding (failing) tests, it is precisely because we want to warn people that something is broken and needs to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053:529,Testability,test,tests,529,"Hi Damien,. Actually, Jenkins is already doing this, here is a regression: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/(root)/ImagePNG_test/ImagePNG_NoFile/. We can also access this results with a GET request: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/api/json?pretty=true; Just search for ""REGRESSION"". So it is possible to count them in the ""post build"" step :). About colors, I don't agree with you because it would make people think ""It's green, I don't care about new tests failing"". If we are adding (failing) tests, it is precisely because we want to warn people that something is broken and needs to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053:572,Testability,test,tests,572,"Hi Damien,. Actually, Jenkins is already doing this, here is a regression: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/(root)/ImagePNG_test/ImagePNG_NoFile/. We can also access this results with a GET request: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/api/json?pretty=true; Just search for ""REGRESSION"". So it is possible to count them in the ""post build"" step :). About colors, I don't agree with you because it would make people think ""It's green, I don't care about new tests failing"". If we are adding (failing) tests, it is precisely because we want to warn people that something is broken and needs to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:612,Energy Efficiency,green,green-to-red,612,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:147,Integrability,depend,depend,147,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:104,Testability,test,tests,104,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:832,Testability,test,test,832,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:1133,Testability,test,tests,1133,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:442,Usability,feedback,feedback,442,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:1215,Usability,feedback,feedback,1215,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:666,Availability,failure,failures,666,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:142,Testability,test,tests,142,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:429,Testability,test,tests,429,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:613,Testability,test,tests,613,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:879,Testability,test,tests,879,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:919,Testability,test,tests,919,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:951,Testability,test,tests,951,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:369,Usability,simpl,simple,369,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:68,Availability,Error,Error,68,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:153,Availability,error,error,153,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:230,Availability,Error,Error,230,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:715,Availability,ERROR,ERROR,715,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:900,Availability,ERROR,ERROR,900,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1081,Availability,ERROR,ERROR,1081,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1262,Availability,error,error,1262,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1369,Availability,error,error,1369,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1587,Availability,down,down,1587,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:236,Integrability,message,message,236,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:26,Testability,test,test,26,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:516,Testability,test,tests,516,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:559,Testability,test,test,559,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:571,Testability,test,test,571,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:603,Testability,test,test,603,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:644,Testability,test,test,644,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:654,Testability,Test,TestLightManager,654,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:680,Testability,Test,TestLightManager,680,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1148,Testability,test,testscene,1148,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1425,Testability,test,test,1425,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1448,Testability,Test,TestLightManager,1448,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1504,Testability,test,test,1504,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1514,Testability,Test,TestLightManager,1514,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1565,Testability,test,test,1565,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1608,Testability,test,test,1608,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1620,Testability,test,test,1620,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1663,Testability,test,tests,1663,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1684,Testability,test,test,1684,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:1716,Testability,Test,TestLightManager,1716,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263270733:25,Usability,feedback,feedback,25,Thanks Guillaume for the feedback. I'm very surprise this fails since ; https://github.com/sofa-framework/sofa/commit/b70b477f9cdae6a1d31d4f462f23780d3bdbcde1. because I see no link between the two.... this is very strange to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263270733
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263273230:104,Availability,error,error,104,"Actually the commit hint is not accurate because we don't have a CI build for each commit.; Sure thing: error appeared between 4bee6c8d and b70b477.; Between this two, there are 35 commits corresponding to `defrost` branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263273230
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881:46,Availability,error,error,46,"According to origin/defrost on the Dashboard, error appeared between 4b1f2897 and a33b4b12.; There are some LightManager changes here, we are close ;); I update my ""summary"" post. EDIT: This range is where the test was created. **This test fails on Windows since its creation.**; Please @damienmarchal give this type of information (if you know it) when you create your issue so that no time is lost searching for error appearance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881:414,Availability,error,error,414,"According to origin/defrost on the Dashboard, error appeared between 4b1f2897 and a33b4b12.; There are some LightManager changes here, we are close ;); I update my ""summary"" post. EDIT: This range is where the test was created. **This test fails on Windows since its creation.**; Please @damienmarchal give this type of information (if you know it) when you create your issue so that no time is lost searching for error appearance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881:154,Deployability,update,update,154,"According to origin/defrost on the Dashboard, error appeared between 4b1f2897 and a33b4b12.; There are some LightManager changes here, we are close ;); I update my ""summary"" post. EDIT: This range is where the test was created. **This test fails on Windows since its creation.**; Please @damienmarchal give this type of information (if you know it) when you create your issue so that no time is lost searching for error appearance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881:210,Testability,test,test,210,"According to origin/defrost on the Dashboard, error appeared between 4b1f2897 and a33b4b12.; There are some LightManager changes here, we are close ;); I update my ""summary"" post. EDIT: This range is where the test was created. **This test fails on Windows since its creation.**; Please @damienmarchal give this type of information (if you know it) when you create your issue so that no time is lost searching for error appearance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881:235,Testability,test,test,235,"According to origin/defrost on the Dashboard, error appeared between 4b1f2897 and a33b4b12.; There are some LightManager changes here, we are close ;); I update my ""summary"" post. EDIT: This range is where the test was created. **This test fails on Windows since its creation.**; Please @damienmarchal give this type of information (if you know it) when you create your issue so that no time is lost searching for error appearance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263480331:179,Availability,failure,failure,179,"Hi Guillaume,. Thank for the fix. Sorry about the the tailing tests since the beginning... I was assuming that Jenkins would correctly report this information with its regression/failure status & tracking. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263480331
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263480331:62,Testability,test,tests,62,"Hi Guillaume,. Thank for the fix. Sorry about the the tailing tests since the beginning... I was assuming that Jenkins would correctly report this information with its regression/failure status & tracking. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263480331
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:566,Deployability,update,update,566,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:647,Deployability,update,update,647,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:486,Energy Efficiency,efficient,efficient,486,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:503,Energy Efficiency,monitor,monitor,503,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:31,Usability,feedback,feedback,31,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:1013,Usability,feedback,feedback,1013,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/58#issuecomment-262732494:90,Testability,log,logging,90,"I'm not sure it's a good practice to open a PR only for Changelog stuff, unless if you're logging already done changes.; It's not easier to maintain because I have no idea if your adds are relevant. It would be way more convenient to edit the Changelog in **each** important PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/58#issuecomment-262732494
https://github.com/sofa-framework/sofa/pull/60#issuecomment-262620090:156,Deployability,update,update,156,"Thank Mathieu for this pull-request,. It seems interesting and at a first sight I would use your approach internally to a component to implement fine-grain update in the reinit function.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60#issuecomment-262620090
https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350:23,Modifiability,enhance,enhanced,23,"Yep, drawText could be enhanced, especially by changing the texture containing the letters.; Or directly generating the bitmaps by using libfreetype (http://learnopengl.com/#!In-Practice/Text-Rendering)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350
https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350:157,Usability,learn,learnopengl,157,"Yep, drawText could be enhanced, especially by changing the texture containing the letters.; Or directly generating the bitmaps by using libfreetype (http://learnopengl.com/#!In-Practice/Text-Rendering)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350
https://github.com/sofa-framework/sofa/pull/63#issuecomment-262534138:266,Deployability,Release,Release,266,"Hi Mathieu, . Thank for your review. ; InitShader or InitGLSL ? . About the InitShader function as it was containing some memory management code ; ```cpp; // If any of our shader pointers are set, let's free them first.; if(!m_hShaders.empty() || m_hProgramObject); Release();; ```; I assumed that is was already ok to be called several time and that it was not leaking memory, maybe I was wrong so I will look at that more carefully. . I will also clean the thing with the m_filelistener (even if I think the right way would be to change the API of the FileMonitoring API (but this must be done in a separated pull-request)). About InitGLSL I see no memory allocation there ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63#issuecomment-262534138
https://github.com/sofa-framework/sofa/pull/63#issuecomment-262619814:73,Usability,feedback,feedback,73,@hugtalbot Can you merge it please (unless someone see problems and give feedback),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63#issuecomment-262619814
https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270:350,Integrability,Interface,Interface,350,@guparan It is relatively easy because there is already good examples in some Sofa components. So it is more a factor of refactoring/reorganize/reuse existing code. . I consider that anything that has consequence on the User Experience is of high priority (in order to get more and more happy sofa users). Data fields are a big part of the sofa User Interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270
https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270:121,Modifiability,refactor,refactoring,121,@guparan It is relatively easy because there is already good examples in some Sofa components. So it is more a factor of refactoring/reorganize/reuse existing code. . I consider that anything that has consequence on the User Experience is of high priority (in order to get more and more happy sofa users). Data fields are a big part of the sofa User Interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270
https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270:220,Usability,User Experience,User Experience,220,@guparan It is relatively easy because there is already good examples in some Sofa components. So it is more a factor of refactoring/reorganize/reuse existing code. . I consider that anything that has consequence on the User Experience is of high priority (in order to get more and more happy sofa users). Data fields are a big part of the sofa User Interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270
https://github.com/sofa-framework/sofa/pull/69#issuecomment-263152451:54,Testability,test,test,54,I close this pull-request because of a problem in one test. I will recreate one when the problem will be fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/69#issuecomment-263152451
https://github.com/sofa-framework/sofa/pull/72#issuecomment-263810391:70,Availability,error,errors,70,"Are you sure the ""inVTKFile.close();"" are no longer needed in case of errors?. Adding Thomas to the discussion, I think he is using VTK files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-263810391
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265748799:46,Performance,load,loading,46,"hi @damienmarchal ,; I've added a small test (loading a binary vtk file with point and cell attributes). Is that enough ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265748799
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265748799:40,Testability,test,test,40,"hi @damienmarchal ,; I've added a small test (loading a binary vtk file with point and cell attributes). Is that enough ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265748799
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:35,Testability,test,test,35,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:107,Testability,test,test,107,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:311,Testability,test,test,311,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:421,Usability,feedback,feedback,421,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265968279:16,Testability,test,test,16,"Etienne, if the test succeeds on your PC please fix your branch so that the test succeeds on the dashboard also. Otherwise, this pull request could not be accepted.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265968279
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265968279:76,Testability,test,test,76,"Etienne, if the test succeeds on your PC please fix your branch so that the test succeeds on the dashboard also. Otherwise, this pull request could not be accepted.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265968279
https://github.com/sofa-framework/sofa/pull/72#issuecomment-266020393:24,Testability,test,tests,24,"Checks show SUCCESS but tests are ignored. ; Your unit test crashes, check the logs: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/4259/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-266020393
https://github.com/sofa-framework/sofa/pull/72#issuecomment-266020393:55,Testability,test,test,55,"Checks show SUCCESS but tests are ignored. ; Your unit test crashes, check the logs: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/4259/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-266020393
https://github.com/sofa-framework/sofa/pull/72#issuecomment-266020393:79,Testability,log,logs,79,"Checks show SUCCESS but tests are ignored. ; Your unit test crashes, check the logs: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/4259/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-266020393
https://github.com/sofa-framework/sofa/pull/72#issuecomment-266378914:12,Testability,test,tests,12,@guparan My tests were wrong (they read previously deleted data). Now everything seems fine.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-266378914
https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195:658,Testability,test,test,658,"Hi Fred,. Thank you for your pull-request. ; It looks really nice. . Some user friendly stuff...; - I would be great to have more details in the help string of the added Data. Currently it is more or less duplicating the name; maybe you can say what is it used for in term of rendering and shadowing.; - I have now clear opinion on that but maybe we should also add the default values in the docstring (I found it very annoying for the users to look in the source code to know what the default values are). ; - In the same spirit I think that somewhere VMS should be documented to the user. Maybe in the component helpstring when it is registered ? . I will test that by thursday unless someone else do that before.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195
https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195:315,Usability,clear,clear,315,"Hi Fred,. Thank you for your pull-request. ; It looks really nice. . Some user friendly stuff...; - I would be great to have more details in the help string of the added Data. Currently it is more or less duplicating the name; maybe you can say what is it used for in term of rendering and shadowing.; - I have now clear opinion on that but maybe we should also add the default values in the docstring (I found it very annoying for the users to look in the source code to know what the default values are). ; - In the same spirit I think that somewhere VMS should be documented to the user. Maybe in the component helpstring when it is registered ? . I will test that by thursday unless someone else do that before.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264118684:286,Testability,test,test,286,"Hi fred,. You are right, an automated system to report the default values is better. . Your ""[shadowing] "" in the docstring make me wonder a more general question about datas that only have a meaning when an other parameter is enable. . To make a more user friendly sofa we should: ; - test the data this kind of pattern in the init function:; ```cpp; if( !d_shadowsEnabled.getValue() && d_shadowTextureSize.isSet()){; msg_warning(this) << ""The shadow are not enabled but the shadowTextureSize parameter is set. ""; ""To remove this warning you can either : ""; ""- enable the 'shadow' parameter. "" ; ""- remove the use of the shadowTextureSize parameter.""; }. - group and gray/ungrayed in the GUI the connected parameters. Do you think we could use the widget string in the Data field for that ?; ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264118684
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178:142,Integrability,depend,depending,142,"- I agree that we should test data's value more thoroughly ; the only problem is that there are potentially thousands of combination to test (depending the component obviously); - as for the data gathering in the GUI, I am not sure but it is already done for Data related to visualization (tab ""Visualization"" when you double-click the component). If I remember well, the process checks that the data's name contains ""draw"" or ""show"" words. The problem is, how to tell the GUI that for Lights, it has to group all d_shadow* in a ""Shadow"" tab ? ; Otherwise, a solution could be to to add a ""Collection of Data"" type into SofaObject and register it at the construction. E.g ; ```; //In Light; DataCollection dc_shadow(""Shadowing"");; this->addCollectionData(dc_shadow);; dc_shadow.add(d_shadowEnabled);; dc_shadow.add(d_shadowTextureSize);. //In the GUI; foreach(component->getDataCollections() as dc ); {; tab = createNewTab(dc->getName()); foreach(dc.getAllData as data ); tab.add(data); }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178:25,Testability,test,test,25,"- I agree that we should test data's value more thoroughly ; the only problem is that there are potentially thousands of combination to test (depending the component obviously); - as for the data gathering in the GUI, I am not sure but it is already done for Data related to visualization (tab ""Visualization"" when you double-click the component). If I remember well, the process checks that the data's name contains ""draw"" or ""show"" words. The problem is, how to tell the GUI that for Lights, it has to group all d_shadow* in a ""Shadow"" tab ? ; Otherwise, a solution could be to to add a ""Collection of Data"" type into SofaObject and register it at the construction. E.g ; ```; //In Light; DataCollection dc_shadow(""Shadowing"");; this->addCollectionData(dc_shadow);; dc_shadow.add(d_shadowEnabled);; dc_shadow.add(d_shadowTextureSize);. //In the GUI; foreach(component->getDataCollections() as dc ); {; tab = createNewTab(dc->getName()); foreach(dc.getAllData as data ); tab.add(data); }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178:136,Testability,test,test,136,"- I agree that we should test data's value more thoroughly ; the only problem is that there are potentially thousands of combination to test (depending the component obviously); - as for the data gathering in the GUI, I am not sure but it is already done for Data related to visualization (tab ""Visualization"" when you double-click the component). If I remember well, the process checks that the data's name contains ""draw"" or ""show"" words. The problem is, how to tell the GUI that for Lights, it has to group all d_shadow* in a ""Shadow"" tab ? ; Otherwise, a solution could be to to add a ""Collection of Data"" type into SofaObject and register it at the construction. E.g ; ```; //In Light; DataCollection dc_shadow(""Shadowing"");; this->addCollectionData(dc_shadow);; dc_shadow.add(d_shadowEnabled);; dc_shadow.add(d_shadowTextureSize);. //In the GUI; foreach(component->getDataCollections() as dc ); {; tab = createNewTab(dc->getName()); foreach(dc.getAllData as data ); tab.add(data); }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:125,Security,validat,validate,125,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:109,Testability,test,tests,109,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:102,Usability,simpl,simple,102,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160693:2,Testability,test,tested,2,"I tested the component and the examples and this sound fine, ; I merge it so that I can work on it to add more checking on its inputs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160693
https://github.com/sofa-framework/sofa/pull/74#issuecomment-263585022:9,Availability,error,error,9,The same error appears in SparseLUSolver...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/74#issuecomment-263585022
https://github.com/sofa-framework/sofa/pull/75#issuecomment-263594700:0,Availability,error,error,0,error,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/75#issuecomment-263594700
https://github.com/sofa-framework/sofa/pull/76#issuecomment-263724660:47,Deployability,integrat,integrate,47,"Hi Benjamin, . Maybe I'm wrong but it seems to integrate a lot of commit touching a lot of different sofa part (SofaKernel, SofaOpenGL) which does not precisely match the pull-request description. Wouldn't it be better to separate that into several more specific pull-request ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263724660
https://github.com/sofa-framework/sofa/pull/76#issuecomment-263724660:47,Integrability,integrat,integrate,47,"Hi Benjamin, . Maybe I'm wrong but it seems to integrate a lot of commit touching a lot of different sofa part (SofaKernel, SofaOpenGL) which does not precisely match the pull-request description. Wouldn't it be better to separate that into several more specific pull-request ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263724660
https://github.com/sofa-framework/sofa/pull/76#issuecomment-263826376:99,Deployability,integrat,integrated,99,"Hello, ; yes sorry I messed up with my git client.; I cherry picked the right modifications, but I integrated many older commits somehow.; I guess we can close this PR, and pull Matthieu's one instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263826376
https://github.com/sofa-framework/sofa/pull/76#issuecomment-263826376:99,Integrability,integrat,integrated,99,"Hello, ; yes sorry I messed up with my git client.; I cherry picked the right modifications, but I integrated many older commits somehow.; I guess we can close this PR, and pull Matthieu's one instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263826376
https://github.com/sofa-framework/sofa/issues/79#issuecomment-264580165:122,Integrability,message,message,122,"This bug is fixed. . Fundamentally the problem is that when there is not topology associated to the force field a warning message is printed...but the draw function is still working ""as"" if there were.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/79#issuecomment-264580165
https://github.com/sofa-framework/sofa/pull/80#issuecomment-264838982:60,Deployability,update,update,60,"Waiting for merge.; Should answer every points of the ""data update"" workgroup (not listed in the issues?).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-264838982
https://github.com/sofa-framework/sofa/pull/80#issuecomment-264854155:14,Deployability,update,update,14,"Because ""data update"" is considered as a background task since STC#2 ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-264854155
https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:129,Deployability,integrat,integrate,129,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624
https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:129,Integrability,integrat,integrate,129,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624
https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:166,Usability,feedback,feedbacks,166,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624
https://github.com/sofa-framework/sofa/pull/80#issuecomment-267083898:57,Performance,queue,queue,57,Why did you relaunch builds? They are already in Jenkins queue.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267083898
https://github.com/sofa-framework/sofa/issues/81#issuecomment-264505055:733,Usability,intuit,intuitive,733,"Hi,; thanks for your comments. 1) Indeed the local parameters should override the global parameter. If it is not the case there is a bug. 2) The friction coefficient cannot be negative, so set a positive value! Of course this could be checked. 3) Indeed the product of the two friction coefficients are used everywhere in SOFA (not only in Compliant as far as I know). In fact the friction coefficient should be defined for a pair of objects and not per object. Such an external table does not fit the actual Sofa design. But note that is possible to tweak the collision model's coefficients (even more easily when describing the scene in python).; `sqrt(coef1*coef2)` sounds a good suggestion to me, I guess it would produce a more intuitive behavior. Do you have a pointer talking about such behavior?. @maxime-tournier, your opinion?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264505055
https://github.com/sofa-framework/sofa/issues/81#issuecomment-264918392:236,Usability,simpl,simpler,236,"Thanks a lot Matthieu 👍 . Can you expand a little bit on ""easy"" vs. ""hard"" to get global/local mu parameters?. Looking quickly at the code, one could just add a GLOBAL flag and use the global mu (if any): that would make the code a bit simpler and the behaviour more explicit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264918392
https://github.com/sofa-framework/sofa/issues/81#issuecomment-265500188:435,Availability,error,error,435,"Hi @damienmarchal,. If I understand correctly, FRICTIONLESS is global mu <= 0 and CONSTANT is a global mu > 0 ?. If so, then the semantics are not quite right since you can still get frictionless contacts with mu1 = 0, mu2 >0 and either MINIMUM, GEOMETRIC or PRODUCT mixing. . And if not, then please clarify :-). In any case I would favour clamping negative mu to zero together with some warning displayed since mu < 0 is a modelling error anyways.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265500188
https://github.com/sofa-framework/sofa/issues/81#issuecomment-265566878:509,Availability,error,error,509,"Thanks for the explanation,. So, when GLOBAL is set the friction coefficient came from the mu parameter and when {MINIMUM, AVERAGE, GEOMETRIC, PRODUCT} is set the friction coefficient is computed from the objects with the corresponding function. . If so, I agree that a GLOBAL flags in addition to MINIMUM, AVERAGE, GEOMETRIC and PRODUCT would make sense. I also agree with maxim's that ""In any case I would favour clamping negative mu to zero together with some warning displayed since mu < 0 is a modelling error anyways."". It could also be nice to display a warning when 'mu' is set while GLOBAL is not to inform users they are maybe mis-understanding something (and provide an advice on how to fix the problem). . Finally I also have the feeling that the ""horizontal"" data field could also be improved by renaming it with something like ""coneProjection"" with two possible values: [""horizontal"" and ""orthogonal""] instead of using a boolean. The boolean can be kept inside but it should not be exposed as is to the users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265566878
https://github.com/sofa-framework/sofa/issues/81#issuecomment-265566878:996,Security,expose,exposed,996,"Thanks for the explanation,. So, when GLOBAL is set the friction coefficient came from the mu parameter and when {MINIMUM, AVERAGE, GEOMETRIC, PRODUCT} is set the friction coefficient is computed from the objects with the corresponding function. . If so, I agree that a GLOBAL flags in addition to MINIMUM, AVERAGE, GEOMETRIC and PRODUCT would make sense. I also agree with maxim's that ""In any case I would favour clamping negative mu to zero together with some warning displayed since mu < 0 is a modelling error anyways."". It could also be nice to display a warning when 'mu' is set while GLOBAL is not to inform users they are maybe mis-understanding something (and provide an advice on how to fix the problem). . Finally I also have the feeling that the ""horizontal"" data field could also be improved by renaming it with something like ""coneProjection"" with two possible values: [""horizontal"" and ""orthogonal""] instead of using a boolean. The boolean can be kept inside but it should not be exposed as is to the users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265566878
https://github.com/sofa-framework/sofa/issues/81#issuecomment-265719239:94,Security,expose,exposes,94,"Something really useful would be to create a Compliant specific contact manager that directly exposes the contact Data, rather than the DefaultContactManager and its really unefficient string of parameters.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265719239
https://github.com/sofa-framework/sofa/issues/81#issuecomment-265726099:76,Security,expose,expose,76,@matthieu-nesme I support the idea of having a compliant contact manager to expose directly the parameters instead of using the string of parameters.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265726099
https://github.com/sofa-framework/sofa/issues/81#issuecomment-265756690:90,Usability,intuit,intuition,90,"Wow, didn't expect that much interest :) My proposal for geometric average just came from intuition. There acutally may be users out there that have tables of friction values for material pairings, so we might want to consider that use case too. Here's a try:. We introduce a new ""material number"" property attached to collision models which could then be used as indices for looking up coefficients in a symmetric matrix within the ContactManager. An undefined material number could be mapped to 0 by default. Negative values indicate cells, whose friction coefficient has not (yet) been determined . * querying unset cells during contact creation triggers a computation from the locally defined mu values, using one of the mentioned heuristics (AVG, GEOMETRIC, MIN, MAX...). This mechanism maintains backwards compatibility with existing simulations, and it preserves the ability to distribute coefficient definitions across the simulation tree.; * presetting the friction coefficients matrix directly provides a way to override any local definitions via mu; * having a freely modifiable matrix covers all possible use cases. The ""material number"" concept might also come in handy in other circumstances.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265756690
https://github.com/sofa-framework/sofa/issues/81#issuecomment-266072587:265,Energy Efficiency,efficient,efficient,265,"@raphaeldeimel That would be the idea. Note you can do it w/o modifying the collision model class.; Each object has a Data named ""tags"" dedicated to quickly hack these kinds of functionalities. Note that it is not an integer, so the lookup in a table would be less efficient. Note also that collision models have a Data 'group', that is here to decide who should collide with who, and you could certainly hack it too. More globally some parameters should be in external tables (not only the contact parameters but also the method to detect the collision, and the method to answer the contact, etc.) And an elegant way to do so should be discussed, but it is a quite big project.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-266072587
https://github.com/sofa-framework/sofa/issues/81#issuecomment-266072587:533,Safety,detect,detect,533,"@raphaeldeimel That would be the idea. Note you can do it w/o modifying the collision model class.; Each object has a Data named ""tags"" dedicated to quickly hack these kinds of functionalities. Note that it is not an integer, so the lookup in a table would be less efficient. Note also that collision models have a Data 'group', that is here to decide who should collide with who, and you could certainly hack it too. More globally some parameters should be in external tables (not only the contact parameters but also the method to detect the collision, and the method to answer the contact, etc.) And an elegant way to do so should be discussed, but it is a quite big project.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-266072587
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802:106,Integrability,Message,Message,106,So apparently `ImagePNG_test.ImagePNG_NoFile` fails when executed **after** `logging_test`.; I don't know Message API enough to understand what is wrong but it seems to be related to `MessageDispatcher::clearHandlers()` calls in `logging_test`.; Any idea @matthieu-nesme @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802:184,Integrability,Message,MessageDispatcher,184,So apparently `ImagePNG_test.ImagePNG_NoFile` fails when executed **after** `logging_test`.; I don't know Message API enough to understand what is wrong but it seems to be related to `MessageDispatcher::clearHandlers()` calls in `logging_test`.; Any idea @matthieu-nesme @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802:203,Usability,clear,clearHandlers,203,So apparently `ImagePNG_test.ImagePNG_NoFile` fails when executed **after** `logging_test`.; I don't know Message API enough to understand what is wrong but it seems to be related to `MessageDispatcher::clearHandlers()` calls in `logging_test`.; Any idea @matthieu-nesme @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:150,Availability,failure,failure,150,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:443,Availability,error,errors,443,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:458,Availability,failure,failure,458,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:839,Availability,failure,failure,839,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1005,Availability,failure,failure,1005,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1084,Availability,failure,failure,1084,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:107,Integrability,message,messages,107,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:130,Integrability,Message,Message,130,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:294,Integrability,message,messages,294,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:407,Integrability,message,message,407,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:749,Integrability,Message,MessageAsTestFailure,749,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:816,Integrability,message,message,816,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1029,Integrability,message,message,1029,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1043,Integrability,depend,depend,1043,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1097,Integrability,message,message,1097,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1175,Integrability,message,message,1175,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:145,Testability,test,test,145,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:322,Testability,test,test,322,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:453,Testability,test,test,453,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:624,Testability,test,test,624,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:834,Testability,test,test,834,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1000,Testability,test,test,1000,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1057,Testability,test,test,1057,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:1079,Testability,test,test,1079,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642
https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926:161,Modifiability,plugin,plugin,161,"Give a try to the mouse described in Compliant (note this mouse implementation is fully compatible with non-Compliant solvers).; For that, compile the Compliant plugin and then add these components to your scene:; `<RequiredPlugin name=""Compliant""/>; <CompliantAttachButton />`; (Note that CompliantAttachButton has parameters you can set in your scene and access from the runSofa gui)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926
https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926:357,Security,access,access,357,"Give a try to the mouse described in Compliant (note this mouse implementation is fully compatible with non-Compliant solvers).; For that, compile the Compliant plugin and then add these components to your scene:; `<RequiredPlugin name=""Compliant""/>; <CompliantAttachButton />`; (Note that CompliantAttachButton has parameters you can set in your scene and access from the runSofa gui)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926
https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181:257,Deployability,update,update,257,It took me time but I think I finally got the working of the collision responses stuff. As this PR change the way the component behave do you think it is possible to detect when a scene is using the old-style to print a warning message telling the users to update their scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181
https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181:228,Integrability,message,message,228,It took me time but I think I finally got the working of the collision responses stuff. As this PR change the way the component behave do you think it is possible to detect when a scene is using the old-style to print a warning message telling the users to update their scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181
https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181:166,Safety,detect,detect,166,It took me time but I think I finally got the working of the collision responses stuff. As this PR change the way the component behave do you think it is possible to detect when a scene is using the old-style to print a warning message telling the users to update their scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181
https://github.com/sofa-framework/sofa/pull/91#issuecomment-267017883:166,Deployability,update,updated,166,"[ci-build]; Given the long discussion in ; https://github.com/sofa-framework/sofa/issues/81. It is unclear to me if PR is a WIP or something ready to merge and maybe updated in some future. . @raphaeldeimel, @maxime-tournier, @matthieu-nesme what is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/91#issuecomment-267017883
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265799171:11,Availability,redundant,redundant,11,Is this PR redundant with #96 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265799171
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265799171:11,Safety,redund,redundant,11,Is this PR redundant with #96 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265799171
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:46,Modifiability,inherit,inheriting,46,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:234,Modifiability,inherit,inherits,234,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:106,Testability,test,test,106,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:439,Testability,test,test,439,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:279,Usability,clear,clearHandler,279,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:54,Deployability,install,install,54,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897
https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:87,Testability,test,tests,87,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897
https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:137,Usability,clear,clearHandlers,137,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897
https://github.com/sofa-framework/sofa/pull/97#issuecomment-266778341:52,Deployability,update,updated,52,Could you please manually rebase your branch to the updated upstream/master? Some changes on master prevent GitHub from auto-rebasing.; ```; git checkout newtests_week49; git fetch upstream/master; git rebase upstream/master; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/97#issuecomment-266778341
https://github.com/sofa-framework/sofa/issues/98#issuecomment-266730219:39,Availability,down,downgrading,39,My heart is bleeding when I hear about downgrading the code-base to support compilers with incomplete c++x11 support ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/98#issuecomment-266730219
https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530:135,Integrability,depend,dependency,135,I cannot test myself on window but:; - the tests is not failing anymore. ; - no new tests are failing. ; - I don't think the new boost dependency is a problem. . I let @matthieu-nesme (who made the issue #17) to make the final decision.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530
https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530:9,Testability,test,test,9,I cannot test myself on window but:; - the tests is not failing anymore. ; - no new tests are failing. ; - I don't think the new boost dependency is a problem. . I let @matthieu-nesme (who made the issue #17) to make the final decision.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530
https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530:43,Testability,test,tests,43,I cannot test myself on window but:; - the tests is not failing anymore. ; - no new tests are failing. ; - I don't think the new boost dependency is a problem. . I let @matthieu-nesme (who made the issue #17) to make the final decision.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530
https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530:84,Testability,test,tests,84,I cannot test myself on window but:; - the tests is not failing anymore. ; - no new tests are failing. ; - I don't think the new boost dependency is a problem. . I let @matthieu-nesme (who made the issue #17) to make the final decision.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530
https://github.com/sofa-framework/sofa/pull/99#issuecomment-266968755:193,Energy Efficiency,green,green,193,"(edited); No problem for me since boost is now mandatory. ; As seen in the main CMakeLists.txt, line 158:; `find_package(Boost REQUIRED)`. Does the job, no test broken, fixes one failing test: green light for me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266968755
https://github.com/sofa-framework/sofa/pull/99#issuecomment-266968755:156,Testability,test,test,156,"(edited); No problem for me since boost is now mandatory. ; As seen in the main CMakeLists.txt, line 158:; `find_package(Boost REQUIRED)`. Does the job, no test broken, fixes one failing test: green light for me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266968755
https://github.com/sofa-framework/sofa/pull/99#issuecomment-266968755:187,Testability,test,test,187,"(edited); No problem for me since boost is now mandatory. ; As seen in the main CMakeLists.txt, line 158:; `find_package(Boost REQUIRED)`. Does the job, no test broken, fixes one failing test: green light for me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266968755
https://github.com/sofa-framework/sofa/pull/100#issuecomment-266839785:17,Usability,clear,clear,17,"Everything looks clear to me. ; Why did you taggued this with ""bug"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/100#issuecomment-266839785
https://github.com/sofa-framework/sofa/pull/100#issuecomment-267002225:64,Deployability,update,update,64,"So, after discussion it was decided to avoid the #ifdef can you update that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/100#issuecomment-267002225
https://github.com/sofa-framework/sofa/pull/100#issuecomment-267002225:39,Safety,avoid,avoid,39,"So, after discussion it was decided to avoid the #ifdef can you update that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/100#issuecomment-267002225
https://github.com/sofa-framework/sofa/issues/103#issuecomment-266998411:115,Security,access,access,115,Reminder: SOFA documentation is on https://github.com/sofa-framework/doc; All @sofa-framework/reviewers have write access to this repository.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/103#issuecomment-266998411
https://github.com/sofa-framework/sofa/pull/105#issuecomment-273787691:168,Testability,test,testReport,168,Thanks for the PR and sorry for the delay. FileMonitor.updateNoChange_test is failing (regression) on MacOS: https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/4289/testReport/(root)/FileMonitor/updateNoChange_test; Do you know why?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273787691
https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468:105,Safety,timeout,timeout,105,@guparan ; I don't think this is a regression. . This test fails on MacOS from time to time because of a timeout. It was described by @bcarrez somewhere (i'm searching:)). We should propably re-create a new issue because this is something that need to be fixed. EDIT: I didn't find where it was described by bruno so let me describe it better. The problem is related to the fact that the test are using a delay to wait the OS to notify the application a file has changed...but on MacOS the delay is not big enough causing the test to fail.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468
https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468:54,Testability,test,test,54,@guparan ; I don't think this is a regression. . This test fails on MacOS from time to time because of a timeout. It was described by @bcarrez somewhere (i'm searching:)). We should propably re-create a new issue because this is something that need to be fixed. EDIT: I didn't find where it was described by bruno so let me describe it better. The problem is related to the fact that the test are using a delay to wait the OS to notify the application a file has changed...but on MacOS the delay is not big enough causing the test to fail.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468
https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468:388,Testability,test,test,388,@guparan ; I don't think this is a regression. . This test fails on MacOS from time to time because of a timeout. It was described by @bcarrez somewhere (i'm searching:)). We should propably re-create a new issue because this is something that need to be fixed. EDIT: I didn't find where it was described by bruno so let me describe it better. The problem is related to the fact that the test are using a delay to wait the OS to notify the application a file has changed...but on MacOS the delay is not big enough causing the test to fail.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468
https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468:526,Testability,test,test,526,@guparan ; I don't think this is a regression. . This test fails on MacOS from time to time because of a timeout. It was described by @bcarrez somewhere (i'm searching:)). We should propably re-create a new issue because this is something that need to be fixed. EDIT: I didn't find where it was described by bruno so let me describe it better. The problem is related to the fact that the test are using a delay to wait the OS to notify the application a file has changed...but on MacOS the delay is not big enough causing the test to fail.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106:32,Integrability,message,message,32,Super good initiative!. - these message handler should replace existing buffers. They should be removed because handling history with an handler is a way better idea. But the distributed gui should then use this new mechanism to print log history in the component widgets. - please stop adding Data in Base!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106:235,Testability,log,log,235,Super good initiative!. - these message handler should replace existing buffers. They should be removed because handling history with an handler is a way better idea. But the distributed gui should then use this new mechanism to print log history in the component widgets. - please stop adding Data in Base!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447:49,Availability,redundant,redundant,49,"Some functionalities introduced by this PR looks redundant to the existing printLog data, and can replace it with great advantage. Moreover, the current usage of this printLog data varies from one component to an other, and could be cleaned in the same time.; Maybe a sdebug stream (in addition to sout, serr) could be introduced to cover some of the misusage of the printLog data.; Initially, printLog is to print or not the component messages to the standard output",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447:436,Integrability,message,messages,436,"Some functionalities introduced by this PR looks redundant to the existing printLog data, and can replace it with great advantage. Moreover, the current usage of this printLog data varies from one component to an other, and could be cleaned in the same time.; Maybe a sdebug stream (in addition to sout, serr) could be introduced to cover some of the misusage of the printLog data.; Initially, printLog is to print or not the component messages to the standard output",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447:49,Safety,redund,redundant,49,"Some functionalities introduced by this PR looks redundant to the existing printLog data, and can replace it with great advantage. Moreover, the current usage of this printLog data varies from one component to an other, and could be cleaned in the same time.; Maybe a sdebug stream (in addition to sout, serr) could be introduced to cover some of the misusage of the printLog data.; Initially, printLog is to print or not the component messages to the standard output",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:554,Testability,benchmark,benchmark,554,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:16,Usability,feedback,feedbacks,16,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:190,Usability,clear,clear,190,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:226,Usability,clear,clear,226,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:842,Usability,feedback,feedbacks,842,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536:328,Integrability,message,messages,328,@matthieu-nesme . I looked back to the PR and I will remove the three Data field because:; - controlling the queue size with a Data is not crucial. I will replace it with an attribute and get/set or an environment variable. ; - the msgLevel is un-used and was there to rise discussion on whether or not controlling the level of messages emitted by an object make sense (eg when debugging). ; - the logLevel'one is un-used yet but should one day override the behavior of the mis-used f_printLog. ; ; Thanks again to pointing that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536:214,Modifiability,variab,variable,214,@matthieu-nesme . I looked back to the PR and I will remove the three Data field because:; - controlling the queue size with a Data is not crucial. I will replace it with an attribute and get/set or an environment variable. ; - the msgLevel is un-used and was there to rise discussion on whether or not controlling the level of messages emitted by an object make sense (eg when debugging). ; - the logLevel'one is un-used yet but should one day override the behavior of the mis-used f_printLog. ; ; Thanks again to pointing that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536:109,Performance,queue,queue,109,@matthieu-nesme . I looked back to the PR and I will remove the three Data field because:; - controlling the queue size with a Data is not crucial. I will replace it with an attribute and get/set or an environment variable. ; - the msgLevel is un-used and was there to rise discussion on whether or not controlling the level of messages emitted by an object make sense (eg when debugging). ; - the logLevel'one is un-used yet but should one day override the behavior of the mis-used f_printLog. ; ; Thanks again to pointing that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536:398,Testability,log,logLevel,398,@matthieu-nesme . I looked back to the PR and I will remove the three Data field because:; - controlling the queue size with a Data is not crucial. I will replace it with an attribute and get/set or an environment variable. ; - the msgLevel is un-used and was there to rise discussion on whether or not controlling the level of messages emitted by an object make sense (eg when debugging). ; - the logLevel'one is un-used yet but should one day override the behavior of the mis-used f_printLog. ; ; Thanks again to pointing that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:316,Integrability,message,message,316,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:879,Integrability,message,messages,879,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:1237,Integrability,message,messages,1237,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:1119,Modifiability,variab,variable,1119,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:1011,Performance,queue,queue,1011,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:1311,Testability,log,logLevel,1311,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276954541:358,Energy Efficiency,power,powerful,358,"I think that it is a good idea to treat the overall pb, not to miss something.; - removing msg buffers from Base; - removing printLog Data (but reading it from a parse function for backward compatibility.; - no need for sdebug, you can directly use msg_debug (or whatever). serr/sout can be kept not to become crazy, but no need to add more.; - It should be powerful enough to move some of the Data you added in Base directly in the msghandler (and set more globally these parameters).; - updating the gui to use the new msghandler buffers. Something else ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276954541
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614:1039,Energy Efficiency,power,powerful,1039,"The advantage of a component specific macro/stream (like sdebug to stay in the current spirit) would be to automatically add the component as the ""sender"" of the message. ; Which is BTW required by the gui to get and display messages coming from a given component. . ----- Mail original -----. > De: ""Matthieu Nesme"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 2 Février 2017 14:18:28; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > I think that it is a good idea to treat the overall pb, not to miss; > something. > * removing msg buffers from Base; > * removing printLog Data (but reading it from a parse function for backward; > compatibility.; > * no need for sdebug, you can directly use msg_debug (or whatever). serr/sout; > can be kept not to become crazy, but no need to add more.; > * It should be powerful enough to move some of the Data you added in Base; > directly in the msghandler (and set more globally these parameters).; > * updating the gui to use the new msghandler buffers. > Something else ?. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614:162,Integrability,message,message,162,"The advantage of a component specific macro/stream (like sdebug to stay in the current spirit) would be to automatically add the component as the ""sender"" of the message. ; Which is BTW required by the gui to get and display messages coming from a given component. . ----- Mail original -----. > De: ""Matthieu Nesme"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 2 Février 2017 14:18:28; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > I think that it is a good idea to treat the overall pb, not to miss; > something. > * removing msg buffers from Base; > * removing printLog Data (but reading it from a parse function for backward; > compatibility.; > * no need for sdebug, you can directly use msg_debug (or whatever). serr/sout; > can be kept not to become crazy, but no need to add more.; > * It should be powerful enough to move some of the Data you added in Base; > directly in the msghandler (and set more globally these parameters).; > * updating the gui to use the new msghandler buffers. > Something else ?. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614:225,Integrability,message,messages,225,"The advantage of a component specific macro/stream (like sdebug to stay in the current spirit) would be to automatically add the component as the ""sender"" of the message. ; Which is BTW required by the gui to get and display messages coming from a given component. . ----- Mail original -----. > De: ""Matthieu Nesme"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 2 Février 2017 14:18:28; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > I think that it is a good idea to treat the overall pb, not to miss; > something. > * removing msg buffers from Base; > * removing printLog Data (but reading it from a parse function for backward; > compatibility.; > * no need for sdebug, you can directly use msg_debug (or whatever). serr/sout; > can be kept not to become crazy, but no need to add more.; > * It should be powerful enough to move some of the Data you added in Base; > directly in the msghandler (and set more globally these parameters).; > * updating the gui to use the new msghandler buffers. > Something else ?. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614:645,Integrability,message,messages,645,"The advantage of a component specific macro/stream (like sdebug to stay in the current spirit) would be to automatically add the component as the ""sender"" of the message. ; Which is BTW required by the gui to get and display messages coming from a given component. . ----- Mail original -----. > De: ""Matthieu Nesme"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 2 Février 2017 14:18:28; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > I think that it is a good idea to treat the overall pb, not to miss; > something. > * removing msg buffers from Base; > * removing printLog Data (but reading it from a parse function for backward; > compatibility.; > * no need for sdebug, you can directly use msg_debug (or whatever). serr/sout; > can be kept not to become crazy, but no need to add more.; > * It should be powerful enough to move some of the Data you added in Base; > directly in the msghandler (and set more globally these parameters).; > * updating the gui to use the new msghandler buffers. > Something else ?. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:238,Availability,error,error,238,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:355,Availability,error,error,355,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:456,Integrability,message,messages,456,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:564,Integrability,message,message,564,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:907,Integrability,message,messages,907,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:966,Integrability,message,messages,966,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:984,Modifiability,extend,extending,984,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:373,Safety,risk,risky,373,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:164,Testability,log,logging,164,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:244,Testability,log,logging,244,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:344,Testability,log,logging,344,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:103,Usability,feedback,feedback,103,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/issues/107#issuecomment-270331991:90,Usability,guid,guideline,90,"Wouldn't it make sense to alias the std container to sofa::helper ? . So that the general guideline could be to always use sofa::helper::* and not ""if your are using a list then use std::list, if it is a vector then use a sofa::helper::vector, ..."". . More generally ; - it would make the source code more consistent ; - it would ease newcommer's life to get into sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/107#issuecomment-270331991
https://github.com/sofa-framework/sofa/pull/108#issuecomment-273826140:165,Availability,failure,failure,165,"Hi @EulalieCoevoet,. Thanks for you PR. . Given that this PR: ; - [x] successfully compile in our settings on the CI.; - [x] does not generates new warnings or test failure. ; - [x] shouldn't break existing scenes.; - [x] add new features & corresponding tests. ; - [ ] does not break API compatibility. ; - [x] is now more 1 week old. Its breaks the API compatibility but this is to match the sofa coding style so I suggest a merge (@hugtalbot). @EulalieCoevoet about your question about PlaneROI I suggest you to make an issue dedicated .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108#issuecomment-273826140
https://github.com/sofa-framework/sofa/pull/108#issuecomment-273826140:160,Testability,test,test,160,"Hi @EulalieCoevoet,. Thanks for you PR. . Given that this PR: ; - [x] successfully compile in our settings on the CI.; - [x] does not generates new warnings or test failure. ; - [x] shouldn't break existing scenes.; - [x] add new features & corresponding tests. ; - [ ] does not break API compatibility. ; - [x] is now more 1 week old. Its breaks the API compatibility but this is to match the sofa coding style so I suggest a merge (@hugtalbot). @EulalieCoevoet about your question about PlaneROI I suggest you to make an issue dedicated .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108#issuecomment-273826140
https://github.com/sofa-framework/sofa/pull/108#issuecomment-273826140:255,Testability,test,tests,255,"Hi @EulalieCoevoet,. Thanks for you PR. . Given that this PR: ; - [x] successfully compile in our settings on the CI.; - [x] does not generates new warnings or test failure. ; - [x] shouldn't break existing scenes.; - [x] add new features & corresponding tests. ; - [ ] does not break API compatibility. ; - [x] is now more 1 week old. Its breaks the API compatibility but this is to match the sofa coding style so I suggest a merge (@hugtalbot). @EulalieCoevoet about your question about PlaneROI I suggest you to make an issue dedicated .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108#issuecomment-273826140
https://github.com/sofa-framework/sofa/pull/108#issuecomment-274531916:2,Deployability,update,updated,2,I updated the CHANGELog.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108#issuecomment-274531916
https://github.com/sofa-framework/sofa/pull/108#issuecomment-274549839:49,Deployability,update,updates,49,"you rock @damienmarchal , thank you for all your updates on the ChangeLog.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108#issuecomment-274549839
https://github.com/sofa-framework/sofa/pull/109#issuecomment-267908657:142,Energy Efficiency,monitor,monitor,142,"Hi bruno, thanks for this PR :). - It compiles nicely on the different targets on the CI,; - The implementation follows the unit-test of file monitor. . So it looks ok to me. @guparan ; Is there a way to make something like ([ci-fullbuild]) so that we see if there is compiler's warning in the PR code ? This could be really useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/109#issuecomment-267908657
https://github.com/sofa-framework/sofa/pull/109#issuecomment-267908657:129,Testability,test,test,129,"Hi bruno, thanks for this PR :). - It compiles nicely on the different targets on the CI,; - The implementation follows the unit-test of file monitor. . So it looks ok to me. @guparan ; Is there a way to make something like ([ci-fullbuild]) so that we see if there is compiler's warning in the PR code ? This could be really useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/109#issuecomment-267908657
https://github.com/sofa-framework/sofa/issues/111#issuecomment-271665560:56,Testability,test,tests,56,"On my side I would like to have automatically generated tests on the Data<> to be sure the object behave nicely whatever the user gives as input. . I made some early prototype (read, non-satsifactory) using clang but I have more high priority task to do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111#issuecomment-271665560
https://github.com/sofa-framework/sofa/pull/113#issuecomment-270319148:85,Deployability,update,update,85,"Corrected again...; This code is pure c++, no need for special assignees.; I let you update your changelog if you want to incorporate this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-270319148
https://github.com/sofa-framework/sofa/pull/113#issuecomment-270319951:13,Deployability,update,updated,13,ChangeLog is updated by the committer.; People external from the PR could not properly describe the work done.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-270319951
https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525:273,Availability,error,errors,273,"Hello,. The issue I have with this approach is that this make it very invasive, as Sofa is adding operators in std namespace for all types, even not its own. So within an application that could also does the same, we would get conflicts / redefinition / ambiguity compiler errors, or worse silently override the application's own operators that could have relied on a different string syntax. I agree that the approach of subclassing the standard containers just to be able to package them within a Data is wrong. In our current branch we are refactoring the approach, relying more on `DataTypeInfo` to generically access features like string parsing, without having to put them in the type itself. But this is work in progress so it is not ready to be pushed yet. So in the meantime this change could be pushed, but with the understanding that it may be a temporary solution only. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525
https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525:543,Modifiability,refactor,refactoring,543,"Hello,. The issue I have with this approach is that this make it very invasive, as Sofa is adding operators in std namespace for all types, even not its own. So within an application that could also does the same, we would get conflicts / redefinition / ambiguity compiler errors, or worse silently override the application's own operators that could have relied on a different string syntax. I agree that the approach of subclassing the standard containers just to be able to package them within a Data is wrong. In our current branch we are refactoring the approach, relying more on `DataTypeInfo` to generically access features like string parsing, without having to put them in the type itself. But this is work in progress so it is not ready to be pushed yet. So in the meantime this change could be pushed, but with the understanding that it may be a temporary solution only. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525
https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525:615,Security,access,access,615,"Hello,. The issue I have with this approach is that this make it very invasive, as Sofa is adding operators in std namespace for all types, even not its own. So within an application that could also does the same, we would get conflicts / redefinition / ambiguity compiler errors, or worse silently override the application's own operators that could have relied on a different string syntax. I agree that the approach of subclassing the standard containers just to be able to package them within a Data is wrong. In our current branch we are refactoring the approach, relying more on `DataTypeInfo` to generically access features like string parsing, without having to put them in the type itself. But this is work in progress so it is not ready to be pushed yet. So in the meantime this change could be pushed, but with the understanding that it may be a temporary solution only. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525
https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996:118,Availability,failure,failure,118,This PR: ; - [ ] successfully compile on each configuration on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.; - [x] has been reviewed and agreed to be transitional.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996
https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996:46,Deployability,configurat,configuration,46,This PR: ; - [ ] successfully compile on each configuration on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.; - [x] has been reviewed and agreed to be transitional.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996
https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996:46,Modifiability,config,configuration,46,This PR: ; - [ ] successfully compile on each configuration on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.; - [x] has been reviewed and agreed to be transitional.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996
https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996:113,Testability,test,test,113,This PR: ; - [ ] successfully compile on each configuration on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.; - [x] has been reviewed and agreed to be transitional.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996
https://github.com/sofa-framework/sofa/pull/113#issuecomment-275346823:311,Availability,error,errors,311,"To summarize, this PR #113 allows to include the latest c++11 functionalities. From now on, the sofa::helper::(list, map etc.) should not be used. The **std::** should be preferred.; However, there are drawbacks:; - it's invasive (add operators directly in std); - conflicts / redefinition / ambiguity compiler errors / silently override could arise by using SOFA in an application doing the same. So this is **TEMPORARY**.; I added a todo in the focused header files. The discussion remains open.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-275346823
https://github.com/sofa-framework/sofa/pull/113#issuecomment-303232819:260,Usability,Feedback,Feedback,260,"Hi all,. I have opened a new PR in WIP to handle the cleaning of set & vector. It currently contains an attempt to remove the std namespace ""pollution"" in commit https://github.com/sofa-framework/sofa/pull/278/commits/d3ecab1eaa7f2f29242aacf646910b2eb3ab47dd. Feedback & contribution in #278",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-303232819
https://github.com/sofa-framework/sofa/issues/114#issuecomment-270325726:179,Testability,test,test,179,"I thought at that moment that sofa.ini was a resource but apparently no.; (it was related to CPack and Mac when creating a .app/dmg).; So yes, it should be processed outside this test then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/114#issuecomment-270325726
https://github.com/sofa-framework/sofa/issues/114#issuecomment-272140198:41,Deployability,install,install,41,I have faced this issue as I'm using the install of sofaPhysicsAPI. I will give a look,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/114#issuecomment-272140198
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272203789:538,Performance,load,loaded,538,"Hi Damien, thanks for that work. - what's the story about MechanicalObject::d_size?; - I am not a big fan of adding more Data (for the overcost we know); - 'template' can easily be managed by hand; - 'src' can disappear at export, being replaced by the Links it had created; - having the gui choosing which Data must be saved is limiting and dangerous. Limiting because, you have to implement it in each gui that is able to save. Dangerous because you can manually change a Data that will be incompatible with another Data present in the loaded scene. A more generic way to know which Data must be exported has to be found. It is linked to saving a scene after simulation. It is not trivial for sure. My guess is each Base should have an virtual 'export' function. By default this function exports every Data (by default all data are persistent). Then component by component you can unselect some Data from the export (by setting them un-persitent) in their constructor. For complex situations, including possible incompatible Data (not so many components), a specific 'export' function can be implemented. Little by little every scenes should be exportable, including during simulation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272203789
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:329,Deployability,update,updates,329,"Hi Mathieu,. - About the 'd_size' data field. It is there just to store the attribute passed by the user. As the parse function already do the resize using the raw value of the attribute it was not needed to do any resize(d_size.getValue) anywhere. . - I share your concern about the cost of adding data. ; According to the last updates in Issue https://github.com/sofa-framework/sofa/issues/44) it seems that data is not that crucial for a real simulation. . To have more insight I just made a quick test with the following result: ; The time to create 200 000 (empty) component (without calling the init function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). ; Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). . About your suggestion to set everything to persistent by default and have each component decide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:1913,Performance,load,loader,1913,"ecide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:989,Safety,detect,detection,989,"Hi Mathieu,. - About the 'd_size' data field. It is there just to store the attribute passed by the user. As the parse function already do the resize using the raw value of the attribute it was not needed to do any resize(d_size.getValue) anywhere. . - I share your concern about the cost of adding data. ; According to the last updates in Issue https://github.com/sofa-framework/sofa/issues/44) it seems that data is not that crucial for a real simulation. . To have more insight I just made a quick test with the following result: ; The time to create 200 000 (empty) component (without calling the init function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). ; Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). . About your suggestion to set everything to persistent by default and have each component decide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2169,Safety,risk,risk,2169,"ecide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:501,Testability,test,test,501,"Hi Mathieu,. - About the 'd_size' data field. It is there just to store the attribute passed by the user. As the parse function already do the resize using the raw value of the attribute it was not needed to do any resize(d_size.getValue) anywhere. . - I share your concern about the cost of adding data. ; According to the last updates in Issue https://github.com/sofa-framework/sofa/issues/44) it seems that data is not that crucial for a real simulation. . To have more insight I just made a quick test with the following result: ; The time to create 200 000 (empty) component (without calling the init function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). ; Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). . About your suggestion to set everything to persistent by default and have each component decide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2126,Usability,simpl,simple,2126,"ecide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2413,Usability,simpl,simple,2413,"t of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalObject name position=""@file://./name.position468768764568.txt"" />. I will come back later with commit that take your remarks into account.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:555,Integrability,interface,interface,555,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:954,Modifiability,extend,extended,954,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:432,Usability,UX,UX,432,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:1047,Usability,clear,clear,1047,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:1242,Usability,clear,clear,1242,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/issues/117#issuecomment-270693839:164,Modifiability,plugin,plugins,164,"Yes, this is part of a big license cleaning task that has to be done. There are indeed some inconsistencies in license headers and copyright files, particularly in plugins. There are even sometimes several license headers on the same file.; About this single copyright.txt file, I think we should remove it. Everything in applications/ is not GPL.; Actually I think we should remove all the copyright.txt files in SOFA and stick to a main LICENCE.txt + license headers in files. That could also apply to each plugin independently.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/117#issuecomment-270693839
https://github.com/sofa-framework/sofa/issues/117#issuecomment-270693839:509,Modifiability,plugin,plugin,509,"Yes, this is part of a big license cleaning task that has to be done. There are indeed some inconsistencies in license headers and copyright files, particularly in plugins. There are even sometimes several license headers on the same file.; About this single copyright.txt file, I think we should remove it. Everything in applications/ is not GPL.; Actually I think we should remove all the copyright.txt files in SOFA and stick to a main LICENCE.txt + license headers in files. That could also apply to each plugin independently.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/117#issuecomment-270693839
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850:559,Availability,redundant,redundant,559,"----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""Subscribed"" <subscribed@noreply.github.com>; > Envoyé: Jeudi 5 Janvier 2017 17:45:25; > Objet: [sofa-framework/sofa] Cleaning VisualModelImpl (#118). > Hi,. > To fully support xml saving (see PR: #116 ) we need to clean; > VisualModelImpl::parse(). > I can do some stuff but is unclear to me how much VisualModelImpl requires; > cleaning and whether or not some part are deprecated (the loading stuff from; > file seems redundant with loader).; Yes, definitely redundant, the MeshXyzLoader components should be used for this task ; The same for BaseMeshTopology::load(filename) . thomas . > By the way...any suggestion/advice regarding the data attributes is more than; > welcome. I started a branch there for that:; > https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl. > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850:600,Availability,redundant,redundant,600,"----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""Subscribed"" <subscribed@noreply.github.com>; > Envoyé: Jeudi 5 Janvier 2017 17:45:25; > Objet: [sofa-framework/sofa] Cleaning VisualModelImpl (#118). > Hi,. > To fully support xml saving (see PR: #116 ) we need to clean; > VisualModelImpl::parse(). > I can do some stuff but is unclear to me how much VisualModelImpl requires; > cleaning and whether or not some part are deprecated (the loading stuff from; > file seems redundant with loader).; Yes, definitely redundant, the MeshXyzLoader components should be used for this task ; The same for BaseMeshTopology::load(filename) . thomas . > By the way...any suggestion/advice regarding the data attributes is more than; > welcome. I started a branch there for that:; > https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl. > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850:526,Performance,load,loading,526,"----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""Subscribed"" <subscribed@noreply.github.com>; > Envoyé: Jeudi 5 Janvier 2017 17:45:25; > Objet: [sofa-framework/sofa] Cleaning VisualModelImpl (#118). > Hi,. > To fully support xml saving (see PR: #116 ) we need to clean; > VisualModelImpl::parse(). > I can do some stuff but is unclear to me how much VisualModelImpl requires; > cleaning and whether or not some part are deprecated (the loading stuff from; > file seems redundant with loader).; Yes, definitely redundant, the MeshXyzLoader components should be used for this task ; The same for BaseMeshTopology::load(filename) . thomas . > By the way...any suggestion/advice regarding the data attributes is more than; > welcome. I started a branch there for that:; > https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl. > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850:574,Performance,load,loader,574,"----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""Subscribed"" <subscribed@noreply.github.com>; > Envoyé: Jeudi 5 Janvier 2017 17:45:25; > Objet: [sofa-framework/sofa] Cleaning VisualModelImpl (#118). > Hi,. > To fully support xml saving (see PR: #116 ) we need to clean; > VisualModelImpl::parse(). > I can do some stuff but is unclear to me how much VisualModelImpl requires; > cleaning and whether or not some part are deprecated (the loading stuff from; > file seems redundant with loader).; Yes, definitely redundant, the MeshXyzLoader components should be used for this task ; The same for BaseMeshTopology::load(filename) . thomas . > By the way...any suggestion/advice regarding the data attributes is more than; > welcome. I started a branch there for that:; > https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl. > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850:702,Performance,load,load,702,"----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""Subscribed"" <subscribed@noreply.github.com>; > Envoyé: Jeudi 5 Janvier 2017 17:45:25; > Objet: [sofa-framework/sofa] Cleaning VisualModelImpl (#118). > Hi,. > To fully support xml saving (see PR: #116 ) we need to clean; > VisualModelImpl::parse(). > I can do some stuff but is unclear to me how much VisualModelImpl requires; > cleaning and whether or not some part are deprecated (the loading stuff from; > file seems redundant with loader).; Yes, definitely redundant, the MeshXyzLoader components should be used for this task ; The same for BaseMeshTopology::load(filename) . thomas . > By the way...any suggestion/advice regarding the data attributes is more than; > welcome. I started a branch there for that:; > https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl. > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850:559,Safety,redund,redundant,559,"----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""Subscribed"" <subscribed@noreply.github.com>; > Envoyé: Jeudi 5 Janvier 2017 17:45:25; > Objet: [sofa-framework/sofa] Cleaning VisualModelImpl (#118). > Hi,. > To fully support xml saving (see PR: #116 ) we need to clean; > VisualModelImpl::parse(). > I can do some stuff but is unclear to me how much VisualModelImpl requires; > cleaning and whether or not some part are deprecated (the loading stuff from; > file seems redundant with loader).; Yes, definitely redundant, the MeshXyzLoader components should be used for this task ; The same for BaseMeshTopology::load(filename) . thomas . > By the way...any suggestion/advice regarding the data attributes is more than; > welcome. I started a branch there for that:; > https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl. > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850:600,Safety,redund,redundant,600,"----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""Subscribed"" <subscribed@noreply.github.com>; > Envoyé: Jeudi 5 Janvier 2017 17:45:25; > Objet: [sofa-framework/sofa] Cleaning VisualModelImpl (#118). > Hi,. > To fully support xml saving (see PR: #116 ) we need to clean; > VisualModelImpl::parse(). > I can do some stuff but is unclear to me how much VisualModelImpl requires; > cleaning and whether or not some part are deprecated (the loading stuff from; > file seems redundant with loader).; Yes, definitely redundant, the MeshXyzLoader components should be used for this task ; The same for BaseMeshTopology::load(filename) . thomas . > By the way...any suggestion/advice regarding the data attributes is more than; > welcome. I started a branch there for that:; > https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl. > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271516850
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546:175,Availability,redundant,redundant,175,"What I would suggest :; 1. add big visible warnings generated in load() or parse() if `filename` is not empty, stating that this direct loading feature is deprecated as it is redundant with the `MeshXyzLoader` components and will be removed SOON. Bonus point if the warning message show the equivalent xml or python syntax to instantiate the corresponding component and link it.; 2. add an entry in the changelog saying this is now deprecated and will be removed SOON; 3. wait about a year; 4. then finally remove both these methods and the associated `sofa::helper::io::*` classes. It's long in calendar time, but quick and easy in term of code changes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546:274,Integrability,message,message,274,"What I would suggest :; 1. add big visible warnings generated in load() or parse() if `filename` is not empty, stating that this direct loading feature is deprecated as it is redundant with the `MeshXyzLoader` components and will be removed SOON. Bonus point if the warning message show the equivalent xml or python syntax to instantiate the corresponding component and link it.; 2. add an entry in the changelog saying this is now deprecated and will be removed SOON; 3. wait about a year; 4. then finally remove both these methods and the associated `sofa::helper::io::*` classes. It's long in calendar time, but quick and easy in term of code changes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546:65,Performance,load,load,65,"What I would suggest :; 1. add big visible warnings generated in load() or parse() if `filename` is not empty, stating that this direct loading feature is deprecated as it is redundant with the `MeshXyzLoader` components and will be removed SOON. Bonus point if the warning message show the equivalent xml or python syntax to instantiate the corresponding component and link it.; 2. add an entry in the changelog saying this is now deprecated and will be removed SOON; 3. wait about a year; 4. then finally remove both these methods and the associated `sofa::helper::io::*` classes. It's long in calendar time, but quick and easy in term of code changes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546:136,Performance,load,loading,136,"What I would suggest :; 1. add big visible warnings generated in load() or parse() if `filename` is not empty, stating that this direct loading feature is deprecated as it is redundant with the `MeshXyzLoader` components and will be removed SOON. Bonus point if the warning message show the equivalent xml or python syntax to instantiate the corresponding component and link it.; 2. add an entry in the changelog saying this is now deprecated and will be removed SOON; 3. wait about a year; 4. then finally remove both these methods and the associated `sofa::helper::io::*` classes. It's long in calendar time, but quick and easy in term of code changes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546
https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546:175,Safety,redund,redundant,175,"What I would suggest :; 1. add big visible warnings generated in load() or parse() if `filename` is not empty, stating that this direct loading feature is deprecated as it is redundant with the `MeshXyzLoader` components and will be removed SOON. Bonus point if the warning message show the equivalent xml or python syntax to instantiate the corresponding component and link it.; 2. add an entry in the changelog saying this is now deprecated and will be removed SOON; 3. wait about a year; 4. then finally remove both these methods and the associated `sofa::helper::io::*` classes. It's long in calendar time, but quick and easy in term of code changes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546
https://github.com/sofa-framework/sofa/pull/119#issuecomment-273888541:488,Security,expose,exposed,488,"@matthieu-nesme, thanks for your interest,. In this PR set up the base of the API,; This second PR (https://github.com/sofa-framework/sofa/pull/124) use the API to unify all the colors I found in the Data of components. VisualModel is not in PR https://github.com/sofa-framework/sofa/pull/124 because the color is not a Data field of the component. So I let it away for the moment. But you are right this should be done and more generally it would be nice to have the RGBAColor object be exposed as a python object.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119#issuecomment-273888541
https://github.com/sofa-framework/sofa/pull/119#issuecomment-274584285:198,Availability,Error,Errors,198,"I checked from my windows build and apparently :. none of the functions templated with the enable_if trick ""int NN = N, typename std::enable_if<(NN==X), etc..."" are built and exported into the dll. Errors are spotting a lack of symbols from TRGBAColor r(); g(), b(), a(); but the original problem comes from one level above, ie from Vec.h . Sorry if I'm stating things you already know",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119#issuecomment-274584285
https://github.com/sofa-framework/sofa/pull/119#issuecomment-279437317:231,Availability,failure,failure,231,"@thomas-lemaire please be tatillon because it is a good question :) . Initially it was not part of the PR (have a look at the first commit to see what was my initial code) but on windows the static_asserts were causing compilation failure on V2015 and VS2013 builds. After some digging and request for discussions (in issue: https://github.com/sofa-framework/sofa/issues/130)) my conclusion was that the failure was not because of my code but because that somehow there was implicit instanciation of the function like Vec<4,float>::set(...,...,N...) with N!=4. And as they were instanciated this was causing the static_assert to reject the code when N==4. . I have the feeling that the static_assert in Vec was only working because of side effects on way compiler interleave optimization and instantiation of templates (but I may be totally wrong). Basically all the set(...,) function are present but they were removed because they were not used before the check by static_assert. . So I try to implement a corrected version of the expected behavior by using the enable_if feature of std::x11 which is generating the right function but not the others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119#issuecomment-279437317
https://github.com/sofa-framework/sofa/pull/119#issuecomment-279437317:404,Availability,failure,failure,404,"@thomas-lemaire please be tatillon because it is a good question :) . Initially it was not part of the PR (have a look at the first commit to see what was my initial code) but on windows the static_asserts were causing compilation failure on V2015 and VS2013 builds. After some digging and request for discussions (in issue: https://github.com/sofa-framework/sofa/issues/130)) my conclusion was that the failure was not because of my code but because that somehow there was implicit instanciation of the function like Vec<4,float>::set(...,...,N...) with N!=4. And as they were instanciated this was causing the static_assert to reject the code when N==4. . I have the feeling that the static_assert in Vec was only working because of side effects on way compiler interleave optimization and instantiation of templates (but I may be totally wrong). Basically all the set(...,) function are present but they were removed because they were not used before the check by static_assert. . So I try to implement a corrected version of the expected behavior by using the enable_if feature of std::x11 which is generating the right function but not the others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119#issuecomment-279437317
https://github.com/sofa-framework/sofa/pull/119#issuecomment-279437317:775,Performance,optimiz,optimization,775,"@thomas-lemaire please be tatillon because it is a good question :) . Initially it was not part of the PR (have a look at the first commit to see what was my initial code) but on windows the static_asserts were causing compilation failure on V2015 and VS2013 builds. After some digging and request for discussions (in issue: https://github.com/sofa-framework/sofa/issues/130)) my conclusion was that the failure was not because of my code but because that somehow there was implicit instanciation of the function like Vec<4,float>::set(...,...,N...) with N!=4. And as they were instanciated this was causing the static_assert to reject the code when N==4. . I have the feeling that the static_assert in Vec was only working because of side effects on way compiler interleave optimization and instantiation of templates (but I may be totally wrong). Basically all the set(...,) function are present but they were removed because they were not used before the check by static_assert. . So I try to implement a corrected version of the expected behavior by using the enable_if feature of std::x11 which is generating the right function but not the others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119#issuecomment-279437317
https://github.com/sofa-framework/sofa/pull/121#issuecomment-271328265:86,Deployability,release,release,86,"But @damienmarchal , shall we validate this pull-request since it concerns the v16.12 release?; We will re-arrange the ChangeLog for the future 17.06.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/121#issuecomment-271328265
https://github.com/sofa-framework/sofa/pull/121#issuecomment-271328265:30,Security,validat,validate,30,"But @damienmarchal , shall we validate this pull-request since it concerns the v16.12 release?; We will re-arrange the ChangeLog for the future 17.06.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/121#issuecomment-271328265
https://github.com/sofa-framework/sofa/pull/122#issuecomment-273726986:109,Availability,failure,failure,109,This PR: ; - [ ] succeed on all compilations setup on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122#issuecomment-273726986
https://github.com/sofa-framework/sofa/pull/122#issuecomment-273726986:104,Testability,test,test,104,This PR: ; - [ ] succeed on all compilations setup on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122#issuecomment-273726986
https://github.com/sofa-framework/sofa/pull/122#issuecomment-274104510:755,Availability,failure,failure,755,"On the dash ; http://www.sofa-framework.org/dash/index.php?limit=10&pg=1&user=&branch=pr%2Ffix_filerepository&platform= . I do not see an information to be able to fix any compilation pb, I might not be looking in the right place ? Can you point me the correct dash url ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Author""; > <author@noreply.github.com>; > Envoyé: Jeudi 19 Janvier 2017 10:46:13; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Fix FileRepository should not; > be optional (#122). > This PR:. > * succeed on all compilations setup on the CI.; > * does not generates new warnings or test failure.; > * does not break existing scenes.; > * does not break API compatibility.; > * is now 1 week old. > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122#issuecomment-274104510
https://github.com/sofa-framework/sofa/pull/122#issuecomment-274104510:750,Testability,test,test,750,"On the dash ; http://www.sofa-framework.org/dash/index.php?limit=10&pg=1&user=&branch=pr%2Ffix_filerepository&platform= . I do not see an information to be able to fix any compilation pb, I might not be looking in the right place ? Can you point me the correct dash url ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Author""; > <author@noreply.github.com>; > Envoyé: Jeudi 19 Janvier 2017 10:46:13; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Fix FileRepository should not; > be optional (#122). > This PR:. > * succeed on all compilations setup on the CI.; > * does not generates new warnings or test failure.; > * does not break existing scenes.; > * does not break API compatibility.; > * is now 1 week old. > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122#issuecomment-274104510
https://github.com/sofa-framework/sofa/pull/122#issuecomment-274232881:348,Availability,failure,failure,348,"@thomas-lemaire You are right, the dashboard and the CI were malfunctionning together resulting in bad reports. But @guparan and @bcarrez spend time to fix it and it should work better now. . I restart your build to refresh the status...; [ci-build]. EDIT3: now the PR build summary is ok. Correctly indicating that the vs2013 failed. In general a failure is not caused by the PR but more often by a bug in the build system...so there is still a need to investgate that. I'm really sorry thomas for the bothering.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122#issuecomment-274232881
https://github.com/sofa-framework/sofa/pull/122#issuecomment-275696156:36,Availability,Failure,Failure,36,@bcarrez Can I merge this one ? The Failure seems related to our broken vs2013.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122#issuecomment-275696156
https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673:173,Deployability,continuous,continuous,173,"Thanks for your detailled report. ; This definitely looks like a bug of SOFA related to DAGNode; we don't have centOS on our CI yet, but we will put a Centos7 config on our continuous integration system and look into this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673
https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673:184,Deployability,integrat,integration,184,"Thanks for your detailled report. ; This definitely looks like a bug of SOFA related to DAGNode; we don't have centOS on our CI yet, but we will put a Centos7 config on our continuous integration system and look into this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673
https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673:184,Integrability,integrat,integration,184,"Thanks for your detailled report. ; This definitely looks like a bug of SOFA related to DAGNode; we don't have centOS on our CI yet, but we will put a Centos7 config on our continuous integration system and look into this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673
https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673:159,Modifiability,config,config,159,"Thanks for your detailled report. ; This definitely looks like a bug of SOFA related to DAGNode; we don't have centOS on our CI yet, but we will put a Centos7 config on our continuous integration system and look into this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673
https://github.com/sofa-framework/sofa/issues/127#issuecomment-276308722:10,Modifiability,config,config,10,"A CentoOS config has been added to our dashboard, and the problem is reproductible. ; https://www.sofa-framework.org/dash; Now, time to fix it!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276308722
https://github.com/sofa-framework/sofa/issues/127#issuecomment-276599880:15,Usability,clear,clearly,15,The problem is clearly related to the DAG graph. A workaround until the bug is corrected is to use the Tree instead:. `$ runSofa -s tree`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276599880
https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255:129,Modifiability,plugin,plugins,129,"During the meeting several point were identified as open question. . One proposed approach was to implement automatic loading of plugins when a component is ; called in the scene.; An alternative approach was to make it more explicit in the form of ; <RequiredPlugin ='sofaAll'/>. Which would required to create kind of ""packages"" of plugins (maybe all the plugin in a directory?). Then is how to we handle backward compatibility or help users during the transition.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255
https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255:334,Modifiability,plugin,plugins,334,"During the meeting several point were identified as open question. . One proposed approach was to implement automatic loading of plugins when a component is ; called in the scene.; An alternative approach was to make it more explicit in the form of ; <RequiredPlugin ='sofaAll'/>. Which would required to create kind of ""packages"" of plugins (maybe all the plugin in a directory?). Then is how to we handle backward compatibility or help users during the transition.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255
https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255:357,Modifiability,plugin,plugin,357,"During the meeting several point were identified as open question. . One proposed approach was to implement automatic loading of plugins when a component is ; called in the scene.; An alternative approach was to make it more explicit in the form of ; <RequiredPlugin ='sofaAll'/>. Which would required to create kind of ""packages"" of plugins (maybe all the plugin in a directory?). Then is how to we handle backward compatibility or help users during the transition.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255
https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255:118,Performance,load,loading,118,"During the meeting several point were identified as open question. . One proposed approach was to implement automatic loading of plugins when a component is ; called in the scene.; An alternative approach was to make it more explicit in the form of ; <RequiredPlugin ='sofaAll'/>. Which would required to create kind of ""packages"" of plugins (maybe all the plugin in a directory?). Then is how to we handle backward compatibility or help users during the transition.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255
https://github.com/sofa-framework/sofa/issues/128#issuecomment-271852352:70,Modifiability,plugin,plugin,70,"Hi Damien,. I think this discussion is not ""Moving from SofaKernel ot plugin"" but rather ""Moving SOFA modules to plugins"".; Moreover, I think we can involve many people, like @fjourdes who already brainstormed about it some years ago! Let's start the discussions!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271852352
https://github.com/sofa-framework/sofa/issues/128#issuecomment-271852352:113,Modifiability,plugin,plugins,113,"Hi Damien,. I think this discussion is not ""Moving from SofaKernel ot plugin"" but rather ""Moving SOFA modules to plugins"".; Moreover, I think we can involve many people, like @fjourdes who already brainstormed about it some years ago! Let's start the discussions!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271852352
https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292:244,Modifiability,Plugin,Plugins,244,"Hi all. I really would like to see this happen! It's something I've been advocating for a long time. Feel free to add me to the workgroup.; From a user perspective (and organization standpoint) we could do something like what's done in python. Plugins could be grouped in packages (or to stay closer to the current architecture we could split ""modules"" into ""plugins""). Then if someone wants just a plugin from a package we could explicitly load it this way:; from FEMpackage import 2DFEMplugin; and if you want all of it; from FEMpackage import *",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292
https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292:359,Modifiability,plugin,plugins,359,"Hi all. I really would like to see this happen! It's something I've been advocating for a long time. Feel free to add me to the workgroup.; From a user perspective (and organization standpoint) we could do something like what's done in python. Plugins could be grouped in packages (or to stay closer to the current architecture we could split ""modules"" into ""plugins""). Then if someone wants just a plugin from a package we could explicitly load it this way:; from FEMpackage import 2DFEMplugin; and if you want all of it; from FEMpackage import *",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292
https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292:399,Modifiability,plugin,plugin,399,"Hi all. I really would like to see this happen! It's something I've been advocating for a long time. Feel free to add me to the workgroup.; From a user perspective (and organization standpoint) we could do something like what's done in python. Plugins could be grouped in packages (or to stay closer to the current architecture we could split ""modules"" into ""plugins""). Then if someone wants just a plugin from a package we could explicitly load it this way:; from FEMpackage import 2DFEMplugin; and if you want all of it; from FEMpackage import *",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292
https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292:441,Performance,load,load,441,"Hi all. I really would like to see this happen! It's something I've been advocating for a long time. Feel free to add me to the workgroup.; From a user perspective (and organization standpoint) we could do something like what's done in python. Plugins could be grouped in packages (or to stay closer to the current architecture we could split ""modules"" into ""plugins""). Then if someone wants just a plugin from a package we could explicitly load it this way:; from FEMpackage import 2DFEMplugin; and if you want all of it; from FEMpackage import *",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292
https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:735,Safety,safe,safeguard,735,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017
https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:453,Testability,assert,assertion,453,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017
https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:578,Usability,simpl,simply,578,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017
https://github.com/sofa-framework/sofa/issues/130#issuecomment-279441140:38,Safety,safe,safeguard,38,"Hi all,. I don't like to removing the safeguard by removing the 'static_assert' ; I finally implemented a version in PR119 that conditionally compile the set(...,...) functions based on condition so that static_assert is not a problem anymore. The implementation is using the enable_if feature for C++X11.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-279441140
https://github.com/sofa-framework/sofa/pull/132#issuecomment-273183024:113,Performance,perform,performance,113,"Hi @vmagno . I checked your PR, looks ok. ; For @matthieu-nesme I suggest we merge the PR and iff it cause a big performance drop we fix that at this moment by either:; - reducing the sending rate by coalsecing the events to match a managemable rate; - activating the propagation of mouse move event only when the -i command line option is provided to runSofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/132#issuecomment-273183024
https://github.com/sofa-framework/sofa/pull/132#issuecomment-273724965:103,Availability,failure,failure,103,This PR: ; - [x] does not breaks compilation on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old. So I merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/132#issuecomment-273724965
https://github.com/sofa-framework/sofa/pull/132#issuecomment-273724965:98,Testability,test,test,98,This PR: ; - [x] does not breaks compilation on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old. So I merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/132#issuecomment-273724965
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:55,Deployability,update,updated,55,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:393,Security,validat,validating,393,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:383,Testability,test,test,383,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:144,Usability,guid,guidelines,144,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:242,Usability,GUID,GUIDELINES,242,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002:193,Safety,detect,detect,193,"Thanks for the changes, . @epernod, do you have time to add tests to validate the new features you introduced ? ; (I know that you made examples but examples are not as informative as tests to detect regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002:69,Security,validat,validate,69,"Thanks for the changes, . @epernod, do you have time to add tests to validate the new features you introduced ? ; (I know that you made examples but examples are not as informative as tests to detect regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002:60,Testability,test,tests,60,"Thanks for the changes, . @epernod, do you have time to add tests to validate the new features you introduced ? ; (I know that you made examples but examples are not as informative as tests to detect regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002:184,Testability,test,tests,184,"Thanks for the changes, . @epernod, do you have time to add tests to validate the new features you introduced ? ; (I know that you made examples but examples are not as informative as tests to detect regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076:104,Modifiability,plugin,plugin,104,"@damienmarchal ok for the test. To have an example, could you point me out an example of test done in a plugin. Thanks.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076:26,Testability,test,test,26,"@damienmarchal ok for the test. To have an example, could you point me out an example of test done in a plugin. Thanks.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076:89,Testability,test,test,89,"@damienmarchal ok for the test. To have an example, could you point me out an example of test done in a plugin. Thanks.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:772,Integrability,Message,MessageAsTestFailure,772,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:810,Integrability,message,message,810,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:796,Safety,detect,detect,796,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:23,Testability,test,tests,23,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:48,Testability,test,tests,48,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:105,Testability,test,test,105,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:229,Testability,test,tests,229,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:266,Testability,test,test,266,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:354,Testability,test,tests,354,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:652,Testability,test,tests,652,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:1093,Testability,test,tests,1093,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830
https://github.com/sofa-framework/sofa/pull/133#issuecomment-275694634:38,Testability,test,tests,38,@epernod Did you managed to make some tests ? . EDIT: up :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-275694634
https://github.com/sofa-framework/sofa/pull/133#issuecomment-276923603:83,Testability,Test,Test,83,"back from a little ""into the wild"" break. Will finish that in the next days. Edit: Test added. Not perfect but more will come as I add new methods in sceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-276923603
https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567:161,Availability,failure,failure,161,"Hi,. Thanks for this PR and nice work. . This PR: ; - [ ] succeed to be compiled on each configuration on the CI.; - [ ] does not generates new warnings or test failure. ; - [ ] does not break existing scenes.; - [ ] does not break API compatibility. ; - [x] is now 1 week old. Once the CI will confirm nothing is broken and upon @matthieu-nesme agreement I suggest we merge this PR without waiting 1 week :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567
https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567:89,Deployability,configurat,configuration,89,"Hi,. Thanks for this PR and nice work. . This PR: ; - [ ] succeed to be compiled on each configuration on the CI.; - [ ] does not generates new warnings or test failure. ; - [ ] does not break existing scenes.; - [ ] does not break API compatibility. ; - [x] is now 1 week old. Once the CI will confirm nothing is broken and upon @matthieu-nesme agreement I suggest we merge this PR without waiting 1 week :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567
https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567:89,Modifiability,config,configuration,89,"Hi,. Thanks for this PR and nice work. . This PR: ; - [ ] succeed to be compiled on each configuration on the CI.; - [ ] does not generates new warnings or test failure. ; - [ ] does not break existing scenes.; - [ ] does not break API compatibility. ; - [x] is now 1 week old. Once the CI will confirm nothing is broken and upon @matthieu-nesme agreement I suggest we merge this PR without waiting 1 week :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567
https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567:156,Testability,test,test,156,"Hi,. Thanks for this PR and nice work. . This PR: ; - [ ] succeed to be compiled on each configuration on the CI.; - [ ] does not generates new warnings or test failure. ; - [ ] does not break existing scenes.; - [ ] does not break API compatibility. ; - [x] is now 1 week old. Once the CI will confirm nothing is broken and upon @matthieu-nesme agreement I suggest we merge this PR without waiting 1 week :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567
https://github.com/sofa-framework/sofa/pull/139#issuecomment-274134737:77,Modifiability,plugin,plugins,77,"Thanks Matthieu !; To keep this PR clean, I edited the commit `[applications/plugins] FIX missing licenses` and rewrote my branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-274134737
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:617,Integrability,depend,dependencies,617,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:966,Integrability,depend,depends,966,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:100,Modifiability,plugin,plugins,100,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:367,Modifiability,plugin,plugin,367,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:389,Modifiability,plugin,plugins,389,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:508,Modifiability,plugin,plugins,508,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:2088,Modifiability,plugin,plugin,2088,"f third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have both (!) LGPL 2.1 and GPL 2 headers each. General notes:; – I would expect that every plugin provides a getModuleLicense() function and that this function returns a non-empty string with a valid license; – I would expect getModuleLicense() to return the license version as well if it applies (e.g. LGPL, GPL); – I would expect getModuleLicense() to follow a common scheme, e.g., the official license title like “zlib” instead of “License ZLIB”; – Search/replace “licence/Licence/LICENCE” to “license/License/LICENSE” would help searching for license information (including filenames and file contents)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275402615:8,Modifiability,plugin,plugins,8,"for the plugins I know:; BulletCollisionDetection: LGPL; ExternalBehaviorModel: LGPL; Registration: QPL; SofaPML: obsolete, PML is GPL. regarding the versions of LGPL and GPL pick the ones you prefer :p I've got no idea of their subtle differences. +1 for license (vs licence)!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275402615
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275418771:469,Integrability,depend,dependency,469,":-) The differences between LGPL and GPL are everything but subtle. It has a huge impact for the users. For example: GPL requires in general, that someone who uses the code, has to make the own code GPL as well and hence it must be open source, too. This is not acceptable for many organizations and companies. And this is why the two licenses are not compatible at all. :/ Unfortunately, it is very easy to ""poison"" own code this way without even noticing by having a dependency that has a minor GPL part.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275418771
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:349,Deployability,configurat,configuration,349,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:566,Deployability,patch,patch,566,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:986,Integrability,depend,depending,986,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:318,Modifiability,plugin,plugins,318,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:349,Modifiability,config,configuration,349,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:881,Modifiability,plugin,plugins,881,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:924,Modifiability,plugin,plugin,924,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:1280,Modifiability,plugin,plugin,1280,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:1125,Usability,simpl,simple,1125,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778:3,Modifiability,plugin,plugins,3,"As plugins are not really part of SOFA (and are going to move to their own repository soon), I finally think we should not add the SOFA license header to them. Still, I suggest to have some license template for plugins. Something like this:; ```; /******************************************************************************; * *; * ComplexMathematicalStuff plugin *; * (c) 2015-2017 Someone *; * *; *******************************************************************************; * The plugin license comes here. *; *******************************************************************************; * made for SOFA, Simulation Open-Framework Architecture *; * (c) 2006-YYYY INRIA, USTL, UJF, CNRS, MGH *; ******************************************************************************/; ```. I will remove all plugins-concerned commits from this PR and create a new one for them. What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778:211,Modifiability,plugin,plugins,211,"As plugins are not really part of SOFA (and are going to move to their own repository soon), I finally think we should not add the SOFA license header to them. Still, I suggest to have some license template for plugins. Something like this:; ```; /******************************************************************************; * *; * ComplexMathematicalStuff plugin *; * (c) 2015-2017 Someone *; * *; *******************************************************************************; * The plugin license comes here. *; *******************************************************************************; * made for SOFA, Simulation Open-Framework Architecture *; * (c) 2006-YYYY INRIA, USTL, UJF, CNRS, MGH *; ******************************************************************************/; ```. I will remove all plugins-concerned commits from this PR and create a new one for them. What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778:360,Modifiability,plugin,plugin,360,"As plugins are not really part of SOFA (and are going to move to their own repository soon), I finally think we should not add the SOFA license header to them. Still, I suggest to have some license template for plugins. Something like this:; ```; /******************************************************************************; * *; * ComplexMathematicalStuff plugin *; * (c) 2015-2017 Someone *; * *; *******************************************************************************; * The plugin license comes here. *; *******************************************************************************; * made for SOFA, Simulation Open-Framework Architecture *; * (c) 2006-YYYY INRIA, USTL, UJF, CNRS, MGH *; ******************************************************************************/; ```. I will remove all plugins-concerned commits from this PR and create a new one for them. What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778:489,Modifiability,plugin,plugin,489,"As plugins are not really part of SOFA (and are going to move to their own repository soon), I finally think we should not add the SOFA license header to them. Still, I suggest to have some license template for plugins. Something like this:; ```; /******************************************************************************; * *; * ComplexMathematicalStuff plugin *; * (c) 2015-2017 Someone *; * *; *******************************************************************************; * The plugin license comes here. *; *******************************************************************************; * made for SOFA, Simulation Open-Framework Architecture *; * (c) 2006-YYYY INRIA, USTL, UJF, CNRS, MGH *; ******************************************************************************/; ```. I will remove all plugins-concerned commits from this PR and create a new one for them. What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778:810,Modifiability,plugin,plugins-concerned,810,"As plugins are not really part of SOFA (and are going to move to their own repository soon), I finally think we should not add the SOFA license header to them. Still, I suggest to have some license template for plugins. Something like this:; ```; /******************************************************************************; * *; * ComplexMathematicalStuff plugin *; * (c) 2015-2017 Someone *; * *; *******************************************************************************; * The plugin license comes here. *; *******************************************************************************; * made for SOFA, Simulation Open-Framework Architecture *; * (c) 2006-YYYY INRIA, USTL, UJF, CNRS, MGH *; ******************************************************************************/; ```. I will remove all plugins-concerned commits from this PR and create a new one for them. What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:60,Availability,avail,available,60,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:19,Modifiability,plugin,plugin-concerned,19,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:132,Usability,simpl,simple,132,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500
https://github.com/sofa-framework/sofa/pull/141#issuecomment-275114184:65,Performance,optimiz,optimize,65,Can someone check & merge this quickly I would like to use it to optimize the windows builds time. [EDIT] I typed to fast :) it will work on windows but does not with visual 2015,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275114184
https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846:397,Availability,avail,available,397,"sorry, it looked simple and fine for me... . ----- Mail original -----. > De: ""Guillaume Paran"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""State change""; > <state_change@noreply.github.com>; > Envoyé: Jeudi 26 Janvier 2017 10:21:34; > Objet: Re: [sofa-framework/sofa] [CI] Replace 'make' by 'ninja' when; > available. (#141). > This one was merged too fast.; > I wanted to change a bit the code :(. > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846
https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846:17,Usability,simpl,simple,17,"sorry, it looked simple and fine for me... . ----- Mail original -----. > De: ""Guillaume Paran"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""State change""; > <state_change@noreply.github.com>; > Envoyé: Jeudi 26 Janvier 2017 10:21:34; > Objet: Re: [sofa-framework/sofa] [CI] Replace 'make' by 'ninja' when; > available. (#141). > This one was merged too fast.; > I wanted to change a bit the code :(. > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846
https://github.com/sofa-framework/sofa/pull/143#issuecomment-275331762:100,Availability,failure,failure,100,"Hi @bcarrez ; It seems the CI for Win-VS2015 is failing ""Build step 'Execute shell' marked build as failure""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275331762
https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127:83,Deployability,integrat,integration,83,@hugtalbot The code seems ok to me and fix test that are bugued. ; I vote for fast integration ASAP we have an all green dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127
https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127:115,Energy Efficiency,green,green,115,@hugtalbot The code seems ok to me and fix test that are bugued. ; I vote for fast integration ASAP we have an all green dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127
https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127:83,Integrability,integrat,integration,83,@hugtalbot The code seems ok to me and fix test that are bugued. ; I vote for fast integration ASAP we have an all green dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127
https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127:43,Testability,test,test,43,@hugtalbot The code seems ok to me and fix test that are bugued. ; I vote for fast integration ASAP we have an all green dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127
https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545:15,Integrability,message,message,15,"I flagged your message to have a look later. It does seem like a bug, however it is in a part of the code that was never finished (creating mechanical matrices including contributions below mappings), so is not currently used. As far as I know, for the same functionality within the Compliant/Flexible plugins they used a completely rewritten matrix construction code. This issue might be one reason why this version of the algorithm is not working, but there are probably other bugs in this code as well... Thanks for the notification !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545
https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545:293,Modifiability,Flexible,Flexible,293,"I flagged your message to have a look later. It does seem like a bug, however it is in a part of the code that was never finished (creating mechanical matrices including contributions below mappings), so is not currently used. As far as I know, for the same functionality within the Compliant/Flexible plugins they used a completely rewritten matrix construction code. This issue might be one reason why this version of the algorithm is not working, but there are probably other bugs in this code as well... Thanks for the notification !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545
https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545:302,Modifiability,plugin,plugins,302,"I flagged your message to have a look later. It does seem like a bug, however it is in a part of the code that was never finished (creating mechanical matrices including contributions below mappings), so is not currently used. As far as I know, for the same functionality within the Compliant/Flexible plugins they used a completely rewritten matrix construction code. This issue might be one reason why this version of the algorithm is not working, but there are probably other bugs in this code as well... Thanks for the notification !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545
https://github.com/sofa-framework/sofa/issues/146#issuecomment-275222917:68,Security,validat,validate,68,"@matthieu-nesme you are right the ""existing.txt"" file is created to validate the behavior of the FileMonitor API. It should be added to .gitignore as well as probably removed when the test terminates.; Edit: typos",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/146#issuecomment-275222917
https://github.com/sofa-framework/sofa/issues/146#issuecomment-275222917:184,Testability,test,test,184,"@matthieu-nesme you are right the ""existing.txt"" file is created to validate the behavior of the FileMonitor API. It should be added to .gitignore as well as probably removed when the test terminates.; Edit: typos",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/146#issuecomment-275222917
https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765:39,Security,validat,validate,39,"I have not the competence nore time to validate it on the mechanical aspect so I suggest to let 1 week to anyone to give feedback, and after one week we merge it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765
https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765:121,Usability,feedback,feedback,121,"I have not the competence nore time to validate it on the mechanical aspect so I suggest to let 1 week to anyone to give feedback, and after one week we merge it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765
https://github.com/sofa-framework/sofa/pull/147#issuecomment-275705743:312,Testability,test,test,312,"@matthieu-nesme, @maxime-tournier . Thanks for your PR. The cleaning looks ok to me but it seems there is two new components (UniformStiffness, DiagonalStiffness) added in this PR. . Maybe you should change the title of the PR to ""Minor Fix and Add UniformStiff & DiagonalStiffness Components"" . I don't see any test on the two added components. . You changed the .py file to use the two added component. As they seems very similar to the existing one maybe this deserve a bit of documentation (doxygen) or example on when to use one component instead of the other otherwise users will be puzzled in deciding which one to choose.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275705743
https://github.com/sofa-framework/sofa/pull/147#issuecomment-276603951:191,Testability,test,tests,191,"Sorry to be so long to merge this PR but the CI is very slow and buggy which really breaks the workflow. . @matthieu-nesme, @maxime-tournier can you please give me your thinking about adding tests and documentations on the components introduced in this PR. . EDIT: took the checklist to add it in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-276603951
https://github.com/sofa-framework/sofa/pull/147#issuecomment-278908596:91,Testability,test,tests,91,"@damienmarchal Even if these new components are trivial, you are right and I did push some tests for them.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-278908596
https://github.com/sofa-framework/sofa/pull/148#issuecomment-276601858:109,Availability,failure,failure,109,This PR: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] is now 1 week old. I would say we can merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/148#issuecomment-276601858
https://github.com/sofa-framework/sofa/pull/148#issuecomment-276601858:104,Testability,test,test,104,This PR: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] is now 1 week old. I would say we can merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/148#issuecomment-276601858
https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093:33,Deployability,install,install,33,+1. . We probably simply need to install the autodump trick somewhere in Sofa_test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093
https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093:18,Usability,simpl,simply,18,+1. . We probably simply need to install the autodump trick somewhere in Sofa_test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093
https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976:686,Availability,failure,failures,686,"I just spent a significant amount of time to understand how we play with GTest and XML outputs in SOFA.; Printing a call stack should be done with #191 + #195. ; But there is still a problem in our way to report unit tests.; Currently what we do is to run all our tests with `--gtests_output:xml`. This is OK but sometimes we have crashes (often due to segfaults) in our tests. When a test crashes, it just stops. All the other steps/functions/cases are skipped and the XML output is not created.; So currently, for each crash, we are losing results. This brings me a question: should we (1) handle the lost tests for each crash or (2) change the way we use GTest and detect crashes as failures? Is (2) even possible with segfaults?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976
https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976:668,Safety,detect,detect,668,"I just spent a significant amount of time to understand how we play with GTest and XML outputs in SOFA.; Printing a call stack should be done with #191 + #195. ; But there is still a problem in our way to report unit tests.; Currently what we do is to run all our tests with `--gtests_output:xml`. This is OK but sometimes we have crashes (often due to segfaults) in our tests. When a test crashes, it just stops. All the other steps/functions/cases are skipped and the XML output is not created.; So currently, for each crash, we are losing results. This brings me a question: should we (1) handle the lost tests for each crash or (2) change the way we use GTest and detect crashes as failures? Is (2) even possible with segfaults?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976
https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976:217,Testability,test,tests,217,"I just spent a significant amount of time to understand how we play with GTest and XML outputs in SOFA.; Printing a call stack should be done with #191 + #195. ; But there is still a problem in our way to report unit tests.; Currently what we do is to run all our tests with `--gtests_output:xml`. This is OK but sometimes we have crashes (often due to segfaults) in our tests. When a test crashes, it just stops. All the other steps/functions/cases are skipped and the XML output is not created.; So currently, for each crash, we are losing results. This brings me a question: should we (1) handle the lost tests for each crash or (2) change the way we use GTest and detect crashes as failures? Is (2) even possible with segfaults?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976
https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976:264,Testability,test,tests,264,"I just spent a significant amount of time to understand how we play with GTest and XML outputs in SOFA.; Printing a call stack should be done with #191 + #195. ; But there is still a problem in our way to report unit tests.; Currently what we do is to run all our tests with `--gtests_output:xml`. This is OK but sometimes we have crashes (often due to segfaults) in our tests. When a test crashes, it just stops. All the other steps/functions/cases are skipped and the XML output is not created.; So currently, for each crash, we are losing results. This brings me a question: should we (1) handle the lost tests for each crash or (2) change the way we use GTest and detect crashes as failures? Is (2) even possible with segfaults?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976
https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976:371,Testability,test,tests,371,"I just spent a significant amount of time to understand how we play with GTest and XML outputs in SOFA.; Printing a call stack should be done with #191 + #195. ; But there is still a problem in our way to report unit tests.; Currently what we do is to run all our tests with `--gtests_output:xml`. This is OK but sometimes we have crashes (often due to segfaults) in our tests. When a test crashes, it just stops. All the other steps/functions/cases are skipped and the XML output is not created.; So currently, for each crash, we are losing results. This brings me a question: should we (1) handle the lost tests for each crash or (2) change the way we use GTest and detect crashes as failures? Is (2) even possible with segfaults?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976
https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976:385,Testability,test,test,385,"I just spent a significant amount of time to understand how we play with GTest and XML outputs in SOFA.; Printing a call stack should be done with #191 + #195. ; But there is still a problem in our way to report unit tests.; Currently what we do is to run all our tests with `--gtests_output:xml`. This is OK but sometimes we have crashes (often due to segfaults) in our tests. When a test crashes, it just stops. All the other steps/functions/cases are skipped and the XML output is not created.; So currently, for each crash, we are losing results. This brings me a question: should we (1) handle the lost tests for each crash or (2) change the way we use GTest and detect crashes as failures? Is (2) even possible with segfaults?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976
https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976:608,Testability,test,tests,608,"I just spent a significant amount of time to understand how we play with GTest and XML outputs in SOFA.; Printing a call stack should be done with #191 + #195. ; But there is still a problem in our way to report unit tests.; Currently what we do is to run all our tests with `--gtests_output:xml`. This is OK but sometimes we have crashes (often due to segfaults) in our tests. When a test crashes, it just stops. All the other steps/functions/cases are skipped and the XML output is not created.; So currently, for each crash, we are losing results. This brings me a question: should we (1) handle the lost tests for each crash or (2) change the way we use GTest and detect crashes as failures? Is (2) even possible with segfaults?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976
https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038:323,Availability,error,error,323,"Hi Guillaume,. After a quick look in the mesVTKLoader class you are totally right there is bug theres. This is related to the fact the that the VTKLoader is parsing the ""scale"" argumente using atoi/atof. These functions depends on the LC_LANG/LANG environment variables. . Using 0,001 is not valid but does not generate an error.; We should fix that. As this is code that I'm cleaning on I can probably fix that unless someone else want to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038
https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038:220,Integrability,depend,depends,220,"Hi Guillaume,. After a quick look in the mesVTKLoader class you are totally right there is bug theres. This is related to the fact the that the VTKLoader is parsing the ""scale"" argumente using atoi/atof. These functions depends on the LC_LANG/LANG environment variables. . Using 0,001 is not valid but does not generate an error.; We should fix that. As this is code that I'm cleaning on I can probably fix that unless someone else want to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038
https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038:260,Modifiability,variab,variables,260,"Hi Guillaume,. After a quick look in the mesVTKLoader class you are totally right there is bug theres. This is related to the fact the that the VTKLoader is parsing the ""scale"" argumente using atoi/atof. These functions depends on the LC_LANG/LANG environment variables. . Using 0,001 is not valid but does not generate an error.; We should fix that. As this is code that I'm cleaning on I can probably fix that unless someone else want to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038
https://github.com/sofa-framework/sofa/issues/151#issuecomment-281639060:108,Modifiability,variab,variables,108,"We lost more than a week of work recently, because for years in Sofa during initialization the LC_LANG/LANG variables were forced to the safe and sane ""C"" value, but it was removed during a ""refactoring"" (I can look up the id of the commit if that is useful). Since then, you have to expect bugs like this (particularly in closed-source haptic drivers...). I would prefer that we go back to this strategy, instead of finding and fixing all those bugs (some of which we can't fix anyway). The alternative is to ban all use of `atoi/atof/printf/scanf/iostream/...` :(",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-281639060
https://github.com/sofa-framework/sofa/issues/151#issuecomment-281639060:191,Modifiability,refactor,refactoring,191,"We lost more than a week of work recently, because for years in Sofa during initialization the LC_LANG/LANG variables were forced to the safe and sane ""C"" value, but it was removed during a ""refactoring"" (I can look up the id of the commit if that is useful). Since then, you have to expect bugs like this (particularly in closed-source haptic drivers...). I would prefer that we go back to this strategy, instead of finding and fixing all those bugs (some of which we can't fix anyway). The alternative is to ban all use of `atoi/atof/printf/scanf/iostream/...` :(",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-281639060
https://github.com/sofa-framework/sofa/issues/151#issuecomment-281639060:137,Safety,safe,safe,137,"We lost more than a week of work recently, because for years in Sofa during initialization the LC_LANG/LANG variables were forced to the safe and sane ""C"" value, but it was removed during a ""refactoring"" (I can look up the id of the commit if that is useful). Since then, you have to expect bugs like this (particularly in closed-source haptic drivers...). I would prefer that we go back to this strategy, instead of finding and fixing all those bugs (some of which we can't fix anyway). The alternative is to ban all use of `atoi/atof/printf/scanf/iostream/...` :(",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-281639060
https://github.com/sofa-framework/sofa/issues/151#issuecomment-281666312:403,Safety,detect,detect,403,"@JeremieA Same starting point, loosing time to understand what is wrong, but with a slightly different conclusion. . I fully agree that the locale have to be set globally to each application calling sofa to correctly parse number. . But the real problem is caused by the fact that in Sofa there is places where we convert string to number while silently ignoring when something is wrong (or don't event detect something goes wrong as when using aoi/atoif) . . Silently ignoring blatantly invalid user inputs sounds like a terrible behavior I think we should give time to eradicate this kind of code (and atoi/atof/scanf are definitely the first place I would look for).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-281666312
https://github.com/sofa-framework/sofa/issues/151#issuecomment-284450056:31,Modifiability,variab,variables,31,"Instead of setting environment variables, we could call [imbue](http://en.cppreference.com/w/cpp/io/basic_ios/imbue) on input streams prior to parsing?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-284450056
https://github.com/sofa-framework/sofa/pull/153#issuecomment-275349381:42,Safety,abort,aborted,42,"Since this is only a few comments edit, I aborted the builds on the CI.; For future PRs, add [ci-ignore] in the description to avoid builds ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/153#issuecomment-275349381
https://github.com/sofa-framework/sofa/pull/153#issuecomment-275349381:127,Safety,avoid,avoid,127,"Since this is only a few comments edit, I aborted the builds on the CI.; For future PRs, add [ci-ignore] in the description to avoid builds ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/153#issuecomment-275349381
https://github.com/sofa-framework/sofa/pull/154#issuecomment-275648244:47,Deployability,install,install,47,(WARNING) When merged this PR will requires to install ninja on the build VM and force a full-build of all the branches (to force the regeneration of the build directory).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/154#issuecomment-275648244
https://github.com/sofa-framework/sofa/pull/156#issuecomment-277264998:133,Availability,error,error,133,"Thank maxime for this PR. . According to Mathieu's comment it is unclear to me if the PR should:; - be splitted in two; one with the error handling and one with the adding of the Spring Data binding; - or merged with minor change because, even if not perfect, this PR fundamentally it improves Sofa. ; ; EDIT: [ci-build] and up :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156#issuecomment-277264998
https://github.com/sofa-framework/sofa/pull/156#issuecomment-278159229:35,Modifiability,refactor,refactoring,35,"The above commit only adds trivial refactoring of a (too big) function to facilitate review, nothing more, so I think it belongs here. I also agree with @matthieu-nesme about the the right way to do it, but this should be another PR to keep concerns separate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156#issuecomment-278159229
https://github.com/sofa-framework/sofa/pull/158#issuecomment-276338378:501,Deployability,update,update,501,"Hi Fred,. Thank for this PR. . +1 for the cleannig; +1 for the tests ; Maybe it should be told in the PR description. . I'm surprise by the C++ code in the test.glsl file. I don't think this is a good naming convention because it is really hard to understand that the content of the .gsl file is actually c++. So I suggest to rename the file with a more classical .cpp (or .cppglsl if you really want something no .cpp). . There is some place in the code that introduces new std::cerr. Can you please update to use the dmsg_* API . I will try the PR to see if it does not interfere with the livecoding features.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276338378
https://github.com/sofa-framework/sofa/pull/158#issuecomment-276338378:63,Testability,test,tests,63,"Hi Fred,. Thank for this PR. . +1 for the cleannig; +1 for the tests ; Maybe it should be told in the PR description. . I'm surprise by the C++ code in the test.glsl file. I don't think this is a good naming convention because it is really hard to understand that the content of the .gsl file is actually c++. So I suggest to rename the file with a more classical .cpp (or .cppglsl if you really want something no .cpp). . There is some place in the code that introduces new std::cerr. Can you please update to use the dmsg_* API . I will try the PR to see if it does not interfere with the livecoding features.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276338378
https://github.com/sofa-framework/sofa/pull/158#issuecomment-276338378:156,Testability,test,test,156,"Hi Fred,. Thank for this PR. . +1 for the cleannig; +1 for the tests ; Maybe it should be told in the PR description. . I'm surprise by the C++ code in the test.glsl file. I don't think this is a good naming convention because it is really hard to understand that the content of the .gsl file is actually c++. So I suggest to rename the file with a more classical .cpp (or .cppglsl if you really want something no .cpp). . There is some place in the code that introduces new std::cerr. Can you please update to use the dmsg_* API . I will try the PR to see if it does not interfere with the livecoding features.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276338378
https://github.com/sofa-framework/sofa/pull/158#issuecomment-276340122:400,Testability,test,test,400,"Thanks for your fast answer !. I will rename the extension of the C++/shader file.; As a side note, this file is using [Raw String Litterals](https://en.wikipedia.org/wiki/C++11#New_string_literals), as it allowed me to directly copy-paste content of the shader file into a string (without escaping end-of-line, quotes, etc.); I will also remove the std::cerr/cout to use the msg_ api.; Finally, one test is failing on MacOS (only!) about filemonitor because of my commits and I dont really know why ?? (FileMonitor.updateNoChange_test)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276340122
https://github.com/sofa-framework/sofa/pull/158#issuecomment-276366449:66,Testability,test,test,66,"@fredroy I really like the Raw String Litteral, . The FileMonitor test is probably not related with your PR, It is an old bug that was soved last week...but maybe it wasn't @bcarrez ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276366449
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276908575:84,Testability,test,test,84,"I think the clean should not be done independently, if you remove the if (printLog) test many components are going to fill their ""log buffer"", hence increase memory usage",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276908575
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276908575:130,Testability,log,log,130,"I think the clean should not be done independently, if you remove the if (printLog) test many components are going to fill their ""log buffer"", hence increase memory usage",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276908575
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:159,Availability,redundant,redundant,159,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:483,Deployability,install,installed,483,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:994,Deployability,install,installing,994,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:457,Integrability,message,message,457,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:609,Integrability,Message,MessageDispatcher,609,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:769,Integrability,message,messages,769,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:159,Safety,redund,redundant,159,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:537,Testability,log,loggin,537,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:799,Testability,log,log,799,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:936,Testability,log,log,936,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:1009,Testability,log,logging,1009,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:918,Usability,clear,clear,918,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278290041:174,Availability,error,error,174,Actually i think 'msgInfoVerbosity' may be a better name because it explain that the control is only on the amount of INFO messages and that it left untouched the warning or error (that are import functional messages and shouldn't probably be removed).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278290041
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278290041:123,Integrability,message,messages,123,Actually i think 'msgInfoVerbosity' may be a better name because it explain that the control is only on the amount of INFO messages and that it left untouched the warning or error (that are import functional messages and shouldn't probably be removed).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278290041
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278290041:208,Integrability,message,messages,208,Actually i think 'msgInfoVerbosity' may be a better name because it explain that the control is only on the amount of INFO messages and that it left untouched the warning or error (that are import functional messages and shouldn't probably be removed).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278290041
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017:330,Availability,error,error,330,"I see the benefit of having generic msg_xyz_when(cond) message, maybe they should be more general and not tied to a ""this"" pointer, like msg_xyz_when(sender, cond). In the component itself, I would rather see; component_msg_info() if (printLog) msg_info(this); with ""printLog"" data name updated; I also think ""warning"" and above (error...) levels should not depend on a flag; And last, I would call that flag ""msgInfoVerbose"" to better match what is a boolean flag name. here my 2 cents ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017:287,Deployability,update,updated,287,"I see the benefit of having generic msg_xyz_when(cond) message, maybe they should be more general and not tied to a ""this"" pointer, like msg_xyz_when(sender, cond). In the component itself, I would rather see; component_msg_info() if (printLog) msg_info(this); with ""printLog"" data name updated; I also think ""warning"" and above (error...) levels should not depend on a flag; And last, I would call that flag ""msgInfoVerbose"" to better match what is a boolean flag name. here my 2 cents ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017:55,Integrability,message,message,55,"I see the benefit of having generic msg_xyz_when(cond) message, maybe they should be more general and not tied to a ""this"" pointer, like msg_xyz_when(sender, cond). In the component itself, I would rather see; component_msg_info() if (printLog) msg_info(this); with ""printLog"" data name updated; I also think ""warning"" and above (error...) levels should not depend on a flag; And last, I would call that flag ""msgInfoVerbose"" to better match what is a boolean flag name. here my 2 cents ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017:358,Integrability,depend,depend,358,"I see the benefit of having generic msg_xyz_when(cond) message, maybe they should be more general and not tied to a ""this"" pointer, like msg_xyz_when(sender, cond). In the component itself, I would rather see; component_msg_info() if (printLog) msg_info(this); with ""printLog"" data name updated; I also think ""warning"" and above (error...) levels should not depend on a flag; And last, I would call that flag ""msgInfoVerbose"" to better match what is a boolean flag name. here my 2 cents ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278600119:149,Availability,error,error,149,"if msgInfoVerbosity is a level,and you have s.t. like ; > msg_info_when(printLog > 5) ; then the level is not homogeneous : first name of the macro (error, warning, info - isn't there a msg_debug() macro too ?), and then in the condition in msg_info_when() . well, this might be ""my"" concept of level (this is also the one in the qt libs I am familiar with) . about the automatic switch between ""this"" and ""string"" versions, this would be awesome, however I have no idea on how to achieve this with c++ macro (maybe a special include that would replace the string version by the this version when you are in a component source file ?) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 8 Février 2017 16:01:36; > Objet: Re: [sofa-framework/sofa] Cleaning printLog mis-usage (#160). > My dream would be to have:; > msg_warning (); > msg_error(); > msg_info(). > msg_info_when(printLog > 5 ); > msg_warning_when( fileNotFound); > msg_error_when(toto==tata). > With an an automatic selection between the 'this' and 'string' version. > I in my mind msgInfoVerbosity was not a boolean but something with different; > levels (NONE, LOW, MEDIUM, HIGH) . Maybe useful as well as overkilling. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278600119
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429:89,Availability,error,error,89,"Hi thomas,. Maybe the use of 'printLog' in my example was ambiuous sorry... . To me the 'error', 'warning', 'info' specifiers is the message 'type' and the set of types is un-ordred so it cannot be controlled via a single level. ; Eg of valid pattern: ; ```cpp; msg_info_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; msg_info_when( msgInfoVerbosity >= HIGH ) << ""This is printed not so often"";; ``` . Eg of in-valid pattern (should be rejected in the PR :)): ; ```cpp; msg_error_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; ``` . 'msgInfoVerbosity' only control the amount of info messages emitted so is nothing related to ; error/warning. . Instead of level we may also have a 'verbosityMask' to control precisely which message are emitted ; Eg:; ```cpp; msg_info_when( verbosityMask & INFO ) << ""blabha"";; ```; but I think *we shouldn't do that*. About the 'msg_debug'...it is problematic because there is also a different set of macro for developers that are called dmsg_info, dmsg_warning, dmsg_error()...these dmsg_* macros leads to NO-op when compiled in RELEASE. So my thinking is that we should remove the msg_debug macro and use their dmsg_* ones instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429:654,Availability,error,error,654,"Hi thomas,. Maybe the use of 'printLog' in my example was ambiuous sorry... . To me the 'error', 'warning', 'info' specifiers is the message 'type' and the set of types is un-ordred so it cannot be controlled via a single level. ; Eg of valid pattern: ; ```cpp; msg_info_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; msg_info_when( msgInfoVerbosity >= HIGH ) << ""This is printed not so often"";; ``` . Eg of in-valid pattern (should be rejected in the PR :)): ; ```cpp; msg_error_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; ``` . 'msgInfoVerbosity' only control the amount of info messages emitted so is nothing related to ; error/warning. . Instead of level we may also have a 'verbosityMask' to control precisely which message are emitted ; Eg:; ```cpp; msg_info_when( verbosityMask & INFO ) << ""blabha"";; ```; but I think *we shouldn't do that*. About the 'msg_debug'...it is problematic because there is also a different set of macro for developers that are called dmsg_info, dmsg_warning, dmsg_error()...these dmsg_* macros leads to NO-op when compiled in RELEASE. So my thinking is that we should remove the msg_debug macro and use their dmsg_* ones instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429:1090,Deployability,RELEASE,RELEASE,1090,"Hi thomas,. Maybe the use of 'printLog' in my example was ambiuous sorry... . To me the 'error', 'warning', 'info' specifiers is the message 'type' and the set of types is un-ordred so it cannot be controlled via a single level. ; Eg of valid pattern: ; ```cpp; msg_info_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; msg_info_when( msgInfoVerbosity >= HIGH ) << ""This is printed not so often"";; ``` . Eg of in-valid pattern (should be rejected in the PR :)): ; ```cpp; msg_error_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; ``` . 'msgInfoVerbosity' only control the amount of info messages emitted so is nothing related to ; error/warning. . Instead of level we may also have a 'verbosityMask' to control precisely which message are emitted ; Eg:; ```cpp; msg_info_when( verbosityMask & INFO ) << ""blabha"";; ```; but I think *we shouldn't do that*. About the 'msg_debug'...it is problematic because there is also a different set of macro for developers that are called dmsg_info, dmsg_warning, dmsg_error()...these dmsg_* macros leads to NO-op when compiled in RELEASE. So my thinking is that we should remove the msg_debug macro and use their dmsg_* ones instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429:133,Integrability,message,message,133,"Hi thomas,. Maybe the use of 'printLog' in my example was ambiuous sorry... . To me the 'error', 'warning', 'info' specifiers is the message 'type' and the set of types is un-ordred so it cannot be controlled via a single level. ; Eg of valid pattern: ; ```cpp; msg_info_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; msg_info_when( msgInfoVerbosity >= HIGH ) << ""This is printed not so often"";; ``` . Eg of in-valid pattern (should be rejected in the PR :)): ; ```cpp; msg_error_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; ``` . 'msgInfoVerbosity' only control the amount of info messages emitted so is nothing related to ; error/warning. . Instead of level we may also have a 'verbosityMask' to control precisely which message are emitted ; Eg:; ```cpp; msg_info_when( verbosityMask & INFO ) << ""blabha"";; ```; but I think *we shouldn't do that*. About the 'msg_debug'...it is problematic because there is also a different set of macro for developers that are called dmsg_info, dmsg_warning, dmsg_error()...these dmsg_* macros leads to NO-op when compiled in RELEASE. So my thinking is that we should remove the msg_debug macro and use their dmsg_* ones instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429:610,Integrability,message,messages,610,"Hi thomas,. Maybe the use of 'printLog' in my example was ambiuous sorry... . To me the 'error', 'warning', 'info' specifiers is the message 'type' and the set of types is un-ordred so it cannot be controlled via a single level. ; Eg of valid pattern: ; ```cpp; msg_info_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; msg_info_when( msgInfoVerbosity >= HIGH ) << ""This is printed not so often"";; ``` . Eg of in-valid pattern (should be rejected in the PR :)): ; ```cpp; msg_error_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; ``` . 'msgInfoVerbosity' only control the amount of info messages emitted so is nothing related to ; error/warning. . Instead of level we may also have a 'verbosityMask' to control precisely which message are emitted ; Eg:; ```cpp; msg_info_when( verbosityMask & INFO ) << ""blabha"";; ```; but I think *we shouldn't do that*. About the 'msg_debug'...it is problematic because there is also a different set of macro for developers that are called dmsg_info, dmsg_warning, dmsg_error()...these dmsg_* macros leads to NO-op when compiled in RELEASE. So my thinking is that we should remove the msg_debug macro and use their dmsg_* ones instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429:750,Integrability,message,message,750,"Hi thomas,. Maybe the use of 'printLog' in my example was ambiuous sorry... . To me the 'error', 'warning', 'info' specifiers is the message 'type' and the set of types is un-ordred so it cannot be controlled via a single level. ; Eg of valid pattern: ; ```cpp; msg_info_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; msg_info_when( msgInfoVerbosity >= HIGH ) << ""This is printed not so often"";; ``` . Eg of in-valid pattern (should be rejected in the PR :)): ; ```cpp; msg_error_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; ``` . 'msgInfoVerbosity' only control the amount of info messages emitted so is nothing related to ; error/warning. . Instead of level we may also have a 'verbosityMask' to control precisely which message are emitted ; Eg:; ```cpp; msg_info_when( verbosityMask & INFO ) << ""blabha"";; ```; but I think *we shouldn't do that*. About the 'msg_debug'...it is problematic because there is also a different set of macro for developers that are called dmsg_info, dmsg_warning, dmsg_error()...these dmsg_* macros leads to NO-op when compiled in RELEASE. So my thinking is that we should remove the msg_debug macro and use their dmsg_* ones instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957:63,Modifiability,portab,portable,63,"@thomas-lemaire After some digging into internet I found a non-portable solution to support the 'non this' version. . ```cpp ; #define INFO_0() ldmsg_info(this); #define INFO_1(A) oldmsg_info(A); #define INFO_X(x, A, FUNC, ...) FUNC; #define msg_info(...) INFO_X(, \; ##__VA_ARGS__,\; INFO_1(__VA_ARGS__),\; INFO_0(__VA_ARGS__)); ```. I hate (and love) so much these macro trick (template wizard are welcome for a better solution)... ; but with this macro we can now write:; ```cpp; msg_info() << ""This is sended with an automatic 'this' parameter' provided as emitter;; msg_info(this) << ""This is sended with an explicit BaseObject provided as emitter "" ; ; msg_info(""SomeSPecifcSource"") << ""This is sended with a string as emitter"";; ```; which look perfect to me. . The problem is that this solution is not portable because it uses the ## GCC extension. ; Any idea on how to make a portable solution ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957:810,Modifiability,portab,portable,810,"@thomas-lemaire After some digging into internet I found a non-portable solution to support the 'non this' version. . ```cpp ; #define INFO_0() ldmsg_info(this); #define INFO_1(A) oldmsg_info(A); #define INFO_X(x, A, FUNC, ...) FUNC; #define msg_info(...) INFO_X(, \; ##__VA_ARGS__,\; INFO_1(__VA_ARGS__),\; INFO_0(__VA_ARGS__)); ```. I hate (and love) so much these macro trick (template wizard are welcome for a better solution)... ; but with this macro we can now write:; ```cpp; msg_info() << ""This is sended with an automatic 'this' parameter' provided as emitter;; msg_info(this) << ""This is sended with an explicit BaseObject provided as emitter "" ; ; msg_info(""SomeSPecifcSource"") << ""This is sended with a string as emitter"";; ```; which look perfect to me. . The problem is that this solution is not portable because it uses the ## GCC extension. ; Any idea on how to make a portable solution ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957
https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957:885,Modifiability,portab,portable,885,"@thomas-lemaire After some digging into internet I found a non-portable solution to support the 'non this' version. . ```cpp ; #define INFO_0() ldmsg_info(this); #define INFO_1(A) oldmsg_info(A); #define INFO_X(x, A, FUNC, ...) FUNC; #define msg_info(...) INFO_X(, \; ##__VA_ARGS__,\; INFO_1(__VA_ARGS__),\; INFO_0(__VA_ARGS__)); ```. I hate (and love) so much these macro trick (template wizard are welcome for a better solution)... ; but with this macro we can now write:; ```cpp; msg_info() << ""This is sended with an automatic 'this' parameter' provided as emitter;; msg_info(this) << ""This is sended with an explicit BaseObject provided as emitter "" ; ; msg_info(""SomeSPecifcSource"") << ""This is sended with a string as emitter"";; ```; which look perfect to me. . The problem is that this solution is not portable because it uses the ## GCC extension. ; Any idea on how to make a portable solution ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957
https://github.com/sofa-framework/sofa/pull/161#issuecomment-278254440:24,Energy Efficiency,green,green,24,"The checklist is almost green, the issues on windows7 are not related to this PR; I merge it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-278254440
https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:641,Integrability,Depend,Depending,641,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466
https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:577,Modifiability,portab,portable,577,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466
https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:1188,Performance,load,loading,1188,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466
https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:283,Safety,Unsafe,Unsafe,283,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466
https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:568,Safety,safe,safe,568,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466
https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:1273,Safety,safe,safe,1273,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466
https://github.com/sofa-framework/sofa/pull/161#issuecomment-281657903:24,Usability,feedback,feedback,24,"@JeremieA thank for the feedback, . A closed pull-request is probably not the best location to rise this kind of discussion. Why not creating a new issue dedicated to this topic ? Something like ""Suggestion to cleaning & unifying the way we handle 'locale'"" would be nice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281657903
https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:766,Availability,mainten,maintenance,766,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098
https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:604,Performance,perform,performance,604,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098
https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:862,Usability,usab,usable,862,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098
https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:874,Usability,simpl,simpler,874,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098
https://github.com/sofa-framework/sofa/issues/162#issuecomment-302155571:11,Testability,test,tests,11,"I did some tests with and without the code in the reinit of the mechanicalObject, appently it only change the value of the Data P0 but the result is the same (see pic right is without the code and left with); Thus I'm going to just remove the code. ![screenshot from 2017-05-17 19-01-03](https://cloud.githubusercontent.com/assets/21199245/26166261/3e1ebe42-3b33-11e7-83e2-e056ad7a3e56.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-302155571
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067:77,Availability,error,error,77,"Hi erik,. You are totally right, . As far as i know there is no well defined error management pattern on sofa. Without using exceptions or changing function signature my current approch is, for each detected error, to emit an error messages with the msg_error() macro and set the componentState to invalid. Then in each function that needs a valid object...check it and exit if it is not.; Not perfect and rather invasive but at least the component does not crash sofa anymore.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067:208,Availability,error,error,208,"Hi erik,. You are totally right, . As far as i know there is no well defined error management pattern on sofa. Without using exceptions or changing function signature my current approch is, for each detected error, to emit an error messages with the msg_error() macro and set the componentState to invalid. Then in each function that needs a valid object...check it and exit if it is not.; Not perfect and rather invasive but at least the component does not crash sofa anymore.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067:226,Availability,error,error,226,"Hi erik,. You are totally right, . As far as i know there is no well defined error management pattern on sofa. Without using exceptions or changing function signature my current approch is, for each detected error, to emit an error messages with the msg_error() macro and set the componentState to invalid. Then in each function that needs a valid object...check it and exit if it is not.; Not perfect and rather invasive but at least the component does not crash sofa anymore.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067:232,Integrability,message,messages,232,"Hi erik,. You are totally right, . As far as i know there is no well defined error management pattern on sofa. Without using exceptions or changing function signature my current approch is, for each detected error, to emit an error messages with the msg_error() macro and set the componentState to invalid. Then in each function that needs a valid object...check it and exit if it is not.; Not perfect and rather invasive but at least the component does not crash sofa anymore.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067:199,Safety,detect,detected,199,"Hi erik,. You are totally right, . As far as i know there is no well defined error management pattern on sofa. Without using exceptions or changing function signature my current approch is, for each detected error, to emit an error messages with the msg_error() macro and set the componentState to invalid. Then in each function that needs a valid object...check it and exit if it is not.; Not perfect and rather invasive but at least the component does not crash sofa anymore.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:750,Availability,error,error,750,"A more detail approach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous excep",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1549,Availability,error,error,1549,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1564,Availability,Error,Error,1564,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1580,Availability,failure,failure,1580,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1622,Availability,error,error,1622,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1695,Availability,failure,failure,1695,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:521,Integrability,message,message,521,"A more detail approach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous excep",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:756,Integrability,message,message,756,"A more detail approach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous excep",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1555,Integrability,Message,Message,1555,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1628,Integrability,message,message,1628,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1639,Integrability,Message,MessageAsTestFailure,1639,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1668,Integrability,Message,Message,1668,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1919,Integrability,Message,MessageAsTestFailure,1919,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1575,Testability,test,test,1575,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1690,Testability,test,test,1690,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278902204:125,Safety,avoid,avoid,125,thanks for the examples. I like the solution of sending warning if value are not possible and set to default one. This would avoid chain reaction in the graph.; I will do that for the grid. Do you know it the ComponentState::Invalid is used in the simulation graph? checked by visitor?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278902204
https://github.com/sofa-framework/sofa/issues/163#issuecomment-278903426:154,Testability,assert,assert,154,@epernod for sure ComponentState is not used in the simulation graph (maybe it should...).; ; But even if it was the case we would still need at least an assert at the entry of each functions in case the caller is not respecting the callee's precondition of being in a valid state.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278903426
https://github.com/sofa-framework/sofa/issues/163#issuecomment-293814344:40,Testability,test,test,40,"yes, that was what I mean by moving the test in the FEM.; No problem to have regularGrid in 1D, but this won't be possible for sphere and cylindricalGrid",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-293814344
https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946:104,Availability,error,error,104,"Could someone give me a hint on what is the problem... @guparan or @damienmarchal maybe .; Looking for ""error"" in the full log give me this:; `..\SofaKernel\framework\sofa\core\..\..\sofa/defaulttype/DataTypeInfo.h(757) : fatal error C1060: compiler is out of heap space; c1xx : fatal error C1063: INTERNAL COMPILER ERROR`. Not sure if this is really the error that breaks the compile and if it is related to my modifications or to the VM used for the build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946
https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946:228,Availability,error,error,228,"Could someone give me a hint on what is the problem... @guparan or @damienmarchal maybe .; Looking for ""error"" in the full log give me this:; `..\SofaKernel\framework\sofa\core\..\..\sofa/defaulttype/DataTypeInfo.h(757) : fatal error C1060: compiler is out of heap space; c1xx : fatal error C1063: INTERNAL COMPILER ERROR`. Not sure if this is really the error that breaks the compile and if it is related to my modifications or to the VM used for the build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946
https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946:285,Availability,error,error,285,"Could someone give me a hint on what is the problem... @guparan or @damienmarchal maybe .; Looking for ""error"" in the full log give me this:; `..\SofaKernel\framework\sofa\core\..\..\sofa/defaulttype/DataTypeInfo.h(757) : fatal error C1060: compiler is out of heap space; c1xx : fatal error C1063: INTERNAL COMPILER ERROR`. Not sure if this is really the error that breaks the compile and if it is related to my modifications or to the VM used for the build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946
https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946:316,Availability,ERROR,ERROR,316,"Could someone give me a hint on what is the problem... @guparan or @damienmarchal maybe .; Looking for ""error"" in the full log give me this:; `..\SofaKernel\framework\sofa\core\..\..\sofa/defaulttype/DataTypeInfo.h(757) : fatal error C1060: compiler is out of heap space; c1xx : fatal error C1063: INTERNAL COMPILER ERROR`. Not sure if this is really the error that breaks the compile and if it is related to my modifications or to the VM used for the build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946
https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946:355,Availability,error,error,355,"Could someone give me a hint on what is the problem... @guparan or @damienmarchal maybe .; Looking for ""error"" in the full log give me this:; `..\SofaKernel\framework\sofa\core\..\..\sofa/defaulttype/DataTypeInfo.h(757) : fatal error C1060: compiler is out of heap space; c1xx : fatal error C1063: INTERNAL COMPILER ERROR`. Not sure if this is really the error that breaks the compile and if it is related to my modifications or to the VM used for the build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946
https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946:123,Testability,log,log,123,"Could someone give me a hint on what is the problem... @guparan or @damienmarchal maybe .; Looking for ""error"" in the full log give me this:; `..\SofaKernel\framework\sofa\core\..\..\sofa/defaulttype/DataTypeInfo.h(757) : fatal error C1060: compiler is out of heap space; c1xx : fatal error C1063: INTERNAL COMPILER ERROR`. Not sure if this is really the error that breaks the compile and if it is related to my modifications or to the VM used for the build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946
https://github.com/sofa-framework/sofa/pull/164#issuecomment-284359668:194,Energy Efficiency,consumption,consumption,194,"@epernod Sorry for that I'm quite sure this is not related to your PR. . EDIT: This week end we were upgrading all windows machine to faster ones. The problem you saw was specific to the memory consumption of vs2013 which, at certain moment larger than the allocated 12GB. This problem problem was solved by adding a larger virtual memory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284359668
https://github.com/sofa-framework/sofa/pull/164#issuecomment-284359668:257,Energy Efficiency,allocate,allocated,257,"@epernod Sorry for that I'm quite sure this is not related to your PR. . EDIT: This week end we were upgrading all windows machine to faster ones. The problem you saw was specific to the memory consumption of vs2013 which, at certain moment larger than the allocated 12GB. This problem problem was solved by adding a larger virtual memory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284359668
https://github.com/sofa-framework/sofa/pull/165#issuecomment-278901704:53,Availability,fault,fault,53,@matthieu-nesme ; Any idea why there is segmentation fault in ubuntu (which is not in the sofa/master) ; https://www.sofa-framework.org/dash/?branch=pr/sofapython_tp_as_mapping,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165#issuecomment-278901704
https://github.com/sofa-framework/sofa/pull/165#issuecomment-278911300:115,Testability,test,test,115,"@damienmarchal no idea, but it cannot come from this PR as it only defines macros w/o using them.; Is the crashing test based on random parameters?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165#issuecomment-278911300
https://github.com/sofa-framework/sofa/pull/165#issuecomment-278916519:457,Testability,test,test,457,"I don't know...it seems to be on ; CylinderGridTopology_test.cylinderGridCreation. Which are modified recently by this PR https://github.com/sofa-framework/sofa/pull/133 this seems to be not related to your request. @epernod any idea ? . EDIT: I found the problem... this is not PR133. It is in fact related to the fact is we are re-using the same build directory to compile all the PR and that this directory is not cleaned. This morning PR164 added a new test, then PR165 compiled, and execute every thing bin/*_test. But the added test was compiled against a different version of the sofa libraries resulting in crash. I fixed the CI so everything should back to the normal (or will severely crash because I edited the script of the running CI;))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165#issuecomment-278916519
https://github.com/sofa-framework/sofa/pull/165#issuecomment-278916519:534,Testability,test,test,534,"I don't know...it seems to be on ; CylinderGridTopology_test.cylinderGridCreation. Which are modified recently by this PR https://github.com/sofa-framework/sofa/pull/133 this seems to be not related to your request. @epernod any idea ? . EDIT: I found the problem... this is not PR133. It is in fact related to the fact is we are re-using the same build directory to compile all the PR and that this directory is not cleaned. This morning PR164 added a new test, then PR165 compiled, and execute every thing bin/*_test. But the added test was compiled against a different version of the sofa libraries resulting in crash. I fixed the CI so everything should back to the normal (or will severely crash because I edited the script of the running CI;))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165#issuecomment-278916519
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279477705:5,Testability,test,tested,5,"Just tested it, fix indeed the issue",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279477705
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279689308:150,Usability,feedback,feedback,150,"@hugtalbot unless it is a very important fix, please don't forget to wait a 1 week quarantaine before merging to give an oportunity to anyone to give feedback :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279689308
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279733338:182,Performance,load,loaded,182,"In that case, why bother with manual init/cleanup? Where is it done? If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. What does guarantee that libs are loaded in the right order? Maybe it is the case, but I am not convinced. (e.g. I guess SofaSimulationCommon must be initialized before SofaSimulationTree).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279733338
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:521,Integrability,depend,dependencies,521,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:443,Performance,load,loaded,443,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:510,Performance,load,load,510,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:562,Safety,detect,detection,562,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:107,Usability,feedback,feedback,107,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:549,Usability,simpl,simple,549,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279753068:78,Safety,safe,safer,78,"@damienmarchal no problem as far as I'm concerned, but that would probably be safer to revert if possible until we hear more from others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279753068
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:744,Availability,reliab,reliable,744,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:354,Modifiability,variab,variables,354,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:2539,Modifiability,plugin,plugin,2539," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:1796,Performance,load,loaded,1796," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:2284,Safety,safe,safeguard,2284," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:161,Usability,simpl,simpler,161,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:1969,Usability,simpl,simply,1969," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:353,Availability,reliab,reliable,353,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:1614,Availability,error,error-prone,1614,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:1897,Integrability,Message,MessageDispatcher,1897,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:677,Modifiability,variab,variable,677,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:928,Modifiability,variab,variables,928,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:839,Performance,load,loaded,839,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:966,Safety,safe,safe,966,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:1589,Safety,safe,safe,1589,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:38,Usability,feedback,feedback,38,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:95,Integrability,depend,dependencies,95,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:414,Integrability,depend,depending,414,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:515,Integrability,depend,dependencies,515,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:619,Integrability,message,message,619,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:146,Safety,safe,safeguard,146,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:627,Testability,log,logger,627,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:907,Testability,test,tests,907,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280284346:176,Modifiability,variab,variables,176,"I've had another look at the code, and I've found:; - All `init` functions are trivial, except `helper::init` which calls `Console::init()` which *does* involve other `static` variables in `Console`; - All `init` functions happen in dlls which are linked in the `runSofa` binary (so they are not `dlopen`-ed on runtime as I thought they were). Based on this, my suggestion is to get rid of all `init/cleanup` functions, and put console data behind a 'nifty counter' to make sure `static` initialization and finalization is done correctly and automatically.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280284346
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:488,Modifiability,variab,variable,488,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:913,Modifiability,plugin,plugin,913,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:960,Modifiability,plugin,plugin,960,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:1052,Modifiability,plugin,plugin,1052,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:1137,Modifiability,plugin,plugin,1137,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:664,Performance,perform,performed,664,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:894,Performance,load,loading,894,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:1147,Performance,load,loaded,1147,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:1309,Performance,perform,performed,1309,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280644060:49,Performance,perform,perform,49,But is there something wrong about using RAII to perform the init automatically?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280644060
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280666784:986,Safety,safe,safely,986,"Nothing wrong as long as the main executable references at least one symbol from each of the dlls everything should be fine. . Really the right way to do it would be to have all library initialization behind a nifty counter like this:. `initComponentGeneral.h`:. ```c++. static struct SOFA_COMPONENT_GENERAL_API SofaComponentGeneral {; SofaComponentGeneral();; ~SofaComponentGeneral();; } SofaComponentGeneral;. ```. `initComponentGeneral.cpp`:. ```c++; static int nifty;. SofaComponentGeneral::SofaComponentGeneral() {; if(nifty++ == 0) {; // init goes here; std::clog << ""SofaComponentGeneral init"" << std::endl;; }; }. SofaComponentGeneral::~SofaComponentGeneral() {; if(--nifty == 0) {; // cleanup goes here; std::clog << ""SofaComponentGeneral cleanup"" << std::endl; ; }; }; ```. It has roughly the same code size compared to existing `init/isInitialized/cleanup/isCleanedUp`, is fully automatic as long as the header is included from the main executable, and initializes/finalizes safely.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280666784
https://github.com/sofa-framework/sofa/pull/169#issuecomment-279646432:1139,Deployability,update,updates,1139,"On 14/02/2017 09:29, erik pernod wrote:; >; > closed?; >; unmerged...because it is minor and I have no time to understand why it ; does not compile... I will open it again one day...; But if you are willing to you can make it work in the meantime :). > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/169#issuecomment-279639584>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AMDyEmabTubGf2uk8Mg_N_ufzjqkfcLWks5rcWX-gaJpZM4L9dhW>.; >; > {""api_version"":""1.0"",""publisher"":{""api_key"":""05dde50f1d1a384dd78767c55493e4bb"",""name"":""GitHub""},""entity"":{""external_key"":""github/sofa-framework/sofa"",""title"":""sofa-framework/sofa"",""subtitle"":""GitHub ; > repository"",""main_image_url"":""https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png"",""avatar_image_url"":""https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png"",""action"":{""name"":""Open ; > in ; > GitHub"",""url"":""https://github.com/sofa-framework/sofa""}},""updates"":{""snippets"":[{""icon"":""PERSON"",""message"":""@epernod ; > in #169: closed?""}],""action"":{""name"":""View Pull ; > Request"",""url"":""https://github.com/sofa-framework/sofa/pull/169#issuecomment-279639584""}}}",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/169#issuecomment-279646432
https://github.com/sofa-framework/sofa/pull/169#issuecomment-279646432:1179,Integrability,message,message,1179,"On 14/02/2017 09:29, erik pernod wrote:; >; > closed?; >; unmerged...because it is minor and I have no time to understand why it ; does not compile... I will open it again one day...; But if you are willing to you can make it work in the meantime :). > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/169#issuecomment-279639584>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AMDyEmabTubGf2uk8Mg_N_ufzjqkfcLWks5rcWX-gaJpZM4L9dhW>.; >; > {""api_version"":""1.0"",""publisher"":{""api_key"":""05dde50f1d1a384dd78767c55493e4bb"",""name"":""GitHub""},""entity"":{""external_key"":""github/sofa-framework/sofa"",""title"":""sofa-framework/sofa"",""subtitle"":""GitHub ; > repository"",""main_image_url"":""https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png"",""avatar_image_url"":""https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png"",""action"":{""name"":""Open ; > in ; > GitHub"",""url"":""https://github.com/sofa-framework/sofa""}},""updates"":{""snippets"":[{""icon"":""PERSON"",""message"":""@epernod ; > in #169: closed?""}],""action"":{""name"":""View Pull ; > Request"",""url"":""https://github.com/sofa-framework/sofa/pull/169#issuecomment-279639584""}}}",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/169#issuecomment-279646432
https://github.com/sofa-framework/sofa/pull/170#issuecomment-283982065:133,Deployability,patch,patch,133,You are right that the spheres are too dark ; I forgot to add the ambient component in the final color computation ; I will submit a patch right away.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170#issuecomment-283982065
https://github.com/sofa-framework/sofa/pull/171#issuecomment-283292780:200,Availability,down,download,200,"- There still is a dubious `else if (typeinfo->ValidInfo())` in binding_data.; - DataFileName should be handled as its own type.; - how not to push regression test results? so everyone do not have to download it. If I well remember this files are created automatically the first time the test is launched, and then used. Is it not enough?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283292780
https://github.com/sofa-framework/sofa/pull/171#issuecomment-283292780:159,Testability,test,test,159,"- There still is a dubious `else if (typeinfo->ValidInfo())` in binding_data.; - DataFileName should be handled as its own type.; - how not to push regression test results? so everyone do not have to download it. If I well remember this files are created automatically the first time the test is launched, and then used. Is it not enough?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283292780
https://github.com/sofa-framework/sofa/pull/171#issuecomment-283292780:288,Testability,test,test,288,"- There still is a dubious `else if (typeinfo->ValidInfo())` in binding_data.; - DataFileName should be handled as its own type.; - how not to push regression test results? so everyone do not have to download it. If I well remember this files are created automatically the first time the test is launched, and then used. Is it not enough?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283292780
https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672:242,Modifiability,plugin,plugins,242,"The remaining `else if (typeinfo->ValidInfo())` is now reverted. About the regression test results, we needed a reference (diff base) for each example we wanted to test. We chose to run regression tests on these examples :; ```; applications/plugins/SofaTest/SofaTest_test/regression/gravity.scn; examples/Components/collision/FFDDistanceGridCollisionModel.scn; examples/Components/collision/RuleBasedContactManager.scn; examples/Components/constraint/BilateralInteractionConstraint.scn; examples/Components/constraint/FixedConstraint.scn; examples/Components/constraint/FrictionContact.scn; examples/Components/forcefield/BeamFEMForceField.scn; examples/Components/forcefield/FastTriangularBendingSprings.scn; examples/Components/forcefield/TriangularFEMForceFieldOptim.scn; examples/Components/interactionforcefield/InteractionEllipsoidForceField.scn; examples/Components/topology/Mesh2PointTopologicalMapping.scn; examples/Demos/caduceus.scn; ```; We can't use regression tests without these reference files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672
https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672:86,Testability,test,test,86,"The remaining `else if (typeinfo->ValidInfo())` is now reverted. About the regression test results, we needed a reference (diff base) for each example we wanted to test. We chose to run regression tests on these examples :; ```; applications/plugins/SofaTest/SofaTest_test/regression/gravity.scn; examples/Components/collision/FFDDistanceGridCollisionModel.scn; examples/Components/collision/RuleBasedContactManager.scn; examples/Components/constraint/BilateralInteractionConstraint.scn; examples/Components/constraint/FixedConstraint.scn; examples/Components/constraint/FrictionContact.scn; examples/Components/forcefield/BeamFEMForceField.scn; examples/Components/forcefield/FastTriangularBendingSprings.scn; examples/Components/forcefield/TriangularFEMForceFieldOptim.scn; examples/Components/interactionforcefield/InteractionEllipsoidForceField.scn; examples/Components/topology/Mesh2PointTopologicalMapping.scn; examples/Demos/caduceus.scn; ```; We can't use regression tests without these reference files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672
https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672:164,Testability,test,test,164,"The remaining `else if (typeinfo->ValidInfo())` is now reverted. About the regression test results, we needed a reference (diff base) for each example we wanted to test. We chose to run regression tests on these examples :; ```; applications/plugins/SofaTest/SofaTest_test/regression/gravity.scn; examples/Components/collision/FFDDistanceGridCollisionModel.scn; examples/Components/collision/RuleBasedContactManager.scn; examples/Components/constraint/BilateralInteractionConstraint.scn; examples/Components/constraint/FixedConstraint.scn; examples/Components/constraint/FrictionContact.scn; examples/Components/forcefield/BeamFEMForceField.scn; examples/Components/forcefield/FastTriangularBendingSprings.scn; examples/Components/forcefield/TriangularFEMForceFieldOptim.scn; examples/Components/interactionforcefield/InteractionEllipsoidForceField.scn; examples/Components/topology/Mesh2PointTopologicalMapping.scn; examples/Demos/caduceus.scn; ```; We can't use regression tests without these reference files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672
https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672:197,Testability,test,tests,197,"The remaining `else if (typeinfo->ValidInfo())` is now reverted. About the regression test results, we needed a reference (diff base) for each example we wanted to test. We chose to run regression tests on these examples :; ```; applications/plugins/SofaTest/SofaTest_test/regression/gravity.scn; examples/Components/collision/FFDDistanceGridCollisionModel.scn; examples/Components/collision/RuleBasedContactManager.scn; examples/Components/constraint/BilateralInteractionConstraint.scn; examples/Components/constraint/FixedConstraint.scn; examples/Components/constraint/FrictionContact.scn; examples/Components/forcefield/BeamFEMForceField.scn; examples/Components/forcefield/FastTriangularBendingSprings.scn; examples/Components/forcefield/TriangularFEMForceFieldOptim.scn; examples/Components/interactionforcefield/InteractionEllipsoidForceField.scn; examples/Components/topology/Mesh2PointTopologicalMapping.scn; examples/Demos/caduceus.scn; ```; We can't use regression tests without these reference files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672
https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672:975,Testability,test,tests,975,"The remaining `else if (typeinfo->ValidInfo())` is now reverted. About the regression test results, we needed a reference (diff base) for each example we wanted to test. We chose to run regression tests on these examples :; ```; applications/plugins/SofaTest/SofaTest_test/regression/gravity.scn; examples/Components/collision/FFDDistanceGridCollisionModel.scn; examples/Components/collision/RuleBasedContactManager.scn; examples/Components/constraint/BilateralInteractionConstraint.scn; examples/Components/constraint/FixedConstraint.scn; examples/Components/constraint/FrictionContact.scn; examples/Components/forcefield/BeamFEMForceField.scn; examples/Components/forcefield/FastTriangularBendingSprings.scn; examples/Components/forcefield/TriangularFEMForceFieldOptim.scn; examples/Components/interactionforcefield/InteractionEllipsoidForceField.scn; examples/Components/topology/Mesh2PointTopologicalMapping.scn; examples/Demos/caduceus.scn; ```; We can't use regression tests without these reference files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672
https://github.com/sofa-framework/sofa/pull/171#issuecomment-285009182:91,Testability,test,tests,91,I just implemented DataFileName binding. This PR could be merged as soon as the regression tests are moved somewhere else (the idea is to create a new git containing all regression tests with associated scenes and data).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-285009182
https://github.com/sofa-framework/sofa/pull/171#issuecomment-285009182:181,Testability,test,tests,181,I just implemented DataFileName binding. This PR could be merged as soon as the regression tests are moved somewhere else (the idea is to create a new git containing all regression tests with associated scenes and data).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-285009182
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:778,Integrability,message,message,778,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:101,Safety,avoid,avoided,101,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:410,Security,expose,exposed,410,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:11,Usability,simpl,simplicity,11,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:103,Integrability,message,message,103,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:624,Integrability,message,message,624,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:26,Usability,simpl,simplicity,26,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:398,Integrability,message,message,398,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:463,Integrability,message,message,463,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:539,Integrability,message,message,539,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:620,Integrability,message,message,620,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:690,Integrability,message,message,690,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:771,Integrability,message,message,771,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:852,Integrability,message,message,852,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:927,Integrability,message,message,927,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:1008,Integrability,message,message,1008,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:41,Testability,test,test,41,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:179,Testability,test,tested,179,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:1341,Testability,test,test,1341,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351
https://github.com/sofa-framework/sofa/pull/182#issuecomment-280387227:334,Usability,guid,guide,334,"Hi @ewpostek . Thank you for getting involved in the SOFA community!; Unfortunately, this pull request is not well formatted. It is a merge of our master on our v16.08 and does not contain any commit from you. ; I think that what you wanted to do was to propose a change on our master branch. I invite you to **read [our CONTRIBUTING guide](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md)** and create a new pull request when you are ready.; If you have questions, do not hesitate to reply here. For now, I close this one (discussion is still possible). Cheers,; Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/182#issuecomment-280387227
https://github.com/sofa-framework/sofa/issues/183#issuecomment-281681138:204,Security,access,accessible,204,"This problem is because you are launching runSofa from the command line.; The ""normal"" way to solve it would be to launch from a .app application (so-called bundle). In that case, the menubar is directly accessible. ; I already searched for an other solution, but apparently that is because of MacOS itself:; https://github.com/robotology/yarp/issues/457; (I cannot find the bug report on Qt...). http://www.alecjacobson.com/weblog/?p=3910; This guy is suggesting to call an apple script to do a quick alt-tab.....",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/183#issuecomment-281681138
https://github.com/sofa-framework/sofa/issues/183#issuecomment-298208141:1063,Deployability,patch,patch,1063,"Another way to fix this could be by disabling the native menu bar and use the Qt one. That would also have the benefit of having the same menu bar for every version. Here is one way to do it:. ```; diff --git a/applications/sofa/gui/qt/RealGUI.cpp b/applications/sofa/gui/qt/RealGUI.cpp; index b6546a8..efb29c5 100644; --- a/applications/sofa/gui/qt/RealGUI.cpp; +++ b/applications/sofa/gui/qt/RealGUI.cpp; @@ -221,6 +221,7 @@ void RealGUI::InitApplication( RealGUI* _gui); QString pathIcon=(sofa::helper::system::DataRepository.getFirstPath() + std::string( ""/icons/SOFA.png"" )).c_str();. application->setWindowIcon(QIcon(pathIcon));; + _gui->menubar->setNativeMenuBar(false);. // show the gui; _gui->show(); // adding extra line in the console?; ```. This works perfectly on my mac. The menu bar will be directly on the Sofa's interface like it would with another OS. <img width=""1095"" alt=""screen shot 2017-04-29 at 11 09 38 pm"" src=""https://cloud.githubusercontent.com/assets/6951981/25561053/0eb91f68-2d31-11e7-975b-d80fcf977a9a.png"">. Edit : I can add this patch as a pull request if you want to go forward with this solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/183#issuecomment-298208141
https://github.com/sofa-framework/sofa/issues/183#issuecomment-298208141:829,Integrability,interface,interface,829,"Another way to fix this could be by disabling the native menu bar and use the Qt one. That would also have the benefit of having the same menu bar for every version. Here is one way to do it:. ```; diff --git a/applications/sofa/gui/qt/RealGUI.cpp b/applications/sofa/gui/qt/RealGUI.cpp; index b6546a8..efb29c5 100644; --- a/applications/sofa/gui/qt/RealGUI.cpp; +++ b/applications/sofa/gui/qt/RealGUI.cpp; @@ -221,6 +221,7 @@ void RealGUI::InitApplication( RealGUI* _gui); QString pathIcon=(sofa::helper::system::DataRepository.getFirstPath() + std::string( ""/icons/SOFA.png"" )).c_str();. application->setWindowIcon(QIcon(pathIcon));; + _gui->menubar->setNativeMenuBar(false);. // show the gui; _gui->show(); // adding extra line in the console?; ```. This works perfectly on my mac. The menu bar will be directly on the Sofa's interface like it would with another OS. <img width=""1095"" alt=""screen shot 2017-04-29 at 11 09 38 pm"" src=""https://cloud.githubusercontent.com/assets/6951981/25561053/0eb91f68-2d31-11e7-975b-d80fcf977a9a.png"">. Edit : I can add this patch as a pull request if you want to go forward with this solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/183#issuecomment-298208141
https://github.com/sofa-framework/sofa/pull/185#issuecomment-283614108:109,Availability,error,error,109,"I understand why VS2013 does not compile (it does not support `constexpr`); But as for VS2015 ????, the GLEW error seems unrelated.... (I am compiling on VS2015 Update 1 64b with no problem)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-283614108
https://github.com/sofa-framework/sofa/pull/185#issuecomment-283614108:161,Deployability,Update,Update,161,"I understand why VS2013 does not compile (it does not support `constexpr`); But as for VS2015 ????, the GLEW error seems unrelated.... (I am compiling on VS2015 Update 1 64b with no problem)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-283614108
https://github.com/sofa-framework/sofa/pull/185#issuecomment-284464288:4,Testability,test,test,4,The test reading a png file is crashing unexpectedly on Windows ; investigating....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-284464288
https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:1125,Deployability,release,release,1125,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546
https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:1143,Deployability,configurat,configurations,1143,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546
https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:51,Integrability,depend,dependencies,51,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546
https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:1143,Modifiability,config,configurations,1143,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546
https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:1193,Performance,load,load,1193,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546
https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:444,Security,access,access,444,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546
https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146:27,Deployability,update,updated,27,"Dependencies packages were updated, we are testing it with standard builds.; And then we will launch new checks on this PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146
https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146:0,Integrability,Depend,Dependencies,0,"Dependencies packages were updated, we are testing it with standard builds.; And then we will launch new checks on this PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146
https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146:43,Testability,test,testing,43,"Dependencies packages were updated, we are testing it with standard builds.; And then we will launch new checks on this PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146
https://github.com/sofa-framework/sofa/pull/185#issuecomment-289725047:0,Testability,Test,Tests,0,Tests are here:; - [VS2013_options_amd64](https://ci.inria.fr/sofa-ci/job/TEST_new-dependencies_windows7_VS-2013/1/); - [VS2015_options_amd64](https://ci.inria.fr/sofa-ci/job/TEST_new-dependencies_windows7_VS-2015/3/),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289725047
https://github.com/sofa-framework/sofa/pull/185#issuecomment-292187023:17,Testability,test,tests,17,"Still not ready, tests are failing. This is weird because tests are OK on my computer, at least for VS2015. (tried 64 and 32 bits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292187023
https://github.com/sofa-framework/sofa/pull/185#issuecomment-292187023:58,Testability,test,tests,58,"Still not ready, tests are failing. This is weird because tests are OK on my computer, at least for VS2015. (tried 64 and 32 bits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292187023
https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317:2,Deployability,update,updated,2,I updated (again) the CI jobs to ensure new dependency packs are installed.; I also launched a rebuild for Windows last builds.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317
https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317:65,Deployability,install,installed,65,I updated (again) the CI jobs to ensure new dependency packs are installed.; I also launched a rebuild for Windows last builds.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317
https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317:44,Integrability,depend,dependency,44,I updated (again) the CI jobs to ensure new dependency packs are installed.; I also launched a rebuild for Windows last builds.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317
https://github.com/sofa-framework/sofa/pull/185#issuecomment-292519112:39,Modifiability,plugin,plugin,39,@fredroy it seems a problem due to the plugin appear (VS2013).; Any idea of its origin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292519112
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:301,Deployability,update,updates,301,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:16,Energy Efficiency,schedul,schedule,16,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:57,Integrability,synchroniz,synchronize,57,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:317,Testability,test,tests,317,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:240,Usability,clear,clearly,240,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384:68,Energy Efficiency,charge,charge,68,INFO MESSAGE: ; We are now updating the VS-2015 machine that are in charge of the the PRs. ; In case you detect any problem please report.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384
https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384:5,Integrability,MESSAGE,MESSAGE,5,INFO MESSAGE: ; We are now updating the VS-2015 machine that are in charge of the the PRs. ; In case you detect any problem please report.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384
https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384:105,Safety,detect,detect,105,INFO MESSAGE: ; We are now updating the VS-2015 machine that are in charge of the the PRs. ; In case you detect any problem please report.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384
https://github.com/sofa-framework/sofa/issues/186#issuecomment-284981136:4,Deployability,upgrade,upgrade,4,The upgrade of the VS2015 machines is now done. ; Compilation time for a full build is now 3h30 (instead of 9h30). ; ; Please report any problem encountere to this list;,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-284981136
https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:304,Deployability,release,release,304,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457
https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:503,Testability,test,test,503,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457
https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:181,Usability,UX,UX,181,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457
https://github.com/sofa-framework/sofa/issues/187#issuecomment-296598943:11,Security,access,access,11,how can we access it @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-296598943
https://github.com/sofa-framework/sofa/issues/187#issuecomment-296666343:137,Security,access,access,137,The runSofa2 project developpement is taking place in https://gitlab.inria.fr/ocarre/sofaqtquick; Currently you need an inria account to access it..but this should change one day.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-296666343
https://github.com/sofa-framework/sofa/issues/187#issuecomment-298689390:41,Security,access,access,41,"> Currently you need an inria account to access it..but this should change one day. :+1: ; Yes, please, don't keep us in the dark! :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-298689390
https://github.com/sofa-framework/sofa/issues/187#issuecomment-300765854:577,Availability,down,down,577,"Hi all,. I will try to give weekly news on the runSofa2 project progress. . So let's start, ; here are runSofa2 recent merges:; - adding a new widget to handle DataFilename (which pop-up a file selector); - adding a new widget to handle Data<RGBAColor> ; - adding a new widget to handle Data<OptionsGroup> ; - add a button in the graph view to open the current scene in your prefered text editor. . recently opened merge requests:; - add the files needed to do testing of qml & sofaQtQuick component. ; - code cleaning around SofaApplication; - replace the DynamicContent drop down menu by a static one name ViewSelector. If you have time & interest please join the development effort. ; https://gitlab.inria.fr/ocarre/sofaqtquick",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-300765854
https://github.com/sofa-framework/sofa/issues/187#issuecomment-300765854:461,Testability,test,testing,461,"Hi all,. I will try to give weekly news on the runSofa2 project progress. . So let's start, ; here are runSofa2 recent merges:; - adding a new widget to handle DataFilename (which pop-up a file selector); - adding a new widget to handle Data<RGBAColor> ; - adding a new widget to handle Data<OptionsGroup> ; - add a button in the graph view to open the current scene in your prefered text editor. . recently opened merge requests:; - add the files needed to do testing of qml & sofaQtQuick component. ; - code cleaning around SofaApplication; - replace the DynamicContent drop down menu by a static one name ViewSelector. If you have time & interest please join the development effort. ; https://gitlab.inria.fr/ocarre/sofaqtquick",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-300765854
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:984,Availability,Error,Error,984,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1206,Energy Efficiency,green,green,1206,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:261,Integrability,message,messages,261,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:793,Integrability,message,messages,793,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1020,Integrability,Message,Message,1020,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1084,Integrability,message,messages,1084,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1149,Integrability,message,message,1149,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1266,Integrability,message,message,1266,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:285,Usability,simpl,simple,285,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1447,Energy Efficiency,green,green,1447,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:380,Integrability,message,message,380,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:673,Integrability,message,messages,673,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1188,Integrability,message,messages,1188,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1320,Integrability,message,messages,1320,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1389,Integrability,message,message,1389,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1509,Integrability,message,message,1509,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:369,Testability,log,logging,369,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:700,Usability,simpl,simple,700,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285606257:62,Modifiability,Flexible,Flexible,62,"I like the PR, but I am concern about the modifs in Compliant/Flexible.; I totally agree we did not use the printLog flag the right way, but the PR cannot be merged as it as it will create troubles in those plugins.; What would be the right way to keep the same semantic we wanted?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285606257
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285606257:207,Modifiability,plugin,plugins,207,"I like the PR, but I am concern about the modifs in Compliant/Flexible.; I totally agree we did not use the printLog flag the right way, but the PR cannot be merged as it as it will create troubles in those plugins.; What would be the right way to keep the same semantic we wanted?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285606257
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2308,Availability,error,error,2308,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1131,Deployability,install,installed,1131,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1749,Deployability,release,release,1749,"ow fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1152,Integrability,rout,routing,1152,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1164,Integrability,message,message,1164,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1203,Integrability,message,message,1203,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1387,Integrability,message,message,1387,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1438,Integrability,rout,routed,1438,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1545,Integrability,message,message,1545,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1624,Integrability,message,message,1624,"time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2171,Integrability,message,message,2171,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2222,Integrability,rout,routed,2222,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2252,Integrability,depend,depending,2252,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2677,Integrability,message,message,2677,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2739,Integrability,message,message,2739,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2866,Integrability,message,message,2866,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2901,Integrability,Message,MessageAsTestFailure,2901,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:174,Modifiability,Flexible,Flexible,174,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:489,Modifiability,Flexible,Flexible,489,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:847,Modifiability,Flexible,Flexible,847,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:77,Safety,avoid,avoid,77,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1428,Testability,log,logger,1428,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2212,Testability,log,logger,2212,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2840,Testability,test,tests,2840,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2948,Testability,test,test,2948,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:37,Usability,feedback,feedback,37,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285663614:28,Modifiability,Flexible,Flexible,28,"Et voilà, no more change in Flexible & Compliant. For discussion the last revision continaing them is this one.; https://github.com/sofa-framework/sofa/pull/190/commits/50d6ccd23f6f52e22518710f6ef8187294a562bd",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285663614
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283708840:153,Availability,fault,fault,153,"@damienmarchal, I am talking about these xml files:; ```; [ RUN ] BilateralInteractionConstraint_test/1.attributesTests; bash: line 1: 2202 Segmentation fault build/bin/SofaConstraint_test --gtest_output=xml:build/tests/SofaConstraint_test/report.xml 2>&1; ```. (copied from https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/262/console). But I think @guparan is working on the subject.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283708840
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283708840:214,Testability,test,tests,214,"@damienmarchal, I am talking about these xml files:; ```; [ RUN ] BilateralInteractionConstraint_test/1.attributesTests; bash: line 1: 2202 Segmentation fault build/bin/SofaConstraint_test --gtest_output=xml:build/tests/SofaConstraint_test/report.xml 2>&1; ```. (copied from https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/262/console). But I think @guparan is working on the subject.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283708840
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:126,Testability,test,tests,126,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:178,Testability,test,tests,178,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:194,Testability,test,tests,194,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:91,Usability,simpl,simply,91,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155
https://github.com/sofa-framework/sofa/pull/191#issuecomment-284087037:91,Deployability,install,installed,91,So let Guillaume finish...; But is the autodump stuff useful or not ?; If Backtrace is not installed by default how a failing test will print anything ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-284087037
https://github.com/sofa-framework/sofa/pull/191#issuecomment-284087037:126,Testability,test,test,126,So let Guillaume finish...; But is the autodump stuff useful or not ?; If Backtrace is not installed by default how a failing test will print anything ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-284087037
https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373:183,Modifiability,plugin,plugin,183,"Hi matt,. I wanted to test a very basic approach based on completely reinitializing the Python environment ; you can have a look here: https://github.com/SofaDefrost/sofa/tree/reinit-plugin. But there is problem with numpy (an probably other modules) that does not support to be reloaded and crashing sofa. But if I comment the numpy parts it is working ok. . Now the challenge is either to fix the numpy crash or to come with a different approach (probably closer to what I implemented in the livecoding module) in which we don't destroy the python environment but only reload some of the modules. D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373
https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373:22,Testability,test,test,22,"Hi matt,. I wanted to test a very basic approach based on completely reinitializing the Python environment ; you can have a look here: https://github.com/SofaDefrost/sofa/tree/reinit-plugin. But there is problem with numpy (an probably other modules) that does not support to be reloaded and crashing sofa. But if I comment the numpy parts it is working ok. . Now the challenge is either to fix the numpy crash or to come with a different approach (probably closer to what I implemented in the livecoding module) in which we don't destroy the python environment but only reload some of the modules. D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373
https://github.com/sofa-framework/sofa/issues/193#issuecomment-284732397:93,Usability,clear,clear,93,"I see, thanks to have a look at it.; Au secours encore un reinit! ;). Could we find a way to clear/empty the python environment rather than deleting and creating a new one?. I guess the numpy problem comes from PythonEnvironment.cpp:70 ^^",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284732397
https://github.com/sofa-framework/sofa/issues/193#issuecomment-284736038:187,Modifiability,plugin,plugin,187,I actually just finished a much better version that is not deleting the environment anymore... please have a look. EDIT: and it is not crashing with numpy. ; EDIT: Instead of using a per plugin reinit we could probably trigger the cleaning by calling the cleaning code when the scene is destructed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284736038
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:114,Deployability,install,install,114,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:94,Performance,load,loaded,94,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:289,Performance,cache,cache,289,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:366,Performance,load,loading,366,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:38,Usability,simpl,simple,38,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:667,Usability,clear,cleared,667,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982:46,Deployability,install,install,46,"btw, maybe one VM of each OS should do a make install to test the cpack config.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982
https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982:72,Modifiability,config,config,72,"btw, maybe one VM of each OS should do a make install to test the cpack config.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982
https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982:57,Testability,test,test,57,"btw, maybe one VM of each OS should do a make install to test the cpack config.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982
https://github.com/sofa-framework/sofa/pull/194#issuecomment-284767994:36,Deployability,install,installing,36,"Thank you Erik!; Indeed, we are not installing enough in our CI. Continuous delivery could be a nice task to start in the future (after our Jenkins 2 migration). 😉",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284767994
https://github.com/sofa-framework/sofa/pull/194#issuecomment-284767994:65,Deployability,Continuous,Continuous,65,"Thank you Erik!; Indeed, we are not installing enough in our CI. Continuous delivery could be a nice task to start in the future (after our Jenkins 2 migration). 😉",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284767994
https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:511,Availability,error,error,511,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958
https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:199,Performance,load,loader,199,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958
https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:246,Testability,test,test,246,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958
https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:686,Usability,feedback,feedback,686,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:164,Integrability,depend,depends,164,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:135,Modifiability,plugin,plugin,135,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:235,Usability,simpl,simple,235,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340:434,Deployability,install,install,434,The problem is to have the uninstall function called when we need to reload the files (when the end user application is reloading). . This can be done per PythonScriptController in the 'cleanup' code. But the cost will be repeated each time a PythonScriptController is created/destructed in the scene so I'm not a big fan of it. Neither for the explicit reinit.; ; I don't understand your suggestion. A pure python solution may be to install a kind of hook in python that count the number of PythonScriptController that is created...and count the number of cleanup...and if this cleanup count is zero...it means we need to force a plugin reload. It may work but I'm not sure this is very good because creating PythonScriptController on the fly and deleting them would force module reload. . The last solution I can think abou tis to have the PythonEnvironment inheriting from BaseObject and thus...be part of the scene (automatically added in the root) ... this PythonEnvironment will thus receive a single cleanup event and do the cleaning when it deserve to. ; This solution sound conceptually ok to me if we accept that our scene contains an automatically added object.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340:631,Modifiability,plugin,plugin,631,The problem is to have the uninstall function called when we need to reload the files (when the end user application is reloading). . This can be done per PythonScriptController in the 'cleanup' code. But the cost will be repeated each time a PythonScriptController is created/destructed in the scene so I'm not a big fan of it. Neither for the explicit reinit.; ; I don't understand your suggestion. A pure python solution may be to install a kind of hook in python that count the number of PythonScriptController that is created...and count the number of cleanup...and if this cleanup count is zero...it means we need to force a plugin reload. It may work but I'm not sure this is very good because creating PythonScriptController on the fly and deleting them would force module reload. . The last solution I can think abou tis to have the PythonEnvironment inheriting from BaseObject and thus...be part of the scene (automatically added in the root) ... this PythonEnvironment will thus receive a single cleanup event and do the cleaning when it deserve to. ; This solution sound conceptually ok to me if we accept that our scene contains an automatically added object.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340:860,Modifiability,inherit,inheriting,860,The problem is to have the uninstall function called when we need to reload the files (when the end user application is reloading). . This can be done per PythonScriptController in the 'cleanup' code. But the cost will be repeated each time a PythonScriptController is created/destructed in the scene so I'm not a big fan of it. Neither for the explicit reinit.; ; I don't understand your suggestion. A pure python solution may be to install a kind of hook in python that count the number of PythonScriptController that is created...and count the number of cleanup...and if this cleanup count is zero...it means we need to force a plugin reload. It may work but I'm not sure this is very good because creating PythonScriptController on the fly and deleting them would force module reload. . The last solution I can think abou tis to have the PythonEnvironment inheriting from BaseObject and thus...be part of the scene (automatically added in the root) ... this PythonEnvironment will thus receive a single cleanup event and do the cleaning when it deserve to. ; This solution sound conceptually ok to me if we accept that our scene contains an automatically added object.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340
https://github.com/sofa-framework/sofa/pull/198#issuecomment-286415062:253,Deployability,install,installled,253,"I added here a second version based on having a single PythonEnvironment in the scene. . This component have in charge the cleaning of python environment when the scene is about to be destroyed. . Conceptually it is quite ok, the drawback is that to be installled in the scene it have to check it does not yet existing using the getNodeObject function which is a non-constant time one. ; So compared to the 'reinit' based approach it have overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-286415062
https://github.com/sofa-framework/sofa/pull/198#issuecomment-286415062:112,Energy Efficiency,charge,charge,112,"I added here a second version based on having a single PythonEnvironment in the scene. . This component have in charge the cleaning of python environment when the scene is about to be destroyed. . Conceptually it is quite ok, the drawback is that to be installled in the scene it have to check it does not yet existing using the getNodeObject function which is a non-constant time one. ; So compared to the 'reinit' based approach it have overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-286415062
https://github.com/sofa-framework/sofa/issues/201#issuecomment-305830119:129,Modifiability,extend,extending,129,the best ref on the topic I found so far: http://arctrix.com/nas/python/gc/; besides the official doc: https://docs.python.org/2/extending/newtypes.html#supporting-cyclic-garbage-collection,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/201#issuecomment-305830119
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842:955,Energy Efficiency,efficient,efficient,955,"Hi mathieu,. The provided code force a reload of the dependencies *each* time the runFile function is called. . I see two problem with this approach: ; - there is a large 'un-needed' overhead that will be linear with the number of PythonScriptController in the scene as well as in the amount of modules to reload (the depth of import dependency graph). . - there is *possibly* memory problems here. Let's me explain, normally all PythonScriptController are binded to functions that are from the same module set (the groupe of imported modules), this is made possible because python is caching the imported modules. In the PR we flush the module set at each runFile so each PythonScriptController will be binded to its own reloaded (""private"") version of the module. . So for the moment I think that adding a single PythonEnvironment object automatically in a scene with a cleanup function to unload the module will be either conceptually cleaner and more efficient. . EDIT: What do you think about the idea of having the PythonEnvironment as an object in the scene ? I can easily code that but if you don't think it good I don't want to waste time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842:53,Integrability,depend,dependencies,53,"Hi mathieu,. The provided code force a reload of the dependencies *each* time the runFile function is called. . I see two problem with this approach: ; - there is a large 'un-needed' overhead that will be linear with the number of PythonScriptController in the scene as well as in the amount of modules to reload (the depth of import dependency graph). . - there is *possibly* memory problems here. Let's me explain, normally all PythonScriptController are binded to functions that are from the same module set (the groupe of imported modules), this is made possible because python is caching the imported modules. In the PR we flush the module set at each runFile so each PythonScriptController will be binded to its own reloaded (""private"") version of the module. . So for the moment I think that adding a single PythonEnvironment object automatically in a scene with a cleanup function to unload the module will be either conceptually cleaner and more efficient. . EDIT: What do you think about the idea of having the PythonEnvironment as an object in the scene ? I can easily code that but if you don't think it good I don't want to waste time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842:334,Integrability,depend,dependency,334,"Hi mathieu,. The provided code force a reload of the dependencies *each* time the runFile function is called. . I see two problem with this approach: ; - there is a large 'un-needed' overhead that will be linear with the number of PythonScriptController in the scene as well as in the amount of modules to reload (the depth of import dependency graph). . - there is *possibly* memory problems here. Let's me explain, normally all PythonScriptController are binded to functions that are from the same module set (the groupe of imported modules), this is made possible because python is caching the imported modules. In the PR we flush the module set at each runFile so each PythonScriptController will be binded to its own reloaded (""private"") version of the module. . So for the moment I think that adding a single PythonEnvironment object automatically in a scene with a cleanup function to unload the module will be either conceptually cleaner and more efficient. . EDIT: What do you think about the idea of having the PythonEnvironment as an object in the scene ? I can easily code that but if you don't think it good I don't want to waste time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286157262:117,Performance,load,loadSceneWithArguments,117,Indeed I have not think of pythonscriptcontrollers importing other files. But it should be easy to move this code in loadSceneWithArguments rather than in runFile.; I'll do it tomorrow.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286157262
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286227567:6,Performance,load,loadSceneWithArguments,6,Using loadSceneWithArguments only works for scene made with python. ; Maybe there exists a function in SofaPython for that task but I don't see one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286227567
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286384827:110,Usability,simpl,simply,110,You are right (once again).; I just pushed a new proposition where nothing is done in your back anymore.; You simply have to call `SofaPython.unloadModules()` manually where you want unload the modules.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286384827
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286445017:299,Availability,robust,robust,299,@matthieu-nesme ; I'm glad you are going to a per-scene approach which is really so much better than the per-script one. ; I actually commited similar code few hours ago in my initial PR :) . The auto-install of the component is more a matter of taste on which is not a big deal to me. . To be more robust I suggest you to enforce that the autoreload component ; to be added at the scene root (easier to see if it is there) and to check that only a single component can be added per scene. . EDIT: and +1 for not hooking the import anymore.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286445017
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286445017:201,Deployability,install,install,201,@matthieu-nesme ; I'm glad you are going to a per-scene approach which is really so much better than the per-script one. ; I actually commited similar code few hours ago in my initial PR :) . The auto-install of the component is more a matter of taste on which is not a big deal to me. . To be more robust I suggest you to enforce that the autoreload component ; to be added at the scene root (easier to see if it is there) and to check that only a single component can be added per scene. . EDIT: and +1 for not hooking the import anymore.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286445017
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286717459:468,Integrability,message,message,468,@matthieu-nesme ; If you really want to be able from the script to activate/de-activate the reloading... the proper way of implementing that is to make a python function that adds the <Reload> component in the scene if it does not exist. Such implementation will be safe to use for the users compared to calling the __uninstall__ stuff as the existing approach do. . In case of several calls to the doReload function from multiple python script may even return a nice message warning the user that what he is doing is 'not needed'. . EDIT: I will give this version a try in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286717459
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286717459:266,Safety,safe,safe,266,@matthieu-nesme ; If you really want to be able from the script to activate/de-activate the reloading... the proper way of implementing that is to make a python function that adds the <Reload> component in the scene if it does not exist. Such implementation will be safe to use for the users compared to calling the __uninstall__ stuff as the existing approach do. . In case of several calls to the doReload function from multiple python script may even return a nice message warning the user that what he is doing is 'not needed'. . EDIT: I will give this version a try in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286717459
https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223:89,Availability,failure,failures,89,I'm afraid this PR was merged to fast.; - windows7_VS-2013_options_amd64 has 3 more test failures; - we don't know what happens for centos_clang-3.4_options and mac_clang-3.4_options; - there is 36 new test errors for centos_clang-3.4_options on origin/master after merge,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223
https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223:207,Availability,error,errors,207,I'm afraid this PR was merged to fast.; - windows7_VS-2013_options_amd64 has 3 more test failures; - we don't know what happens for centos_clang-3.4_options and mac_clang-3.4_options; - there is 36 new test errors for centos_clang-3.4_options on origin/master after merge,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223
https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223:84,Testability,test,test,84,I'm afraid this PR was merged to fast.; - windows7_VS-2013_options_amd64 has 3 more test failures; - we don't know what happens for centos_clang-3.4_options and mac_clang-3.4_options; - there is 36 new test errors for centos_clang-3.4_options on origin/master after merge,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223
https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223:202,Testability,test,test,202,I'm afraid this PR was merged to fast.; - windows7_VS-2013_options_amd64 has 3 more test failures; - we don't know what happens for centos_clang-3.4_options and mac_clang-3.4_options; - there is 36 new test errors for centos_clang-3.4_options on origin/master after merge,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223
https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170:65,Modifiability,plugin,plugin,65,"Indeed. I understand the problem, the mechanism also unloads the plugin's modules defined in c++. This modules are added to the sofa python environment while loading the plugin, so they cannot be imported again after being unloaded. I'll fix that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170
https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170:170,Modifiability,plugin,plugin,170,"Indeed. I understand the problem, the mechanism also unloads the plugin's modules defined in c++. This modules are added to the sofa python environment while loading the plugin, so they cannot be imported again after being unloaded. I'll fix that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170
https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170:158,Performance,load,loading,158,"Indeed. I understand the problem, the mechanism also unloads the plugin's modules defined in c++. This modules are added to the sofa python environment while loading the plugin, so they cannot be imported again after being unloaded. I'll fix that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170
https://github.com/sofa-framework/sofa/pull/206#issuecomment-291868805:133,Deployability,update,update,133,"Really good cleaning.; Should not break scenes, but could eventually break components in private plugins, but they should be easy to update.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206#issuecomment-291868805
https://github.com/sofa-framework/sofa/pull/206#issuecomment-291868805:97,Modifiability,plugin,plugins,97,"Really good cleaning.; Should not break scenes, but could eventually break components in private plugins, but they should be easy to update.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206#issuecomment-291868805
https://github.com/sofa-framework/sofa/pull/206#issuecomment-297651950:162,Testability,test,tests,162,Not since one week. ; We were waiting VS-2013 to be removed. ; I just fixed the merge with master done by froy which was looking weird on OglLabel and ; add some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206#issuecomment-297651950
https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603:44,Availability,failure,failure,44,"I'm progressing... ; There is a lot of test failure but this was expected as now any warning that was not explicitely EXPECTED generates a test failure. . So it looks really fine to me. ; @epernod, @fredroy, @thomas-lemaire as you wrote tests...what do you think about the current approach ? . EDIT: OUPS this was for PR #213 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603
https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603:144,Availability,failure,failure,144,"I'm progressing... ; There is a lot of test failure but this was expected as now any warning that was not explicitely EXPECTED generates a test failure. . So it looks really fine to me. ; @epernod, @fredroy, @thomas-lemaire as you wrote tests...what do you think about the current approach ? . EDIT: OUPS this was for PR #213 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603
https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603:39,Testability,test,test,39,"I'm progressing... ; There is a lot of test failure but this was expected as now any warning that was not explicitely EXPECTED generates a test failure. . So it looks really fine to me. ; @epernod, @fredroy, @thomas-lemaire as you wrote tests...what do you think about the current approach ? . EDIT: OUPS this was for PR #213 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603
https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603:139,Testability,test,test,139,"I'm progressing... ; There is a lot of test failure but this was expected as now any warning that was not explicitely EXPECTED generates a test failure. . So it looks really fine to me. ; @epernod, @fredroy, @thomas-lemaire as you wrote tests...what do you think about the current approach ? . EDIT: OUPS this was for PR #213 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603
https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603:237,Testability,test,tests,237,"I'm progressing... ; There is a lot of test failure but this was expected as now any warning that was not explicitely EXPECTED generates a test failure. . So it looks really fine to me. ; @epernod, @fredroy, @thomas-lemaire as you wrote tests...what do you think about the current approach ? . EDIT: OUPS this was for PR #213 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603
https://github.com/sofa-framework/sofa/pull/207#issuecomment-289040858:44,Testability,test,test,44,"Waiting for the last build to complete, but test problems look fixed since last commit. OK for me to merge as soon as the mas build is ok.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207#issuecomment-289040858
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:501,Availability,Error,Error,501,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:239,Deployability,update,update,239,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:134,Integrability,message,messages,134,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:186,Integrability,Message,MessageAsTestFailure,186,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:405,Integrability,Message,MessageAsTestFailure,405,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:439,Integrability,Message,Message,439,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:460,Integrability,Message,MessageAsTestFailure,460,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:492,Integrability,Message,Message,492,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:254,Testability,test,tests,254,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:351,Testability,test,test,351,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:369,Usability,simpl,simply,369,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882:265,Availability,error,error,265,"I am not sure we want to add it manually to each test.; It would be better if it could be added automatically to any Sofa_test, as it would satisfy 99% of the tests.; It would be more convenient to have extra stuff only for the more complicated tests that raise an error on purpose.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882:49,Testability,test,test,49,"I am not sure we want to add it manually to each test.; It would be better if it could be added automatically to any Sofa_test, as it would satisfy 99% of the tests.; It would be more convenient to have extra stuff only for the more complicated tests that raise an error on purpose.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882:159,Testability,test,tests,159,"I am not sure we want to add it manually to each test.; It would be better if it could be added automatically to any Sofa_test, as it would satisfy 99% of the tests.; It would be more convenient to have extra stuff only for the more complicated tests that raise an error on purpose.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882:245,Testability,test,tests,245,"I am not sure we want to add it manually to each test.; It would be better if it could be added automatically to any Sofa_test, as it would satisfy 99% of the tests.; It would be more convenient to have extra stuff only for the more complicated tests that raise an error on purpose.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:201,Availability,error,errors,201,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:321,Availability,error,error,321,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:425,Availability,error,error,425,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:439,Availability,failure,failure,439,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:978,Availability,failure,failure,978,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1520,Availability,error,errors,1520,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1553,Availability,error,error,1553,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1120,Integrability,message,message,1120,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1576,Integrability,message,messages,1576,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:2039,Integrability,message,message,2039,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:291,Safety,avoid,avoid,291,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:300,Safety,detect,detected,300,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1396,Security,expose,expose,1396,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:66,Testability,test,test,66,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:137,Testability,test,tests,137,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:264,Testability,test,tests,264,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:434,Testability,test,test,434,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:482,Testability,test,tests,482,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:528,Testability,test,tests,528,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:698,Testability,test,test,698,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:724,Testability,test,test,724,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:814,Testability,test,tests,814,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:897,Testability,test,testing,897,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:926,Testability,test,testing,926,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:973,Testability,test,test,973,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1084,Testability,test,test,1084,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1204,Testability,test,testReport,1204,"n they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/Da",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1820,Testability,test,testReport,1820,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1946,Testability,test,test,1946,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:2180,Testability,test,testReport,2180,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:839,Usability,clear,clear,839,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:382,Availability,error,error,382,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:789,Availability,error,error,789,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:836,Availability,failure,failure,836,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1215,Availability,error,error,1215,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1223,Availability,Error,ErrorAsTestFailure,1223,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1476,Availability,failure,failures,1476,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1784,Availability,Error,Error,1784,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:572,Integrability,message,message,572,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1140,Integrability,message,message,1140,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1461,Integrability,message,message,1461,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:414,Safety,detect,detect,414,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:261,Testability,test,test,261,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:282,Testability,test,test,282,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:471,Testability,test,test,471,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:831,Testability,test,test,831,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1514,Testability,ASSERT,ASSERT,1514,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1637,Testability,test,tests,1637,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:1741,Testability,test,test,1741,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:304,Availability,error,errors,304,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:407,Availability,error,errors,407,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:434,Availability,error,error,434,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:665,Availability,Error,ErrorAsTestFailure,665,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:586,Modifiability,plugin,plugins,586,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:886,Modifiability,flexible,flexible,886,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:191,Testability,test,tests,191,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:477,Testability,test,tests,477,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:531,Testability,test,tests,531,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:573,Testability,test,tests,573,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:614,Testability,test,tests,614,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:935,Testability,test,test,935,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:1015,Usability,clear,clear,1015,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:607,Availability,failure,failure,607,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:759,Availability,failure,failure,759,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:800,Availability,failure,failure,800,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:863,Availability,failure,failures,863,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:314,Integrability,message,message,314,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:230,Testability,test,test,230,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:795,Testability,test,test,795,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:923,Testability,test,test,923,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:268,Availability,error,errors,268,"Hi matt,. I made a new version mixing you expectations and mine :) ; The implementation is probably drafty but I like the general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure wi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:823,Availability,failure,failures,823,"Hi matt,. I made a new version mixing you expectations and mine :) ; The implementation is probably drafty but I like the general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure wi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:902,Availability,Error,Error,902,"Hi matt,. I made a new version mixing you expectations and mine :) ; The implementation is probably drafty but I like the general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure wi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1129,Availability,failure,failure,1129," general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_E",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1188,Availability,failure,failure,1188," general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_E",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1245,Availability,failure,failure,1245," general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_E",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1342,Availability,Error,Error,1342,"ecified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_err",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1403,Availability,failure,failure,1403," the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEM",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1601,Availability,Error,Error,1601,"Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1664,Availability,failure,failure,1664,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1830,Availability,Error,Error,1830,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1887,Availability,failure,failure,1887,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2129,Availability,Error,Error,2129,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2188,Availability,failure,failure,2188,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2252,Availability,failure,failure,2252,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2288,Availability,Error,Error,2288,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2348,Availability,failure,failure,2348,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2423,Availability,Error,Error,2423,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2480,Availability,failure,failure,2480,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:616,Testability,Test,TestMessageHandler,616,"Hi matt,. I made a new version mixing you expectations and mine :) ; The implementation is probably drafty but I like the general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure wi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:659,Testability,log,logging,659,"Hi matt,. I made a new version mixing you expectations and mine :) ; The implementation is probably drafty but I like the general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure wi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:818,Testability,test,test,818,"Hi matt,. I made a new version mixing you expectations and mine :) ; The implementation is probably drafty but I like the general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure wi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1464,Testability,test,test,1464," the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEM",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1492,Testability,TEST,TEST,1492,"f are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1727,Testability,test,test,1727,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1987,Testability,test,test,1987,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2247,Testability,test,test,2247,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2343,Testability,test,test,2343,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:2537,Testability,test,test,2537,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288973392:136,Availability,Error,Error,136,"I did not look at the implementation, but your example sounds really good to me!; I like the scope/stacking. With `EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;` by default in Sofa_test, as you well understood ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288973392
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288973746:42,Testability,test,tests,42,"Do we want to create a new PR to fix some tests, or should we start fixing them directly in this PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288973746
https://github.com/sofa-framework/sofa/pull/213#issuecomment-290017981:62,Testability,test,tests,62,"As soon as this PR is merged, we should fix the newly failing tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290017981
https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588:133,Safety,redund,redundency,133,"Thanks @matthieu-nesme for the feedbacks and discussions. . About the implementation I agree there is some smoothing to do (there is redundency in the classes, the constructors with std::initializer are now useless as vs2013 don't like them)... But I would be happy to have that happens in a second PR as I think I can change this without touching the API :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588
https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588:31,Usability,feedback,feedbacks,31,"Thanks @matthieu-nesme for the feedbacks and discussions. . About the implementation I agree there is some smoothing to do (there is redundency in the classes, the constructors with std::initializer are now useless as vs2013 don't like them)... But I would be happy to have that happens in a second PR as I think I can change this without touching the API :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291873684:79,Testability,test,tests,79,Ok to be merged.; But should not we prepare the next PR correcting most of the tests before merging this PR?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291873684
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291900184:14,Testability,test,tests,14,Newly failing tests can be fixed in #237.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291900184
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291901215:60,Availability,failure,failure,60,Maybe warning and deprecated messages should not be seen as failure by default?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291901215
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291901215:29,Integrability,message,messages,29,Maybe warning and deprecated messages should not be seen as failure by default?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291901215
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:6,Availability,failure,failure,6,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:428,Availability,failure,failure,428,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:754,Availability,error,error,754,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:848,Deployability,update,update,848,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:183,Integrability,message,messages,183,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:760,Integrability,message,message,760,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:134,Testability,test,tests,134,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:272,Testability,test,test,272,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:454,Testability,test,test,454,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:565,Testability,test,testing,565,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:600,Testability,test,tests,600,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:685,Testability,test,test,685,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:788,Usability,clear,clear,788,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:875,Usability,clear,clear,875,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026:108,Availability,failure,failures,108,"For me there is no more color, neither gtest's or sofa's. The `Fatal` messages should also be considered as failures by default.; Can you see why it is annoying to copy default behaviors to each test? Now we have to modify every of them rather than only a the default place...; If we let deprecated and warning messages on the side for now, but we want to activate them later, it is the same story.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026:70,Integrability,message,messages,70,"For me there is no more color, neither gtest's or sofa's. The `Fatal` messages should also be considered as failures by default.; Can you see why it is annoying to copy default behaviors to each test? Now we have to modify every of them rather than only a the default place...; If we let deprecated and warning messages on the side for now, but we want to activate them later, it is the same story.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026:311,Integrability,message,messages,311,"For me there is no more color, neither gtest's or sofa's. The `Fatal` messages should also be considered as failures by default.; Can you see why it is annoying to copy default behaviors to each test? Now we have to modify every of them rather than only a the default place...; If we let deprecated and warning messages on the side for now, but we want to activate them later, it is the same story.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026:195,Testability,test,test,195,"For me there is no more color, neither gtest's or sofa's. The `Fatal` messages should also be considered as failures by default.; Can you see why it is annoying to copy default behaviors to each test? Now we have to modify every of them rather than only a the default place...; If we let deprecated and warning messages on the side for now, but we want to activate them later, it is the same story.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:564,Availability,Error,Error,564,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:839,Availability,failure,failures,839,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1092,Availability,failure,failures,1092,"ly one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1317,Availability,failure,failures,1317,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1379,Availability,failure,failures,1379,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1568,Availability,failure,failure,1568,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1792,Availability,down,down,1792,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1801,Availability,failure,failure,1801,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:2099,Availability,failure,failure,2099,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:535,Integrability,message,message,535,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1127,Integrability,message,messages,1127,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1497,Integrability,message,message,1497,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:318,Testability,test,tests,318,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:574,Testability,test,tests,574,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:737,Testability,test,test,737,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:833,Testability,test,tests,833,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1087,Testability,test,test,1087,"ly one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1311,Testability,test,tests,1311,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1350,Testability,test,test,1350,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1480,Testability,test,test,1480,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1882,Testability,test,test,1882,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:2078,Testability,test,tests,2078,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:486,Usability,clear,clear,486,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331:467,Availability,failure,failure,467,"> So... I made my best to explain why I care of explicit test but the important things to me are:; >- what do I have to change so that PR can be be merged so that I can close it and move forward ?. Only one last thing I did not get.; There are EXPECT_NOEMIT, EXPECT_EMIT, what about a EXPECT_NOTHING_I_DO_NOT_CARE?!; That would correspond to the default behavior for warnings for instance. >- do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated >?. We should at least fix some of them that are real crap, and must not test anything.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331:57,Testability,test,test,57,"> So... I made my best to explain why I care of explicit test but the important things to me are:; >- what do I have to change so that PR can be be merged so that I can close it and move forward ?. Only one last thing I did not get.; There are EXPECT_NOEMIT, EXPECT_EMIT, what about a EXPECT_NOTHING_I_DO_NOT_CARE?!; That would correspond to the default behavior for warnings for instance. >- do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated >?. We should at least fix some of them that are real crap, and must not test anything.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331:446,Testability,test,tests,446,"> So... I made my best to explain why I care of explicit test but the important things to me are:; >- what do I have to change so that PR can be be merged so that I can close it and move forward ?. Only one last thing I did not get.; There are EXPECT_NOEMIT, EXPECT_EMIT, what about a EXPECT_NOTHING_I_DO_NOT_CARE?!; That would correspond to the default behavior for warnings for instance. >- do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated >?. We should at least fix some of them that are real crap, and must not test anything.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331:570,Testability,test,test,570,"> So... I made my best to explain why I care of explicit test but the important things to me are:; >- what do I have to change so that PR can be be merged so that I can close it and move forward ?. Only one last thing I did not get.; There are EXPECT_NOEMIT, EXPECT_EMIT, what about a EXPECT_NOTHING_I_DO_NOT_CARE?!; That would correspond to the default behavior for warnings for instance. >- do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated >?. We should at least fix some of them that are real crap, and must not test anything.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331
https://github.com/sofa-framework/sofa/pull/216#issuecomment-292109219:52,Deployability,update,update,52,"@matthieu-nesme: After STC#3 discussions, could you update your review?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-292109219
https://github.com/sofa-framework/sofa/pull/216#issuecomment-293639372:5,Testability,test,tests,5,"Some tests are now failing, it has to be understood before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-293639372
https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542:12,Testability,test,tests,12,"The failing tests were mainly due to a unintended side effect that projective constraints were no longer applied at the end of Simulation::init(). To make sure similar issues were not hidden somewhere else, in the last commit I renamed the propagate visitor to make sure existing codes fail at compilation time. Fixing other codes in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. This information should be added to the changelog, but as far as I understood this needs to be done after the PR is merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542
https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542:425,Usability,simpl,simply,425,"The failing tests were mainly due to a unintended side effect that projective constraints were no longer applied at the end of Simulation::init(). To make sure similar issues were not hidden somewhere else, in the last commit I renamed the propagate visitor to make sure existing codes fail at compilation time. Fixing other codes in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. This information should be added to the changelog, but as far as I understood this needs to be done after the PR is merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542
https://github.com/sofa-framework/sofa/pull/216#issuecomment-308375664:61,Availability,failure,failures,61,"Thanks Jérémie,. The remaining failing tests are our classic failures so this PR seems ok to me. ; @guparan Can this one be set to the flag ready for merge ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308375664
https://github.com/sofa-framework/sofa/pull/216#issuecomment-308375664:39,Testability,test,tests,39,"Thanks Jérémie,. The remaining failing tests are our classic failures so this PR seems ok to me. ; @guparan Can this one be set to the flag ready for merge ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308375664
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311000014:148,Deployability,update,update,148,"Well...can someone explain briefly how this PR will affect other person's code, how will they be award something have changed and that they need to update something ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311000014
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311009550:152,Deployability,update,update,152,"@damienmarchal : what you are asking is answered in the PR description, and in my comment above, explaining that now everyone will know if they need to update their code at compile-time, and decide what to do based on what I wrote. Anything else is needed ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311009550
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:174,Deployability,integrat,integrate,174,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:689,Deployability,update,updated,689,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:174,Integrability,integrat,integrate,174,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:451,Usability,guid,guideline,451,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311019886:60,Availability,robust,robust,60,"Sorry for the dual edditing... I didn't knew github was not robust against that. . I merge the PR because I hate having PR that longs for month and we can still fix the description even when it is merged/closed. . Many thanks,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311019886
https://github.com/sofa-framework/sofa/pull/217#issuecomment-293195342:52,Modifiability,plugin,plugin,52,It seems that this PR is not building with SofaCUDA plugin.; See [ubuntu_clang-3.4_options](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.4_options/4513/) and [ubuntu_clang-3.4_options-debug](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.4_options-debug/193/) builds after merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217#issuecomment-293195342
https://github.com/sofa-framework/sofa/pull/218#issuecomment-292109276:52,Deployability,update,update,52,"@matthieu-nesme: After STC#3 discussions, could you update your review?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-292109276
https://github.com/sofa-framework/sofa/pull/218#issuecomment-292125250:13,Usability,simpl,simply,13,"I propose to simply remove the `projectForce` Data from this PR, as this debug feature is not essential, and you have it in your own fork.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-292125250
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:2094,Availability,ERROR,ERROR,2094,"nkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ####",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:2197,Availability,ERROR,ERROR,2197,"nkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ####",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:8236,Availability,error,error,8236,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:296,Modifiability,plugin,plugins,296,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:427,Modifiability,plugin,plugins,427,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:435,Modifiability,Flexible,Flexible,435,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:561,Modifiability,plugin,plugins,561,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:699,Modifiability,plugin,plugins,699,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:835,Modifiability,plugin,plugins,835,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:969,Modifiability,plugin,plugins,969,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1105,Modifiability,plugin,plugins,1105,"ts from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPy",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1152,Modifiability,Plugin,PluginManager,1152,"hon_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1174,Modifiability,plugin,plugin,1174,"hon_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1374,Modifiability,plugin,plugins,1374,"ce/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1657,Modifiability,plugin,plugins,1657,"8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('Un",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1727,Modifiability,Plugin,PluginManager,1727,"] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1749,Modifiability,plugin,plugin,1749,"] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1852,Modifiability,Plugin,PluginManager,1852,"ofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1874,Modifiability,plugin,plugin,1874,"ofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:2552,Modifiability,plugin,plugins,2552,"thon_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ########## SIG 15 - SIGTERM: a termination request was sent to the program ##########; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::dump()+0x23) [0x7f6585f9be63]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::sig(in",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1167,Performance,Load,Loaded,1167,"hon_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1742,Performance,Load,Loaded,1742,"] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1867,Performance,Load,Loaded,1867,"ofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:2971,Performance,perform,perform,2971,"is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ########## SIG 15 - SIGTERM: a termination request was sent to the program ##########; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::dump()+0x23) [0x7f6585f9be63]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::sig(int)+0x14a) [0x7f6585f9c15a]; -> /lib/x86_64-linux-gnu/libc.so.6(+0x36cb0) [0x7f6585049cb0]; -> /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x5b6b1) [0x7f658594f6b1]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::PropagateEventVisitor::processNodeTopDown(sofa::simulation::Node*)+0xec) [0x7f65882c897c]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulati",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:3118,Performance,perform,perform,3118,"is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ########## SIG 15 - SIGTERM: a termination request was sent to the program ##########; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::dump()+0x23) [0x7f6585f9be63]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::sig(int)+0x14a) [0x7f6585f9c15a]; -> /lib/x86_64-linux-gnu/libc.so.6(+0x36cb0) [0x7f6585049cb0]; -> /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x5b6b1) [0x7f658594f6b1]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::PropagateEventVisitor::processNodeTopDown(sofa::simulation::Node*)+0xec) [0x7f65882c897c]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulati",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:2844,Safety,abort,aborted,2844,"nt.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ########## SIG 15 - SIGTERM: a termination request was sent to the program ##########; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::dump()+0x23) [0x7f6585f9be63]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::sig(int)+0x14a) [0x7f6585f9c15a]; -> /lib/x86_64-linux-gnu/libc.so.6(+0x36cb0) [0x7f6585049cb0]; -> /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x5b6b1) [0x7f658594f6b1]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulat",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:2864,Safety,abort,aborted,2864,"is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ########## SIG 15 - SIGTERM: a termination request was sent to the program ##########; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::dump()+0x23) [0x7f6585f9be63]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::sig(int)+0x14a) [0x7f6585f9c15a]; -> /lib/x86_64-linux-gnu/libc.so.6(+0x36cb0) [0x7f6585049cb0]; -> /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x5b6b1) [0x7f658594f6b1]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::PropagateEventVisitor::processNodeTopDown(sofa::simulation::Node*)+0xec) [0x7f65882c897c]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulati",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:65,Testability,test,tests,65,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:105,Testability,test,tests,105,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:3177,Testability,test,test,3177,"is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ########## SIG 15 - SIGTERM: a termination request was sent to the program ##########; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::dump()+0x23) [0x7f6585f9be63]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::sig(int)+0x14a) [0x7f6585f9c15a]; -> /lib/x86_64-linux-gnu/libc.so.6(+0x36cb0) [0x7f6585049cb0]; -> /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x5b6b1) [0x7f658594f6b1]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::PropagateEventVisitor::processNodeTopDown(sofa::simulation::Node*)+0xec) [0x7f65882c897c]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulati",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:6844,Testability,Test,TestBody,6844,"/libSofaSimulationGraph.so.17.dev.0(sofa::simulation::graph::DAGNode::doExecuteVisitor(sofa::simulation::Visitor*, bool)+0x9d) [0x7f65889ce59d]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../build",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:6966,Testability,test,testing,6966,"SimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7021,Testability,test,testing,7021,"SimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7030,Testability,Test,Test,7030,"SimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7042,Testability,test,testing,7042,"SimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7051,Testability,Test,Test,7051,"SimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7064,Testability,test,testing,7064,"SimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7073,Testability,Test,Test,7073,"SimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7210,Testability,test,testing,7210,"bSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7219,Testability,Test,Test,7219,"bSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7343,Testability,test,testing,7343,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7352,Testability,Test,TestInfo,7352,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7480,Testability,test,testing,7480,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7489,Testability,Test,TestCase,7489,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7617,Testability,test,testing,7617,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7777,Testability,test,testing,7777,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:8121,Testability,test,tests,8121,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:8226,Testability,test,tests,8226,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320
https://github.com/sofa-framework/sofa/pull/218#issuecomment-338120512:4,Testability,test,test,4,"one test is failing on ubuntu (RigidLinearDeformationMappings) but this does occur on my machine.; Otherwise, ready for review !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338120512
https://github.com/sofa-framework/sofa/pull/218#issuecomment-338577782:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338577782
https://github.com/sofa-framework/sofa/pull/218#issuecomment-453789725:40,Usability,simpl,simpler,40,Let's see if we can make it cleaner and simpler!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453789725
https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814191:43,Availability,failure,failure,43,Build step 'Execute shell' marked build as failure even if the compilation ends properly.; Compiles fine on my MacOS machine.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814191
https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814208:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814208
https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814208:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814208
https://github.com/sofa-framework/sofa/pull/218#issuecomment-456727444:110,Usability,feedback,feedback,110,"@fjourdes and @ChristianDuriez I think this comes from the collaboration between you guys.; Last moment for a feedback before merge, thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-456727444
https://github.com/sofa-framework/sofa/pull/218#issuecomment-680735938:97,Testability,test,tests,97,CentOS: 15 scenes time out; MacOS: 87 crashes (time out as well) .. Let's :. [ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-680735938
https://github.com/sofa-framework/sofa/pull/219#issuecomment-297932196:48,Availability,failure,failures,48,"Hi all,. It seems there a lot of new test-scene failures since the merge of this PR. ; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/635/console. We probably need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219#issuecomment-297932196
https://github.com/sofa-framework/sofa/pull/219#issuecomment-297932196:37,Testability,test,test-scene,37,"Hi all,. It seems there a lot of new test-scene failures since the merge of this PR. ; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/635/console. We probably need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219#issuecomment-297932196
https://github.com/sofa-framework/sofa/pull/220#issuecomment-289693393:56,Deployability,update,updated,56,great news this new plugin :); Flexible will need to be updated before merging this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220#issuecomment-289693393
https://github.com/sofa-framework/sofa/pull/220#issuecomment-289693393:20,Modifiability,plugin,plugin,20,great news this new plugin :); Flexible will need to be updated before merging this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220#issuecomment-289693393
https://github.com/sofa-framework/sofa/pull/220#issuecomment-289693393:31,Modifiability,Flexible,Flexible,31,great news this new plugin :); Flexible will need to be updated before merging this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220#issuecomment-289693393
https://github.com/sofa-framework/sofa/pull/220#issuecomment-289719027:65,Deployability,update,update,65,**WARNING**: I rebased your branch. Your local copy will need an update.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220#issuecomment-289719027
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289412827:13,Testability,log,log,13,Is there any log I could use to investigate ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289412827
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063:21,Availability,fault,fault,21,"Found it, this is my fault (sorry):. - we have some mappings implemented in python in Compliant; - setting up the mapping uses scipy, which is not the expected version on some plateform (mostly osx for now), which triggers a python error; - the python code returns to c++ before having a chance to finish the test and keeps going on forever. I fixed the offending script, assuming it is the only one. I'll monitor the builds to see if there's more. I'll try to add some mechanism to detect uncaught python exceptions during test execution, and fail the script should this happen. With all my apologies for killing the CI engine :-/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063:232,Availability,error,error,232,"Found it, this is my fault (sorry):. - we have some mappings implemented in python in Compliant; - setting up the mapping uses scipy, which is not the expected version on some plateform (mostly osx for now), which triggers a python error; - the python code returns to c++ before having a chance to finish the test and keeps going on forever. I fixed the offending script, assuming it is the only one. I'll monitor the builds to see if there's more. I'll try to add some mechanism to detect uncaught python exceptions during test execution, and fail the script should this happen. With all my apologies for killing the CI engine :-/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063:406,Energy Efficiency,monitor,monitor,406,"Found it, this is my fault (sorry):. - we have some mappings implemented in python in Compliant; - setting up the mapping uses scipy, which is not the expected version on some plateform (mostly osx for now), which triggers a python error; - the python code returns to c++ before having a chance to finish the test and keeps going on forever. I fixed the offending script, assuming it is the only one. I'll monitor the builds to see if there's more. I'll try to add some mechanism to detect uncaught python exceptions during test execution, and fail the script should this happen. With all my apologies for killing the CI engine :-/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063:483,Safety,detect,detect,483,"Found it, this is my fault (sorry):. - we have some mappings implemented in python in Compliant; - setting up the mapping uses scipy, which is not the expected version on some plateform (mostly osx for now), which triggers a python error; - the python code returns to c++ before having a chance to finish the test and keeps going on forever. I fixed the offending script, assuming it is the only one. I'll monitor the builds to see if there's more. I'll try to add some mechanism to detect uncaught python exceptions during test execution, and fail the script should this happen. With all my apologies for killing the CI engine :-/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063:309,Testability,test,test,309,"Found it, this is my fault (sorry):. - we have some mappings implemented in python in Compliant; - setting up the mapping uses scipy, which is not the expected version on some plateform (mostly osx for now), which triggers a python error; - the python code returns to c++ before having a chance to finish the test and keeps going on forever. I fixed the offending script, assuming it is the only one. I'll monitor the builds to see if there's more. I'll try to add some mechanism to detect uncaught python exceptions during test execution, and fail the script should this happen. With all my apologies for killing the CI engine :-/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063:524,Testability,test,test,524,"Found it, this is my fault (sorry):. - we have some mappings implemented in python in Compliant; - setting up the mapping uses scipy, which is not the expected version on some plateform (mostly osx for now), which triggers a python error; - the python code returns to c++ before having a chance to finish the test and keeps going on forever. I fixed the offending script, assuming it is the only one. I'll monitor the builds to see if there's more. I'll try to add some mechanism to detect uncaught python exceptions during test execution, and fail the script should this happen. With all my apologies for killing the CI engine :-/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289565745:234,Testability,log,log,234,"Hi Maxime,. This is great news. This evening I still had to kill manually some Compliant_test running in endless loop. Now the MacBuilder is ""knocked out"" for the night because there is no more space left on the device and we need to log in manually to clean that. . If you are curious here are the builds: ; 35GB https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/4959/console; 41GB https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/4958/console. I hope your fix will remove this kind of problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289565745
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289688384:131,Testability,log,logging,131,"more than 40Go of text!!!; In top of adding a stopping criterion based on execution time, we could also add a maximal size for the logging buffer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289688384
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289693213:294,Testability,log,logging,294,"I’m currently cleaning the ci infra disks, before anyone else notices… ;). > Le 28 mars 2017 à 09:36, Matthieu Nesme <notifications@github.com> a écrit :; > ; > more than 40Go of text!!!; > In top of adding a stopping criterion based on execution time, we could also add a maximal size for the logging buffer.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/221#issuecomment-289688384>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AR1ILlGbW9e6NmUklt1K8Zg1tlqpXtHkks5rqLiSgaJpZM4Mp6My>.; > . --------------------------------; Bruno Carrez; SED Inria Lille-Nord Europe; bruno.carrez@inria.fr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289693213
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:100,Availability,error,errors,100,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:130,Safety,abort,abort,130,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:140,Testability,test,test,140,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:212,Testability,log,logging,212,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:255,Testability,test,tests,255,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:123,Usability,simpl,simply,123,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289696125:46,Integrability,message,messages,46,Congratulation Bruno @bcarrez for the new log messages ! !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289696125
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289696125:42,Testability,log,log,42,Congratulation Bruno @bcarrez for the new log messages ! !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289696125
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814:185,Integrability,message,message,185,"The test timeout should be done directly in the CI bash scripts, by running the gtest executables using the command `timeout` that can even send a signal to be able to print a specific message on the dashboard.; https://www.gnu.org/software/coreutils/manual/html_node/timeout-invocation.html. Maybe it makes more sense that @guparan or @bcarrez have a look at it rather than @maxime-tournier?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814:9,Safety,timeout,timeout,9,"The test timeout should be done directly in the CI bash scripts, by running the gtest executables using the command `timeout` that can even send a signal to be able to print a specific message on the dashboard.; https://www.gnu.org/software/coreutils/manual/html_node/timeout-invocation.html. Maybe it makes more sense that @guparan or @bcarrez have a look at it rather than @maxime-tournier?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814:117,Safety,timeout,timeout,117,"The test timeout should be done directly in the CI bash scripts, by running the gtest executables using the command `timeout` that can even send a signal to be able to print a specific message on the dashboard.; https://www.gnu.org/software/coreutils/manual/html_node/timeout-invocation.html. Maybe it makes more sense that @guparan or @bcarrez have a look at it rather than @maxime-tournier?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814:268,Safety,timeout,timeout-invocation,268,"The test timeout should be done directly in the CI bash scripts, by running the gtest executables using the command `timeout` that can even send a signal to be able to print a specific message on the dashboard.; https://www.gnu.org/software/coreutils/manual/html_node/timeout-invocation.html. Maybe it makes more sense that @guparan or @bcarrez have a look at it rather than @maxime-tournier?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814:4,Testability,test,test,4,"The test timeout should be done directly in the CI bash scripts, by running the gtest executables using the command `timeout` that can even send a signal to be able to print a specific message on the dashboard.; https://www.gnu.org/software/coreutils/manual/html_node/timeout-invocation.html. Maybe it makes more sense that @guparan or @bcarrez have a look at it rather than @maxime-tournier?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289724266:14,Safety,timeout,timeout,14,Jenkins has a timeout feature to abort too long builds. This feature is enabled on all our jobs.; The question is why are these builds not aborted by Jenkins?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289724266
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289724266:33,Safety,abort,abort,33,Jenkins has a timeout feature to abort too long builds. This feature is enabled on all our jobs.; The question is why are these builds not aborted by Jenkins?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289724266
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289724266:139,Safety,abort,aborted,139,Jenkins has a timeout feature to abort too long builds. This feature is enabled on all our jobs.; The question is why are these builds not aborted by Jenkins?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289724266
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:131,Deployability,continuous,continuous,131,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:54,Integrability,message,message,54,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:0,Safety,Timeout,Timeout,0,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:94,Safety,timeout,timeout,94,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:11,Testability,test,tests,11,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:74,Usability,intuit,intuition,74,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:309,Modifiability,config,configured,309,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:13,Safety,timeout,timeout,13,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:37,Safety,timeout,timeout,37,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:225,Safety,timeout,timeout,225,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:301,Safety,timeout,timeout,301,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:411,Safety,timeout,timeout,411,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:457,Safety,timeout,timeout,457,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:686,Safety,detect,detect,686,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:198,Testability,log,logics,198,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:373,Testability,test,test,373,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:554,Testability,log,log,554,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:669,Testability,log,log,669,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:154,Usability,clear,clearly,154,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-300405452:321,Availability,error,error,321,"Hello,. We still have problem in Compliant_test that is not killed by Jenkins: ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-5.4_options/44/console. Maybe it came from Python_test.cpp and more specifically in Python_scene_test::run . There is an infinite loop that probably never exit when Python is stopped because of an error. . If someone have time to make that more robust any PR will be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-300405452
https://github.com/sofa-framework/sofa/issues/221#issuecomment-300405452:369,Availability,robust,robust,369,"Hello,. We still have problem in Compliant_test that is not killed by Jenkins: ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-5.4_options/44/console. Maybe it came from Python_test.cpp and more specifically in Python_scene_test::run . There is an infinite loop that probably never exit when Python is stopped because of an error. . If someone have time to make that more robust any PR will be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-300405452
https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179:50,Modifiability,Flexible,Flexible,50,"Just added ""pr: wip"" label because we need to fix Flexible plugin (make it use [plugin.HighOrder](https://github.com/sofa-framework/plugin.HighOrder)).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179
https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179:59,Modifiability,plugin,plugin,59,"Just added ""pr: wip"" label because we need to fix Flexible plugin (make it use [plugin.HighOrder](https://github.com/sofa-framework/plugin.HighOrder)).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179
https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179:80,Modifiability,plugin,plugin,80,"Just added ""pr: wip"" label because we need to fix Flexible plugin (make it use [plugin.HighOrder](https://github.com/sofa-framework/plugin.HighOrder)).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179
https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179:132,Modifiability,plugin,plugin,132,"Just added ""pr: wip"" label because we need to fix Flexible plugin (make it use [plugin.HighOrder](https://github.com/sofa-framework/plugin.HighOrder)).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179
https://github.com/sofa-framework/sofa/pull/222#issuecomment-293638606:3,Modifiability,Flexible,Flexible,3,"If Flexible compiles, this PR is ready to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293638606
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:42,Availability,failure,failure,42,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:146,Availability,ERROR,ERROR,146,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:309,Availability,ERROR,ERROR,309,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:471,Availability,ERROR,ERROR,471,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:650,Availability,ERROR,ERROR,650,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:839,Availability,ERROR,ERROR,839,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:1019,Availability,ERROR,ERROR,1019,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:1202,Availability,ERROR,ERROR,1202,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:31,Testability,test,test-scene,31,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:1337,Testability,log,logs,1337,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539
https://github.com/sofa-framework/sofa/issues/224#issuecomment-774035825:45,Modifiability,plugin,plugin,45,@hugtalbot any news ? Maybe from the Caribou plugin ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/224#issuecomment-774035825
https://github.com/sofa-framework/sofa/issues/224#issuecomment-774089780:154,Safety,detect,detects,154,"It is here if you need it -> https://github.com/jnbrunet/caribou/blob/master/src/SofaCaribou/Ode/StaticODESolver.cpp; ; Watch out: there is one part that detects if a caribou CG solver is used, it which case it will output some information on this linear solver at each step. You will have to remove this if you want to bring it into SOFA's core.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/224#issuecomment-774089780
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442:470,Availability,avail,available,470,"2080: 20% of the components make 80% of the result. Components list: https://docs.google.com/spreadsheets/d/1mPGnMrC-3Yo8dEdm5549dRhKcquK4mDmWoNRQt711gs/edit#gid=0. General idea: Repackage components ina way that a subset of the components will be mandatory. These selected components will be maintained with a high level of quality (tests, doc, comments, etc...); Binary distribution will include only this subset. On a fist time:; All the other components will remain available in the repo, but optionnal. (plugins?) ; Once the transition is mature enough, move the deprecated components to another repo ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442:509,Modifiability,plugin,plugins,509,"2080: 20% of the components make 80% of the result. Components list: https://docs.google.com/spreadsheets/d/1mPGnMrC-3Yo8dEdm5549dRhKcquK4mDmWoNRQt711gs/edit#gid=0. General idea: Repackage components ina way that a subset of the components will be mandatory. These selected components will be maintained with a high level of quality (tests, doc, comments, etc...); Binary distribution will include only this subset. On a fist time:; All the other components will remain available in the repo, but optionnal. (plugins?) ; Once the transition is mature enough, move the deprecated components to another repo ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442:334,Testability,test,tests,334,"2080: 20% of the components make 80% of the result. Components list: https://docs.google.com/spreadsheets/d/1mPGnMrC-3Yo8dEdm5549dRhKcquK4mDmWoNRQt711gs/edit#gid=0. General idea: Repackage components ina way that a subset of the components will be mandatory. These selected components will be maintained with a high level of quality (tests, doc, comments, etc...); Binary distribution will include only this subset. On a fist time:; All the other components will remain available in the repo, but optionnal. (plugins?) ; Once the transition is mature enough, move the deprecated components to another repo ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290701408:141,Availability,mainten,maintenus,141,Idée de base pour trier les composants:; - garder tous ceux qui sont dans les tutos; - éliminer ceux qui ne fonctionnent plus et ne sont pas maintenus depuis longtemps (ex: WachingMachineForceField),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290701408
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670:95,Modifiability,plugin,plugins,95,"Todo en vrac:; - trier les composants à garder; - réorganiser les composants à mettre dans des plugins; - mise à jour des CMakeLists pour compiler en mode ""NG"" (par défaut) ou avec tout; - ""paquets de plugins"" pour ne pas devoir activer un par un tous les plugins. Sur les composants gardés: ; - mettre n place des tests; - faire une passe de cleaning (noms, code, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670:201,Modifiability,plugin,plugins,201,"Todo en vrac:; - trier les composants à garder; - réorganiser les composants à mettre dans des plugins; - mise à jour des CMakeLists pour compiler en mode ""NG"" (par défaut) ou avec tout; - ""paquets de plugins"" pour ne pas devoir activer un par un tous les plugins. Sur les composants gardés: ; - mettre n place des tests; - faire une passe de cleaning (noms, code, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670:256,Modifiability,plugin,plugins,256,"Todo en vrac:; - trier les composants à garder; - réorganiser les composants à mettre dans des plugins; - mise à jour des CMakeLists pour compiler en mode ""NG"" (par défaut) ou avec tout; - ""paquets de plugins"" pour ne pas devoir activer un par un tous les plugins. Sur les composants gardés: ; - mettre n place des tests; - faire une passe de cleaning (noms, code, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670:315,Testability,test,tests,315,"Todo en vrac:; - trier les composants à garder; - réorganiser les composants à mettre dans des plugins; - mise à jour des CMakeLists pour compiler en mode ""NG"" (par défaut) ou avec tout; - ""paquets de plugins"" pour ne pas devoir activer un par un tous les plugins. Sur les composants gardés: ; - mettre n place des tests; - faire une passe de cleaning (noms, code, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670
https://github.com/sofa-framework/sofa/issues/225#issuecomment-290706010:41,Modifiability,plugin,plugins,41,"Pb de maintenabilité si on sort certains plugins sur des dépôts séparés (gestion des branches, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290706010
https://github.com/sofa-framework/sofa/issues/226#issuecomment-295246847:318,Deployability,release,released,318,"As an information, we are working on a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. The list of these basic components will soon be presented and the resulting SOFA NG sources released as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/226#issuecomment-295246847
https://github.com/sofa-framework/sofa/issues/226#issuecomment-295246847:212,Integrability,depend,dependencies,212,"As an information, we are working on a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. The list of these basic components will soon be presented and the resulting SOFA NG sources released as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/226#issuecomment-295246847
https://github.com/sofa-framework/sofa/issues/226#issuecomment-295246847:181,Safety,detect,detecting,181,"As an information, we are working on a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. The list of these basic components will soon be presented and the resulting SOFA NG sources released as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/226#issuecomment-295246847
https://github.com/sofa-framework/sofa/issues/227#issuecomment-291093104:100,Modifiability,plugin,plugin,100,"To me there is several aspect in Sofa-NG: ; - one, I would called MiniSofa is about having a single plugin that contains ""selected component"" with the 20/80 rules presented by Stephane. ; - the other, I would called Sofa-HiQu (Sofa- High Quality), is the set of component possibly containing some with nearly similar function but all matching a minimal level of quality. ; - the last one, I would called Sofa-Garbage, that consist in removing components that are really ; unsupported and should not be supported in the core. . Of course Sofa-HiQu should at least contains the MiniSofa components and it should be the same code base :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/227#issuecomment-291093104
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:257,Performance,Multi-thread,Multi-thread,257,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:199,Safety,safe,safe,199,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:229,Safety,safe,safe,229,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:103,Security,validat,validated,103,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:163,Security,validat,validation,163,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:17,Testability,test,tests,17,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:288,Usability,guid,guidelines,288,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-295638674:68,Security,expose,exposed,68,I will see if I can come up with an implementation of that probably exposed through the factory or something like that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-295638674
https://github.com/sofa-framework/sofa/issues/231#issuecomment-305190229:58,Availability,avail,available,58,"An open-source version of hyperlastic constitutive law is available (StandardTetrahedralFEMForceField), but the class would need to be reviewed and if accepted, it needs to be renamed : StandardHyperelasticTetrahedralFEMForceField (?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/231#issuecomment-305190229
https://github.com/sofa-framework/sofa/issues/232#issuecomment-297517107:28,Deployability,install,installing,28,On that I can contribute by installing the stylechecker on a CI machine. ; This is on my todo list before summer.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/232#issuecomment-297517107
https://github.com/sofa-framework/sofa/issues/234#issuecomment-291490914:0,Deployability,Update,Update,0,"Update is done.; Good to know: Git Bash added itself at the end of PATH, **after** MinGW. This brings me a question: why MinGW? We don't need all these duplicated tools (sh.exe, bash.exe, ...). @damienmarchal, did you install MinGW only for Ninja?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/234#issuecomment-291490914
https://github.com/sofa-framework/sofa/issues/234#issuecomment-291490914:218,Deployability,install,install,218,"Update is done.; Good to know: Git Bash added itself at the end of PATH, **after** MinGW. This brings me a question: why MinGW? We don't need all these duplicated tools (sh.exe, bash.exe, ...). @damienmarchal, did you install MinGW only for Ninja?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/234#issuecomment-291490914
https://github.com/sofa-framework/sofa/issues/234#issuecomment-291500471:50,Usability,simpl,simply,50,"@guparan it was there and ""already in the path"" I simply dropped ninja in it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/234#issuecomment-291500471
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:1113,Deployability,update,update,1113,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:309,Integrability,interface,interface,309,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:459,Modifiability,refactor,refactoring,459,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:78,Testability,log,logical,78,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:227,Testability,log,logic,227,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:404,Testability,log,logic,404,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:484,Testability,log,logic,484,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:694,Testability,log,logic,694,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:797,Testability,log,logic,797,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698
https://github.com/sofa-framework/sofa/issues/238#issuecomment-346566462:14,Testability,test,test,14,Could someone test on windows / mac with an intel graphics? @guparan maybe?; I need to find out if I have to fix that as a cross-platform or linux-specific issue.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238#issuecomment-346566462
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:688,Deployability,update,update,688,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:855,Deployability,configurat,configuration,855,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:22,Integrability,depend,dependency,22,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:536,Modifiability,variab,variable,536,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:714,Modifiability,variab,variable,714,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:825,Modifiability,variab,variables,825,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:855,Modifiability,config,configuration,855,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:2378,Usability,simpl,simply,2378,"he topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implementation of `PointSetTopologyContainer`, which can only contain set of contiguous indices ( e.g 0 1 2 3 4 5 ... ) and not any sub set of indices ( e.g 2 6 8 9 12) unlike the other TopologyContainers.; This would lead to at least two clarifications : ; - some forcefields specify the list of the dof indices they contribute to, it would no longer be necessary to do so, they would simply fetch the list of point indices they are supposed to work on from the closest `PointSetTopologyContainer`; - `SubsetMapping` would be deprecated, ( and not `SubsetMultiMapping` which has some other purpose ), since it would be only necessary to describe the point subset of interest that needs to be considered.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:684,Deployability,configurat,configuration,684,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:99,Energy Efficiency,efficient,efficient,99,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:684,Modifiability,config,configuration,684,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:273,Safety,safe,safe,273,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:614,Testability,test,tests,614,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:660,Testability,test,test,660,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703:210,Integrability,depend,dependencies,210,"Hi guys,. Interesting points indeed.; I wanted to add that topological changes are not of interest of everyone in the community. It actually does not represent the major use case. I therefore think that strong dependencies (to TopologyData for instance) and code optimizations for topological changes only should be avoided. Do you agree?. Today, we often have either one version of a component (supporting or not the topological changes). Would there be a nice design allowing for having the possibility to have the two behaviors for each component ?. Personal reminder: this issue is about the MechanicalObject. I think it can be closed as soon as the dependency of MechanicalObject on TopologyData is removed. We should later continue this discussion in a specific/dedicated thread. Agreed ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703:654,Integrability,depend,dependency,654,"Hi guys,. Interesting points indeed.; I wanted to add that topological changes are not of interest of everyone in the community. It actually does not represent the major use case. I therefore think that strong dependencies (to TopologyData for instance) and code optimizations for topological changes only should be avoided. Do you agree?. Today, we often have either one version of a component (supporting or not the topological changes). Would there be a nice design allowing for having the possibility to have the two behaviors for each component ?. Personal reminder: this issue is about the MechanicalObject. I think it can be closed as soon as the dependency of MechanicalObject on TopologyData is removed. We should later continue this discussion in a specific/dedicated thread. Agreed ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703:263,Performance,optimiz,optimizations,263,"Hi guys,. Interesting points indeed.; I wanted to add that topological changes are not of interest of everyone in the community. It actually does not represent the major use case. I therefore think that strong dependencies (to TopologyData for instance) and code optimizations for topological changes only should be avoided. Do you agree?. Today, we often have either one version of a component (supporting or not the topological changes). Would there be a nice design allowing for having the possibility to have the two behaviors for each component ?. Personal reminder: this issue is about the MechanicalObject. I think it can be closed as soon as the dependency of MechanicalObject on TopologyData is removed. We should later continue this discussion in a specific/dedicated thread. Agreed ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703:316,Safety,avoid,avoided,316,"Hi guys,. Interesting points indeed.; I wanted to add that topological changes are not of interest of everyone in the community. It actually does not represent the major use case. I therefore think that strong dependencies (to TopologyData for instance) and code optimizations for topological changes only should be avoided. Do you agree?. Today, we often have either one version of a component (supporting or not the topological changes). Would there be a nice design allowing for having the possibility to have the two behaviors for each component ?. Personal reminder: this issue is about the MechanicalObject. I think it can be closed as soon as the dependency of MechanicalObject on TopologyData is removed. We should later continue this discussion in a specific/dedicated thread. Agreed ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703
https://github.com/sofa-framework/sofa/issues/242#issuecomment-774043440:39,Integrability,depend,dependency,39,"As @hugtalbot said 4years ago (!), the dependency TopologyData was more or less removed and this issue should be closed.; Actually the include and some code is supposed to be enabled if SOFA_HAVE_NEW_TOPOLOGYCHANGES is enabled.; This macro is only present in MechanicalObject and seems NEVER enabled anywhere, so concretely the TopologyData dependency is removed.; Issue closed then. (macro issue cited in #1786)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-774043440
https://github.com/sofa-framework/sofa/issues/242#issuecomment-774043440:341,Integrability,depend,dependency,341,"As @hugtalbot said 4years ago (!), the dependency TopologyData was more or less removed and this issue should be closed.; Actually the include and some code is supposed to be enabled if SOFA_HAVE_NEW_TOPOLOGYCHANGES is enabled.; This macro is only present in MechanicalObject and seems NEVER enabled anywhere, so concretely the TopologyData dependency is removed.; Issue closed then. (macro issue cited in #1786)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-774043440
https://github.com/sofa-framework/sofa/pull/243#issuecomment-303540954:82,Deployability,Update,Update,82,"Hi all, . This PR is getting old, would it be possible to:; - Fix the conflict; - Update the reviewer's status if it is now ok. Thanks. . EDIT: @matthieu-nesme Are you still requesting changes on this PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-303540954
https://github.com/sofa-framework/sofa/pull/243#issuecomment-311022429:56,Deployability,update,updates,56,@matthieu-nesme and @JeremieA many thanks for the quick updates. . @guparan I see you made a commit (15 May) about SofaCUDA. Does it means this pending issue is solved and we can merge or is there still something to do ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311022429
https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428:41,Modifiability,Flexible,Flexible,41,According to the CI there is one test in Flexible that is failing in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428
https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428:33,Testability,test,test,33,According to the CI there is one test in Flexible that is failing in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428
https://github.com/sofa-framework/sofa/pull/243#issuecomment-311592430:45,Availability,error,error,45,what and how would you recommand to fix this error @matthieu-nesme ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311592430
https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437:36,Modifiability,Flexible,Flexible,36,"I presume it has nothing to do with Flexible, but it rather seems related to the mstate size. Maybe the test could be fixed, but what is important to notice is that this PR can have unexpected behaviors with existing code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437
https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437:104,Testability,test,test,104,"I presume it has nothing to do with Flexible, but it rather seems related to the mstate size. Maybe the test could be fixed, but what is important to notice is that this PR can have unexpected behaviors with existing code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437
https://github.com/sofa-framework/sofa/pull/243#issuecomment-312737011:115,Testability,test,tests,115,I really would like to have this merged. ; So how could we progress ? ; - can we remove the feature that makes the tests fail ? ; - do we fix the test and hope others person code will no be broken silently ? ; - can we implement kind of backward compatibility tricks ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312737011
https://github.com/sofa-framework/sofa/pull/243#issuecomment-312737011:146,Testability,test,test,146,I really would like to have this merged. ; So how could we progress ? ; - can we remove the feature that makes the tests fail ? ; - do we fix the test and hope others person code will no be broken silently ? ; - can we implement kind of backward compatibility tricks ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312737011
https://github.com/sofa-framework/sofa/pull/243#issuecomment-312803016:15,Usability,clear,clear,15,"Thanks for the clear answer, . I'm afraid that if no one spend time on fixing this issue, the whole PR will wait for an un-defined amount of time. ; On my side I'm fully booked.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312803016
https://github.com/sofa-framework/sofa/pull/243#issuecomment-313034837:50,Availability,failure,failure,50,I'm gonna find some time to investigate this test failure. To be continued...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-313034837
https://github.com/sofa-framework/sofa/pull/243#issuecomment-313034837:45,Testability,test,test,45,I'm gonna find some time to investigate this test failure. To be continued...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-313034837
https://github.com/sofa-framework/sofa/pull/243#issuecomment-334498519:23,Testability,test,test,23,Apparently a remaining test is failing : TetrahedronVolumeMappingTest/0.test_perTetra; Are you on it @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-334498519
https://github.com/sofa-framework/sofa/pull/243#issuecomment-334714700:52,Modifiability,plugin,plugins,52,"I'll try, as soon as I can compile Sofa and all the plugins ( you know what I mean @hugtalbot ;) )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-334714700
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1061,Deployability,update,updated,1061,"Hello,. Before I explain the bug, let me give a bit of context (it is a bit long, but I hope it is useful ;)). The point of this change was to make it transparent which topology is used by which state, and allow for correct initialization and most importantly topological changes propagation. One issue with the initial implementation, associating a state to the first topology found in its parents and then ignoring it if it is not in the same context (hopefully in all codes using state->m_topology, but who checked?), is that this make it impossible to share the same topology (and topological changes) with multiple states in different (children) nodes. One such example is when you use an IdentityMapping (or a Rigid <-> Vec3 mapping or any other mapping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:2237,Safety,safe,safe,2237,"a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1714,Testability,test,tested,1714,"pping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1997,Testability,log,logic,1997,"a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3622,Testability,assert,asserted,3622,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3723,Testability,test,tests,3723,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1122,Usability,clear,clear,1122," by which state, and allow for correct initialization and most importantly topological changes propagation. One issue with the initial implementation, associating a state to the first topology found in its parents and then ignoring it if it is not in the same context (hopefully in all codes using state->m_topology, but who checked?), is that this make it impossible to share the same topology (and topological changes) with multiple states in different (children) nodes. One such example is when you use an IdentityMapping (or a Rigid <-> Vec3 mapping or any other mapping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3429,Usability,simpl,simple,3429,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-341650499:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-341650499
https://github.com/sofa-framework/sofa/issues/245#issuecomment-351047830:36,Deployability,release,released,36,A first version of SOFA-NG has been released in https://github.com/sofa-framework/sofa-minimal-poc; Please note that this is an experimental work.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/245#issuecomment-351047830
https://github.com/sofa-framework/sofa/issues/246#issuecomment-774097657:88,Integrability,depend,depends,88,"Actually almost all components in the SofaBoundaryCondition (module of FixedConstraint) depends on SofaBaseTopology (which is were is the TopologySubsetData thing). So I guess more discussion would be needed how to avoid this kind of dependency (maybe move TopologyEngineImpl & co to SofaCore, along TopologyEngine.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246#issuecomment-774097657
https://github.com/sofa-framework/sofa/issues/246#issuecomment-774097657:234,Integrability,depend,dependency,234,"Actually almost all components in the SofaBoundaryCondition (module of FixedConstraint) depends on SofaBaseTopology (which is were is the TopologySubsetData thing). So I guess more discussion would be needed how to avoid this kind of dependency (maybe move TopologyEngineImpl & co to SofaCore, along TopologyEngine.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246#issuecomment-774097657
https://github.com/sofa-framework/sofa/issues/246#issuecomment-774097657:215,Safety,avoid,avoid,215,"Actually almost all components in the SofaBoundaryCondition (module of FixedConstraint) depends on SofaBaseTopology (which is were is the TopologySubsetData thing). So I guess more discussion would be needed how to avoid this kind of dependency (maybe move TopologyEngineImpl & co to SofaCore, along TopologyEngine.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246#issuecomment-774097657
https://github.com/sofa-framework/sofa/issues/246#issuecomment-1499860175:43,Integrability,depend,dependencies,43,Fixed ... a long time ago while working on dependencies.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246#issuecomment-1499860175
https://github.com/sofa-framework/sofa/issues/247#issuecomment-295683125:191,Modifiability,plugin,plugin,191,I would add ImplicitEuler + CGSolver that are the initial reasons for being of SOFA. Personally I would remove the assembled solver for the first sofa-ng. For me it should become an external plugin and this code should be removed from the main sofa (the same way Compliant does).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295683125
https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649:521,Deployability,integrat,integration,521,"CG is already in the list my bad, I forgot it sorry!. The description corresponds to a 1st level / layer of SOFA NG.; We intend to have (still in SOFA NG) a second layer of components. This second layer would focus on : ; - state of the art algorithm (like EulerImplicit); - advanced, efficient and validated algorithms (cf Project https://github.com/sofa-framework/sofa/projects/6). I would rather see the EulerImplicit in this second level.; The first level would propose only one implementation per category (e.g. one integration scheme). @matthieu-nesme, you would then rather like to see one explicit and one implicit integration scheme, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649
https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649:623,Deployability,integrat,integration,623,"CG is already in the list my bad, I forgot it sorry!. The description corresponds to a 1st level / layer of SOFA NG.; We intend to have (still in SOFA NG) a second layer of components. This second layer would focus on : ; - state of the art algorithm (like EulerImplicit); - advanced, efficient and validated algorithms (cf Project https://github.com/sofa-framework/sofa/projects/6). I would rather see the EulerImplicit in this second level.; The first level would propose only one implementation per category (e.g. one integration scheme). @matthieu-nesme, you would then rather like to see one explicit and one implicit integration scheme, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649
https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649:285,Energy Efficiency,efficient,efficient,285,"CG is already in the list my bad, I forgot it sorry!. The description corresponds to a 1st level / layer of SOFA NG.; We intend to have (still in SOFA NG) a second layer of components. This second layer would focus on : ; - state of the art algorithm (like EulerImplicit); - advanced, efficient and validated algorithms (cf Project https://github.com/sofa-framework/sofa/projects/6). I would rather see the EulerImplicit in this second level.; The first level would propose only one implementation per category (e.g. one integration scheme). @matthieu-nesme, you would then rather like to see one explicit and one implicit integration scheme, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649
https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649:521,Integrability,integrat,integration,521,"CG is already in the list my bad, I forgot it sorry!. The description corresponds to a 1st level / layer of SOFA NG.; We intend to have (still in SOFA NG) a second layer of components. This second layer would focus on : ; - state of the art algorithm (like EulerImplicit); - advanced, efficient and validated algorithms (cf Project https://github.com/sofa-framework/sofa/projects/6). I would rather see the EulerImplicit in this second level.; The first level would propose only one implementation per category (e.g. one integration scheme). @matthieu-nesme, you would then rather like to see one explicit and one implicit integration scheme, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649
https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649:623,Integrability,integrat,integration,623,"CG is already in the list my bad, I forgot it sorry!. The description corresponds to a 1st level / layer of SOFA NG.; We intend to have (still in SOFA NG) a second layer of components. This second layer would focus on : ; - state of the art algorithm (like EulerImplicit); - advanced, efficient and validated algorithms (cf Project https://github.com/sofa-framework/sofa/projects/6). I would rather see the EulerImplicit in this second level.; The first level would propose only one implementation per category (e.g. one integration scheme). @matthieu-nesme, you would then rather like to see one explicit and one implicit integration scheme, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649
https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649:299,Security,validat,validated,299,"CG is already in the list my bad, I forgot it sorry!. The description corresponds to a 1st level / layer of SOFA NG.; We intend to have (still in SOFA NG) a second layer of components. This second layer would focus on : ; - state of the art algorithm (like EulerImplicit); - advanced, efficient and validated algorithms (cf Project https://github.com/sofa-framework/sofa/projects/6). I would rather see the EulerImplicit in this second level.; The first level would propose only one implementation per category (e.g. one integration scheme). @matthieu-nesme, you would then rather like to see one explicit and one implicit integration scheme, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649
https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:148,Modifiability,refactor,refactoring,148,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346
https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:161,Modifiability,inherit,inheritance,161,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346
https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:74,Usability,guid,guidelines,74,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346
https://github.com/sofa-framework/sofa/pull/250#issuecomment-296172484:238,Security,expose,exposed,238,The relativePath was existing in C++ but not in python. ; I fixed the c++ version because it was not working but I didn't planned in this PR to add a new feature to Python. . But fundamentally you are right.. It would be nicer to have it exposed and I can hijack this PR for that :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-296172484
https://github.com/sofa-framework/sofa/pull/250#issuecomment-300142620:122,Testability,test,testReport,122,"Hi @damienmarchal,; You broke [DataFileName_test](https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_amd64_pr_1_options/178/testReport/(root)/DataFileName_test/checkSetGetRelativePath/) on Windows with this PR. ; Could you have a look?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300142620
https://github.com/sofa-framework/sofa/pull/250#issuecomment-300150787:124,Testability,test,test,124,"Ok, so I gave it a quick look. ; The good news is that this PR does not breaks anything. ; The bad news is that the failing test may be a new OpenIssue. . The underlying problem is that the implementation of ; std::string FileRepository::relativeToPath(std::string path, std::string refPath); is converting the path to be to lowercase on windows but not on Linux/MacOS. I see no good reason why we should do that only on Windows so I think we should fix this function to gave it a consistant behavior on all OS as well as a behavior that correspond to its name. . If returning a lowercased relative path is important this should be implemented in a separated function.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300150787
https://github.com/sofa-framework/sofa/pull/250#issuecomment-300176048:38,Usability,simpl,simplify,38,I guess lowercasing on windows was to simplify path comparisons (using string comparison). Be careful not to break something else while removing it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300176048
https://github.com/sofa-framework/sofa/issues/251#issuecomment-296645546:99,Security,validat,validated,99,I agree that it make sense to keep in DiscreteIntersection only what it the most commonly used and validated (as was the original design before those new primitives where added). I'm not sure however that SofaMeshCollision is the right place to put codes not related to collision on meshes. Maybe SofaMiscCollision ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/251#issuecomment-296645546
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:232,Availability,down,downside,232,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:362,Availability,avail,available,362,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:2010,Availability,recover,recover,2010," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1194,Deployability,install,installed,1194,"not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1253,Deployability,deploy,deploy,1253,"not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1422,Deployability,install,install,1422," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1702,Deployability,configurat,configuration,1702," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1732,Deployability,configurat,configuration,1732," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:116,Modifiability,plugin,plugin,116,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:164,Modifiability,plugin,plugin,164,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:286,Modifiability,plugin,plugin,286,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:372,Modifiability,plugin,plugins,372,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:549,Modifiability,variab,variables,549,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:742,Modifiability,plugin,plugins,742,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:841,Modifiability,plugin,plugin,841,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1663,Modifiability,plugin,plugin,1663," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1702,Modifiability,config,configuration,1702," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1732,Modifiability,config,configuration,1732," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1891,Modifiability,plugin,plugins,1891," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1920,Modifiability,config,config,1920," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:2186,Modifiability,plugin,plugin,2186," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:128,Performance,load,loadable,128,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:254,Performance,load,load,254,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:301,Performance,load,loadable,301,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:349,Performance,load,load,349,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:381,Performance,Load,Loading,381,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:759,Performance,load,loaded,759,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1066,Performance,load,load,1066,"ic symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ``",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1682,Performance,load,load,1682," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:2010,Safety,recover,recover,2010," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:990,Security,expose,exposed,990,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1695,Usability,simpl,simple,1695," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128:170,Deployability,configurat,configuration,170,"Another suggestion from @JeremieA is that actually the list of all the plugins that are being compiled could be derived at CMake configure/generate time, and therefore a configuration file containing that list could be issued as the default list of plugins to load.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128
https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128:71,Modifiability,plugin,plugins,71,"Another suggestion from @JeremieA is that actually the list of all the plugins that are being compiled could be derived at CMake configure/generate time, and therefore a configuration file containing that list could be issued as the default list of plugins to load.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128
https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128:129,Modifiability,config,configure,129,"Another suggestion from @JeremieA is that actually the list of all the plugins that are being compiled could be derived at CMake configure/generate time, and therefore a configuration file containing that list could be issued as the default list of plugins to load.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128
https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128:170,Modifiability,config,configuration,170,"Another suggestion from @JeremieA is that actually the list of all the plugins that are being compiled could be derived at CMake configure/generate time, and therefore a configuration file containing that list could be issued as the default list of plugins to load.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128
https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128:249,Modifiability,plugin,plugins,249,"Another suggestion from @JeremieA is that actually the list of all the plugins that are being compiled could be derived at CMake configure/generate time, and therefore a configuration file containing that list could be issued as the default list of plugins to load.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128
https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128:260,Performance,load,load,260,"Another suggestion from @JeremieA is that actually the list of all the plugins that are being compiled could be derived at CMake configure/generate time, and therefore a configuration file containing that list could be issued as the default list of plugins to load.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1028,Deployability,configurat,configuration,1028,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:458,Modifiability,plugin,plugin,458,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1028,Modifiability,config,configuration,1028,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1048,Modifiability,plugin,plugins,1048,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1171,Modifiability,plugin,plugin,1171,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1202,Modifiability,plugin,plugin,1202,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:670,Performance,load,loaded,670,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:942,Performance,load,loaded,942,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1014,Performance,load,loaded,1014,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:37,Usability,feedback,feedback,37,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:134,Usability,usab,usability,134,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-304831827:109,Deployability,update,updated,109,"We can't do that 😞 ; Anyway, we all agree that a ""pr: wip"" pull request must not be merged. See the recently updated [PR Lifecycle section](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#lifecycle) of our Contributing.md file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304831827
https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342:340,Safety,avoid,avoid,340,"@fredroy, welcome back, . When I'm in this situation here is my workflow: . If it is really important for other to see my progress, or have multiple person commiting in the branh and have systematic feedback from the CI...I let the PR open with the pr:wip tag as guillaume answered. . Otherwise, if I prefer less publicity on the work (and avoid the PR to stay for month in the wip status) I close the PR, then open a new issue sumerizing & centralizing the discussion and I continue working in the closed PR. If from time to time if I need CI's feedback I re-open the closed PR for few hours..then close it back again until I really think this is a work nearly done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342
https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342:199,Usability,feedback,feedback,199,"@fredroy, welcome back, . When I'm in this situation here is my workflow: . If it is really important for other to see my progress, or have multiple person commiting in the branh and have systematic feedback from the CI...I let the PR open with the pr:wip tag as guillaume answered. . Otherwise, if I prefer less publicity on the work (and avoid the PR to stay for month in the wip status) I close the PR, then open a new issue sumerizing & centralizing the discussion and I continue working in the closed PR. If from time to time if I need CI's feedback I re-open the closed PR for few hours..then close it back again until I really think this is a work nearly done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342
https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342:546,Usability,feedback,feedback,546,"@fredroy, welcome back, . When I'm in this situation here is my workflow: . If it is really important for other to see my progress, or have multiple person commiting in the branh and have systematic feedback from the CI...I let the PR open with the pr:wip tag as guillaume answered. . Otherwise, if I prefer less publicity on the work (and avoid the PR to stay for month in the wip status) I close the PR, then open a new issue sumerizing & centralizing the discussion and I continue working in the closed PR. If from time to time if I need CI's feedback I re-open the closed PR for few hours..then close it back again until I really think this is a work nearly done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342
https://github.com/sofa-framework/sofa/pull/254#issuecomment-297685948:109,Availability,error,error,109,"I recommand a fast-merge on this one. With this we will be able to add -j3 on windows builds...and on ""heap"" error we will reduce ""locally"" the number of jobs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254#issuecomment-297685948
https://github.com/sofa-framework/sofa/pull/254#issuecomment-297685948:123,Energy Efficiency,reduce,reduce,123,"I recommand a fast-merge on this one. With this we will be able to add -j3 on windows builds...and on ""heap"" error we will reduce ""locally"" the number of jobs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254#issuecomment-297685948
https://github.com/sofa-framework/sofa/pull/255#issuecomment-300421865:38,Deployability,update,updated,38,After dev-meeting this PR needs to be updated to:; - use dmsg_* instead of the condition on N_DEBUG. The change for conditional code will be done a separated PR so this PR is to review again :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/255#issuecomment-300421865
https://github.com/sofa-framework/sofa/pull/255#issuecomment-301121460:30,Deployability,update,update,30,"At meeting it was asked me to update minor details...and was returned to wip...I have done the requested change so I change the tag to to-review.I didn't wanted to set it to ready because I prefer to have third ""eye"" looking at the change even if they are minor. . I think if you think it is ok then the pr is ready and you can merge it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/255#issuecomment-301121460
https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431:144,Integrability,message,message,144,"I have added #ifdef to activate/deactivate the mutex on demand. . @matthieu-nesme I measured the performance with the mutex. On my machine, the message API is handling around 900000 messages per seconds. I got no noticeable difference when the mutex is there or not. Can someone confirm that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431
https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431:182,Integrability,message,messages,182,"I have added #ifdef to activate/deactivate the mutex on demand. . @matthieu-nesme I measured the performance with the mutex. On my machine, the message API is handling around 900000 messages per seconds. I got no noticeable difference when the mutex is there or not. Can someone confirm that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431
https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431:97,Performance,perform,performance,97,"I have added #ifdef to activate/deactivate the mutex on demand. . @matthieu-nesme I measured the performance with the mutex. On my machine, the message API is handling around 900000 messages per seconds. I got no noticeable difference when the mutex is there or not. Can someone confirm that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431
https://github.com/sofa-framework/sofa/pull/257#issuecomment-301464292:79,Integrability,Message,MessageDispatcher,79,@damienmarchal ; Could you resolve the conflicts (due to the merge of #213) in MessageDispatcher please?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257#issuecomment-301464292
https://github.com/sofa-framework/sofa/issues/259#issuecomment-303137405:201,Performance,perform,performed,201,"The natural order is translation/rotation/scaling. . That being said, specifying such transformations inside Components is a bad idea as this complicates and duplicates the code. They really should be performed using Engines or Mappings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/259#issuecomment-303137405
https://github.com/sofa-framework/sofa/issues/259#issuecomment-303325969:157,Integrability,depend,depending,157,"This is how `Rigid` behaves, so I would agree. But really, coordinate transformations should go in Engines/Mappings where they can be performed in any order depending on what the user needs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/259#issuecomment-303325969
https://github.com/sofa-framework/sofa/issues/259#issuecomment-303325969:134,Performance,perform,performed,134,"This is how `Rigid` behaves, so I would agree. But really, coordinate transformations should go in Engines/Mappings where they can be performed in any order depending on what the user needs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/259#issuecomment-303325969
https://github.com/sofa-framework/sofa/issues/259#issuecomment-308278446:289,Performance,load,loaders,289,"Alternate proposal (in agreement with Maxime's comment): deprecate custom transform codes within components and always rely on TransformEngine. I think that was already the plan, but maybe it should be more explicit.; This is also linked with the deprecation of the sofa::helper::io::Mesh loaders, as TransformEngine cannot be used when a component is loading the mesh directly through these classes (see #42, #118).; Note that using external engines is more verbose and a little bit more work to use, but it brings additional benefits such as a standard transformation order, an easy way to chain multiple transform in whichever order is wanted, and the (very useful for us) ability to apply the same translation to multiple meshes or associated info related to the same virtual object, such as both visual mesh(es) and collision mesh(es) of a tool, or when globally changing the frame of reference for the whole scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/259#issuecomment-308278446
https://github.com/sofa-framework/sofa/issues/259#issuecomment-308278446:352,Performance,load,loading,352,"Alternate proposal (in agreement with Maxime's comment): deprecate custom transform codes within components and always rely on TransformEngine. I think that was already the plan, but maybe it should be more explicit.; This is also linked with the deprecation of the sofa::helper::io::Mesh loaders, as TransformEngine cannot be used when a component is loading the mesh directly through these classes (see #42, #118).; Note that using external engines is more verbose and a little bit more work to use, but it brings additional benefits such as a standard transformation order, an easy way to chain multiple transform in whichever order is wanted, and the (very useful for us) ability to apply the same translation to multiple meshes or associated info related to the same virtual object, such as both visual mesh(es) and collision mesh(es) of a tool, or when globally changing the frame of reference for the whole scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/259#issuecomment-308278446
https://github.com/sofa-framework/sofa/issues/259#issuecomment-1117086905:101,Deployability,release,release,101,I really suggest to really start deprecating all the hard coded transformation code in component for release 22.06 for complete removal in 22.12 or 23.06 :). This is relatively trivial to do it just requires an explicit deprecation workflow and a planning for that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/259#issuecomment-1117086905
https://github.com/sofa-framework/sofa/pull/260#issuecomment-299190327:63,Testability,test,test,63,"""If an issue reports a bug or any abnormal behavior in SOFA, a test highlighting the issue *must* be written."". I suggest to replace must by may or should. Must is very strict.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260#issuecomment-299190327
https://github.com/sofa-framework/sofa/pull/260#issuecomment-299199200:397,Security,validat,validate,397,":) . I think we should use 'must' only if we are willing to insure that this happens each time. This mean forcing people to do a lot of extra work when submitting an issue. And forcing people that are already kind enough to submit an issue does not sound very appealing to me. . So I prefer to say 'should' and explain why it helps a lot in the general process of bug-fixing to have test cases to validate the issue, correct it and fix it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260#issuecomment-299199200
https://github.com/sofa-framework/sofa/pull/260#issuecomment-299199200:383,Testability,test,test,383,":) . I think we should use 'must' only if we are willing to insure that this happens each time. This mean forcing people to do a lot of extra work when submitting an issue. And forcing people that are already kind enough to submit an issue does not sound very appealing to me. . So I prefer to say 'should' and explain why it helps a lot in the general process of bug-fixing to have test cases to validate the issue, correct it and fix it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260#issuecomment-299199200
https://github.com/sofa-framework/sofa/pull/261#issuecomment-302723181:415,Availability,avail,available,415,"I was thinking that the ""not merging is own PR rules"" is to avoid having people merging things that have not been reviewed and received merge approval. . If the PR was agree to be merged (as was 255) and the merge order was defined (as we did during last meeting) I see no problem to merge his own PR because in this scenario, merging is just a matter of [ci-building] and clicking on the merge button. Who-ever is available to do is welcome to allow the more smooth & continuous merging of the different PR between two meeting. . But maybe there is other consequence I didn't noticed, if so could you elaborate ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261#issuecomment-302723181
https://github.com/sofa-framework/sofa/pull/261#issuecomment-302723181:469,Deployability,continuous,continuous,469,"I was thinking that the ""not merging is own PR rules"" is to avoid having people merging things that have not been reviewed and received merge approval. . If the PR was agree to be merged (as was 255) and the merge order was defined (as we did during last meeting) I see no problem to merge his own PR because in this scenario, merging is just a matter of [ci-building] and clicking on the merge button. Who-ever is available to do is welcome to allow the more smooth & continuous merging of the different PR between two meeting. . But maybe there is other consequence I didn't noticed, if so could you elaborate ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261#issuecomment-302723181
https://github.com/sofa-framework/sofa/pull/261#issuecomment-302723181:60,Safety,avoid,avoid,60,"I was thinking that the ""not merging is own PR rules"" is to avoid having people merging things that have not been reviewed and received merge approval. . If the PR was agree to be merged (as was 255) and the merge order was defined (as we did during last meeting) I see no problem to merge his own PR because in this scenario, merging is just a matter of [ci-building] and clicking on the merge button. Who-ever is available to do is welcome to allow the more smooth & continuous merging of the different PR between two meeting. . But maybe there is other consequence I didn't noticed, if so could you elaborate ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261#issuecomment-302723181
https://github.com/sofa-framework/sofa/pull/261#issuecomment-302741167:153,Security,secur,security,153,"No other consequence, just a good practice I think. Even if we discussed it during the meeting, having someone else clicking the merge button is a final security and also I think it's good for the community : you don't feel alone 😄",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261#issuecomment-302741167
https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659:390,Modifiability,Flexible,Flexible,390,"Hi @FabienPean, ; Any idea why RigidLinearDeformationMappings_test is failing on Windows ?; See [windows7_VS-2015_amd64_origin_options tests report](https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_amd64_pr_2_options/266/testReport/). EDIT: This is certainly nothing related to your PR. It is also failing for sofa-framework/sofa#261. EDIT 2: The problem is known, see issue sofa-framework/Flexible#4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659
https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659:135,Testability,test,tests,135,"Hi @FabienPean, ; Any idea why RigidLinearDeformationMappings_test is failing on Windows ?; See [windows7_VS-2015_amd64_origin_options tests report](https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_amd64_pr_2_options/266/testReport/). EDIT: This is certainly nothing related to your PR. It is also failing for sofa-framework/sofa#261. EDIT 2: The problem is known, see issue sofa-framework/Flexible#4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659
https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659:221,Testability,test,testReport,221,"Hi @FabienPean, ; Any idea why RigidLinearDeformationMappings_test is failing on Windows ?; See [windows7_VS-2015_amd64_origin_options tests report](https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_amd64_pr_2_options/266/testReport/). EDIT: This is certainly nothing related to your PR. It is also failing for sofa-framework/sofa#261. EDIT 2: The problem is known, see issue sofa-framework/Flexible#4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659
https://github.com/sofa-framework/sofa/pull/262#issuecomment-302614206:28,Deployability,update,update,28,Thanks Fabian for the quick update of the PR...; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-302614206
https://github.com/sofa-framework/sofa/pull/262#issuecomment-302964842:117,Availability,error,errors,117,"I did not manage to compile it fully. SofaDenseSolver is now ok but not the remaining of Sofa. I started to fix some errors, however it seems that this feature was not actively maintained recently. ; With latest commit it should compile but it gives weird runtime visualization. (Windows VS2015 also); ![image](https://cloud.githubusercontent.com/assets/9134757/26287521/acf354d4-3e7d-11e7-8e6f-bc5d1a2e6ca2.png); ![image](https://cloud.githubusercontent.com/assets/9134757/26287526/b7ce280c-3e7d-11e7-8262-c22a7fc16069.png); ![image](https://cloud.githubusercontent.com/assets/9134757/26287527/c4514e1a-3e7d-11e7-96e3-a18bcf007403.png). If the feature is a must-have, maybe the CI should test with float-only and double-only instead of ""both"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-302964842
https://github.com/sofa-framework/sofa/pull/262#issuecomment-302964842:689,Testability,test,test,689,"I did not manage to compile it fully. SofaDenseSolver is now ok but not the remaining of Sofa. I started to fix some errors, however it seems that this feature was not actively maintained recently. ; With latest commit it should compile but it gives weird runtime visualization. (Windows VS2015 also); ![image](https://cloud.githubusercontent.com/assets/9134757/26287521/acf354d4-3e7d-11e7-8e6f-bc5d1a2e6ca2.png); ![image](https://cloud.githubusercontent.com/assets/9134757/26287526/b7ce280c-3e7d-11e7-8262-c22a7fc16069.png); ![image](https://cloud.githubusercontent.com/assets/9134757/26287527/c4514e1a-3e7d-11e7-96e3-a18bcf007403.png). If the feature is a must-have, maybe the CI should test with float-only and double-only instead of ""both"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-302964842
https://github.com/sofa-framework/sofa/pull/262#issuecomment-303331706:145,Modifiability,inherit,inheritance,145,Thank you for your fixes @FabienPean !. Two remarks about consistency:; - `Sofa_test` default template is `SReal`. I would go for `Sofa_tests<>` inheritance. Unless there is a specific reason for inheriting from `Sofa_tests<SReal>` ?; - `#ifndef SOFA_FLOAT` block usually comes before `#ifndef SOFA_DOUBLE` block. I can push these tiny corrections if you're ok 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-303331706
https://github.com/sofa-framework/sofa/pull/262#issuecomment-303331706:196,Modifiability,inherit,inheriting,196,Thank you for your fixes @FabienPean !. Two remarks about consistency:; - `Sofa_test` default template is `SReal`. I would go for `Sofa_tests<>` inheritance. Unless there is a specific reason for inheriting from `Sofa_tests<SReal>` ?; - `#ifndef SOFA_FLOAT` block usually comes before `#ifndef SOFA_DOUBLE` block. I can push these tiny corrections if you're ok 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-303331706
https://github.com/sofa-framework/sofa/pull/262#issuecomment-305127979:72,Availability,failure,failure,72,"The problem comes when using 'both' it seems. For one part of the build failure, TriangleOctree / TriangleOctreeRoot must be instantiated with both precision instead of currently using the default type SReal only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305127979
https://github.com/sofa-framework/sofa/pull/262#issuecomment-305318209:152,Availability,avail,available,152,"Ok so, hopefully the end of this PR. I reverted some commit and double/both should be back to normal. In the case of float only the DilateEngine is not available and its test deactivated. So basically it should compile fine, but some components would be limited.; I quickly tried to fix it but I encountered some difficulties. I would prefer open a new issue regarding float compliance of remaining components. To sum up, it should be back to the original goal: fix compilation, not necessarily the components with type limitation",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305318209
https://github.com/sofa-framework/sofa/pull/262#issuecomment-305318209:170,Testability,test,test,170,"Ok so, hopefully the end of this PR. I reverted some commit and double/both should be back to normal. In the case of float only the DilateEngine is not available and its test deactivated. So basically it should compile fine, but some components would be limited.; I quickly tried to fix it but I encountered some difficulties. I would prefer open a new issue regarding float compliance of remaining components. To sum up, it should be back to the original goal: fix compilation, not necessarily the components with type limitation",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305318209
https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072:149,Availability,error,error,149,"I am on Windows and did not try on Linux, so my hopes still hold as long as that yellow dot does not become a cross for the windows VS build :D. The error on the linux build seem trivial fortunately. However it stopped at the first error... Would it be possible for the build system not to stop at this first error and try compiling the remaining ? Since I cannot test on every platform/os that would be valuable to have all potential error at once.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072
https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072:232,Availability,error,error,232,"I am on Windows and did not try on Linux, so my hopes still hold as long as that yellow dot does not become a cross for the windows VS build :D. The error on the linux build seem trivial fortunately. However it stopped at the first error... Would it be possible for the build system not to stop at this first error and try compiling the remaining ? Since I cannot test on every platform/os that would be valuable to have all potential error at once.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072
https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072:309,Availability,error,error,309,"I am on Windows and did not try on Linux, so my hopes still hold as long as that yellow dot does not become a cross for the windows VS build :D. The error on the linux build seem trivial fortunately. However it stopped at the first error... Would it be possible for the build system not to stop at this first error and try compiling the remaining ? Since I cannot test on every platform/os that would be valuable to have all potential error at once.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072
https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072:435,Availability,error,error,435,"I am on Windows and did not try on Linux, so my hopes still hold as long as that yellow dot does not become a cross for the windows VS build :D. The error on the linux build seem trivial fortunately. However it stopped at the first error... Would it be possible for the build system not to stop at this first error and try compiling the remaining ? Since I cannot test on every platform/os that would be valuable to have all potential error at once.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072
https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072:364,Testability,test,test,364,"I am on Windows and did not try on Linux, so my hopes still hold as long as that yellow dot does not become a cross for the windows VS build :D. The error on the linux build seem trivial fortunately. However it stopped at the first error... Would it be possible for the build system not to stop at this first error and try compiling the remaining ? Since I cannot test on every platform/os that would be valuable to have all potential error at once.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072
https://github.com/sofa-framework/sofa/pull/263#issuecomment-300544505:125,Integrability,interface,interface,125,"By letting the PR open, the Changelog will never be up-to-date.; I feel comfortable with adding manually (through the GitHub interface) the new items in the Changelog.; Is this fine ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/263#issuecomment-300544505
https://github.com/sofa-framework/sofa/pull/264#issuecomment-300833513:110,Deployability,install,install,110,hey @damienmarchal could this[ forum topic ](https://www.sofa-framework.org/community/forum/topic/cgal-plugin-install/#post-9114)be related to your PR ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264#issuecomment-300833513
https://github.com/sofa-framework/sofa/pull/264#issuecomment-300833513:103,Modifiability,plugin,plugin-install,103,hey @damienmarchal could this[ forum topic ](https://www.sofa-framework.org/community/forum/topic/cgal-plugin-install/#post-9114)be related to your PR ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264#issuecomment-300833513
https://github.com/sofa-framework/sofa/pull/264#issuecomment-300899410:53,Modifiability,plugin,plugin,53,The getRelativePath function is not used in the CGAL plugin so I doubt this is linked.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264#issuecomment-300899410
https://github.com/sofa-framework/sofa/issues/265#issuecomment-301476350:288,Testability,test,tests,288,"Actually the different specialization for sofa::helper::vector<> look highly suspicious to me and we can for sure do better. ; (especially the ""unsigned int"" one that is used to defined the indices in topologies). In this PR https://github.com/sofa-framework/sofa/pull/271; I wrote small tests trying to show all the possible ""bad behavior"" to fix. . EDIT: It is a bit out of the scope of the Hugo's initial question but it is somehow connected.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-301476350
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:369,Availability,down,downside,369,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:388,Performance,perform,perform,388,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:526,Performance,perform,perform,526,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:538,Testability,test,test,538,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:4,Usability,simpl,simple,4,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/pull/267#issuecomment-301027658:4,Testability,test,test,4,"The test is failing, the good news is that this is not related to code regression. Nevertheless I suggest we merge this fix quickly as it looks harmless and remove some noise in our dashboard.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267#issuecomment-301027658
https://github.com/sofa-framework/sofa/pull/267#issuecomment-302020287:91,Availability,error,errors,91,"There was a flaw fixed in the tests, fixing it fixed all tests on Linux and OSx but raised errors on Windows. I switch to Redmond's OS to fix them and hopefully, it will then be ok...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267#issuecomment-302020287
https://github.com/sofa-framework/sofa/pull/267#issuecomment-302020287:30,Testability,test,tests,30,"There was a flaw fixed in the tests, fixing it fixed all tests on Linux and OSx but raised errors on Windows. I switch to Redmond's OS to fix them and hopefully, it will then be ok...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267#issuecomment-302020287
https://github.com/sofa-framework/sofa/pull/267#issuecomment-302020287:57,Testability,test,tests,57,"There was a flaw fixed in the tests, fixing it fixed all tests on Linux and OSx but raised errors on Windows. I switch to Redmond's OS to fix them and hopefully, it will then be ok...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267#issuecomment-302020287
https://github.com/sofa-framework/sofa/pull/267#issuecomment-303131249:52,Testability,test,tests,52,"At last, this PR is ready. It fixes all FileMonitor tests on all platforms.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267#issuecomment-303131249
https://github.com/sofa-framework/sofa/pull/268#issuecomment-302628489:100,Testability,test,tests,100,Very cool ! both classes are key classes intended to enter Sofa-NG project.; Thank you guys for the tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268#issuecomment-302628489
https://github.com/sofa-framework/sofa/pull/268#issuecomment-302633096:12,Testability,test,tests,12,"Good to me, tests are always welcome :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268#issuecomment-302633096
https://github.com/sofa-framework/sofa/pull/269#issuecomment-301470083:19,Deployability,update,update,19,is there a need to update the changelog ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/269#issuecomment-301470083
https://github.com/sofa-framework/sofa/pull/270#issuecomment-301436164:214,Testability,test,tests,214,@damienmarchal I have added a RegularGridTopology_test. In fact I don't think GridTopology is used like this as a component. It is more a mother class for Regular/Cylindrical and sphereGridTopology (which each has tests now),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301436164
https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540:165,Modifiability,inherit,inherited,165,Thanks Eric for the fixes and the additional test. Your answer about GridTopology rise other questions:; - If the component is not supposed to be used without being inherited... shouldn't we remove it from the factory ?; - If a class is not a component does not mean we shouldn't test it. Actually my feeling is that base class (as they are shared) are very good entities to test :) . EDIT: Maybe these questions should be for a new Issue and not to handle in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540
https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540:45,Testability,test,test,45,Thanks Eric for the fixes and the additional test. Your answer about GridTopology rise other questions:; - If the component is not supposed to be used without being inherited... shouldn't we remove it from the factory ?; - If a class is not a component does not mean we shouldn't test it. Actually my feeling is that base class (as they are shared) are very good entities to test :) . EDIT: Maybe these questions should be for a new Issue and not to handle in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540
https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540:280,Testability,test,test,280,Thanks Eric for the fixes and the additional test. Your answer about GridTopology rise other questions:; - If the component is not supposed to be used without being inherited... shouldn't we remove it from the factory ?; - If a class is not a component does not mean we shouldn't test it. Actually my feeling is that base class (as they are shared) are very good entities to test :) . EDIT: Maybe these questions should be for a new Issue and not to handle in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540
https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540:375,Testability,test,test,375,Thanks Eric for the fixes and the additional test. Your answer about GridTopology rise other questions:; - If the component is not supposed to be used without being inherited... shouldn't we remove it from the factory ?; - If a class is not a component does not mean we shouldn't test it. Actually my feeling is that base class (as they are shared) are very good entities to test :) . EDIT: Maybe these questions should be for a new Issue and not to handle in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540
https://github.com/sofa-framework/sofa/pull/270#issuecomment-301501500:32,Testability,test,testing,32,In fact most of the methods I'm testing are directly inside the mother class. So I'm not sure a gridTopology_test is needed.; But to remove GridTopology from the factory is maybe possible. We need to investigate if someone is using it as a component.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301501500
https://github.com/sofa-framework/sofa/pull/270#issuecomment-301898283:24,Testability,test,test,24,"Hi Erik, . There is one test crash in TetrahedronFEMForceField_test. Is this related to your changes ?. DM",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301898283
https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:212,Availability,ERROR,ERROR,212,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176
https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:330,Availability,error,error,330,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176
https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:336,Integrability,message,message,336,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176
https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:86,Testability,test,test,86,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176
https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:119,Testability,log,log,119,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176
https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:456,Testability,test,test,456,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176
https://github.com/sofa-framework/sofa/pull/270#issuecomment-302034546:74,Security,validat,validate,74,"Hi @epernod . Can I add more tests on this PR ? Because I think we should validate a bit more ""negative/bad"" case to enforce the behavior of component when used improperly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302034546
https://github.com/sofa-framework/sofa/pull/270#issuecomment-302034546:29,Testability,test,tests,29,"Hi @epernod . Can I add more tests on this PR ? Because I think we should validate a bit more ""negative/bad"" case to enforce the behavior of component when used improperly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302034546
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259:147,Modifiability,variab,variable,147,"I still do not get the interest of storing `m_gridDim`. What is the limitation of a simple function? So you never have to change the value of this variable to keep it consistent. If it was in a data you want to plug in a Data/Engine graph, it would indeed be necessary to store it, but it is not the case here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259:84,Usability,simpl,simple,84,"I still do not get the interest of storing `m_gridDim`. What is the limitation of a simple function? So you never have to change the value of this variable to keep it consistent. If it was in a data you want to plug in a Data/Engine graph, it would indeed be necessary to store it, but it is not the case here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305446954:22,Testability,test,test,22,"yes we can change the test to remove` badDim` as now the dim is not computed at the same time. No, `_n[i] = 1` works. `n = [1; 5; 5]` give a plan grid of 25 cells. -> Dim = 2",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305446954
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305456930:112,Testability,test,test,112,"@epernod If I am not wrong, if you have n=[2,2,2] your code will give dim=0 where it should give dim=3.; Only a test could check that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305456930
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305487544:39,Testability,test,tests,39,Indeed... my bad.; This Pr already add tests for the gridTopology but the Tests needed a test. ; Thanks @matthieu-nesme for the review. It should be good now.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305487544
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305487544:74,Testability,Test,Tests,74,Indeed... my bad.; This Pr already add tests for the gridTopology but the Tests needed a test. ; Thanks @matthieu-nesme for the review. It should be good now.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305487544
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305487544:89,Testability,test,test,89,Indeed... my bad.; This Pr already add tests for the gridTopology but the Tests needed a test. ; Thanks @matthieu-nesme for the review. It should be good now.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305487544
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302639771:452,Usability,simpl,simplify,452,@matthieu-nesme . Currently no-one answered to the checkData API related issues https://github.com/sofa-framework/sofa/issues/265 so I don't know when this will happen.I hope this will happen soon but currently I have no visibility so I prefer to make the change of existing function in batch when a PR related to #265 will be accepted. . In the meantime it is probably a good idea to add a function called checkDataValidity() called in init() just to simplify the transition when it will happen.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302639771
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:941,Availability,error,error,941,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:1021,Energy Efficiency,energy,energy,1021,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:1164,Energy Efficiency,consumption,consumption,1164,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:397,Performance,perform,performance,397,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:624,Performance,perform,performance,624,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:826,Performance,perform,performance,826,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:974,Performance,perform,performance,974,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:694,Security,secur,security,694,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302702732:197,Usability,simpl,simply,197,"@damienmarchal if you check for '-' in the vector<unsigned>::read specialization, is it necessary to check for it in the getUnsignedNumber?; Also, since strtoll returns a signed integer, you could simply check for its sign rather than playing with strings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302702732
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302727731:407,Availability,robust,robust,407,@matthieu-nesme ; If have the check in getUnsignedNumber for two reason:; - the '-' sign can be in the string passed to the getUnsignedNumber function so I have to check it. ; Eg of string that cause that to happen -5-5 or 5--5 ; - I don't make the assumption that this function will only be called from read...I suppose I will need it in ; a lot of other different context so I prefer to have the function robust. . Now from a performance point of view it is better to check the single char '-' at the beginning of the string than parsing the whole number to detect is was not good.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302727731
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302727731:428,Performance,perform,performance,428,@matthieu-nesme ; If have the check in getUnsignedNumber for two reason:; - the '-' sign can be in the string passed to the getUnsignedNumber function so I have to check it. ; Eg of string that cause that to happen -5-5 or 5--5 ; - I don't make the assumption that this function will only be called from read...I suppose I will need it in ; a lot of other different context so I prefer to have the function robust. . Now from a performance point of view it is better to check the single char '-' at the beginning of the string than parsing the whole number to detect is was not good.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302727731
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302727731:560,Safety,detect,detect,560,@matthieu-nesme ; If have the check in getUnsignedNumber for two reason:; - the '-' sign can be in the string passed to the getUnsignedNumber function so I have to check it. ; Eg of string that cause that to happen -5-5 or 5--5 ; - I don't make the assumption that this function will only be called from read...I suppose I will need it in ; a lot of other different context so I prefer to have the function robust. . Now from a performance point of view it is better to check the single char '-' at the beginning of the string than parsing the whole number to detect is was not good.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302727731
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302732797:267,Availability,error,error,267,"In that case why looking for '-' in `read`?; Note the `getUnsignedNumber` could have a signature imposing not to have a '-' in the input string. In `getUnsignedNumber`, the case where there is a '-' is the failing case, when we do not care about perfs (you create an error message , etc.), but in the good case, the one we should not disadvantage, I think it is preferable to check the strtoll sign rather than brassing strings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302732797
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302732797:273,Integrability,message,message,273,"In that case why looking for '-' in `read`?; Note the `getUnsignedNumber` could have a signature imposing not to have a '-' in the input string. In `getUnsignedNumber`, the case where there is a '-' is the failing case, when we do not care about perfs (you create an error message , etc.), but in the good case, the one we should not disadvantage, I think it is preferable to check the strtoll sign rather than brassing strings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302732797
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:1469,Energy Efficiency,green,green,1469,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:362,Performance,perform,performance,362,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:454,Performance,perform,performances,454,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:611,Performance,perform,performance,611,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:39,Safety,detect,detect,39,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:604,Safety,detect,detect,604,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:517,Testability,benchmark,benchmark,517,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:534,Testability,benchmark,benchmark,534,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:566,Testability,test,test,566,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:1356,Usability,simpl,simpler,1356,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-303038710:90,Deployability,update,update,90,"Wow, green dashboard, is it Xmas already ?; Very nice work @damienmarchal ! 👏 . Could you update your review @matthieu-nesme ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-303038710
https://github.com/sofa-framework/sofa/pull/271#issuecomment-303038710:5,Energy Efficiency,green,green,5,"Wow, green dashboard, is it Xmas already ?; Very nice work @damienmarchal ! 👏 . Could you update your review @matthieu-nesme ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-303038710
https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233:370,Availability,error,error,370,"I totally agree with Damien.; Depending on the case, the comment should at least include the following informations:; - date of deprecation; - replacement method pointers. Furthermore, the deprecated method could issue a message on the console, to warn against its use.; In extreme cases, after a reasonable time delay, the method should not work anymore, just issue an error message with the previous informations. But as it is currently done in this example, nothing goes against its undiscontinued use in new pieces of code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233
https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233:30,Integrability,Depend,Depending,30,"I totally agree with Damien.; Depending on the case, the comment should at least include the following informations:; - date of deprecation; - replacement method pointers. Furthermore, the deprecated method could issue a message on the console, to warn against its use.; In extreme cases, after a reasonable time delay, the method should not work anymore, just issue an error message with the previous informations. But as it is currently done in this example, nothing goes against its undiscontinued use in new pieces of code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233
https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233:221,Integrability,message,message,221,"I totally agree with Damien.; Depending on the case, the comment should at least include the following informations:; - date of deprecation; - replacement method pointers. Furthermore, the deprecated method could issue a message on the console, to warn against its use.; In extreme cases, after a reasonable time delay, the method should not work anymore, just issue an error message with the previous informations. But as it is currently done in this example, nothing goes against its undiscontinued use in new pieces of code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233
https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233:376,Integrability,message,message,376,"I totally agree with Damien.; Depending on the case, the comment should at least include the following informations:; - date of deprecation; - replacement method pointers. Furthermore, the deprecated method could issue a message on the console, to warn against its use.; In extreme cases, after a reasonable time delay, the method should not work anymore, just issue an error message with the previous informations. But as it is currently done in this example, nothing goes against its undiscontinued use in new pieces of code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233
https://github.com/sofa-framework/sofa/issues/274#issuecomment-302061194:434,Usability,feedback,feedback,434,I made a quick POC using constructor delegation (c++x11) in; https://github.com/SofaDefrost/sofa/tree/constructor_delegation. (I messed up with the branch so only have a look at how I factorize the constructors in; RegularGridTopology.cpp & GridTopology.cpp). . To me this looks quite an improvement over the existing approach but maybe I made mistake or there is scenario in which we will have trouble if we generalize this...so any feedback from c++ you (guru or not) will be appreciated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-302061194
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:167,Testability,test,test,167,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:226,Testability,test,test,226,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:248,Testability,test,test,248,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:263,Testability,test,test,263,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:271,Testability,test,test,271,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:25,Usability,simpl,simply,25,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/pull/276#issuecomment-302852972:44,Testability,test,tests,44,"Hi @olivier-goury , @ChristianDuriez . Some tests on our CI are crashing with your PR, following the link ; https://www.sofa-framework.org/dash/?branch=pr/mapped_forcefield_matrix; You will find the crashing tests, those are the one that have a negative runtime, in the stackstrace you can see it is related to some Eigen spare matrix operation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-302852972
https://github.com/sofa-framework/sofa/pull/276#issuecomment-302852972:208,Testability,test,tests,208,"Hi @olivier-goury , @ChristianDuriez . Some tests on our CI are crashing with your PR, following the link ; https://www.sofa-framework.org/dash/?branch=pr/mapped_forcefield_matrix; You will find the crashing tests, those are the one that have a negative runtime, in the stackstrace you can see it is related to some Eigen spare matrix operation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-302852972
https://github.com/sofa-framework/sofa/pull/276#issuecomment-304642032:236,Energy Efficiency,efficient,efficiently,236,There is few new warning during the compilation process thats need to be fixed. . These warnings are really minor details but I think it is important to do our best to decrease the general number of trivial warnings so that we can more efficiently detect the non-trivial one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-304642032
https://github.com/sofa-framework/sofa/pull/276#issuecomment-304642032:248,Safety,detect,detect,248,There is few new warning during the compilation process thats need to be fixed. . These warnings are really minor details but I think it is important to do our best to decrease the general number of trivial warnings so that we can more efficiently detect the non-trivial one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-304642032
https://github.com/sofa-framework/sofa/pull/276#issuecomment-306526433:8,Usability,feedback,feedback,8,Without feedback of yours @courtecuisse and @JeremieA this will be merged tomorrow (7 days since we poked you),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306526433
https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849:191,Availability,avail,available,191,"Thank you for your comment; The interest is to be able to map the forcefields through the mapping in a sparse manner for many solvers of SOFA. I agree that this functionality is not directly available in the API and for now, would be only available in a private plug-in. But this is work in progress and we need more time to have a clean code available. Why does it break the API ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849
https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849:239,Availability,avail,available,239,"Thank you for your comment; The interest is to be able to map the forcefields through the mapping in a sparse manner for many solvers of SOFA. I agree that this functionality is not directly available in the API and for now, would be only available in a private plug-in. But this is work in progress and we need more time to have a clean code available. Why does it break the API ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849
https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849:343,Availability,avail,available,343,"Thank you for your comment; The interest is to be able to map the forcefields through the mapping in a sparse manner for many solvers of SOFA. I agree that this functionality is not directly available in the API and for now, would be only available in a private plug-in. But this is work in progress and we need more time to have a clean code available. Why does it break the API ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849
https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849:262,Modifiability,plug-in,plug-in,262,"Thank you for your comment; The interest is to be able to map the forcefields through the mapping in a sparse manner for many solvers of SOFA. I agree that this functionality is not directly available in the API and for now, would be only available in a private plug-in. But this is work in progress and we need more time to have a clean code available. Why does it break the API ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849
https://github.com/sofa-framework/sofa/issues/277#issuecomment-303150889:377,Usability,clear,clearer,377,"But then for the sake of clarity at least, wouldn't it still make sense to implement this function by checking whether or not the values are the same as the defaults?; One can argue that a zero-ed matrix doesn't mean an ""empty"" matrix, and some could consider the identity matrix to be an empty matrix maybe in some cases, but at least, with a little comment, it would make it clearer.; Otherwise a msg_warning in this method would be helpful for whoever tries to call it without knowing that it has a ""return false"" behavior?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303150889
https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923:33,Modifiability,inherit,inherited,33,"If you want to hide methods in a inherited class because they don't really make sense in its API, private inheritance is usually the way to go. Inherited methods can still be made public in the derived class by selecting them with the `using` directive. . See [https://stackoverflow.com/a/675451](https://stackoverflow.com/a/675451)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923
https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923:106,Modifiability,inherit,inheritance,106,"If you want to hide methods in a inherited class because they don't really make sense in its API, private inheritance is usually the way to go. Inherited methods can still be made public in the derived class by selecting them with the `using` directive. . See [https://stackoverflow.com/a/675451](https://stackoverflow.com/a/675451)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923
https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923:144,Modifiability,Inherit,Inherited,144,"If you want to hide methods in a inherited class because they don't really make sense in its API, private inheritance is usually the way to go. Inherited methods can still be made public in the derived class by selecting them with the `using` directive. . See [https://stackoverflow.com/a/675451](https://stackoverflow.com/a/675451)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923
https://github.com/sofa-framework/sofa/issues/277#issuecomment-303156473:141,Usability,undo,undocumented,141,"However in the particular case your are mentionning ( ie compile time fixed size matrices ) nothing really strikes me as a ""bad behavior"" or undocumented behavior of some sort that needs to be amended in the current design. Then again in the standard which has `std::array` for compile time fixed size array, the `empty()` method always return false unless your array is degenerated ( ie it cannot contain anything at all ).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303156473
https://github.com/sofa-framework/sofa/pull/278#issuecomment-303331782:194,Modifiability,refactor,refactoring,194,@JeremieA I re-read carefully your comment on #113 to compare to what @maxime-tournier is proposing (which look an improvement against the actual code). I actually forgot that you made your own refactoring of theses classes and don't want to interfere so do you prefer we can just close this PR and wait for your refactoring ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303331782
https://github.com/sofa-framework/sofa/pull/278#issuecomment-303331782:313,Modifiability,refactor,refactoring,313,@JeremieA I re-read carefully your comment on #113 to compare to what @maxime-tournier is proposing (which look an improvement against the actual code). I actually forgot that you made your own refactoring of theses classes and don't want to interfere so do you prefer we can just close this PR and wait for your refactoring ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303331782
https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697:819,Safety,avoid,avoid,819,"@maxime-tournier and @matthieu-nesme ; Thanks for your suggestions,. It is not very clear when you are refering to ""current approach"" if you are discussing about the sofa version or the one that is already in this PR. . Existing Sofa looks like: ; ```cpp; namespace std{; ... operator<<(ostream, std::set); ; }; ```. In this PR it looks like: ; ```cpp; namespace sofa::helper{; using std::set ; /// do we need the template prefix as matthieu suggested ? ; ... operator<<(ostream, sofa::helper::set); ; }; ```. Maxime's suggestion ; ```cpp; namespace foo{; template<class ...T>; struct vector final : std::vector<T...> {; using std::vector<T...>::vector;; };; ... operator<<(ostream, sofa::helper::set); ; }; ```. The sofa existing one is clearly bad as it pollute the namespace. It seems to me that maxime's suggestion avoid the need to have 'using operator<<' in calling code. It is unclear to me what are the drawback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697
https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697:84,Usability,clear,clear,84,"@maxime-tournier and @matthieu-nesme ; Thanks for your suggestions,. It is not very clear when you are refering to ""current approach"" if you are discussing about the sofa version or the one that is already in this PR. . Existing Sofa looks like: ; ```cpp; namespace std{; ... operator<<(ostream, std::set); ; }; ```. In this PR it looks like: ; ```cpp; namespace sofa::helper{; using std::set ; /// do we need the template prefix as matthieu suggested ? ; ... operator<<(ostream, sofa::helper::set); ; }; ```. Maxime's suggestion ; ```cpp; namespace foo{; template<class ...T>; struct vector final : std::vector<T...> {; using std::vector<T...>::vector;; };; ... operator<<(ostream, sofa::helper::set); ; }; ```. The sofa existing one is clearly bad as it pollute the namespace. It seems to me that maxime's suggestion avoid the need to have 'using operator<<' in calling code. It is unclear to me what are the drawback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697
https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697:738,Usability,clear,clearly,738,"@maxime-tournier and @matthieu-nesme ; Thanks for your suggestions,. It is not very clear when you are refering to ""current approach"" if you are discussing about the sofa version or the one that is already in this PR. . Existing Sofa looks like: ; ```cpp; namespace std{; ... operator<<(ostream, std::set); ; }; ```. In this PR it looks like: ; ```cpp; namespace sofa::helper{; using std::set ; /// do we need the template prefix as matthieu suggested ? ; ... operator<<(ostream, sofa::helper::set); ; }; ```. Maxime's suggestion ; ```cpp; namespace foo{; template<class ...T>; struct vector final : std::vector<T...> {; using std::vector<T...>::vector;; };; ... operator<<(ostream, sofa::helper::set); ; }; ```. The sofa existing one is clearly bad as it pollute the namespace. It seems to me that maxime's suggestion avoid the need to have 'using operator<<' in calling code. It is unclear to me what are the drawback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:271,Availability,error,error,271,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:150,Deployability,update,update,150,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:167,Deployability,install,install,167,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:194,Deployability,install,installs,194,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:277,Integrability,message,message,277,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:69,Modifiability,plugin,plugin,69,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:409,Modifiability,plugin,plugin,409,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:62,Availability,failure,failure,62,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:120,Availability,failure,failure,120,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:342,Availability,error,error,342,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:408,Availability,error,error,408,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:748,Availability,fault,faulty,748,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:468,Deployability,release,release,468,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:348,Integrability,message,message,348,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:414,Integrability,message,message,414,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:57,Testability,test,test,57,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:277,Testability,test,test,277,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:432,Testability,test,test,432,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:460,Testability,test,test,460,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:527,Testability,test,test,527,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:1051,Usability,feedback,feedback,1051,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305800420:152,Safety,safe,safe,152,"Sorry I do not know neither SparseLDLSolver (and the assembled solvers implemented in the sofa core), nor METIS. If `adj` is a std::vector, I think the safe way to get the raw pointer is `adj.data()`.; (the old-school way: `adj.empty()?null_ptr:&adj[0]`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305800420
https://github.com/sofa-framework/sofa/pull/279#issuecomment-308079993:24,Testability,test,test,24,According to the manual test i started here : ; https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/105/consoleFull; It now succeed on all test on the clang_option_debug build. . So it should be ready !!!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-308079993
https://github.com/sofa-framework/sofa/pull/279#issuecomment-308079993:150,Testability,test,test,150,According to the manual test i started here : ; https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/105/consoleFull; It now succeed on all test on the clang_option_debug build. . So it should be ready !!!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-308079993
https://github.com/sofa-framework/sofa/issues/280#issuecomment-305173227:606,Energy Efficiency,allocate,allocated,606,"Indeed. I am not a big fan of having a member function `invert`; Anyway, to fix the problem you can test that the address of reference passed as an argument is different from the address of the object instance. e.g. ```lang=cpp. template< std::size_t L, std::size_t C, typename real = double >; bool Mat<L,C,real>::invert(const Mat<L,C,real>& m ); {; if(&m == this ); {; // do something clever to handle ""in-place"" invert; }; else; {; invertMatrix(*this, m );; }; }; ```. NB: it is an usual pattern when for instance you must overload the assignment operator of a class (because it has to manage some heap allocated memory for example ), and therefore handle the special case when you self assign.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/280#issuecomment-305173227
https://github.com/sofa-framework/sofa/issues/280#issuecomment-305173227:100,Testability,test,test,100,"Indeed. I am not a big fan of having a member function `invert`; Anyway, to fix the problem you can test that the address of reference passed as an argument is different from the address of the object instance. e.g. ```lang=cpp. template< std::size_t L, std::size_t C, typename real = double >; bool Mat<L,C,real>::invert(const Mat<L,C,real>& m ); {; if(&m == this ); {; // do something clever to handle ""in-place"" invert; }; else; {; invertMatrix(*this, m );; }; }; ```. NB: it is an usual pattern when for instance you must overload the assignment operator of a class (because it has to manage some heap allocated memory for example ), and therefore handle the special case when you self assign.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/280#issuecomment-305173227
https://github.com/sofa-framework/sofa/issues/280#issuecomment-305396307:77,Performance,perform,performance,77,"Yeah, handling the self-assignment is probably the best way out; keeping the performance and addressing the issue. Shall you go ahead, Bruno?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/280#issuecomment-305396307
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:47,Modifiability,plugin,plugins,47,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:62,Modifiability,config,config,62,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:151,Modifiability,Plugin,Plugins,151,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:353,Modifiability,plugin,plugins,353,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:488,Modifiability,Plugin,PluginManager,488,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:593,Modifiability,Plugin,PluginManager,593,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:751,Modifiability,plugin,plugins,751,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:841,Modifiability,plugin,plugins,841,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:436,Performance,load,loading,436,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:771,Performance,load,load,771,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:809,Performance,load,load,809,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:896,Performance,load,loading,896,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223
https://github.com/sofa-framework/sofa/issues/281#issuecomment-311036684:109,Usability,feedback,feedback,109,"Hi Fred,. On my side I have implemented the ""warning"" behavior. It is in PR #306 and I would appreciate your feedback (and if you have time, some support to fix the linking problem on windows).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-311036684
https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607:75,Modifiability,plugin,plugins,75,"One of the point remaining is to build an object that map the component to plugins. . The easy path is probably to make an application that loads all thall the plugins, load them and dump the infos in a file (json, xml, whatever). . Then having a queriable object to get that info through an API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607
https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607:160,Modifiability,plugin,plugins,160,"One of the point remaining is to build an object that map the component to plugins. . The easy path is probably to make an application that loads all thall the plugins, load them and dump the infos in a file (json, xml, whatever). . Then having a queriable object to get that info through an API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607
https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607:140,Performance,load,loads,140,"One of the point remaining is to build an object that map the component to plugins. . The easy path is probably to make an application that loads all thall the plugins, load them and dump the infos in a file (json, xml, whatever). . Then having a queriable object to get that info through an API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607
https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607:169,Performance,load,load,169,"One of the point remaining is to build an object that map the component to plugins. . The easy path is probably to make an application that loads all thall the plugins, load them and dump the infos in a file (json, xml, whatever). . Then having a queriable object to get that info through an API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607
https://github.com/sofa-framework/sofa/pull/282#issuecomment-305491712:14,Usability,simpl,simple,14,This PR is so simple I cannot imagine anything that would go against its fast merging.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282#issuecomment-305491712
https://github.com/sofa-framework/sofa/pull/283#issuecomment-305540410:492,Deployability,update,update,492,"Super great contrib :) The as-clean-as-possible way to implement a controller. From a quick review, everything looks good to me. A few suggestions:; 1- what about adding a python-based layer (inherited class) that would, in its `__init__`, set the Data member (like the name) from the kwargs + call an eventual 'createGraph' function + print a warning if 'onLoaded' exists ;); 2- check that everything is ok with the destruction and the reference counter (maybe it is, I am not yet sure); 3- update the ControllerVariable.py example; 4- mark the SofaPython.script.Controller as deprecated",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305540410
https://github.com/sofa-framework/sofa/pull/283#issuecomment-305540410:192,Modifiability,inherit,inherited,192,"Super great contrib :) The as-clean-as-possible way to implement a controller. From a quick review, everything looks good to me. A few suggestions:; 1- what about adding a python-based layer (inherited class) that would, in its `__init__`, set the Data member (like the name) from the kwargs + call an eventual 'createGraph' function + print a warning if 'onLoaded' exists ;); 2- check that everything is ok with the destruction and the reference counter (maybe it is, I am not yet sure); 3- update the ControllerVariable.py example; 4- mark the SofaPython.script.Controller as deprecated",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305540410
https://github.com/sofa-framework/sofa/pull/283#issuecomment-305549368:223,Integrability,wrap,wraps,223,"Thank you :); 1. totally doable, and would in fact be the preferred way of ensuring smooth transition rather than complicating the c++ side; 2. I suspect my proposal has a memleak due to a GC cycle: ; - the python instance wraps and holds a ref to the c++ object, which in turns holds a ref to the instance.; - most likely we want the c++ object to hold a weakref to the python object, but i'm not very familiar with them (yet); - the previous approach had it too, if I'm not mistaken: `wrapper object -> c++ object -> control object -> c++ object` so by fixing it we kill two birds with one stone; 3. will do; 4. how?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305549368
https://github.com/sofa-framework/sofa/pull/283#issuecomment-305549368:487,Integrability,wrap,wrapper,487,"Thank you :); 1. totally doable, and would in fact be the preferred way of ensuring smooth transition rather than complicating the c++ side; 2. I suspect my proposal has a memleak due to a GC cycle: ; - the python instance wraps and holds a ref to the c++ object, which in turns holds a ref to the instance.; - most likely we want the c++ object to hold a weakref to the python object, but i'm not very familiar with them (yet); - the previous approach had it too, if I'm not mistaken: `wrapper object -> c++ object -> control object -> c++ object` so by fixing it we kill two birds with one stone; 3. will do; 4. how?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305549368
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306425798:364,Safety,detect,detect,364,"3 & 4 done. . 1: not sure how we should name the class, if ever; 2: harder. i have a toy [implementation](https://github.com/maxime-tournier/cpp/tree/master/pybind) to play with. briefly: we can put gc flags on the python type, implement `traverse` and `Py_VISIT` the pointer when the c++ object becomes unreachable (c++ refcount == 1). Then the GC will correctly detect cycles as unreachable objects (using debugging in the `gc` module), but won't delete them, probably since they have a non-trivial `dealloc` slot. Maybe this will be fixed after we switch to >= 3.4, since finalizers for cycles will be called.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306425798
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870:211,Availability,error,error,211,"Also, I'm seeing this pattern over and over again:; ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; PyErr_BadArgument();; return NULL;; }; ```; Please don't do that since it replaces the slightly helpful error message set by `PyArg_ParseTuple` by a generic one. Simply return `NULL` instead:. ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; return NULL;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870:217,Integrability,message,message,217,"Also, I'm seeing this pattern over and over again:; ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; PyErr_BadArgument();; return NULL;; }; ```; Please don't do that since it replaces the slightly helpful error message set by `PyArg_ParseTuple` by a generic one. Simply return `NULL` instead:. ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; return NULL;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870:269,Usability,Simpl,Simply,269,"Also, I'm seeing this pattern over and over again:; ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; PyErr_BadArgument();; return NULL;; }; ```; Please don't do that since it replaces the slightly helpful error message set by `PyArg_ParseTuple` by a generic one. Simply return `NULL` instead:. ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; return NULL;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456:755,Availability,mainten,maintenance,755,"Great contribution, . I fully support any step toward smoother integration of Sofa with Python and this PR is one.; I also like the cleaning & factoring work with stuff like get_base function. . Really minor details: ; In SOFA we have plenty of TODOs forgotten since years that no one is responsible for, without any idea when this was added and when this will be done. To avoid that I suggest replacing things like; ```cpp; // TODO FIXME self is commented; ```; With one with more details; ```cpp; //TODO(mtournier 2017-05-30) Self, is commented there is possibly a problem (if not done in two years, you can remove this comment); ``` ; Or; ```cpp; //DEFECT(mtournier 2017-05-30) Self, is commented there is a problem when...; ``` ; To help general code maintenance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456:63,Deployability,integrat,integration,63,"Great contribution, . I fully support any step toward smoother integration of Sofa with Python and this PR is one.; I also like the cleaning & factoring work with stuff like get_base function. . Really minor details: ; In SOFA we have plenty of TODOs forgotten since years that no one is responsible for, without any idea when this was added and when this will be done. To avoid that I suggest replacing things like; ```cpp; // TODO FIXME self is commented; ```; With one with more details; ```cpp; //TODO(mtournier 2017-05-30) Self, is commented there is possibly a problem (if not done in two years, you can remove this comment); ``` ; Or; ```cpp; //DEFECT(mtournier 2017-05-30) Self, is commented there is a problem when...; ``` ; To help general code maintenance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456:63,Integrability,integrat,integration,63,"Great contribution, . I fully support any step toward smoother integration of Sofa with Python and this PR is one.; I also like the cleaning & factoring work with stuff like get_base function. . Really minor details: ; In SOFA we have plenty of TODOs forgotten since years that no one is responsible for, without any idea when this was added and when this will be done. To avoid that I suggest replacing things like; ```cpp; // TODO FIXME self is commented; ```; With one with more details; ```cpp; //TODO(mtournier 2017-05-30) Self, is commented there is possibly a problem (if not done in two years, you can remove this comment); ``` ; Or; ```cpp; //DEFECT(mtournier 2017-05-30) Self, is commented there is a problem when...; ``` ; To help general code maintenance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456:373,Safety,avoid,avoid,373,"Great contribution, . I fully support any step toward smoother integration of Sofa with Python and this PR is one.; I also like the cleaning & factoring work with stuff like get_base function. . Really minor details: ; In SOFA we have plenty of TODOs forgotten since years that no one is responsible for, without any idea when this was added and when this will be done. To avoid that I suggest replacing things like; ```cpp; // TODO FIXME self is commented; ```; With one with more details; ```cpp; //TODO(mtournier 2017-05-30) Self, is commented there is possibly a problem (if not done in two years, you can remove this comment); ``` ; Or; ```cpp; //DEFECT(mtournier 2017-05-30) Self, is commented there is a problem when...; ``` ; To help general code maintenance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306789278:33,Usability,responsiv,responsiveness,33,@maxime-tournier Thanks for your responsiveness ;). Mergeable to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306789278
https://github.com/sofa-framework/sofa/pull/283#issuecomment-307798058:197,Deployability,update,update,197,[ci-build]. I will merge the PR if it compile nicely. . @maxime-tournier can you add a synthetic CHANGELOG section at the end of the description of this PR so that @hugtalbot & @guparan can easily update the CHANGELOG.md file in in sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-307798058
https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210:123,Security,validat,validating,123,"I just noticed this PR is adding new feature without providing associated tests.; It would be great to have two tests, one validating the old behavior and one validating the new one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210
https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210:159,Security,validat,validating,159,"I just noticed this PR is adding new feature without providing associated tests.; It would be great to have two tests, one validating the old behavior and one validating the new one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210
https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210:74,Testability,test,tests,74,"I just noticed this PR is adding new feature without providing associated tests.; It would be great to have two tests, one validating the old behavior and one validating the new one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210
https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210:112,Testability,test,tests,112,"I just noticed this PR is adding new feature without providing associated tests.; It would be great to have two tests, one validating the old behavior and one validating the new one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306476756:78,Usability,feedback,feedback,78,"Hi Felix,. Thank you for your PR. ; Let's see if it builds and if people have feedback to give you. [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306476756
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306500177:78,Integrability,protocol,protocol,78,"The PR looks good, though I wonder whether we could use the abstract sequence protocol instead of the concrete list type. This way we could use numpy vectors directly for instance. The warning message will quickly become annoying, so maybe put it behind proper `#ifdefs`. @matthieu-nesme any thought?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306500177
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306500177:193,Integrability,message,message,193,"The PR looks good, though I wonder whether we could use the abstract sequence protocol instead of the concrete list type. This way we could use numpy vectors directly for instance. The warning message will quickly become annoying, so maybe put it behind proper `#ifdefs`. @matthieu-nesme any thought?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306500177
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306513969:161,Integrability,message,message,161,"The warning will be annoying but changing the behavior of a core function without warning users is also very problematic. . I see several option to control this message: ; - adds an optional parameter to the createObject function so that for a transitional period a warning is printed but people can remove the warning by calling createObject(..., silentConversion=true). After some time we set the silentConversion to true by default. ; - develops a complete system to handle API change in sofa to control the warnings we want to emit; eg: ; ```cpp ; runSofa -Wno-api-change vs runSofa -Wapi-change; ```; And something like that in the code; ```cpp ; msg_info_when( SofaPython::ReportAPIChange ) << ""Blah balh""; ```. Other approaches ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306513969
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306523435:307,Modifiability,enhance,enhance,307,"I already worked on binding Data vectors on this branch: [sofapython_containers](https://github.com/Anatoscope/sofa/tree/sofapython_containers). It is not finished yet, but any help is welcome. Mainly making proper binding for vector of vectors (of vectors...) with different sizes (and SVector).; I had to enhance DataTypeInfo for that, it implies quite deep modifications. The SofaPython/examples/SofaNumpy.py example shows what is doable (even non-numpy related stuff). But it is a pain in the ass to fix codes that were beneficing from those undefined/incorrect behaviors. It is why it is not yet PR, but maybe it could become a wip PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306523435
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:737,Integrability,message,messages,737,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:844,Integrability,message,messages,844,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:616,Usability,clear,clearly,616,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:1059,Usability,simpl,simple,1059,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:22,Integrability,message,message,22,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:337,Integrability,message,messages,337,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:479,Security,expose,exposed,479,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:395,Testability,test,test,395,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:73,Usability,simpl,simple,73,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:232,Usability,simpl,simple,232,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:240,Usability,simpl,simply,240,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:471,Usability,clear,clearly,471,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307402723:36,Safety,detect,detect,36,"I'm not sure we have an easy way to detect that a PyObject is really a BaseObject, the getLinkPath trick should go for a future PR. . I'm making the requested change to felix PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307402723
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:23,Availability,down,down,23,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:501,Availability,error,error,501,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:646,Availability,error,error,646,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:905,Availability,error,error,905,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:44,Integrability,protocol,protocol,44,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:138,Integrability,protocol,protocol,138,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:471,Safety,abort,abort,471,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:231,Testability,test,tests,231,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307760074:328,Deployability,update,update,328,"@maxime-tournier ; I currently have tests with this pattern:; {""'aString'.join('[ ]')"", ""[aString aString]""} ; which succeed. . I also have added this one:; {""' '.join(['AA', 'BB', 'CC'])"", ""AA BB CC""}, ; Which also succeed. . I didn't managed to build something that fails...if you find some..please report so we can improve & update the tests. EDIT: I'm more concerned about the automatic conversion to getPath/getLinkPath for which I'm not sure we can find a clean semantic. I suggest we let that for a different PR...because this out of the scope of the PR initially submitted by Felix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307760074
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307760074:36,Testability,test,tests,36,"@maxime-tournier ; I currently have tests with this pattern:; {""'aString'.join('[ ]')"", ""[aString aString]""} ; which succeed. . I also have added this one:; {""' '.join(['AA', 'BB', 'CC'])"", ""AA BB CC""}, ; Which also succeed. . I didn't managed to build something that fails...if you find some..please report so we can improve & update the tests. EDIT: I'm more concerned about the automatic conversion to getPath/getLinkPath for which I'm not sure we can find a clean semantic. I suggest we let that for a different PR...because this out of the scope of the PR initially submitted by Felix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307760074
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307760074:339,Testability,test,tests,339,"@maxime-tournier ; I currently have tests with this pattern:; {""'aString'.join('[ ]')"", ""[aString aString]""} ; which succeed. . I also have added this one:; {""' '.join(['AA', 'BB', 'CC'])"", ""AA BB CC""}, ; Which also succeed. . I didn't managed to build something that fails...if you find some..please report so we can improve & update the tests. EDIT: I'm more concerned about the automatic conversion to getPath/getLinkPath for which I'm not sure we can find a clean semantic. I suggest we let that for a different PR...because this out of the scope of the PR initially submitted by Felix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307760074
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628:140,Usability,simpl,simply,140,"After some tries, I could not come up with something that fails either. This is good news, right? :-). As to the semantics, maybe we should simply add an `__str__` method to `BaseObject` that returns `getLinkPath()`. This way we don't have extra special cases in `createObject` and the semantics become clear enough to me: arguments are converted to strings unless they are sequences, in which case they are converted to the expected format.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628:303,Usability,clear,clear,303,"After some tries, I could not come up with something that fails either. This is good news, right? :-). As to the semantics, maybe we should simply add an `__str__` method to `BaseObject` that returns `getLinkPath()`. This way we don't have extra special cases in `createObject` and the semantics become clear enough to me: arguments are converted to strings unless they are sequences, in which case they are converted to the expected format.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648:957,Availability,error,errors,957,"Ok the following works: . ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }; ; if( PySequence_Check(object) ) {; std::stringstream ss;. for(Py_ssize_t i = 0, n = PySequence_Length(object); i < n; ++i) {; if(i > 0) ss << ' ';; ss << convert_string(PySequence_GetItem(object, i));; }; ; return ss.str();; }. // fallback to python string conversion; PyObject* str = PyObject_Str(object);; std::string res = PyString_AsString(str);; Py_DECREF(str);; ; return res;; }; ```. `Binding_BaseObject.cpp:`. ```c++; SP_CLASS_METHODS_END;. static struct patch {; patch() {; // set __str__ slot for BaseObject; SP_SOFAPYTYPEOBJECT(BaseObject).tp_str = [](PyObject* self) {; return BaseObject_getLinkPath(self, nullptr);; };; }; } patcher;. SP_CLASS_TYPE_SPTR(BaseObject, BaseObject, Base); ```; It does breaks some python tests in Compliant, but this is due to errors there. I can push code to another PR that does the whole thing if needed (I don't think I have push access to this one).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648:651,Deployability,patch,patch,651,"Ok the following works: . ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }; ; if( PySequence_Check(object) ) {; std::stringstream ss;. for(Py_ssize_t i = 0, n = PySequence_Length(object); i < n; ++i) {; if(i > 0) ss << ' ';; ss << convert_string(PySequence_GetItem(object, i));; }; ; return ss.str();; }. // fallback to python string conversion; PyObject* str = PyObject_Str(object);; std::string res = PyString_AsString(str);; Py_DECREF(str);; ; return res;; }; ```. `Binding_BaseObject.cpp:`. ```c++; SP_CLASS_METHODS_END;. static struct patch {; patch() {; // set __str__ slot for BaseObject; SP_SOFAPYTYPEOBJECT(BaseObject).tp_str = [](PyObject* self) {; return BaseObject_getLinkPath(self, nullptr);; };; }; } patcher;. SP_CLASS_TYPE_SPTR(BaseObject, BaseObject, Base); ```; It does breaks some python tests in Compliant, but this is due to errors there. I can push code to another PR that does the whole thing if needed (I don't think I have push access to this one).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648:660,Deployability,patch,patch,660,"Ok the following works: . ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }; ; if( PySequence_Check(object) ) {; std::stringstream ss;. for(Py_ssize_t i = 0, n = PySequence_Length(object); i < n; ++i) {; if(i > 0) ss << ' ';; ss << convert_string(PySequence_GetItem(object, i));; }; ; return ss.str();; }. // fallback to python string conversion; PyObject* str = PyObject_Str(object);; std::string res = PyString_AsString(str);; Py_DECREF(str);; ; return res;; }; ```. `Binding_BaseObject.cpp:`. ```c++; SP_CLASS_METHODS_END;. static struct patch {; patch() {; // set __str__ slot for BaseObject; SP_SOFAPYTYPEOBJECT(BaseObject).tp_str = [](PyObject* self) {; return BaseObject_getLinkPath(self, nullptr);; };; }; } patcher;. SP_CLASS_TYPE_SPTR(BaseObject, BaseObject, Base); ```; It does breaks some python tests in Compliant, but this is due to errors there. I can push code to another PR that does the whole thing if needed (I don't think I have push access to this one).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648:826,Deployability,patch,patcher,826,"Ok the following works: . ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }; ; if( PySequence_Check(object) ) {; std::stringstream ss;. for(Py_ssize_t i = 0, n = PySequence_Length(object); i < n; ++i) {; if(i > 0) ss << ' ';; ss << convert_string(PySequence_GetItem(object, i));; }; ; return ss.str();; }. // fallback to python string conversion; PyObject* str = PyObject_Str(object);; std::string res = PyString_AsString(str);; Py_DECREF(str);; ; return res;; }; ```. `Binding_BaseObject.cpp:`. ```c++; SP_CLASS_METHODS_END;. static struct patch {; patch() {; // set __str__ slot for BaseObject; SP_SOFAPYTYPEOBJECT(BaseObject).tp_str = [](PyObject* self) {; return BaseObject_getLinkPath(self, nullptr);; };; }; } patcher;. SP_CLASS_TYPE_SPTR(BaseObject, BaseObject, Base); ```; It does breaks some python tests in Compliant, but this is due to errors there. I can push code to another PR that does the whole thing if needed (I don't think I have push access to this one).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648:1064,Security,access,access,1064,"Ok the following works: . ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }; ; if( PySequence_Check(object) ) {; std::stringstream ss;. for(Py_ssize_t i = 0, n = PySequence_Length(object); i < n; ++i) {; if(i > 0) ss << ' ';; ss << convert_string(PySequence_GetItem(object, i));; }; ; return ss.str();; }. // fallback to python string conversion; PyObject* str = PyObject_Str(object);; std::string res = PyString_AsString(str);; Py_DECREF(str);; ; return res;; }; ```. `Binding_BaseObject.cpp:`. ```c++; SP_CLASS_METHODS_END;. static struct patch {; patch() {; // set __str__ slot for BaseObject; SP_SOFAPYTYPEOBJECT(BaseObject).tp_str = [](PyObject* self) {; return BaseObject_getLinkPath(self, nullptr);; };; }; } patcher;. SP_CLASS_TYPE_SPTR(BaseObject, BaseObject, Base); ```; It does breaks some python tests in Compliant, but this is due to errors there. I can push code to another PR that does the whole thing if needed (I don't think I have push access to this one).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648:918,Testability,test,tests,918,"Ok the following works: . ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }; ; if( PySequence_Check(object) ) {; std::stringstream ss;. for(Py_ssize_t i = 0, n = PySequence_Length(object); i < n; ++i) {; if(i > 0) ss << ' ';; ss << convert_string(PySequence_GetItem(object, i));; }; ; return ss.str();; }. // fallback to python string conversion; PyObject* str = PyObject_Str(object);; std::string res = PyString_AsString(str);; Py_DECREF(str);; ; return res;; }; ```. `Binding_BaseObject.cpp:`. ```c++; SP_CLASS_METHODS_END;. static struct patch {; patch() {; // set __str__ slot for BaseObject; SP_SOFAPYTYPEOBJECT(BaseObject).tp_str = [](PyObject* self) {; return BaseObject_getLinkPath(self, nullptr);; };; }; } patcher;. SP_CLASS_TYPE_SPTR(BaseObject, BaseObject, Base); ```; It does breaks some python tests in Compliant, but this is due to errors there. I can push code to another PR that does the whole thing if needed (I don't think I have push access to this one).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307777933:116,Availability,error,errors,116,"@matthieu-nesme are there examples of links to nodes ? I was going to put it in `Base`, but I thought maybe keeping errors for `Node` might be desirable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307777933
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319:91,Testability,test,tests,91,"Thanks for your feedback,. We need examples of use of Data & Base conversion to add in the tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319:16,Usability,feedback,feedback,16,"Thanks for your feedback,. We need examples of use of Data & Base conversion to add in the tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375:262,Safety,avoid,avoid,262,"The current implementation is now converting things like:; Sequence (non recursively), string, scalar, and boolean without a warning. . If the object has a method named ""getSofaPath()"". This one is used in the createObject to do the conversion. My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. This function could be implemented in Base and Data but in virtually any object we want to be used as a parameter in createObject. . It sounds nice to me because it make things ""explicit"" and convenient as it simplify user's scripts.; I'm not a big fan of 'getAsSofaPath()' and though about getAsSofaValue or getAsACreateObjectParameter(). What do you think ? Do you have alternative names ? . PS: @matthieu-nesme you said: ... ""Data's str already gives the stringvalue"", ; ```python; first = rootNode.createObject( 'ExternalComponent', name='theFirst'); print('VERSION 1:'+ str( first.findData('name') + "" type: "" + str(type(first.name)) ); print('VERSION 2:'+ str( first.name ) + "" type: "" + str(type(first.name)) ); ```; Actually prints: ; ```; VERSION 1: <Sofa.Data object at 0x7ff43b77f6f0> -> <type 'Sofa.Data'>; VERSION 2: theFirst -> <type 'str'>; ```; So str() function is not implemented as you said.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375:584,Usability,simpl,simplify,584,"The current implementation is now converting things like:; Sequence (non recursively), string, scalar, and boolean without a warning. . If the object has a method named ""getSofaPath()"". This one is used in the createObject to do the conversion. My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. This function could be implemented in Base and Data but in virtually any object we want to be used as a parameter in createObject. . It sounds nice to me because it make things ""explicit"" and convenient as it simplify user's scripts.; I'm not a big fan of 'getAsSofaPath()' and though about getAsSofaValue or getAsACreateObjectParameter(). What do you think ? Do you have alternative names ? . PS: @matthieu-nesme you said: ... ""Data's str already gives the stringvalue"", ; ```python; first = rootNode.createObject( 'ExternalComponent', name='theFirst'); print('VERSION 1:'+ str( first.findData('name') + "" type: "" + str(type(first.name)) ); print('VERSION 2:'+ str( first.name ) + "" type: "" + str(type(first.name)) ); ```; Actually prints: ; ```; VERSION 1: <Sofa.Data object at 0x7ff43b77f6f0> -> <type 'Sofa.Data'>; VERSION 2: theFirst -> <type 'str'>; ```; So str() function is not implemented as you said.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308039440:66,Usability,clear,clear,66,@matthieu-nesme what's wrong with using `str` ? The semantics are clear and concise and you don't have to mentally infer the various checks that will take place when converting. The explicit case checking looks much worse to me. (sorry for bikeshedding). @damienmarchal why not recursive? This prevents setting `MechanicalObject` positions when `size > 1`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308039440
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308048324:189,Integrability,wrap,wrappers,189,"> My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. There is no existing `str` function for python component wrappers (`grep tp_str`), the default python implementation is used. In python the semantic of `str` is to provide a concise representation of an object as a string, which is exactly what `BaseObject.getLinkPath` does. So really, using `str` seems the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308048324
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308048324:19,Safety,avoid,avoid,19,"> My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. There is no existing `str` function for python component wrappers (`grep tp_str`), the default python implementation is used. In python the semantic of `str` is to provide a concise representation of an object as a string, which is exactly what `BaseObject.getLinkPath` does. So really, using `str` seems the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308048324
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308057027:101,Usability,simpl,simple,101,"@maxime-tournier ok I am convinced, let's use str for everyone (except list/iterable) to remain on a simple implementation. Please could you propose us an implementation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308057027
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:1668,Integrability,protocol,protocol,1668,". 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject hav",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3172,Integrability,depend,depending,3172,"be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3468,Integrability,depend,depending,3468,". ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:446,Modifiability,extend,extend,446,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:520,Modifiability,plugin,plugin,520,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3100,Modifiability,flexible,flexible,3100,"be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:358,Safety,detect,detection,358,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2362,Safety,risk,risk,2362,"ion will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For oth",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:4187,Safety,avoid,avoiding,4187,"r function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a flat one and I wasn't sure it was something that should be done in every cases for any types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:484,Testability,test,test,484,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2255,Testability,test,test,2255,"know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatos",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:1837,Usability,simpl,simply,1837,"d idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2808,Usability,clear,clear,2808,"ly link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3559,Usability,clear,clearly,3559,"d in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a f",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3632,Usability,clear,clearly,3632,"r function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a flat one and I wasn't sure it was something that should be done in every cases for any types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349:491,Modifiability,variab,variables,491,"Just my 2 cents (after the war) about this ```__str__``` stuff... . I don't know how to explain it clearly, but using the built-in ```str``` function to serialize objects in a createObject-specific format sounds weird to me, even if it works in our context. This is the first time we have to convert Sofa objects to string, it does not mean that converting sofa objects to string will only be needed for this specific purpose in the future. ; I am confident that we can find examples of bad variables usages in the code of Sofa : ""this var exists and seems not used by anyone, so I will use it to store my context-specific information without recompiling everything"". The wrong tool used for the good result, I don't know if you get me. . In a naive approach I would expect as a end-user, that issuing a ```print(mySofaStuff)``` from the sofa GUI built-in python console would return a human-readable string, a summary with the object class name, perhaps the object name, plus some useful infos. Getting either a path or a suite of numbers would be kinda disapointing in this context...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349:99,Usability,clear,clearly,99,"Just my 2 cents (after the war) about this ```__str__``` stuff... . I don't know how to explain it clearly, but using the built-in ```str``` function to serialize objects in a createObject-specific format sounds weird to me, even if it works in our context. This is the first time we have to convert Sofa objects to string, it does not mean that converting sofa objects to string will only be needed for this specific purpose in the future. ; I am confident that we can find examples of bad variables usages in the code of Sofa : ""this var exists and seems not used by anyone, so I will use it to store my context-specific information without recompiling everything"". The wrong tool used for the good result, I don't know if you get me. . In a naive approach I would expect as a end-user, that issuing a ```print(mySofaStuff)``` from the sofa GUI built-in python console would return a human-readable string, a summary with the object class name, perhaps the object name, plus some useful infos. Getting either a path or a suite of numbers would be kinda disapointing in this context...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308106140:168,Security,validat,validate,168,I have restored the recursive version because I see the advantage of handling vector of vector and I have no example of problematic case in mind.; I added two tests to validate this behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308106140
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308106140:159,Testability,test,tests,159,I have restored the recursive version because I see the advantage of handling vector of vector and I have no example of problematic case in mind.; I added two tests to validate this behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308106140
https://github.com/sofa-framework/sofa/pull/286#issuecomment-312863531:437,Integrability,interface,interface,437,"Thanks for pointing the issue...we should fix it rapidely... Now your question...; The short answer is no. . The long answer, ; I have never looked at this part of the code but my assumption is that, when SVector was introduced, it would have cost time to fix the whole code base & scenes & offer backward compatibility so SVector was implemented and used in some component without unifying the whole code base. This decision breaks the interface consistency which have very concrete drawback for users (some arrays use one syntax, others use a different syntax and there is no way to know which syntax need to be used) and for developpers as we now have to cope with two interfaces in our re-factoring. A quick fix, should be to check that the underlying object on which we are passing the array can understand the old array syntax or the python-like syntax. . Fixing all that will take time...this is the problem with technical debt.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-312863531
https://github.com/sofa-framework/sofa/pull/286#issuecomment-312863531:672,Integrability,interface,interfaces,672,"Thanks for pointing the issue...we should fix it rapidely... Now your question...; The short answer is no. . The long answer, ; I have never looked at this part of the code but my assumption is that, when SVector was introduced, it would have cost time to fix the whole code base & scenes & offer backward compatibility so SVector was implemented and used in some component without unifying the whole code base. This decision breaks the interface consistency which have very concrete drawback for users (some arrays use one syntax, others use a different syntax and there is no way to know which syntax need to be used) and for developpers as we now have to cope with two interfaces in our re-factoring. A quick fix, should be to check that the underlying object on which we are passing the array can understand the old array syntax or the python-like syntax. . Fixing all that will take time...this is the problem with technical debt.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-312863531
https://github.com/sofa-framework/sofa/pull/286#issuecomment-313350380:78,Safety,detect,detecting,78,Wouldn't it be possible to add the SVector parsing into the helper::vector by detecting if the first non empty char is a '[' ? This would allow to get rid of svector while preserving it overall functionnality,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-313350380
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:183,Integrability,message,messages,183,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:624,Integrability,message,messages,624,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:474,Security,access,access,474,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:73,Usability,guid,guidelines,73,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:146,Usability,GUID,GUIDELINES,146,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-307788624:93,Usability,guid,guidelines,93,@guparan; ​Thanks for managing the pull request. I'll make a new one according to the commit guidelines within the week .,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-307788624
https://github.com/sofa-framework/sofa/pull/288#issuecomment-306479445:177,Testability,test,test,177,Hi @Younesssss . Thanks for your PR. . I strongly support removing the #define/#ifdef where-ever this is possible because #ifdef leads to code that is very hard to maintain and test in a CI. Your proposition is going toward that so I like it. . Matthieu suggested an alternative way to achieve the same result do you think you can do it or is it too far away from what you had in mind ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-306479445
https://github.com/sofa-framework/sofa/pull/288#issuecomment-306565218:422,Testability,test,test,422,"Hi @damien-marchal,. Yes I will do it. Maybe just need to talk with @matthieu-nesme to; understand more his suggestions. Thanks. 2017-06-06 15:03 GMT+02:00 Damien Marchal <notifications@github.com>:. > Hi @Younesssss <https://github.com/younesssss>; >; > Thanks for your PR.; >; > I strongly support removing the #define/#ifdef where-ever this is possible; > because #ifdef leads to code that is very hard to maintain and test in a; > CI. Your proposition is going toward that so I like it.; >; > Matthieu suggested an alternative way to achieve the same result do you; > think you can do it ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/pull/288#issuecomment-306479445>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AXU08Yg8acAOCZtwUhU61g0EnlJ8Ck5Zks5sBU40gaJpZM4NxEC9>; > .; >. -- ; Yinoussa ADAGOLODJO. Doctorant en Simulation Médicale; Laboratoire ICube - UMR 7357; IRCAD Hôpitaux Universitaires; 1 place de l'hôpital F. 67091 Strasbourg Cedex",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-306565218
https://github.com/sofa-framework/sofa/pull/288#issuecomment-313442661:38,Deployability,update,update,38,[ci-build]; @matthieu-nesme could you update your review?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-313442661
https://github.com/sofa-framework/sofa/pull/288#issuecomment-323303622:94,Deployability,update,update,94,I don't understand this conflict because I have no conflict on my machine even when I took an update. I resolved then the conflict on github interface. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-323303622
https://github.com/sofa-framework/sofa/pull/288#issuecomment-323303622:141,Integrability,interface,interface,141,I don't understand this conflict because I have no conflict on my machine even when I took an update. I resolved then the conflict on github interface. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-323303622
https://github.com/sofa-framework/sofa/pull/288#issuecomment-326613658:121,Integrability,depend,depending,121,Hey @Younesssss only some small last fixes are to bring to your PR in order to compile with options. Just grep all codes depending FixedConstraint to make sure about your PR. You're almost there!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-326613658
https://github.com/sofa-framework/sofa/pull/288#issuecomment-329154253:86,Availability,error,errors,86,"@Younesssss, your PR has been wip for a long time. Could you have a look at the build errors please?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-329154253
https://github.com/sofa-framework/sofa/pull/289#issuecomment-306480023:11,Testability,test,tests,11,I like new tests so thanks for your PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289#issuecomment-306480023
https://github.com/sofa-framework/sofa/pull/290#issuecomment-306482993:325,Safety,risk,risk,325,"@untereiner , . I'm concerned about the the impact of the fix against existing scenes. ; So can you explain a bit more what is fixed ? Was it a broken behavior resulting in a failing test or a failling scene or is it fixing a 'yet un-noticed' and fundamentally broken behavior ? ; If the computation is changed, is there any risk to have other people scenes to behave differently ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290#issuecomment-306482993
https://github.com/sofa-framework/sofa/pull/290#issuecomment-306482993:183,Testability,test,test,183,"@untereiner , . I'm concerned about the the impact of the fix against existing scenes. ; So can you explain a bit more what is fixed ? Was it a broken behavior resulting in a failing test or a failling scene or is it fixing a 'yet un-noticed' and fundamentally broken behavior ? ; If the computation is changed, is there any risk to have other people scenes to behave differently ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290#issuecomment-306482993
https://github.com/sofa-framework/sofa/pull/290#issuecomment-310087786:0,Availability,Ping,Ping,0,Ping @untereiner,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290#issuecomment-310087786
https://github.com/sofa-framework/sofa/pull/290#issuecomment-311888196:123,Testability,test,test,123,"Ok, I have meanly three reasons:; - how explain mechanically that the stiffness is multiplied by a length ?; - there is no test when the length is 0 (almost) (the problem that occured to me); - when the length is very small you will have a very high stiffness which is different from the stiffness you enterred. I understand your concerns but I think the behavior is not what expected (at least for the third reason). The existing scenes take maybe into account these strange behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290#issuecomment-311888196
https://github.com/sofa-framework/sofa/issues/292#issuecomment-306522109:63,Testability,log,log,63,Or use a map tag -> shader stack? this way we should get O(n * log(k) ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/292#issuecomment-306522109
https://github.com/sofa-framework/sofa/issues/292#issuecomment-306744462:348,Safety,avoid,avoid,348,"I don't understand why a single map: tag => stack would not work: for each component, iterate over each of its tags, lookup the corresponding stack in the map and take the topmost shader in the corresponding stack. That's a total O(k * log(k)) for each component, which is O(1) if k is small/bounded. I mean the whole point of using a stack was to avoid linear searches upwards in the first place, so I don't see how using a single stack improves the situation if you have to walk the whole stack upwards before finding the right shader? . It's both more complex than it is now *and* sub-optimal.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/292#issuecomment-306744462
https://github.com/sofa-framework/sofa/issues/292#issuecomment-306744462:236,Testability,log,log,236,"I don't understand why a single map: tag => stack would not work: for each component, iterate over each of its tags, lookup the corresponding stack in the map and take the topmost shader in the corresponding stack. That's a total O(k * log(k)) for each component, which is O(1) if k is small/bounded. I mean the whole point of using a stack was to avoid linear searches upwards in the first place, so I don't see how using a single stack improves the situation if you have to walk the whole stack upwards before finding the right shader? . It's both more complex than it is now *and* sub-optimal.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/292#issuecomment-306744462
https://github.com/sofa-framework/sofa/issues/295#issuecomment-312637459:77,Deployability,update,updated,77,"Hi @WilkGardariki, sorry for the late answer. The dependency packs have been updated.; Thank you for the report !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/295#issuecomment-312637459
https://github.com/sofa-framework/sofa/issues/295#issuecomment-312637459:50,Integrability,depend,dependency,50,"Hi @WilkGardariki, sorry for the late answer. The dependency packs have been updated.; Thank you for the report !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/295#issuecomment-312637459
https://github.com/sofa-framework/sofa/pull/296#issuecomment-307724174:59,Availability,failure,failure,59,"Well, that is a fully labeled PR! ; LGTM (ignoring VS-2015 failure due to side effect).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296#issuecomment-307724174
https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188:143,Modifiability,plugin,plugins,143,"Hi @WilkGardariki,; Thanks for this fix. Let's start the [ci-build]. ; About your question, I guess the simpler is the better. There are other plugins with a scenes folder (CGal, Geomagic).; I am also interested in a _examples vs scenes_ discussion. I personally prefer _scenes_ as I find it more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188
https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188:104,Usability,simpl,simpler,104,"Hi @WilkGardariki,; Thanks for this fix. Let's start the [ci-build]. ; About your question, I guess the simpler is the better. There are other plugins with a scenes folder (CGal, Geomagic).; I am also interested in a _examples vs scenes_ discussion. I personally prefer _scenes_ as I find it more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188
https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531:65,Modifiability,plugin,plugin,65,"I would rather rename every ""scenes"" dir in ""examples"" to follow plugin guidelines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531
https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531:72,Usability,guid,guidelines,72,"I would rather rename every ""scenes"" dir in ""examples"" to follow plugin guidelines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531
https://github.com/sofa-framework/sofa/pull/299#issuecomment-308430717:78,Integrability,message,message,78,I'm ok with the renaming but please make sure to add a WARNING in your commit message as it may break some algos for MultiThreading users.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308430717
https://github.com/sofa-framework/sofa/pull/299#issuecomment-311593533:77,Modifiability,plugin,plugin,77,Nice @WilkGardariki !; Please go ahead ! change the name of the folder in MT plugin ! thanks in advance,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-311593533
https://github.com/sofa-framework/sofa/pull/300#issuecomment-307735750:111,Modifiability,config,config,111,Thank you for this fix.; Starting the builds will be useless here since we do not have a VS-2015_options-debug config.; LGTM though. Anyone to confirm?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300#issuecomment-307735750
https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805:161,Modifiability,plugin,plugin,161,"Hi fred,. Thanks for this PR. I made some totally minor cosmetic comment in the source code. I understand correctly what it does is that is loads by default the plugin that are compiled with sofa. . Maybe I misunderstood the initial purpose of your first PR but I though it was more to autoload a plugin if the one of its component was requested from the scene. Is this stil the purpose of the PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805
https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805:297,Modifiability,plugin,plugin,297,"Hi fred,. Thanks for this PR. I made some totally minor cosmetic comment in the source code. I understand correctly what it does is that is loads by default the plugin that are compiled with sofa. . Maybe I misunderstood the initial purpose of your first PR but I though it was more to autoload a plugin if the one of its component was requested from the scene. Is this stil the purpose of the PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805
https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805:140,Performance,load,loads,140,"Hi fred,. Thanks for this PR. I made some totally minor cosmetic comment in the source code. I understand correctly what it does is that is loads by default the plugin that are compiled with sofa. . Maybe I misunderstood the initial purpose of your first PR but I though it was more to autoload a plugin if the one of its component was requested from the scene. Is this stil the purpose of the PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805
https://github.com/sofa-framework/sofa/pull/301#issuecomment-308349533:80,Modifiability,plugin,plugins,80,"This first PR was initially to answer to the question how to load automatically plugins we deem ""important"" such as SofaPython. ; This PR was quite easy and fast to implement (especially because people agreed on the previous (failed :( ) PR #253 ). And it would lead to an other PR which will remove Image* things in the core of Sofa (and deps and the JPEG bug in ImageQt); Anyway, in a second time, I(?) will think about the introspection system which will be detailed in the proposal page #281",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308349533
https://github.com/sofa-framework/sofa/pull/301#issuecomment-308349533:61,Performance,load,load,61,"This first PR was initially to answer to the question how to load automatically plugins we deem ""important"" such as SofaPython. ; This PR was quite easy and fast to implement (especially because people agreed on the previous (failed :( ) PR #253 ). And it would lead to an other PR which will remove Image* things in the core of Sofa (and deps and the JPEG bug in ImageQt); Anyway, in a second time, I(?) will think about the introspection system which will be detailed in the proposal page #281",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308349533
https://github.com/sofa-framework/sofa/pull/301#issuecomment-311036354:31,Usability,feedback,feedback,31,"Thanks @fredroy for taking the feedback into account. ; To me this PR is ready to merge because it fullfill our checklist and no one said ""no go"" in 15 days.; I rebuild from a fresh [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311036354
https://github.com/sofa-framework/sofa/pull/301#issuecomment-311276205:30,Testability,test,test,30,@fredroy in recent builds the test are failling can you have a look.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311276205
https://github.com/sofa-framework/sofa/pull/301#issuecomment-311932799:89,Availability,failure,failure,89,@damienmarchal tests are fixed (modifying a map while iterating it is always bad...) ; a failure on gcc5.4 but it seems to be the hiccup failing test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311932799
https://github.com/sofa-framework/sofa/pull/301#issuecomment-311932799:15,Testability,test,tests,15,@damienmarchal tests are fixed (modifying a map while iterating it is always bad...) ; a failure on gcc5.4 but it seems to be the hiccup failing test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311932799
https://github.com/sofa-framework/sofa/pull/301#issuecomment-311932799:145,Testability,test,test,145,@damienmarchal tests are fixed (modifying a map while iterating it is always bad...) ; a failure on gcc5.4 but it seems to be the hiccup failing test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311932799
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312257491:212,Deployability,configurat,configurations,212,"Just one small concern ( that can be included if that is not already the case ).; Does the functionnality currently also work with a debug compilation ? ; There may be also some extra care to be taken with multi configurations ide like visual studio, where the same build tree can generate multiple binairies in different folder, and possibly with different names ( for example the '_d' suffix that usually comes along with debug librairies ). On the ""bright side"", if the functionality is not yet there in this PR, I presume all the necessary informations can be extracted from the cmake target properties, so it **should** be feasible. Also it would be more generic since the cmake target name, and the name of the generated binary can differ ( even if this is not a common practice )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312257491
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312257491:212,Modifiability,config,configurations,212,"Just one small concern ( that can be included if that is not already the case ).; Does the functionnality currently also work with a debug compilation ? ; There may be also some extra care to be taken with multi configurations ide like visual studio, where the same build tree can generate multiple binairies in different folder, and possibly with different names ( for example the '_d' suffix that usually comes along with debug librairies ). On the ""bright side"", if the functionality is not yet there in this PR, I presume all the necessary informations can be extracted from the cmake target properties, so it **should** be feasible. Also it would be more generic since the cmake target name, and the name of the generated binary can differ ( even if this is not a common practice )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312257491
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:332,Modifiability,plugin,plugin,332,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:394,Modifiability,Plugin,PluginManager,394,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:570,Modifiability,config,config,570,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:187,Performance,load,load,187,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:445,Performance,load,load,445,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:540,Performance,load,loading,540,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:299,Security,access,access,299,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:44,Testability,test,tested,44,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038
https://github.com/sofa-framework/sofa/pull/301#issuecomment-312813481:168,Modifiability,config,config,168,"@damienmarchal ; As @fjourdes stated, it could happen that the target name is just different from the binary (compiled) name.; For now, the CMake process generates the config name using the target name.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312813481
https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:195,Modifiability,refactor,refactoring,195,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143
https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:214,Testability,test,tests,214,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143
https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:141,Usability,simpl,simply,141,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:433,Availability,recover,recovers,433,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:9,Deployability,update,update,9,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:27,Integrability,wrap,wrap,27,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:61,Integrability,wrap,wrapping,61,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:110,Integrability,wrap,wrapped,110,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:187,Integrability,wrap,wrapping,187,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:301,Integrability,wrap,wrapped,301,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:446,Integrability,wrap,wrapped,446,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:433,Safety,recover,recovers,433,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600
https://github.com/sofa-framework/sofa/pull/304#issuecomment-312731984:165,Modifiability,Flexible,Flexible,165,@matthieu-nesme and @maxime-tournier do you agree if we cut this PR in four on a per files basis instead of per commit ?; It could be:; - Sofa base; - SofaPython; - Flexible; - Compliant,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312731984
https://github.com/sofa-framework/sofa/pull/304#issuecomment-312869368:42,Integrability,depend,depend,42,I am not sure it is doable as things must depend on each other.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312869368
https://github.com/sofa-framework/sofa/pull/304#issuecomment-314772234:41,Testability,test,test,41,hey @damienmarchal is it normal that the test _testCreateObjectDataConversionWarning_ is failing since your last commit ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314772234
https://github.com/sofa-framework/sofa/pull/304#issuecomment-314775298:82,Testability,test,test,82,@hugtalbot No it is not..sorry for that.. I will fix the conflict and the failing test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314775298
https://github.com/sofa-framework/sofa/pull/304#issuecomment-314798964:40,Deployability,update,updated,40,"@hugtalbot I fixed the test, is was not updated to handle the change between repr and str as well as the commit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314798964
https://github.com/sofa-framework/sofa/pull/304#issuecomment-314798964:23,Testability,test,test,23,"@hugtalbot I fixed the test, is was not updated to handle the change between repr and str as well as the commit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314798964
https://github.com/sofa-framework/sofa/pull/304#issuecomment-314827432:41,Testability,test,test,41,"@damienmarchal sure ? it's look like the test is still failing, isn't it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314827432
https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:447,Deployability,release,release,447,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631
https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:469,Deployability,integrat,integrated,469,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631
https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:469,Integrability,integrat,integrated,469,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631
https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:134,Modifiability,plugin,plugin,134,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631
https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:263,Modifiability,plugin,plugin,263,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631
https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578:81,Availability,error,error-plugin-not-foundsofamiscforcefielddev,81,"As explained on the [forum](https://www.sofa-framework.org/community/forum/topic/error-plugin-not-foundsofamiscforcefielddev/#post-9786), the scene makes no sense since it uses deprecated components or components in private plugin. Another scene already shows ShapeMatching example using the ShapeMatching engine: ICPRegistration_ShapeMatching_Engine.scn. There fore the [PR#331](https://github.com/sofa-framework/sofa/pull/331) removes this scene.; Thank you for the notice @lujaindong",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578
https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578:87,Modifiability,plugin,plugin-not-foundsofamiscforcefielddev,87,"As explained on the [forum](https://www.sofa-framework.org/community/forum/topic/error-plugin-not-foundsofamiscforcefielddev/#post-9786), the scene makes no sense since it uses deprecated components or components in private plugin. Another scene already shows ShapeMatching example using the ShapeMatching engine: ICPRegistration_ShapeMatching_Engine.scn. There fore the [PR#331](https://github.com/sofa-framework/sofa/pull/331) removes this scene.; Thank you for the notice @lujaindong",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578
https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578:224,Modifiability,plugin,plugin,224,"As explained on the [forum](https://www.sofa-framework.org/community/forum/topic/error-plugin-not-foundsofamiscforcefielddev/#post-9786), the scene makes no sense since it uses deprecated components or components in private plugin. Another scene already shows ShapeMatching example using the ShapeMatching engine: ICPRegistration_ShapeMatching_Engine.scn. There fore the [PR#331](https://github.com/sofa-framework/sofa/pull/331) removes this scene.; Thank you for the notice @lujaindong",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578
https://github.com/sofa-framework/sofa/issues/308#issuecomment-313043281:9,Testability,test,test,9,Note: To test the bug: Demo/CollisionMultiple.scn related to #270,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-313043281
https://github.com/sofa-framework/sofa/issues/308#issuecomment-315024975:256,Deployability,update,updated,256,"Yes because the mechanicalObject is translating the topology:; `<MechanicalObject dx=""0"" dy=""20"" dz=""29"" rz=""64"" />`; z= 29 - 1.75 = 27.25. The problem is in fact that the position in the regularGrid are not transformed... which is weird as they should be updated by the data graph.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-315024975
https://github.com/sofa-framework/sofa/issues/308#issuecomment-315030239:255,Testability,log,logical,255,"I just checked, this is the same for other topologies. For example if you take the scene: Demos/TriangleSurfaceCutting.scn and add change the mechanicalObject like this:; `<MechanicalObject translation=""10 0 0""/>`. in MeshGmshLoader: x[0] = [0; 10; 0] // logical; in MechanicalObject: x[0] = [10; 10; 0] // logical; in TriangleSetTopologyContainer: x[0] = [0; 10; 0] // because position=@meshLoader.position; in OglModel: x[0] = [10; 10; 0] // due to identityMapping. The problem in the regularGrid case is that if you change the value the position to match the mechanicalObject, you need to apply transformation to all child node. (the code I removed in the PR #324 ). I'm not sure what should be the good way to act?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-315030239
https://github.com/sofa-framework/sofa/issues/308#issuecomment-315030239:307,Testability,log,logical,307,"I just checked, this is the same for other topologies. For example if you take the scene: Demos/TriangleSurfaceCutting.scn and add change the mechanicalObject like this:; `<MechanicalObject translation=""10 0 0""/>`. in MeshGmshLoader: x[0] = [0; 10; 0] // logical; in MechanicalObject: x[0] = [10; 10; 0] // logical; in TriangleSetTopologyContainer: x[0] = [0; 10; 0] // because position=@meshLoader.position; in OglModel: x[0] = [10; 10; 0] // due to identityMapping. The problem in the regularGrid case is that if you change the value the position to match the mechanicalObject, you need to apply transformation to all child node. (the code I removed in the PR #324 ). I'm not sure what should be the good way to act?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-315030239
https://github.com/sofa-framework/sofa/issues/308#issuecomment-355364637:162,Performance,load,load,162,"Yes indeed I see the problem @epernod ; For sure, this has been done to encapsulate the mesh and it only applied when min and max are NOT set. So it's weird, you load a mesh to build a sparse grid over it, without respecting the dimension of the object..; Am I right ?. But such a 1% margin hard coded... hmm not sure to like it but I am not sure to find a proper way to do it (except removing this hack).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355364637
https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101:193,Security,access,access,193,in fact I don't really see where this margin is used as the _min and _max are computed from the vertices.; I don't see where _min and _max are used to encapsulate the vertices... The only read access is in SparseGridTopology::buildVirtualFinerLevels(). I see two solutions:; - The bourrin version: we remove this shift in a branch and check the tests. ; - The pétochard version: we duplicate the min and max field to have the accurate and enlarged one. (I'm for the 1st one); Edit: I forgot the 3rd option: the batard version: we remove the shift without saying it and wait if someone notice ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101
https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101:345,Testability,test,tests,345,in fact I don't really see where this margin is used as the _min and _max are computed from the vertices.; I don't see where _min and _max are used to encapsulate the vertices... The only read access is in SparseGridTopology::buildVirtualFinerLevels(). I see two solutions:; - The bourrin version: we remove this shift in a branch and check the tests. ; - The pétochard version: we duplicate the min and max field to have the accurate and enlarged one. (I'm for the 1st one); Edit: I forgot the 3rd option: the batard version: we remove the shift without saying it and wait if someone notice ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101
https://github.com/sofa-framework/sofa/issues/308#issuecomment-355919112:38,Performance,load,load,38,"this means that in your case when you load the cube.obj of size 2x2x2, by default the BB will be increase. If you want to keep the accurate size of your mesh you need to know min and max...; Or do I miss something?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355919112
https://github.com/sofa-framework/sofa/issues/308#issuecomment-355937944:144,Deployability,update,update,144,"Here all what I am making sure is that, if no value is given to min and max then:; - you compute them from the mesh info (2x2x2); - you compute/update the BB including the safety margin. i.e. min and max are not directly used to compute the BBox to avoid the shifting effect",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355937944
https://github.com/sofa-framework/sofa/issues/308#issuecomment-355937944:172,Safety,safe,safety,172,"Here all what I am making sure is that, if no value is given to min and max then:; - you compute them from the mesh info (2x2x2); - you compute/update the BB including the safety margin. i.e. min and max are not directly used to compute the BBox to avoid the shifting effect",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355937944
https://github.com/sofa-framework/sofa/issues/308#issuecomment-355937944:249,Safety,avoid,avoid,249,"Here all what I am making sure is that, if no value is given to min and max then:; - you compute them from the mesh info (2x2x2); - you compute/update the BB including the safety margin. i.e. min and max are not directly used to compute the BBox to avoid the shifting effect",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355937944
https://github.com/sofa-framework/sofa/pull/310#issuecomment-312254210:53,Usability,simpl,simple,53,Many thanks for all your PR @untereiner . This looks simple and I trust you it is the thing to do. So let's wait our 7 days quarantine if someone says a 'no-go' and merge it otherwise.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310#issuecomment-312254210
https://github.com/sofa-framework/sofa/pull/311#issuecomment-311934013:124,Availability,avail,available,124,Apparently the builder on os x links against Qt4. Is this version of Qt mandatory ? The function devicePixelRatio() is only available starting from Qt5.5,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311#issuecomment-311934013
https://github.com/sofa-framework/sofa/pull/311#issuecomment-311992201:58,Deployability,release,released,58,"I would say that we should drop Qt4 support (Qt5 has been released 5 years ago), and the new GUI will need Qt5.7 anyway....",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311#issuecomment-311992201
https://github.com/sofa-framework/sofa/pull/311#issuecomment-312254579:23,Deployability,update,update,23,So we probably need to update our CI machines with QT5.7... @bcarrez it is for you :). EDIT: we cannot merge that before the update of CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311#issuecomment-312254579
https://github.com/sofa-framework/sofa/pull/311#issuecomment-312254579:125,Deployability,update,update,125,So we probably need to update our CI machines with QT5.7... @bcarrez it is for you :). EDIT: we cannot merge that before the update of CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311#issuecomment-312254579
https://github.com/sofa-framework/sofa/pull/311#issuecomment-312259969:10,Deployability,update,update,10,trying to update qt without updating the whole system (OSx builder is on OSx 10.9...),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311#issuecomment-312259969
https://github.com/sofa-framework/sofa/pull/312#issuecomment-312248734:54,Testability,test,tests,54,Hi @lagarkane . Thanks for this PR. +1 for adding new tests :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-312248734
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:105,Availability,error,error,105,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:7,Deployability,update,updated,7,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:116,Energy Efficiency,Monitor,Monitor,116,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:240,Energy Efficiency,Monitor,Monitor,240,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:50,Testability,test,test,50,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:274,Usability,guid,guidelines,274,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-315045191:165,Deployability,release,releases,165,@damienmarchal you closed and then reopened the PR: Should I change something or is it mergable?; Shouldn't this kind of API-Breaking PRs be merged only on punctual releases?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315045191
https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276:103,Deployability,release,release,103,"Closing & Re-opning was a mistake :). You are right, breaking changes should be done only for punctual release...I wanted to discuss that in issue #318. But given the amount of breaking changes people want to merge...It think maybe the 17.16 will be a ""breaking"" release. To make the change more manageable by user I introduced a recent PR #329 for which I would like to have feedback (or support or thumb-up :)). ; ; Can you describe what exactly are the breaking and if you have time it would be super great if with #PR329 you can provide a custom hook to warn inform user of which changes happens.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276
https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276:263,Deployability,release,release,263,"Closing & Re-opning was a mistake :). You are right, breaking changes should be done only for punctual release...I wanted to discuss that in issue #318. But given the amount of breaking changes people want to merge...It think maybe the 17.16 will be a ""breaking"" release. To make the change more manageable by user I introduced a recent PR #329 for which I would like to have feedback (or support or thumb-up :)). ; ; Can you describe what exactly are the breaking and if you have time it would be super great if with #PR329 you can provide a custom hook to warn inform user of which changes happens.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276
https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276:376,Usability,feedback,feedback,376,"Closing & Re-opning was a mistake :). You are right, breaking changes should be done only for punctual release...I wanted to discuss that in issue #318. But given the amount of breaking changes people want to merge...It think maybe the 17.16 will be a ""breaking"" release. To make the change more manageable by user I introduced a recent PR #329 for which I would like to have feedback (or support or thumb-up :)). ; ; Can you describe what exactly are the breaking and if you have time it would be super great if with #PR329 you can provide a custom hook to warn inform user of which changes happens.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276
https://github.com/sofa-framework/sofa/pull/312#issuecomment-317358404:38,Availability,error,errors,38,Previous build was affected by master errors. Let's [ci-build] again.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-317358404
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323333990:4,Energy Efficiency,Monitor,Monitor,4,"The Monitor test is failing, it seems it should investigated @lagarkane",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323333990
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323333990:12,Testability,test,test,12,"The Monitor test is failing, it seems it should investigated @lagarkane",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323333990
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:408,Availability,down,down,408,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:41,Testability,test,tests,41,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:54,Testability,test,test,54,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:88,Testability,test,test,88,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:131,Testability,test,tests,131,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:179,Testability,test,testInit,179,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:211,Testability,test,testInit,211,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:252,Testability,test,testModif,252,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:285,Testability,test,testModif,285,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:321,Testability,test,tests,321,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:386,Testability,test,test,386,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:431,Testability,test,tests,431,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:444,Testability,test,test,444,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:489,Testability,test,tests,489,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:545,Testability,test,test,545,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323962386:15,Availability,Failure,Failure,15,Test is fixed. Failure was due to the fact that test values were generated before c81e4b73f24c2272e9346be3b5c0a1756ecdca59.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323962386
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323962386:0,Testability,Test,Test,0,Test is fixed. Failure was due to the fact that test values were generated before c81e4b73f24c2272e9346be3b5c0a1756ecdca59.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323962386
https://github.com/sofa-framework/sofa/pull/312#issuecomment-323962386:48,Testability,test,test,48,Test is fixed. Failure was due to the fact that test values were generated before c81e4b73f24c2272e9346be3b5c0a1756ecdca59.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323962386
https://github.com/sofa-framework/sofa/pull/314#issuecomment-313023233:93,Modifiability,plugin,plugin,93,Note: the build fail on OSX is due to API change in boost 1.64 that makes the Multithreading plugin fail to build. I would not pay attention to it until Multithreading is fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314#issuecomment-313023233
https://github.com/sofa-framework/sofa/pull/314#issuecomment-315995143:43,Availability,down,down,43,"great @damienmarchal , unfortunately ci is down for the day !; Let's rebuild tomorrow",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314#issuecomment-315995143
https://github.com/sofa-framework/sofa/pull/314#issuecomment-316832128:63,Availability,failure,failure,63,The CI finished but the dashboard is not up-to date.; The test failure are pre-existing to the PR. So I merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314#issuecomment-316832128
https://github.com/sofa-framework/sofa/pull/314#issuecomment-316832128:58,Testability,test,test,58,The CI finished but the dashboard is not up-to date.; The test failure are pre-existing to the PR. So I merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314#issuecomment-316832128
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:838,Availability,down,downvote,838,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:132,Integrability,depend,dependency,132,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:940,Integrability,depend,dependencies,940,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:174,Modifiability,plugin,plugin,174,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:347,Modifiability,plugin,plugins,347,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:921,Modifiability,plugin,plugin,921,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:961,Modifiability,plugin,plugin,961,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1087,Modifiability,plugin,plugin,1087,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1071,Security,expose,exposed,1071,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1101,Usability,simpl,simply,1101,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:39,Integrability,depend,dependencies,39,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:159,Integrability,depend,dependency,159,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:197,Usability,simpl,simply,197,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:100,Availability,Error,Error,100,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:1778,Availability,error,error,1778,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:1884,Availability,error,error,1884,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:58,Modifiability,plugin,plugins,58,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:187,Modifiability,plugin,plugins,187,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:293,Modifiability,plugin,plugins,293,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:1262,Modifiability,plugin,plugins,1262,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:1363,Modifiability,plugin,plugins,1363,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:1465,Modifiability,plugin,plugins,1465,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:1568,Modifiability,plugin,plugins,1568,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:1654,Modifiability,plugin,plugins,1654,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:1721,Modifiability,plugin,plugins,1721,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904
https://github.com/sofa-framework/sofa/pull/317#issuecomment-315029412:130,Usability,feedback,feedback,130,@maxime-tournier I believe the last commits takes your input into consideration (if I didn't miss anything); Looking forward your feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315029412
https://github.com/sofa-framework/sofa/pull/317#issuecomment-315742489:64,Availability,failure,failures,64,Any idea why building acd79fe caused more than 20 new unit test failures?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315742489
https://github.com/sofa-framework/sofa/pull/317#issuecomment-315742489:59,Testability,test,test,59,Any idea why building acd79fe caused more than 20 new unit test failures?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315742489
https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355130:38,Availability,failure,failures,38,Hey @lagarkane ; There's still 22 new failures of the tests. Is that normal? Looks your commit : 092b19f did it,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355130
https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355130:54,Testability,test,tests,54,Hey @lagarkane ; There's still 22 new failures of the tests. Is that normal? Looks your commit : 092b19f did it,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355130
https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355829:22,Availability,failure,failures,22,"The 20 new unit tests failures are still there, certainly caused by 092b19fd8e922d155a459de09f002f1815ce9a16.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355829
https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355829:16,Testability,test,tests,16,"The 20 new unit tests failures are still there, certainly caused by 092b19fd8e922d155a459de09f002f1815ce9a16.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355829
https://github.com/sofa-framework/sofa/pull/317#issuecomment-325378873:136,Testability,test,tests,136,"Hi dear reviewers,; I'm waiting for the ci-build, but I believe that the problems are now solved, and the fix now comes with a few unit tests =); @matthieu-nesme I also restored the static_assert that I previously removed so the code is not only better.; Any other suggestion?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-325378873
https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808:90,Usability,guid,guide,90,I just submitted a new PR #322 on top of the SceneChecker to implement gentle mecanism to guide users through changes in Sofa. . My underlying target is to favor a bit more the PR that improves things but changes the behavior as long as our users are warned and guided to fix their scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808
https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808:262,Usability,guid,guided,262,I just submitted a new PR #322 on top of the SceneChecker to implement gentle mecanism to guide users through changes in Sofa. . My underlying target is to favor a bit more the PR that improves things but changes the behavior as long as our users are warned and guided to fix their scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808
https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097:375,Deployability,integrat,integration,375,"My point is that the discussion is not whether or not a PR can be breaking or not...because on that everyone agrees...the conclusion is that of course a PR can be breaking.; ; The real discussion is more on:; - how do we manage breaking change to avoid messing others code base and activity because of a sudden change. On that, please have a look at PR #329 ; - what kind of integration & merge flow we can have to facilitate merging of complex/changing PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097
https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097:375,Integrability,integrat,integration,375,"My point is that the discussion is not whether or not a PR can be breaking or not...because on that everyone agrees...the conclusion is that of course a PR can be breaking.; ; The real discussion is more on:; - how do we manage breaking change to avoid messing others code base and activity because of a sudden change. On that, please have a look at PR #329 ; - what kind of integration & merge flow we can have to facilitate merging of complex/changing PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097
https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097:247,Safety,avoid,avoid,247,"My point is that the discussion is not whether or not a PR can be breaking or not...because on that everyone agrees...the conclusion is that of course a PR can be breaking.; ; The real discussion is more on:; - how do we manage breaking change to avoid messing others code base and activity because of a sudden change. On that, please have a look at PR #329 ; - what kind of integration & merge flow we can have to facilitate merging of complex/changing PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097
https://github.com/sofa-framework/sofa/issues/318#issuecomment-331409975:3,Deployability,update,update,3,No update since two month. I close the issue unless someone want to say something more.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-331409975
https://github.com/sofa-framework/sofa/pull/320#issuecomment-313093165:92,Deployability,release,release,92,"Hi Adrien,. Thanks for the PR the I think should go in fast-merge then back-ported to 17.06 release @guparan (could you do the back porting ?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320#issuecomment-313093165
https://github.com/sofa-framework/sofa/pull/320#issuecomment-313344108:43,Modifiability,plugin,plugin,43,"Hi Adrien, . I'm looking into the SofaCUDA plugin but I don't understand where the problem you happens. ; Is it in a separated branch or clone ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320#issuecomment-313344108
https://github.com/sofa-framework/sofa/issues/321#issuecomment-313107628:276,Modifiability,Inherit,Inherit,276,"@damienmarchal yes, setValue is public, but if you look at the implementation of setValue():; ```. void setValue(const std::string& v); {; *beginEdit()=v;; endEdit();; }; ```; it uses the operator=() that is private (and not implemented..):; ```; private:; DataFileName(const Inherit& d);; DataFileName& operator=(const DataFileName&);. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/321#issuecomment-313107628
https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372:151,Deployability,Continuous,Continuous,151,"Hello @flm8620 . It is very interesting, I didn't even knew that stuff in a pair of "" "" could cause compilation problem. ; I'm also surprised that our Continuous integration system is compiling sofa with VS2015 but didn't reported a problem. Maybe something related with the language you use on your system ? . Anyway, thank you very much for your report. If you have time maybe you can submit a pull-request to fix that otherwise I will do it. . Regards,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372
https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372:162,Deployability,integrat,integration,162,"Hello @flm8620 . It is very interesting, I didn't even knew that stuff in a pair of "" "" could cause compilation problem. ; I'm also surprised that our Continuous integration system is compiling sofa with VS2015 but didn't reported a problem. Maybe something related with the language you use on your system ? . Anyway, thank you very much for your report. If you have time maybe you can submit a pull-request to fix that otherwise I will do it. . Regards,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372
https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372:162,Integrability,integrat,integration,162,"Hello @flm8620 . It is very interesting, I didn't even knew that stuff in a pair of "" "" could cause compilation problem. ; I'm also surprised that our Continuous integration system is compiling sofa with VS2015 but didn't reported a problem. Maybe something related with the language you use on your system ? . Anyway, thank you very much for your report. If you have time maybe you can submit a pull-request to fix that otherwise I will do it. . Regards,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372
https://github.com/sofa-framework/sofa/pull/325#issuecomment-313369730:69,Performance,load,loadfrommemory,69,Looks like a total mystery to me :!); Actually I don't even know why loadfrommemory try to access the FS at all.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325#issuecomment-313369730
https://github.com/sofa-framework/sofa/pull/325#issuecomment-313369730:91,Security,access,access,91,Looks like a total mystery to me :!); Actually I don't even know why loadfrommemory try to access the FS at all.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325#issuecomment-313369730
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191:43,Deployability,release,release,43,"That's great !. An improvement would be to release the GIL also in the sofa binded functions : when a binding is called, it should release the GIL, do its potentially costly C++ stuff then acquire the GIL back to safely return in the python script.; This way, we release even more the pressure on the GIL and we can do other things in another thread ... even loading another sofa python scene from another C++ thread.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191:131,Deployability,release,release,131,"That's great !. An improvement would be to release the GIL also in the sofa binded functions : when a binding is called, it should release the GIL, do its potentially costly C++ stuff then acquire the GIL back to safely return in the python script.; This way, we release even more the pressure on the GIL and we can do other things in another thread ... even loading another sofa python scene from another C++ thread.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191:263,Deployability,release,release,263,"That's great !. An improvement would be to release the GIL also in the sofa binded functions : when a binding is called, it should release the GIL, do its potentially costly C++ stuff then acquire the GIL back to safely return in the python script.; This way, we release even more the pressure on the GIL and we can do other things in another thread ... even loading another sofa python scene from another C++ thread.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191:359,Performance,load,loading,359,"That's great !. An improvement would be to release the GIL also in the sofa binded functions : when a binding is called, it should release the GIL, do its potentially costly C++ stuff then acquire the GIL back to safely return in the python script.; This way, we release even more the pressure on the GIL and we can do other things in another thread ... even loading another sofa python scene from another C++ thread.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191:213,Safety,safe,safely,213,"That's great !. An improvement would be to release the GIL also in the sofa binded functions : when a binding is called, it should release the GIL, do its potentially costly C++ stuff then acquire the GIL back to safely return in the python script.; This way, we release even more the pressure on the GIL and we can do other things in another thread ... even loading another sofa python scene from another C++ thread.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313536191
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313602996:173,Deployability,release,release,173,"Glad you like it :-) . But first I need to figure out why it works on our fork but not on this one though :-/ . After that, it would be super sweet to add finer grained GIL release as you suggest, but since we also have the monstro-SofaPython-PR pending I anticipate many merge conflicts, so the plan was to keep this one as small as possible. BTW do we have actual costly or I/O-bound c++ operations exposed in python? And if so, do these happen during simulation or only during scene initialization?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313602996
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313602996:401,Security,expose,exposed,401,"Glad you like it :-) . But first I need to figure out why it works on our fork but not on this one though :-/ . After that, it would be super sweet to add finer grained GIL release as you suggest, but since we also have the monstro-SofaPython-PR pending I anticipate many merge conflicts, so the plan was to keep this one as small as possible. BTW do we have actual costly or I/O-bound c++ operations exposed in python? And if so, do these happen during simulation or only during scene initialization?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313602996
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145:141,Availability,error,error,141,"Ok now it works, but I also need to gil-protect any module initialization that does python stuff, otherwise we get the (righteous) following error:. `Fatal Python error: PyThreadState_Get: no current thread`. and a segfault ensues. . On a related note, there really should be no naked (as in ""not wrapped in a proper `PythonEnvironment` method"") python call apart from bindings methods.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145:163,Availability,error,error,163,"Ok now it works, but I also need to gil-protect any module initialization that does python stuff, otherwise we get the (righteous) following error:. `Fatal Python error: PyThreadState_Get: no current thread`. and a segfault ensues. . On a related note, there really should be no naked (as in ""not wrapped in a proper `PythonEnvironment` method"") python call apart from bindings methods.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145:297,Integrability,wrap,wrapped,297,"Ok now it works, but I also need to gil-protect any module initialization that does python stuff, otherwise we get the (righteous) following error:. `Fatal Python error: PyThreadState_Get: no current thread`. and a segfault ensues. . On a related note, there really should be no naked (as in ""not wrapped in a proper `PythonEnvironment` method"") python call apart from bindings methods.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313640015:57,Performance,load,loading,57,"The only big GIL locking part i can see is the SML scene loading which mix file loading with costly parsing in python and sofa component creation and initialization in C++. In a future PR it will be very interesting to improve this, using python only as a glue and totally avoiding heavy processes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313640015
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313640015:80,Performance,load,loading,80,"The only big GIL locking part i can see is the SML scene loading which mix file loading with costly parsing in python and sofa component creation and initialization in C++. In a future PR it will be very interesting to improve this, using python only as a glue and totally avoiding heavy processes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313640015
https://github.com/sofa-framework/sofa/pull/326#issuecomment-313640015:273,Safety,avoid,avoiding,273,"The only big GIL locking part i can see is the SML scene loading which mix file loading with costly parsing in python and sofa component creation and initialization in C++. In a future PR it will be very interesting to improve this, using python only as a glue and totally avoiding heavy processes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313640015
https://github.com/sofa-framework/sofa/pull/326#issuecomment-314187431:37,Testability,test,tests,37,This PR seems to have problem on the tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314187431
https://github.com/sofa-framework/sofa/pull/326#issuecomment-314418538:104,Usability,feedback,feedback,104,"@damienmarchal you're right, my bad, it does not fail on my build :-/ . Looking into it, thanks for the feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314418538
https://github.com/sofa-framework/sofa/pull/326#issuecomment-317027449:12,Energy Efficiency,green,green,12,"flag ready, green builds, I merge it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-317027449
https://github.com/sofa-framework/sofa/pull/328#issuecomment-314191421:245,Usability,feedback,feedback,245,I thomas...I think something goes wrong in your PR as there is more than thousand file changed :) . I support the idea of removing one of the way to handle vector serialization in sofa. When your PR will be readable I will provide you with more feedback :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328#issuecomment-314191421
https://github.com/sofa-framework/sofa/pull/329#issuecomment-315888752:179,Deployability,release,release,179,"Hi @guparan ; I added tests & the use of SOFA_VERSION but is this contains a real value ? On my system it was 999999; which is pretty useless. Could the value be set to the ""next release"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329#issuecomment-315888752
https://github.com/sofa-framework/sofa/pull/329#issuecomment-315888752:22,Testability,test,tests,22,"Hi @guparan ; I added tests & the use of SOFA_VERSION but is this contains a real value ? On my system it was 999999; which is pretty useless. Could the value be set to the ""next release"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329#issuecomment-315888752
https://github.com/sofa-framework/sofa/pull/329#issuecomment-315979793:291,Security,access,access,291,"Hey,; I also tried on my side and faced the same problem. I ended up changing versions like this:; ```; ## Version; set(SOFAFRAMEWORK_VERSION ""17.12.dev""). ## sofa/version.h; set(SOFA_VERSION ""1712xx""); set(SOFA_VERSION_STR ""\""17.12.dev\""""); ```; Then including `<sofa/version.h>` gives you access to `SOFA_VERSION_STR`.; What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329#issuecomment-315979793
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:1105,Deployability,update,update,1105,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:344,Security,validat,validate,344,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:1212,Security,validat,validate,1212,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:335,Testability,test,tests,335,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:558,Testability,test,test,558,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:1124,Testability,test,tests,1124,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:1138,Testability,test,tests,1138,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:1457,Testability,log,logging,1457,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:1692,Testability,log,logging,1692,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:497,Availability,toler,tolerance,497,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:18,Testability,test,tests,18,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:162,Testability,test,tests,162,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:181,Testability,test,tests,181,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:250,Testability,test,tests,250,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:335,Testability,test,tests,335,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:349,Testability,test,testing,349,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:425,Testability,test,tests,425,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:554,Deployability,update,updated,554,"Hi Thomas,. You said:; ""As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that."". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manual",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1203,Deployability,update,update,1203,". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:782,Safety,detect,detect,782,"Hi Thomas,. You said:; ""As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that."". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manual",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:734,Security,validat,validates,734,"Hi Thomas,. You said:; ""As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that."". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manual",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:856,Security,validat,validating,856,"Hi Thomas,. You said:; ""As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that."". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manual",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1357,Security,validat,validate,1357,"tion format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not v",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1433,Security,validat,validate,1433,"n, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not very good to explains things in english so if you want we can continue in by email in french.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1569,Security,validat,validate,1569,"n, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not very good to explains things in english so if you want we can continue in by email in french.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:689,Testability,test,tests,689,"Hi Thomas,. You said:; ""As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that."". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manual",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:826,Testability,test,tests,826,"Hi Thomas,. You said:; ""As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that."". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manual",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1278,Testability,test,test,1278,"tion format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not v",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1334,Testability,test,test,1334,"tion format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not v",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1348,Testability,test,tests,1348,"tion format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not v",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1424,Testability,test,tests,1424,"n, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not very good to explains things in english so if you want we can continue in by email in french.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1560,Testability,test,tests,1560,"n, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not very good to explains things in english so if you want we can continue in by email in french.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626
https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088:166,Performance,perform,performance,166,"Right for the overhead, my target was clearly to minimize the developement time because this is a very scarce resource. The good news I see is that if the function a performance limiting we are still able to improve it a lot (by order of magnitude).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088
https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088:38,Usability,clear,clearly,38,"Right for the overhead, my target was clearly to minimize the developement time because this is a very scarce resource. The good news I see is that if the function a performance limiting we are still able to improve it a lot (by order of magnitude).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088
https://github.com/sofa-framework/sofa/pull/332#issuecomment-318173945:535,Deployability,update,update,535,@hugtalbot I already give my opinion in #PR 330. ; And it is: please don't merge it now and give us time to find a smoother way of managing the API change. . I re-explain the situation: ; This PR add Python like serialization&deserialization ; - The de-serialization preserve backward compatibility. ; - The serizaliation is changing the behavior on how Sofa is serializing data. The new behavior is implemented in place of the old one and thus is breaking the API. This API exists since years in Sofa. It will thus cost time to fix & update external code-base. The situation is made worse because the API breaks is silent (ie the code will compile but not work as expected). Breaking the API is not mandatory to implement a python like serialization. So I strongly recommend to implement a non breaking solution as a transition... ; Alternative solutions I have in mind are:; - a cheap10 lines python approach based on repr (see previous response) (A PR with this would change two time less files and be a non breaking change).; - a full C++ version in the form of a getStringValueAsPython ; - a full C++ version in the form of an extra parameter to getStringValue; - ...other ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332#issuecomment-318173945
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:165,Availability,error,error,165,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:554,Availability,error,error,554,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:263,Deployability,release,release,263,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:285,Deployability,release,release,285,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:398,Energy Efficiency,power,power,398,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:343,Integrability,message,messages,343,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:560,Integrability,message,messages,560,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:36,Usability,feedback,feedback,36,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/pull/334#issuecomment-317521296:45,Testability,test,test,45,"and if I was picky, I would say that a small test is missing !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/334#issuecomment-317521296
https://github.com/sofa-framework/sofa/pull/335#issuecomment-318066743:37,Testability,test,tests,37,"This PR is not ready at all, 25 unit tests are crashing 😢",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335#issuecomment-318066743
https://github.com/sofa-framework/sofa/pull/335#issuecomment-318203462:25,Safety,safe,safe-guard,25,"Thanks Guillaume for the safe-guard eyes. ; A 2 character fix later now all the tests are passing so I switched the status ""to review"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335#issuecomment-318203462
https://github.com/sofa-framework/sofa/pull/335#issuecomment-318203462:80,Testability,test,tests,80,"Thanks Guillaume for the safe-guard eyes. ; A 2 character fix later now all the tests are passing so I switched the status ""to review"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335#issuecomment-318203462
https://github.com/sofa-framework/sofa/issues/336#issuecomment-316434058:133,Integrability,wrap,wrap,133,We have a branch with our work on https://github.com/mimesis-inria/sofa/tree/wip_pythonAdvancedTimer; We try to create a class which wrap the advanced timer and that can be binded using Python... without success so far.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316434058
https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:238,Integrability,wrap,wrap,238,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409
https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:342,Integrability,protocol,protocol,342,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409
https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:649,Usability,simpl,simple,649,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409
https://github.com/sofa-framework/sofa/pull/337#issuecomment-318174397:12,Usability,feedback,feedback,12,"Hi all, any feedback on this PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337#issuecomment-318174397
https://github.com/sofa-framework/sofa/pull/337#issuecomment-319605824:36,Availability,alive,alive,36,"Like you, I guess runSofa will stay alive (albeit half-undead) for few months more so I totally approve these commits (especially the cleaning ;) ); As soon it compiles/runs successfully, lets merge it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337#issuecomment-319605824
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803:562,Deployability,integrat,integration,562,"It should be zero by default in my opinion. ; There is also a little confusion because there are currently two ways to specify the rayleigh damping parameters. ; If you use `EulerImplicitSolver` rayleigh damping is specified at the solver level. ; However both the `ForceField` and `Mass` API in SofaCore also implements rayleigh damping... provided you use `kfactorIncludingRayleighDamping` instead of `kfactor` when assembling the stiffness and the mass. This changed was introduced quite a long time ago, because in the Compliant plugin, the solvers for time integration do not implement global Rayleigh damping, but a more ""local"" one, delegated to each of the `Mass` and `Forcefield` components. ; So short answer is : yes should be zero. But it could break a **lot** of scenes that extensively rely on the default damping values to actually work... which mostly happens when you do not pay attention about the unit system you want to use in your scene ( e.g meters and kilograms versus millimetres and grams ) . I would also like to have the opinion of someone knowledgeable in that particular area. Rayleigh stiffness factor, contrary to Rayleigh mass factor, is not unit less. It is s^-1 as far as I can remember. Would it be better to specify it as unit less factor instead (and then have it internally divided by the current time step value), so that the value has a sort of consistent meaning regardless of the time step chosen ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803:964,Energy Efficiency,meter,meters,964,"It should be zero by default in my opinion. ; There is also a little confusion because there are currently two ways to specify the rayleigh damping parameters. ; If you use `EulerImplicitSolver` rayleigh damping is specified at the solver level. ; However both the `ForceField` and `Mass` API in SofaCore also implements rayleigh damping... provided you use `kfactorIncludingRayleighDamping` instead of `kfactor` when assembling the stiffness and the mass. This changed was introduced quite a long time ago, because in the Compliant plugin, the solvers for time integration do not implement global Rayleigh damping, but a more ""local"" one, delegated to each of the `Mass` and `Forcefield` components. ; So short answer is : yes should be zero. But it could break a **lot** of scenes that extensively rely on the default damping values to actually work... which mostly happens when you do not pay attention about the unit system you want to use in your scene ( e.g meters and kilograms versus millimetres and grams ) . I would also like to have the opinion of someone knowledgeable in that particular area. Rayleigh stiffness factor, contrary to Rayleigh mass factor, is not unit less. It is s^-1 as far as I can remember. Would it be better to specify it as unit less factor instead (and then have it internally divided by the current time step value), so that the value has a sort of consistent meaning regardless of the time step chosen ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803:562,Integrability,integrat,integration,562,"It should be zero by default in my opinion. ; There is also a little confusion because there are currently two ways to specify the rayleigh damping parameters. ; If you use `EulerImplicitSolver` rayleigh damping is specified at the solver level. ; However both the `ForceField` and `Mass` API in SofaCore also implements rayleigh damping... provided you use `kfactorIncludingRayleighDamping` instead of `kfactor` when assembling the stiffness and the mass. This changed was introduced quite a long time ago, because in the Compliant plugin, the solvers for time integration do not implement global Rayleigh damping, but a more ""local"" one, delegated to each of the `Mass` and `Forcefield` components. ; So short answer is : yes should be zero. But it could break a **lot** of scenes that extensively rely on the default damping values to actually work... which mostly happens when you do not pay attention about the unit system you want to use in your scene ( e.g meters and kilograms versus millimetres and grams ) . I would also like to have the opinion of someone knowledgeable in that particular area. Rayleigh stiffness factor, contrary to Rayleigh mass factor, is not unit less. It is s^-1 as far as I can remember. Would it be better to specify it as unit less factor instead (and then have it internally divided by the current time step value), so that the value has a sort of consistent meaning regardless of the time step chosen ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803:533,Modifiability,plugin,plugin,533,"It should be zero by default in my opinion. ; There is also a little confusion because there are currently two ways to specify the rayleigh damping parameters. ; If you use `EulerImplicitSolver` rayleigh damping is specified at the solver level. ; However both the `ForceField` and `Mass` API in SofaCore also implements rayleigh damping... provided you use `kfactorIncludingRayleighDamping` instead of `kfactor` when assembling the stiffness and the mass. This changed was introduced quite a long time ago, because in the Compliant plugin, the solvers for time integration do not implement global Rayleigh damping, but a more ""local"" one, delegated to each of the `Mass` and `Forcefield` components. ; So short answer is : yes should be zero. But it could break a **lot** of scenes that extensively rely on the default damping values to actually work... which mostly happens when you do not pay attention about the unit system you want to use in your scene ( e.g meters and kilograms versus millimetres and grams ) . I would also like to have the opinion of someone knowledgeable in that particular area. Rayleigh stiffness factor, contrary to Rayleigh mass factor, is not unit less. It is s^-1 as far as I can remember. Would it be better to specify it as unit less factor instead (and then have it internally divided by the current time step value), so that the value has a sort of consistent meaning regardless of the time step chosen ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:338,Integrability,depend,dependent,338,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:32,Usability,feedback,feedback,32,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:325,Usability,clear,clearly,325,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855
https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674:389,Deployability,install,installDefaultChangeSets,389,"@EulalieCoevoet is right, changing parameter without warning is bad ; @hugtalbot it is very easy, there is two options. One consist in adding some test in the init() function of the component to detect if the data is set or not by the user and provide the adequate message. The other is to add a dedicated rules in the SceneChecker at the following of: ; ```cpp. void SceneCheckAPIChange::installDefaultChangeSets(); {; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""BoxStiffSpringForceField"" ); msg_warning(o) << ""BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'"" ;; }) ;; ```. @fredroy Eulalie also report that there was some changes in the way shaders are pass to components and that old working behavior stopped working without warnings so adding warning in the same way would be nice (@EulalieCoevoet).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674
https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674:265,Integrability,message,message,265,"@EulalieCoevoet is right, changing parameter without warning is bad ; @hugtalbot it is very easy, there is two options. One consist in adding some test in the init() function of the component to detect if the data is set or not by the user and provide the adequate message. The other is to add a dedicated rules in the SceneChecker at the following of: ; ```cpp. void SceneCheckAPIChange::installDefaultChangeSets(); {; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""BoxStiffSpringForceField"" ); msg_warning(o) << ""BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'"" ;; }) ;; ```. @fredroy Eulalie also report that there was some changes in the way shaders are pass to components and that old working behavior stopped working without warnings so adding warning in the same way would be nice (@EulalieCoevoet).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674
https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674:195,Safety,detect,detect,195,"@EulalieCoevoet is right, changing parameter without warning is bad ; @hugtalbot it is very easy, there is two options. One consist in adding some test in the init() function of the component to detect if the data is set or not by the user and provide the adequate message. The other is to add a dedicated rules in the SceneChecker at the following of: ; ```cpp. void SceneCheckAPIChange::installDefaultChangeSets(); {; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""BoxStiffSpringForceField"" ); msg_warning(o) << ""BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'"" ;; }) ;; ```. @fredroy Eulalie also report that there was some changes in the way shaders are pass to components and that old working behavior stopped working without warnings so adding warning in the same way would be nice (@EulalieCoevoet).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674
https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674:147,Testability,test,test,147,"@EulalieCoevoet is right, changing parameter without warning is bad ; @hugtalbot it is very easy, there is two options. One consist in adding some test in the init() function of the component to detect if the data is set or not by the user and provide the adequate message. The other is to add a dedicated rules in the SceneChecker at the following of: ; ```cpp. void SceneCheckAPIChange::installDefaultChangeSets(); {; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""BoxStiffSpringForceField"" ); msg_warning(o) << ""BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'"" ;; }) ;; ```. @fredroy Eulalie also report that there was some changes in the way shaders are pass to components and that old working behavior stopped working without warnings so adding warning in the same way would be nice (@EulalieCoevoet).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:99,Deployability,release,release,99,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:342,Deployability,update,update,342,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:818,Deployability,update,update,818,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:149,Modifiability,plugin,plugins,149,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:317,Modifiability,plugin,plugin,317,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:460,Modifiability,plugin,plugins,460,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:858,Usability,simpl,simply,858,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473:85,Modifiability,plugin,plugins,85,"Not a lot of contribution here. . In recent PR I'm doing moving code from modules to plugins. ; I think that the followin approach combining plugins & packages (group of selected plugin or components); plugins:; - plugin1; - plugin2; - plugin3; - plugin4. packages:; - SofaAdvanced (include pluin1, plugin2); - SofaMisc (include plugin3, plugin4); - SofaNG(include plugin1, and MechanicalFEM); .... What do you think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473
https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473:141,Modifiability,plugin,plugins,141,"Not a lot of contribution here. . In recent PR I'm doing moving code from modules to plugins. ; I think that the followin approach combining plugins & packages (group of selected plugin or components); plugins:; - plugin1; - plugin2; - plugin3; - plugin4. packages:; - SofaAdvanced (include pluin1, plugin2); - SofaMisc (include plugin3, plugin4); - SofaNG(include plugin1, and MechanicalFEM); .... What do you think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473
https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473:179,Modifiability,plugin,plugin,179,"Not a lot of contribution here. . In recent PR I'm doing moving code from modules to plugins. ; I think that the followin approach combining plugins & packages (group of selected plugin or components); plugins:; - plugin1; - plugin2; - plugin3; - plugin4. packages:; - SofaAdvanced (include pluin1, plugin2); - SofaMisc (include plugin3, plugin4); - SofaNG(include plugin1, and MechanicalFEM); .... What do you think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473
https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473:202,Modifiability,plugin,plugins,202,"Not a lot of contribution here. . In recent PR I'm doing moving code from modules to plugins. ; I think that the followin approach combining plugins & packages (group of selected plugin or components); plugins:; - plugin1; - plugin2; - plugin3; - plugin4. packages:; - SofaAdvanced (include pluin1, plugin2); - SofaMisc (include plugin3, plugin4); - SofaNG(include plugin1, and MechanicalFEM); .... What do you think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473
https://github.com/sofa-framework/sofa/issues/346#issuecomment-330655449:58,Usability,feedback,feedback,58,This include PR #389 #407 #396 ; It would be nice to have feedback..otherwise...well after merge it will be to late ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-330655449
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332151757:691,Modifiability,plugin,pluginization,691,Here is another contribution to handle in an organized and smooth way sofa's components lifetime and deprecation. The idea is to have three sets of components in the CMakeList.txt. ; - the first sets contains more or less the SofaNG components.; - the second sets contains all existing sofa components. ; - the third sets contains deprecated components. . Selecting which set to compile is controlled using a CMakeList argument in an inclusive way (AllComponent include SofaNG while deprecated includes allComponent) . When a component is in the deprecated set we should add the corresponding line to the ; SceneChecker to warn users in a friendly way. This approach is complementary to the pluginization of module which allow user to control the kinds of feature they need and don't compile the others. . What do you think about it ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332151757
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332165689:587,Usability,simpl,simplest,587,"For me handling different sets of sofa components with a lots of CMakeLists is cumbersome. ; I am not ashamed to say that I do not understand the difference between SofaKernel/SofaFramework/SofaMisc/SofaNG/SofaAdvanced/SofaGeneral. I would suggest an another direction more in the spirit of Qt, e.g. having meaningful modules. ; In Qt they have: Qt Core/ Qt Multimedia / Qt Network etc. ; I suggest to have something similar: Sofa Core (with only the glue) / Sofa Solvers / Sofa Elastic / Sofa Fluid / Sofa Collision /; In each of these modules we could have several algorithms from the simplest and cheap to the more complex expensive one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332165689
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:636,Deployability,integrat,integration,636,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:1434,Deployability,integrat,integrate,1434,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:636,Integrability,integrat,integration,636,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:1434,Integrability,integrat,integrate,1434,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:972,Modifiability,refactor,refactoring,972,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:1735,Modifiability,plugin,pluginization,1735,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:15,Usability,feedback,feedback,15,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:713,Usability,clear,clear,713,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180654:393,Modifiability,plugin,plugins,393,"Hi Damien. I understand what you want to do (I think) and it's certainly an important aspect of cleaning SOFA. If by moving a component to a specific location we change its 'status' to 'deprecated' (and the user receives the appropriate warning), it seems a very good solution.; However, I did not understand how we'll do this in practice with SOFA-NG. In the many components that would go in plugins, some of them need to be flagged as 'deprecated' and others as 'too buggy for SOFA-NG', i.e. how / when do we decide where a component sits on its own life cycle? Knowing that I would be very tempted to put many of these in a 'close to retirement' state ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180654
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180994:3,Availability,fault,fault,3,"my fault, I didn't understand your point at the first time. I agree with you that managing the deprecation with specific sets in a CMakeLists can be efficient.; In my mind the place you put the code and its management are somehow connected especially when lighten ""sofa"" because nobody is defining what sofa is/contains/is reduced to. ; More I think about more I think that there is no sofa core or whatever. There are files which have a meaning to be together.; Instead of removing files/classes/components I suggested to think about moving files/classes/components and then evaluate their stage of deprecation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180994
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180994:149,Energy Efficiency,efficient,efficient,149,"my fault, I didn't understand your point at the first time. I agree with you that managing the deprecation with specific sets in a CMakeLists can be efficient.; In my mind the place you put the code and its management are somehow connected especially when lighten ""sofa"" because nobody is defining what sofa is/contains/is reduced to. ; More I think about more I think that there is no sofa core or whatever. There are files which have a meaning to be together.; Instead of removing files/classes/components I suggested to think about moving files/classes/components and then evaluate their stage of deprecation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180994
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180994:323,Energy Efficiency,reduce,reduced,323,"my fault, I didn't understand your point at the first time. I agree with you that managing the deprecation with specific sets in a CMakeLists can be efficient.; In my mind the place you put the code and its management are somehow connected especially when lighten ""sofa"" because nobody is defining what sofa is/contains/is reduced to. ; More I think about more I think that there is no sofa core or whatever. There are files which have a meaning to be together.; Instead of removing files/classes/components I suggested to think about moving files/classes/components and then evaluate their stage of deprecation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180994
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1822,Energy Efficiency,reduce,reduce,1822,"of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1764,Modifiability,plugin,plugins,1764,"of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1794,Modifiability,plugin,plugins,1794,"of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1951,Modifiability,plugin,plugins,1951,"ng bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:2181,Modifiability,plugin,plugins,2181,"o ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per day); * 150 (number of sofa developpers); = 3000 seconds per day. ; ```; The return of investment is very high :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:2636,Modifiability,coupling,coupling,2636,"o ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per day); * 150 (number of sofa developpers); = 3000 seconds per day. ; ```; The return of investment is very high :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1501,Performance,load,loading,1501,"the deprecated set. This is very interesting question but it deserve a whole issue & STC or an autocratic gentle decision :). To me the presented approach is interesting as:; - it is incremental and thus we don't have to wait any decision of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:28,Usability,feedback,feedback,28,"Hi Stéphane, thanks for the feedback, . If we split the existing set of components into sub-sets eg (""stable"", ""fullset"", ""deprecated"") our starting point would be the current sofa with everything in the ""fullset"". Starting from that we can start moving the good enough one in the ""minimal"" or ""stable"" set, the bad ones into the ""deprecated"" set and keep the one we cannot decide into the ""fullset"". . You are totally right that this proposal is not providing any ideas on who will take the decision to move one component into the deprecated set. This is very interesting question but it deserve a whole issue & STC or an autocratic gentle decision :). To me the presented approach is interesting as:; - it is incremental and thus we don't have to wait any decision of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functiona",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:2134,Usability,clear,clear,2134,"o ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per day); * 150 (number of sofa developpers); = 3000 seconds per day. ; ```; The return of investment is very high :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332342779:114,Integrability,depend,dependency,114,There is also a big challenge connected to deprecating/SofaNG and moving component. It is cutting the edge in the dependency graph. Some edge are of course legitimate...but for plenty of them this is the result of either:; - putting method definition in headers (which thus require the include of used components); - required for template instantiation. This make every code change a real nightmare.So buy a chainsaw and submit PR to cut into this forest of dependencies (again it is better to locate the object that are easily fix).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332342779
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332342779:458,Integrability,depend,dependencies,458,There is also a big challenge connected to deprecating/SofaNG and moving component. It is cutting the edge in the dependency graph. Some edge are of course legitimate...but for plenty of them this is the result of either:; - putting method definition in headers (which thus require the include of used components); - required for template instantiation. This make every code change a real nightmare.So buy a chainsaw and submit PR to cut into this forest of dependencies (again it is better to locate the object that are easily fix).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332342779
https://github.com/sofa-framework/sofa/pull/347#issuecomment-317654029:199,Usability,feedback,feedback,199,"hey @maxime-tournier could you provide me some info for the changelog ?; i also add a flag setting your PR as wip, but do not hesitate to change its status to review when the ci is fine and you want feedback. Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-317654029
https://github.com/sofa-framework/sofa/pull/347#issuecomment-318193347:119,Safety,avoid,avoid,119,@maxime-tournier As I made the revert and it seems it cause you extra work... ? Could I have done thing differently to avoid that ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-318193347
https://github.com/sofa-framework/sofa/pull/347#issuecomment-319000414:419,Usability,simpl,simple,419,"@damienmarchal there's not really anything you could've done differently, that was just the first time I encountered this situation. I tried re-merging my branch on a new PR and it succeeded, but the build failed since all the previous changes were reverted (so no `PythonEnvironment::gil` defined, etc). I had to find and revert the revert commit, then push it to the PR branch to get the changes back in. It was very simple in the end but for a while it got me pretty worried :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-319000414
https://github.com/sofa-framework/sofa/pull/347#issuecomment-325585516:6,Testability,test,tests,6,build/tests seem good now,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-325585516
https://github.com/sofa-framework/sofa/pull/350#issuecomment-318602338:48,Testability,test,tests,48,Let's try something new: [ci-build] [with-scene-tests] 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350#issuecomment-318602338
https://github.com/sofa-framework/sofa/pull/350#issuecomment-319609572:38,Testability,test,tests,38,One more time! [ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350#issuecomment-319609572
https://github.com/sofa-framework/sofa/pull/350#issuecomment-321011941:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350#issuecomment-321011941
https://github.com/sofa-framework/sofa/pull/351#issuecomment-318653165:48,Modifiability,plugin,plugin,48,"There is still a build problem with the ""image"" plugin. See issue #352 .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351#issuecomment-318653165
https://github.com/sofa-framework/sofa/issues/352#issuecomment-343490254:30,Modifiability,config,configs,30,"CGAL is now enabled on CI for configs mac_clang-3.4_options, ubuntu_gcc-5.4_options, ubuntu_clang-3.8_options and ubuntu_clang-3.8_options-debug.; Thus, I close this issue :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352#issuecomment-343490254
https://github.com/sofa-framework/sofa/pull/353#issuecomment-325370348:133,Modifiability,plugin,plugin,133,"Hi all, . It was pointed by Bruno Marques that this format if very close to mhd. So we should use it. ; As Mhd is supported by Image plugin we can close this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353#issuecomment-325370348
https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815:602,Testability,test,tests,602,"Hi Thomas,. Glad you made this PR, so thank you. ; ; Some feedback:; - Everything in sofa is a component so the default name of ""DistanceGridComponent"" should be shortened into ""DistanceGrid"" when it is used in the scene. You can do that by overriding the function std::string Base::getClassName() const.; - I would be much better to have the number of samples (the nx,ny,nz) stored at the beginning of the tmg file. ; - I assume that in MeshGenerationFromDG, the DG is for DistanceGrid. As it work with ImplicitShape wouldn't it be better to name it MeshGenerationFromImplicitShape ? ; - There is not tests for the added classes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815
https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815:58,Usability,feedback,feedback,58,"Hi Thomas,. Glad you made this PR, so thank you. ; ; Some feedback:; - Everything in sofa is a component so the default name of ""DistanceGridComponent"" should be shortened into ""DistanceGrid"" when it is used in the scene. You can do that by overriding the function std::string Base::getClassName() const.; - I would be much better to have the number of samples (the nx,ny,nz) stored at the beginning of the tmg file. ; - I assume that in MeshGenerationFromDG, the DG is for DistanceGrid. As it work with ImplicitShape wouldn't it be better to name it MeshGenerationFromImplicitShape ? ; - There is not tests for the added classes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815
https://github.com/sofa-framework/sofa/pull/354#issuecomment-322049145:357,Deployability,update,update,357,@ThomasGosse & @hugtalbot about the nameing of DistanceGrid. The easy path:; - don't rename DistanceGridComponent . Intermediate path:; - rename DistanceGridComponent to DistanceField . The hard path (probably in a future PR if we want to):; - your component should be named DistanceGrid; - remove the alias 'DistanceGrid' on DistanceGridCollisionModel ; - update all the Scenes to use DistanceGridCollisionModel; - add a rules in the SceneChecker (see recent PR about it) that warns that for sofa version < 17.12 DistanceGrid have been changed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-322049145
https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316:124,Availability,avail,available,124,"Ok so I see still a lot of change to do before to have a clean PR to merge. ; The first change is probably to make the code available in an independant plugin. ; I wonder if this could be an opportunity to make the whole VolumetricData a plugin ....this could be a kind of gentle test for sofa core pluginiization, . @guparan , @hugtalbot , @fredroy any opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316
https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316:152,Modifiability,plugin,plugin,152,"Ok so I see still a lot of change to do before to have a clean PR to merge. ; The first change is probably to make the code available in an independant plugin. ; I wonder if this could be an opportunity to make the whole VolumetricData a plugin ....this could be a kind of gentle test for sofa core pluginiization, . @guparan , @hugtalbot , @fredroy any opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316
https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316:238,Modifiability,plugin,plugin,238,"Ok so I see still a lot of change to do before to have a clean PR to merge. ; The first change is probably to make the code available in an independant plugin. ; I wonder if this could be an opportunity to make the whole VolumetricData a plugin ....this could be a kind of gentle test for sofa core pluginiization, . @guparan , @hugtalbot , @fredroy any opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316
https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316:299,Modifiability,plugin,pluginiization,299,"Ok so I see still a lot of change to do before to have a clean PR to merge. ; The first change is probably to make the code available in an independant plugin. ; I wonder if this could be an opportunity to make the whole VolumetricData a plugin ....this could be a kind of gentle test for sofa core pluginiization, . @guparan , @hugtalbot , @fredroy any opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316
https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316:280,Testability,test,test,280,"Ok so I see still a lot of change to do before to have a clean PR to merge. ; The first change is probably to make the code available in an independant plugin. ; I wonder if this could be an opportunity to make the whole VolumetricData a plugin ....this could be a kind of gentle test for sofa core pluginiization, . @guparan , @hugtalbot , @fredroy any opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316
https://github.com/sofa-framework/sofa/pull/354#issuecomment-325639135:70,Modifiability,plugin,plugin,70,"Hi all,. I'm still not sure if moving the whole VolumetricData into a plugin is a move we want to make so I pushed the current version to get your opinion if the direction is ok for you (or not). ; If we are courageous... is suggest re-organizing the directory/file layout otherwise we could just have all the file dropped into the plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325639135
https://github.com/sofa-framework/sofa/pull/354#issuecomment-325639135:332,Modifiability,plugin,plugin,332,"Hi all,. I'm still not sure if moving the whole VolumetricData into a plugin is a move we want to make so I pushed the current version to get your opinion if the direction is ok for you (or not). ; If we are courageous... is suggest re-organizing the directory/file layout otherwise we could just have all the file dropped into the plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325639135
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323679624:218,Usability,simpl,simplest,218,"I most definitely agree with you, this is very annoying. In fact, I have a custom build of the main SOFA executable just for this. As of now, there is no mechanism I know of that will forward `sys.argv` correctly. The simplest and by far the most natural solution would be to forward anything happening after `--` to `sys.argv`. . Unless there is a compelling reason not to do so (@damienmarchal ?), I'll give it a quick shot soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323679624
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323685597:533,Availability,avail,available,533,"Ok so after a quick look at the [code](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/framework/sofa/helper/ArgumentParser.cpp#L128), there is already a path that handles `--` in a non-standard way. Any argument following `--` is added to the files list, and all but the first files are ignored in the main `runSofa` executable. I don't really know if there are other binaries relying on this behavior, so what we could do is:; - either handle `--` properly, i.e. all arguments after `--` are ignored by SOFA and made available for further use, in this case by forwarding them to python.; - or add an `--extra` or `--argv` special argument that will do the same without interfering with current behaviour.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323685597
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821:161,Performance,load,loaded,161,"Hi all,. To me there is several questions here... ; 1- one is how to pass command line argument to python.; 2- one is how to get the file name associated with a loaded scene.; 3- one is how to execute multiple sofa in // with small difference in the scene.; ; 1-; To pass command line argument to python and answering Maxime suggestion I prefer something like --extra or --scene-argv so that we don't have to take care of not breaking someone's code. . 2-; Getting the filename using a binded function in the Sofa python module.; Filename only make sense in specific case, i.e. when we have a single scene loaded from a file (as in runSofa) of course this means nothing when you have no scene files (dynamically generating the scene) or you have loaded multiple scene. So I think this shouldn't be part of the Sofa python module but could find its place in a separated RunSofa python module that would expose things specific to the runSofaX application. Actually I would like to have this kind of module for other reasons. . 3-; About the general workflow of launching multiple scene. We have in Defrost few python scripts called sofa-launcher that we use to execute in parallel multiple sofa instances of a templated scene. The parallel execution can be done on a single machine or a a cluster of linux with ssh access, scene specific data are saved in temporary directories or gathered by the calling script for further processing (eg: plotting the result). think this could prefectly match what you want to do so I will make a PR for that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821:606,Performance,load,loaded,606,"Hi all,. To me there is several questions here... ; 1- one is how to pass command line argument to python.; 2- one is how to get the file name associated with a loaded scene.; 3- one is how to execute multiple sofa in // with small difference in the scene.; ; 1-; To pass command line argument to python and answering Maxime suggestion I prefer something like --extra or --scene-argv so that we don't have to take care of not breaking someone's code. . 2-; Getting the filename using a binded function in the Sofa python module.; Filename only make sense in specific case, i.e. when we have a single scene loaded from a file (as in runSofa) of course this means nothing when you have no scene files (dynamically generating the scene) or you have loaded multiple scene. So I think this shouldn't be part of the Sofa python module but could find its place in a separated RunSofa python module that would expose things specific to the runSofaX application. Actually I would like to have this kind of module for other reasons. . 3-; About the general workflow of launching multiple scene. We have in Defrost few python scripts called sofa-launcher that we use to execute in parallel multiple sofa instances of a templated scene. The parallel execution can be done on a single machine or a a cluster of linux with ssh access, scene specific data are saved in temporary directories or gathered by the calling script for further processing (eg: plotting the result). think this could prefectly match what you want to do so I will make a PR for that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821:746,Performance,load,loaded,746,"Hi all,. To me there is several questions here... ; 1- one is how to pass command line argument to python.; 2- one is how to get the file name associated with a loaded scene.; 3- one is how to execute multiple sofa in // with small difference in the scene.; ; 1-; To pass command line argument to python and answering Maxime suggestion I prefer something like --extra or --scene-argv so that we don't have to take care of not breaking someone's code. . 2-; Getting the filename using a binded function in the Sofa python module.; Filename only make sense in specific case, i.e. when we have a single scene loaded from a file (as in runSofa) of course this means nothing when you have no scene files (dynamically generating the scene) or you have loaded multiple scene. So I think this shouldn't be part of the Sofa python module but could find its place in a separated RunSofa python module that would expose things specific to the runSofaX application. Actually I would like to have this kind of module for other reasons. . 3-; About the general workflow of launching multiple scene. We have in Defrost few python scripts called sofa-launcher that we use to execute in parallel multiple sofa instances of a templated scene. The parallel execution can be done on a single machine or a a cluster of linux with ssh access, scene specific data are saved in temporary directories or gathered by the calling script for further processing (eg: plotting the result). think this could prefectly match what you want to do so I will make a PR for that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821:902,Security,expose,expose,902,"Hi all,. To me there is several questions here... ; 1- one is how to pass command line argument to python.; 2- one is how to get the file name associated with a loaded scene.; 3- one is how to execute multiple sofa in // with small difference in the scene.; ; 1-; To pass command line argument to python and answering Maxime suggestion I prefer something like --extra or --scene-argv so that we don't have to take care of not breaking someone's code. . 2-; Getting the filename using a binded function in the Sofa python module.; Filename only make sense in specific case, i.e. when we have a single scene loaded from a file (as in runSofa) of course this means nothing when you have no scene files (dynamically generating the scene) or you have loaded multiple scene. So I think this shouldn't be part of the Sofa python module but could find its place in a separated RunSofa python module that would expose things specific to the runSofaX application. Actually I would like to have this kind of module for other reasons. . 3-; About the general workflow of launching multiple scene. We have in Defrost few python scripts called sofa-launcher that we use to execute in parallel multiple sofa instances of a templated scene. The parallel execution can be done on a single machine or a a cluster of linux with ssh access, scene specific data are saved in temporary directories or gathered by the calling script for further processing (eg: plotting the result). think this could prefectly match what you want to do so I will make a PR for that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821:1313,Security,access,access,1313,"Hi all,. To me there is several questions here... ; 1- one is how to pass command line argument to python.; 2- one is how to get the file name associated with a loaded scene.; 3- one is how to execute multiple sofa in // with small difference in the scene.; ; 1-; To pass command line argument to python and answering Maxime suggestion I prefer something like --extra or --scene-argv so that we don't have to take care of not breaking someone's code. . 2-; Getting the filename using a binded function in the Sofa python module.; Filename only make sense in specific case, i.e. when we have a single scene loaded from a file (as in runSofa) of course this means nothing when you have no scene files (dynamically generating the scene) or you have loaded multiple scene. So I think this shouldn't be part of the Sofa python module but could find its place in a separated RunSofa python module that would expose things specific to the runSofaX application. Actually I would like to have this kind of module for other reasons. . 3-; About the general workflow of launching multiple scene. We have in Defrost few python scripts called sofa-launcher that we use to execute in parallel multiple sofa instances of a templated scene. The parallel execution can be done on a single machine or a a cluster of linux with ssh access, scene specific data are saved in temporary directories or gathered by the calling script for further processing (eg: plotting the result). think this could prefectly match what you want to do so I will make a PR for that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853:146,Modifiability,plugin,plugin,146,"Hi, thanks four your feedback :-). I'm tackling 1. and it's almost done, however I lack a clean way of exposing the extra args to the sofa python plugin. any idea ?; 2. can't you just use `__file__` for that anyway ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853:21,Usability,feedback,feedback,21,"Hi, thanks four your feedback :-). I'm tackling 1. and it's almost done, however I lack a clean way of exposing the extra args to the sofa python plugin. any idea ?; 2. can't you just use `__file__` for that anyway ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323698076:364,Usability,simpl,simple,364,"Hi Maxime,. For 1. ; What about just setting the arguments into sys.argv using PySys_SetArgv(argc, argv) ? . For 2. ; Isn't __ file __ returning the current file... So in a python script controller __ file __ it would not contain the scene filename but the controller's one. But you are totally right that this could solve the initial @chrijopa question in a very simple way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323698076
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:484,Modifiability,plugin,plugins,484,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:590,Modifiability,plugin,plugins,590,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1067,Modifiability,plugin,plugin,1067,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1133,Modifiability,plugin,plugins,1133,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1051,Performance,load,load,1051,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1566,Security,access,access,1566,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:843,Testability,test,test,843,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:880,Testability,test,test,880,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1302,Testability,test,test,1302,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:154,Usability,simpl,simple,154,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324084837:164,Energy Efficiency,power,powerful,164,"Hi there,. Unless you really have to, I would suggest you drop `.scn` files altogether and work with python files directly: it's easier to work with and waaay more powerful. If it were just me, I'd have dropped `.scn` support a long time ago or rewritten it with 100 lines of python :-) Some people may disagree though. I'm not sure there is a nice way of forwarding command line args from the `.scn` scene to the python script. It seems possible though, but I don't want to mess with existing code passing arguments to python scripts as it may break older scenes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324084837
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750:36,Energy Efficiency,adapt,adapted,36,"As a reaction to your proposition I adapted my scene and dropped the .scn file and now it works, thank you for your work! . PS (another issue?): Since createScene does not have the argument self - that I am using to communicate values between the different functions - I inserted a python script controller, i.e. ; ```python; def createScene(rootNode) :; rootNode.createObject('PythonScriptController',classname=""convergenceBeam_Template"", ; filename=""convergenceBeam_TemplatePython.py"", ... , ; name=""convergenceBeam_Template"", variables=sys.argv[1]+"" ""+sys.argv[2]); ```; and ; ```python; class convergenceBeam_Template (Sofa.PythonScriptController):; def createGraph(self,rootNode):; self.defineDataFromJson(self.findData(""variables"").value[0][0]); self.outputJsonAtTimeStep = ast.literal_eval(self.findData(""variables"").value[1][0]); ```; This does not seem to be very elegant.; 1. Could self be used as well as an argument for createScene and createSceneAndController?; 2. Is there another way to communicate values between the functions (e.g. createScene and onBeginAnimationStep)?. If there is none, I am open to write another issue (I discussed with a colleague of mine and he had the same problem before)!. [@maxime-tournier edit: fixed formatting]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750:36,Modifiability,adapt,adapted,36,"As a reaction to your proposition I adapted my scene and dropped the .scn file and now it works, thank you for your work! . PS (another issue?): Since createScene does not have the argument self - that I am using to communicate values between the different functions - I inserted a python script controller, i.e. ; ```python; def createScene(rootNode) :; rootNode.createObject('PythonScriptController',classname=""convergenceBeam_Template"", ; filename=""convergenceBeam_TemplatePython.py"", ... , ; name=""convergenceBeam_Template"", variables=sys.argv[1]+"" ""+sys.argv[2]); ```; and ; ```python; class convergenceBeam_Template (Sofa.PythonScriptController):; def createGraph(self,rootNode):; self.defineDataFromJson(self.findData(""variables"").value[0][0]); self.outputJsonAtTimeStep = ast.literal_eval(self.findData(""variables"").value[1][0]); ```; This does not seem to be very elegant.; 1. Could self be used as well as an argument for createScene and createSceneAndController?; 2. Is there another way to communicate values between the functions (e.g. createScene and onBeginAnimationStep)?. If there is none, I am open to write another issue (I discussed with a colleague of mine and he had the same problem before)!. [@maxime-tournier edit: fixed formatting]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750:529,Modifiability,variab,variables,529,"As a reaction to your proposition I adapted my scene and dropped the .scn file and now it works, thank you for your work! . PS (another issue?): Since createScene does not have the argument self - that I am using to communicate values between the different functions - I inserted a python script controller, i.e. ; ```python; def createScene(rootNode) :; rootNode.createObject('PythonScriptController',classname=""convergenceBeam_Template"", ; filename=""convergenceBeam_TemplatePython.py"", ... , ; name=""convergenceBeam_Template"", variables=sys.argv[1]+"" ""+sys.argv[2]); ```; and ; ```python; class convergenceBeam_Template (Sofa.PythonScriptController):; def createGraph(self,rootNode):; self.defineDataFromJson(self.findData(""variables"").value[0][0]); self.outputJsonAtTimeStep = ast.literal_eval(self.findData(""variables"").value[1][0]); ```; This does not seem to be very elegant.; 1. Could self be used as well as an argument for createScene and createSceneAndController?; 2. Is there another way to communicate values between the functions (e.g. createScene and onBeginAnimationStep)?. If there is none, I am open to write another issue (I discussed with a colleague of mine and he had the same problem before)!. [@maxime-tournier edit: fixed formatting]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750:726,Modifiability,variab,variables,726,"As a reaction to your proposition I adapted my scene and dropped the .scn file and now it works, thank you for your work! . PS (another issue?): Since createScene does not have the argument self - that I am using to communicate values between the different functions - I inserted a python script controller, i.e. ; ```python; def createScene(rootNode) :; rootNode.createObject('PythonScriptController',classname=""convergenceBeam_Template"", ; filename=""convergenceBeam_TemplatePython.py"", ... , ; name=""convergenceBeam_Template"", variables=sys.argv[1]+"" ""+sys.argv[2]); ```; and ; ```python; class convergenceBeam_Template (Sofa.PythonScriptController):; def createGraph(self,rootNode):; self.defineDataFromJson(self.findData(""variables"").value[0][0]); self.outputJsonAtTimeStep = ast.literal_eval(self.findData(""variables"").value[1][0]); ```; This does not seem to be very elegant.; 1. Could self be used as well as an argument for createScene and createSceneAndController?; 2. Is there another way to communicate values between the functions (e.g. createScene and onBeginAnimationStep)?. If there is none, I am open to write another issue (I discussed with a colleague of mine and he had the same problem before)!. [@maxime-tournier edit: fixed formatting]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750:812,Modifiability,variab,variables,812,"As a reaction to your proposition I adapted my scene and dropped the .scn file and now it works, thank you for your work! . PS (another issue?): Since createScene does not have the argument self - that I am using to communicate values between the different functions - I inserted a python script controller, i.e. ; ```python; def createScene(rootNode) :; rootNode.createObject('PythonScriptController',classname=""convergenceBeam_Template"", ; filename=""convergenceBeam_TemplatePython.py"", ... , ; name=""convergenceBeam_Template"", variables=sys.argv[1]+"" ""+sys.argv[2]); ```; and ; ```python; class convergenceBeam_Template (Sofa.PythonScriptController):; def createGraph(self,rootNode):; self.defineDataFromJson(self.findData(""variables"").value[0][0]); self.outputJsonAtTimeStep = ast.literal_eval(self.findData(""variables"").value[1][0]); ```; This does not seem to be very elegant.; 1. Could self be used as well as an argument for createScene and createSceneAndController?; 2. Is there another way to communicate values between the functions (e.g. createScene and onBeginAnimationStep)?. If there is none, I am open to write another issue (I discussed with a colleague of mine and he had the same problem before)!. [@maxime-tournier edit: fixed formatting]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324896145:347,Security,access,access,347,"Thank you for your help! I changed the scn2python script:; - The standard output is now be .py (before it was .scn and .py); - It handles the command line arguments now in the way you presented it above; - It uses the output into .json, as presented in #360.; I would like to push these changes to your pull requestion #368, do you mind giving me access rights (if not I will wait and do a separate pull request or I push it to #360 (which is not as close as your pull request) )?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324896145
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324897715:78,Testability,test,tests,78,Please make a separate pull request referencing #368. . I need to fix failing tests before #368 is merged though.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324897715
https://github.com/sofa-framework/sofa/pull/360#issuecomment-321189888:37,Integrability,depend,dependency,37,Could you let us know about the json dependency and its related license?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-321189888
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:317,Availability,error,errors,317,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:430,Availability,failure,failure,430,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:608,Availability,failure,failure,608,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:535,Integrability,message,message,535,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:663,Integrability,message,message,663,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:2058,Safety,avoid,avoid,2058,"NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licensing aspects. - For code coherency I think that we should avoid using ""weird"" namespaces in the sofa code base (eg: 'nlohmann::json') so that I suggest you to add a sofa/helper/json.hpp file with something more or less like that:; ```cpp; #include ""extlibs/json/json.hpp""; namespace sofa{; namespace helper{; using nlohmann::json ; ; }; }; ```; Would be nice as codes that want to use it will have to do it this way: ; ```cpp; #include ""sofa/helper/json.hpp""; using sofa::helper::json ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:272,Testability,test,test,272,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:185,Usability,feedback,feedback,185,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:70,Modifiability,enhance,enhancements,70,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:112,Testability,test,tests,112,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:19,Usability,feedback,feedback,19,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1821,Security,access,accessible,1821,"h out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:26,Testability,test,tests,26,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:65,Testability,test,testing,65,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:172,Testability,test,testing,172,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:509,Testability,test,tests,509,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:735,Testability,test,test,735,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:851,Testability,test,test,851,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1059,Testability,test,tests,1059,"e"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1614,Testability,test,test,1614,"considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/sc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1675,Testability,test,testing,1675,"n your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::stri",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1723,Testability,test,test,1723,"n your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::stri",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1894,Usability,feedback,feedback,1894," to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default 'stdout' output. Other valid types are [stdout, JSON, LJSON]."" ; data.timerOutputType = STDOUT;; }; ```. Hope thi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1987,Usability,clear,clear,1987," to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default 'stdout' output. Other valid types are [stdout, JSON, LJSON]."" ; data.timerOutputType = STDOUT;; }; ```. Hope thi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680:1306,Testability,test,tests,1306,"Hello all, . I've added some modifications on this PR. . First I've created a new *Python* script in PythonSofa to make the use of the *AdvancedTimer* easier. Now, if you want to use it in a *Python scene*, the easiest way to do it is to use the script with the method *measureAnimationTime*. You will have to add this line: . ```py; from SofaPython import PythonAdvancedTimer; ```. at the beginning of your script. Then you have to add the method *bwdInitGraph(self, node)* method at least as the following:. ```py; def bwdInitGraph(self, node):; # It will call the simulationStep method too; PythonAdvancedTimer.measureAnimationTime(node, ""timerPoutre"", ; 2, ""ljson"", ""poutre_grid_sofa_timerLog"", 0.1, 1000); return 0; ```. If you already have defined a bwdInitGraph, you juste have to add the *measureAnimationTime()* method to get your scene analyzed. To use it by your own way, you can take a look at the *PythonAdvancedTimer.py* script. You'll find it in the *Sofa project* at *SofaPython/python/SofaPython/PythonAdvancedTimer.py*. Second, I've added two scripts to use the returned *light JSON* files of the *AdvancedTimer* : *TimerLJSONPlot.py* and *timerLjsonManyFilesPlot.py*. I've also added the documentation to informe future users how to use the *AdvancedTimer* and the plotting scripts. The tests will come soon. Thank you for your feedback @damienmarchal .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680
https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680:1347,Usability,feedback,feedback,1347,"Hello all, . I've added some modifications on this PR. . First I've created a new *Python* script in PythonSofa to make the use of the *AdvancedTimer* easier. Now, if you want to use it in a *Python scene*, the easiest way to do it is to use the script with the method *measureAnimationTime*. You will have to add this line: . ```py; from SofaPython import PythonAdvancedTimer; ```. at the beginning of your script. Then you have to add the method *bwdInitGraph(self, node)* method at least as the following:. ```py; def bwdInitGraph(self, node):; # It will call the simulationStep method too; PythonAdvancedTimer.measureAnimationTime(node, ""timerPoutre"", ; 2, ""ljson"", ""poutre_grid_sofa_timerLog"", 0.1, 1000); return 0; ```. If you already have defined a bwdInitGraph, you juste have to add the *measureAnimationTime()* method to get your scene analyzed. To use it by your own way, you can take a look at the *PythonAdvancedTimer.py* script. You'll find it in the *Sofa project* at *SofaPython/python/SofaPython/PythonAdvancedTimer.py*. Second, I've added two scripts to use the returned *light JSON* files of the *AdvancedTimer* : *TimerLJSONPlot.py* and *timerLjsonManyFilesPlot.py*. I've also added the documentation to informe future users how to use the *AdvancedTimer* and the plotting scripts. The tests will come soon. Thank you for your feedback @damienmarchal .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680
https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542:481,Modifiability,plugin,plugins,481,"I tested your work yesterday in the evening and I really appreciated the easy usage! I would like to add some remarks that might be interesting for future improvements:; 1. If there is a possibility to use the advanced timer at initialization (see #357), where do we need to perform changes to use your code? I would guess the main changes have to be made in [PythonAdvancedTimer.py](https://github.com/mimesis-inria/sofa/blob/0e1a298aa41f666eb792d846101be36352dbb5b3/applications/plugins/SofaPython/python/SofaPython/PythonAdvancedTimer.py) and in the reading of the json file, since the first time step has the identifier 0.; 2. Currently -c and your time evaluation exist side by side. Is it possible to combine your work with the command line argument -c?; 3. Similarly, your time evaluation exists side by side with the command -n (this variable is used in batch mode when launching the simulation for a certain number of steps). When running my simulation, I realized, your number of steps and the number of steps given by the command line add up. Again here, it would be valuable to know: how is it possible to directly use the command line argument?. More ideas might follow, thank you for your investment of time in this nice feature that I will use certainly!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542
https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542:842,Modifiability,variab,variable,842,"I tested your work yesterday in the evening and I really appreciated the easy usage! I would like to add some remarks that might be interesting for future improvements:; 1. If there is a possibility to use the advanced timer at initialization (see #357), where do we need to perform changes to use your code? I would guess the main changes have to be made in [PythonAdvancedTimer.py](https://github.com/mimesis-inria/sofa/blob/0e1a298aa41f666eb792d846101be36352dbb5b3/applications/plugins/SofaPython/python/SofaPython/PythonAdvancedTimer.py) and in the reading of the json file, since the first time step has the identifier 0.; 2. Currently -c and your time evaluation exist side by side. Is it possible to combine your work with the command line argument -c?; 3. Similarly, your time evaluation exists side by side with the command -n (this variable is used in batch mode when launching the simulation for a certain number of steps). When running my simulation, I realized, your number of steps and the number of steps given by the command line add up. Again here, it would be valuable to know: how is it possible to directly use the command line argument?. More ideas might follow, thank you for your investment of time in this nice feature that I will use certainly!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542
https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542:275,Performance,perform,perform,275,"I tested your work yesterday in the evening and I really appreciated the easy usage! I would like to add some remarks that might be interesting for future improvements:; 1. If there is a possibility to use the advanced timer at initialization (see #357), where do we need to perform changes to use your code? I would guess the main changes have to be made in [PythonAdvancedTimer.py](https://github.com/mimesis-inria/sofa/blob/0e1a298aa41f666eb792d846101be36352dbb5b3/applications/plugins/SofaPython/python/SofaPython/PythonAdvancedTimer.py) and in the reading of the json file, since the first time step has the identifier 0.; 2. Currently -c and your time evaluation exist side by side. Is it possible to combine your work with the command line argument -c?; 3. Similarly, your time evaluation exists side by side with the command -n (this variable is used in batch mode when launching the simulation for a certain number of steps). When running my simulation, I realized, your number of steps and the number of steps given by the command line add up. Again here, it would be valuable to know: how is it possible to directly use the command line argument?. More ideas might follow, thank you for your investment of time in this nice feature that I will use certainly!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542
https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542:2,Testability,test,tested,2,"I tested your work yesterday in the evening and I really appreciated the easy usage! I would like to add some remarks that might be interesting for future improvements:; 1. If there is a possibility to use the advanced timer at initialization (see #357), where do we need to perform changes to use your code? I would guess the main changes have to be made in [PythonAdvancedTimer.py](https://github.com/mimesis-inria/sofa/blob/0e1a298aa41f666eb792d846101be36352dbb5b3/applications/plugins/SofaPython/python/SofaPython/PythonAdvancedTimer.py) and in the reading of the json file, since the first time step has the identifier 0.; 2. Currently -c and your time evaluation exist side by side. Is it possible to combine your work with the command line argument -c?; 3. Similarly, your time evaluation exists side by side with the command -n (this variable is used in batch mode when launching the simulation for a certain number of steps). When running my simulation, I realized, your number of steps and the number of steps given by the command line add up. Again here, it would be valuable to know: how is it possible to directly use the command line argument?. More ideas might follow, thank you for your investment of time in this nice feature that I will use certainly!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542
https://github.com/sofa-framework/sofa/pull/360#issuecomment-326303609:69,Testability,test,tests,69,Hi @damienmarchal . I need a review of the first version of the unit tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-326303609
https://github.com/sofa-framework/sofa/pull/360#issuecomment-328151492:42,Testability,test,tests,42,What do I(we) do now ? Should I add other tests ? @damienmarchal @guparan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328151492
https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570:60,Testability,test,tests,60,@untereiner sorry I didn't saw you expected feedback on the tests. ; I will do that next monday.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570
https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570:44,Usability,feedback,feedback,44,@untereiner sorry I didn't saw you expected feedback on the tests. ; I will do that next monday.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570
https://github.com/sofa-framework/sofa/pull/360#issuecomment-329404570:57,Testability,test,tests,57,Hi @damienmarchal ! Do you have any comments on the unit tests ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-329404570
https://github.com/sofa-framework/sofa/pull/360#issuecomment-329419961:32,Testability,test,tests,32,I changed a little bit the unit tests. I will add a last commit in a few minutes,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-329419961
https://github.com/sofa-framework/sofa/pull/360#issuecomment-330164053:55,Testability,test,tests,55,Build is OK now but there are still a bunch of failing tests.; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-330164053
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:75,Integrability,message,message,75,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:661,Performance,perform,performances,661,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:223,Security,validat,validate,223,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:214,Testability,test,tests,214,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:368,Testability,test,test,368,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:497,Testability,test,tests,497,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:1087,Testability,test,test,1087,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323940618:93,Safety,avoid,avoid,93,"Hi damien,. I agree, as always the details are not straightforward... I think also we should avoid the O(N) complexity (indeed objects and children are stored in list) at object/child insertion. I do not know about the WITH_SOFA_DEVTOOLS option, I would activate such check in debug mode. An other approach would be : it is fine to have objects/nodes having the same name as long as you do not retrieve them by name, so the check could be added (in DEBUG only) in the getChild()/getObject() functions: the 0(N) search loop would continue until the end to find duplicated names and issue a warning if so - cons the issue is detected late / pros less invasive. An other approach could be to have a visitor that would be launched in DEBUG before the init and would check for such duplicates - cons no detection for dynamic object creation / pros less invasive, visitor can be executed when needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323940618
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323940618:623,Safety,detect,detected,623,"Hi damien,. I agree, as always the details are not straightforward... I think also we should avoid the O(N) complexity (indeed objects and children are stored in list) at object/child insertion. I do not know about the WITH_SOFA_DEVTOOLS option, I would activate such check in debug mode. An other approach would be : it is fine to have objects/nodes having the same name as long as you do not retrieve them by name, so the check could be added (in DEBUG only) in the getChild()/getObject() functions: the 0(N) search loop would continue until the end to find duplicated names and issue a warning if so - cons the issue is detected late / pros less invasive. An other approach could be to have a visitor that would be launched in DEBUG before the init and would check for such duplicates - cons no detection for dynamic object creation / pros less invasive, visitor can be executed when needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323940618
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323940618:798,Safety,detect,detection,798,"Hi damien,. I agree, as always the details are not straightforward... I think also we should avoid the O(N) complexity (indeed objects and children are stored in list) at object/child insertion. I do not know about the WITH_SOFA_DEVTOOLS option, I would activate such check in debug mode. An other approach would be : it is fine to have objects/nodes having the same name as long as you do not retrieve them by name, so the check could be added (in DEBUG only) in the getChild()/getObject() functions: the 0(N) search loop would continue until the end to find duplicated names and issue a warning if so - cons the issue is detected late / pros less invasive. An other approach could be to have a visitor that would be launched in DEBUG before the init and would check for such duplicates - cons no detection for dynamic object creation / pros less invasive, visitor can be executed when needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323940618
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323954428:536,Availability,error,error,536,"The O(n) should be avoided even though; 1. there might already be a O(n) lookup hiding somewhere during insertion; 2. we should be fine in practice; 3. this should really be O(log n) anyways. I like the late check during `getChild/getObject`, and even more so the Visitor approach where all the checks are made in a separate pass (aside: in this spirit we could provide a `check` method just like `init` and a visitor that checks consistency so that we don't have to check stuff all the time during simulation. also: use exceptions for error handling!!). More generally, why do we have objects and children stored in a list? We just need to store pointers to the siblings directly inside nodes/components instead of the extra memory/indirections, especially if we're using lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323954428
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323954428:19,Safety,avoid,avoided,19,"The O(n) should be avoided even though; 1. there might already be a O(n) lookup hiding somewhere during insertion; 2. we should be fine in practice; 3. this should really be O(log n) anyways. I like the late check during `getChild/getObject`, and even more so the Visitor approach where all the checks are made in a separate pass (aside: in this spirit we could provide a `check` method just like `init` and a visitor that checks consistency so that we don't have to check stuff all the time during simulation. also: use exceptions for error handling!!). More generally, why do we have objects and children stored in a list? We just need to store pointers to the siblings directly inside nodes/components instead of the extra memory/indirections, especially if we're using lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323954428
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323954428:176,Testability,log,log,176,"The O(n) should be avoided even though; 1. there might already be a O(n) lookup hiding somewhere during insertion; 2. we should be fine in practice; 3. this should really be O(log n) anyways. I like the late check during `getChild/getObject`, and even more so the Visitor approach where all the checks are made in a separate pass (aside: in this spirit we could provide a `check` method just like `init` and a visitor that checks consistency so that we don't have to check stuff all the time during simulation. also: use exceptions for error handling!!). More generally, why do we have objects and children stored in a list? We just need to store pointers to the siblings directly inside nodes/components instead of the extra memory/indirections, especially if we're using lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323954428
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:86,Performance,optimiz,optimization,86,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:49,Testability,log,log,49,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:15,Usability,feedback,feedback,15,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:288,Availability,avail,availableOptions,288,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:446,Availability,avail,availableOptions,446,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:532,Availability,avail,availableOptions,532,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:33,Usability,clear,clearly,33,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322704865:181,Usability,simpl,simpler,181,"Hi @damienmarchal ,; Thanks for your reply!; Indeed, that is what I would like to do... I didn't know I could call parse() per component, instead of per data.. The solution is much simpler than I thought.. sorry!; I close the topic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322704865
https://github.com/sofa-framework/sofa/pull/365#issuecomment-321609546:243,Testability,test,test,243,"I guess the one main problem you have if you warm start by default, is that if any changes in the topology has occurred since the last step the previous solution vector may not be resized nor initialised properly ? Have you got any example to test that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365#issuecomment-321609546
https://github.com/sofa-framework/sofa/pull/365#issuecomment-325746502:168,Energy Efficiency,energy,energy-wise,168,"about `warmStart = true`: it biases the solution towards constant acceleration, whereas `warmStart = false` biases towards zero acceleration (when stopping early ofc). energy-wise, it is probably safer to go for the latter and let the user opt-in if she knows what's she's doing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365#issuecomment-325746502
https://github.com/sofa-framework/sofa/pull/365#issuecomment-325746502:196,Safety,safe,safer,196,"about `warmStart = true`: it biases the solution towards constant acceleration, whereas `warmStart = false` biases towards zero acceleration (when stopping early ofc). energy-wise, it is probably safer to go for the latter and let the user opt-in if she knows what's she's doing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365#issuecomment-325746502
https://github.com/sofa-framework/sofa/pull/367#issuecomment-324286208:101,Integrability,message,message,101,So i pass this PR to read ? . Edit: if if the component should work then the correct way to emit the message is msg_warning instead of a msg_error.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367#issuecomment-324286208
https://github.com/sofa-framework/sofa/pull/367#issuecomment-326678771:24,Testability,test,tests,24,[ci-build]. All build & tests are passing... so let's merge it .,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367#issuecomment-326678771
https://github.com/sofa-framework/sofa/pull/368#issuecomment-323972645:41,Testability,test,tests,41,**Warning**: there are [two failing unit tests](https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-5.4_options/712/testReport/).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-323972645
https://github.com/sofa-framework/sofa/pull/368#issuecomment-323972645:107,Testability,test,testReport,107,**Warning**: there are [two failing unit tests](https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-5.4_options/712/testReport/).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-323972645
https://github.com/sofa-framework/sofa/pull/368#issuecomment-324934199:189,Performance,load,loading,189,"Note: empty `ArgumentParser::extra_args()` will not set `sys.argv`, as opposed to set it some empty list (this was the reason why the test was failing: it would reset it to empty on script loading after being set initially from the test binary). I'm not quite happy with this kind of side-effect, but this matches the previous behaviour so `¯\_(ツ)_/¯`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-324934199
https://github.com/sofa-framework/sofa/pull/368#issuecomment-324934199:134,Testability,test,test,134,"Note: empty `ArgumentParser::extra_args()` will not set `sys.argv`, as opposed to set it some empty list (this was the reason why the test was failing: it would reset it to empty on script loading after being set initially from the test binary). I'm not quite happy with this kind of side-effect, but this matches the previous behaviour so `¯\_(ツ)_/¯`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-324934199
https://github.com/sofa-framework/sofa/pull/368#issuecomment-324934199:232,Testability,test,test,232,"Note: empty `ArgumentParser::extra_args()` will not set `sys.argv`, as opposed to set it some empty list (this was the reason why the test was failing: it would reset it to empty on script loading after being set initially from the test binary). I'm not quite happy with this kind of side-effect, but this matches the previous behaviour so `¯\_(ツ)_/¯`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-324934199
https://github.com/sofa-framework/sofa/pull/368#issuecomment-325585225:15,Testability,test,tests,15,"build is good, tests are good, gentle bump :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-325585225
https://github.com/sofa-framework/sofa/pull/369#issuecomment-323769996:115,Testability,test,test,115,"Hi @kriptian88,. Thank you very much for your contribution and welcome in the sofa development community. ; I will test it asap.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-323769996
https://github.com/sofa-framework/sofa/pull/369#issuecomment-323977178:5,Testability,test,tested,5,Just tested it:. Before | After 1 | After 2 ; :-------:|:---------:|:--------:|; ![before](https://user-images.githubusercontent.com/1651667/29559563-ba6ef7ee-872f-11e7-901d-d584baf0d8be.png) | ![after 1](https://user-images.githubusercontent.com/1651667/29559566-bd0aeb20-872f-11e7-8859-9455807cd76b.png) | ![after 2](https://user-images.githubusercontent.com/1651667/29615570-b4570754-880e-11e7-84a2-4983a2cf0726.png),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-323977178
https://github.com/sofa-framework/sofa/pull/369#issuecomment-324309298:578,Integrability,depend,depends,578,"Hello.; I have removed the margins around QLabel that present parameters names to make the size of components smaller.; Anyway, answering to your questions I could mark these issues.; 1. Unfortunately, I am not an expert in Qt. But I guess some rather tricky manipulations with layouts should be done to make the rendering absolutely the same.; 2. On different systems the rendering is different. I have a notebook with DebianStretch and desktop with Ubuntu 16.04 and I can say that Sofa GUI differs. The changes I've made, unfortunately, affect GUI differently. So, I guess it depends also on how QtWidgets are rendered on different platforms. Thus, if rendering structure is critical, may be it is better not to touch it at all. P.S. I have changed my nickname to make it more reasonable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324309298
https://github.com/sofa-framework/sofa/pull/369#issuecomment-324312876:31,Deployability,update,updated,31,"Thanks @sergeiNikolaev, I just updated my first comment with a new screenshot 😉",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324312876
https://github.com/sofa-framework/sofa/pull/369#issuecomment-324314176:123,Usability,guid,guidelines,123,Hi @sergeiNikolaev . Respecting the existing gui rendering is not crucial in itself..but we should try to respect standard guidelines for GUIs. On that aspect it is more common to have QLabel & checkbox/textfield on the same line otherwise this look a bit weird and consume a lot of screen space for nothing. . EDIT: But if this is too much work I think we can live with that as runSofa should die :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324314176
https://github.com/sofa-framework/sofa/pull/369#issuecomment-324327683:39,Usability,guid,guidelines,39,"Well, runSofa was not really following guidelines on that :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324327683
https://github.com/sofa-framework/sofa/pull/369#issuecomment-329142955:156,Usability,simpl,simply,156,"SOFA-dev meeting report: @damienmarchal will merge this PR with #373 since their contents are related. Doing so, he will try to get rid of this box problem simply by removing all boxes (separating Datas with lines). To be continued...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-329142955
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324559169:79,Energy Efficiency,reduce,reduce,79,"Thanks Damien, I had a glance to #13 and I think @JeremieA proposal is nice to reduce bloat in sofa: keeping the current MeshObj and its visitor mechanism to export obj for rendering (video...), so no need for a BaseSimulationExporter since only the MeshObjExporter would have this behavior. On the other hand the MeshExporter component does not support any of the 2 formats we usually need, obj and stl... grrrr...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324559169
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1204,Modifiability,inherit,inherit,1204," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1408,Modifiability,inherit,inherit,1408," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1492,Modifiability,inherit,inheriting,1492," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1569,Modifiability,inherit,inheriting,1569," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:32,Usability,feedback,feedback,32,"Hi Thomas,. Many thanks for the feedback. ; I'm a bit confused because as far as I can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:987,Usability,UX,UX,987,"Hi Thomas,. Many thanks for the feedback. ; I'm a bit confused because as far as I can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1954,Usability,clear,clearly,1954," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328021918:51,Performance,load,loaders,51,"Hi Damien,; it is a good project (the same for the loaders too). But it not easy to review. For what I remember STLexporter is exporting from a list of pos/tri while the other exporters are exporting every VisualModels from their subgraph, isn't it?; I think both functionalities are interesting, and the baseexporter class could implement both?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328021918
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:193,Modifiability,refactor,refactoring,193,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:786,Modifiability,refactor,refactoring,786,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:801,Safety,detect,detect,801,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:724,Testability,test,tests,724,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:861,Testability,test,tests,861,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:27,Usability,feedback,feedback,27,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328085074:121,Performance,load,loaders,121,"On vendredi 8 septembre 2017 09:20:09 CEST Matthieu Nesme wrote:; > Hi Damien,; > it is a good project (the same for the loaders too). But it not easy to; > review.; > ; > For what I remember STLexporter is exporting from a list of pos/tri while; > the other exporters are exporting every VisualModels from their subgraph,; > isn't it? . no, see previous comment, only the obj exporter has this behavior to export a ; full simulation step in one obj and render it offline. I think the ""normal"" behavior (no visitor) would better fit our current needs. thomas. > I think both functionalities are interesting, and the; > baseexporter class could implement both?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328085074
https://github.com/sofa-framework/sofa/pull/372#issuecomment-329165449:25,Testability,test,tests,25,Warning: a bunch of unit tests are failing after merge on [ubuntu_clang-3.8_options-debug](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/353/testReport/),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-329165449
https://github.com/sofa-framework/sofa/pull/372#issuecomment-329165449:158,Testability,test,testReport,158,Warning: a bunch of unit tests are failing after merge on [ubuntu_clang-3.8_options-debug](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/353/testReport/),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-329165449
https://github.com/sofa-framework/sofa/issues/375#issuecomment-324900504:203,Usability,clear,clear,203,"Ok.... so when a node does not have parent.... which I assume is the case of the root ...; then the getPathName() string is empty... and ; Which make the function CreateString to return ""@"". . I have no clear idea where to fix that... the current fix is in #377",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/375#issuecomment-324900504
https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188:34,Deployability,release,release,34,"We tested this scene in debug and release, and both displays a warning message.; The warning message is consistent because it use a default template (aka double). Here is a log on debug :; ` [WARNING] [MergeVectors(merge)] Template <tartempion> incorrect, used <double>; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188
https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188:71,Integrability,message,message,71,"We tested this scene in debug and release, and both displays a warning message.; The warning message is consistent because it use a default template (aka double). Here is a log on debug :; ` [WARNING] [MergeVectors(merge)] Template <tartempion> incorrect, used <double>; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188
https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188:93,Integrability,message,message,93,"We tested this scene in debug and release, and both displays a warning message.; The warning message is consistent because it use a default template (aka double). Here is a log on debug :; ` [WARNING] [MergeVectors(merge)] Template <tartempion> incorrect, used <double>; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188
https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188:3,Testability,test,tested,3,"We tested this scene in debug and release, and both displays a warning message.; The warning message is consistent because it use a default template (aka double). Here is a log on debug :; ` [WARNING] [MergeVectors(merge)] Template <tartempion> incorrect, used <double>; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188
https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188:173,Testability,log,log,173,"We tested this scene in debug and release, and both displays a warning message.; The warning message is consistent because it use a default template (aka double). Here is a log on debug :; ` [WARNING] [MergeVectors(merge)] Template <tartempion> incorrect, used <double>; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188
https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201:57,Deployability,release,release,57,Thanks erwan for the test.; The warning is also there in release. Maybe the problem is specific to Thomas application. ; Each application has to define and set-up its way to handle the messages. Have a look in runSofa on how it is one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201
https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201:185,Integrability,message,messages,185,Thanks erwan for the test.; The warning is also there in release. Maybe the problem is specific to Thomas application. ; Each application has to define and set-up its way to handle the messages. Have a look in runSofa on how it is one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201
https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201:21,Testability,test,test,21,Thanks erwan for the test.; The warning is also there in release. Maybe the problem is specific to Thomas application. ; Each application has to define and set-up its way to handle the messages. Have a look in runSofa on how it is one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201
https://github.com/sofa-framework/sofa/pull/379#issuecomment-325976057:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379#issuecomment-325976057
https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:88,Integrability,message,message,88,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289
https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:240,Integrability,message,message,240,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289
https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:259,Usability,clear,clear,259,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289
https://github.com/sofa-framework/sofa/pull/384#issuecomment-327112983:81,Usability,simpl,simple,81,"Hi @vmagno, thank you for your PR!; This should be merged fast.; Could you add a simple description please?; [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384#issuecomment-327112983
https://github.com/sofa-framework/sofa/pull/385#issuecomment-328070969:106,Availability,avail,available,106,Now it's ok.; I just added the ability to call createObject function without Argument.; This will only be available for NoArgument template.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385#issuecomment-328070969
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328460508:38,Modifiability,plugin,plugin,38,Is there a removal date for the third plugin ? (To force developers to make the changes),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328460508
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328465144:391,Deployability,release,release,391,"@untereiner thank for the question. . What I would dream of some kind of consensus about how we proceed and I'm totally open for suggestions. I see the goods of making smooth transition in a code base (user of the code base will praise you) and the bad of maintaining the transitional package. On my side... I would say: ; - we remove the transitional packages after 1 year and at each Sofa release we make their use more and more ""verbose"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328465144
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328514613:293,Deployability,release,releases,293,"Hi @damienmarchal, thank you for this massive work.; 117 changed files in 1 commit is not easy to review so this may take a while to be merged but be sure we (I included) are going to check it out.; About the deprecation policy, I agree with your proposal of 1 year transition + highlights in releases.; I'm curious to see this PR [ci-build]'ed [with-scene-tests] 😉",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328514613
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328514613:357,Testability,test,tests,357,"Hi @damienmarchal, thank you for this massive work.; 117 changed files in 1 commit is not easy to review so this may take a while to be merged but be sure we (I included) are going to check it out.; About the deprecation policy, I agree with your proposal of 1 year transition + highlights in releases.; I'm curious to see this PR [ci-build]'ed [with-scene-tests] 😉",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328514613
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328523818:78,Deployability,release,release,78,I agree with you but to avoid calendar issues I would speak rather in term of release: Two releases for the transition and remove at the third one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328523818
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328523818:91,Deployability,release,releases,91,I agree with you but to avoid calendar issues I would speak rather in term of release: Two releases for the transition and remove at the third one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328523818
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328523818:24,Safety,avoid,avoid,24,I agree with you but to avoid calendar issues I would speak rather in term of release: Two releases for the transition and remove at the third one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328523818
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:455,Modifiability,plugin,plugins,455,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:471,Modifiability,refactor,refactoring,471,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:27,Usability,feedback,feedback,27,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:228,Usability,feedback,feedback,228,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663
https://github.com/sofa-framework/sofa/pull/389#issuecomment-330531075:11,Modifiability,plugin,plugins,11,"I did, the plugins are activated by default in the others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-330531075
https://github.com/sofa-framework/sofa/pull/393#issuecomment-329714464:19,Availability,failure,failure,19,"It builds, no more failure...it is ready...so let's merge it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/393#issuecomment-329714464
https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531:300,Testability,test,test,300,"Hi Raphael,. Many thank for your pull request. ; The feature sounds appealing and at first sight it looks ok. I have never used this component so if someone can give feedback it would be great. . EDIT: do you mind if I push some cleaning commit on this component in your PR. I would like to add some test cases for this component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531
https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531:166,Usability,feedback,feedback,166,"Hi Raphael,. Many thank for your pull request. ; The feature sounds appealing and at first sight it looks ok. I have never used this component so if someone can give feedback it would be great. . EDIT: do you mind if I push some cleaning commit on this component in your PR. I would like to add some test cases for this component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531
https://github.com/sofa-framework/sofa/pull/394#issuecomment-328519306:104,Integrability,message,message,104,"Hi @raphaeldeimel,; Thank you for your PR. I just rebased it to remove the empty commit with duplicated message.; [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328519306
https://github.com/sofa-framework/sofa/pull/395#issuecomment-328455753:79,Modifiability,plugin,plugins,79,Hi @lagarkane . Thank for your PR. . About the general question of outsourcing plugins builds...I think issues is the proper place to discuss about this.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395#issuecomment-328455753
https://github.com/sofa-framework/sofa/pull/397#issuecomment-331203853:122,Modifiability,variab,variable,122,If I am not wrong the only difference is that it mutes the warnings of CImg and gtest with the `CMAKE_CURRENT_BINARY_DIR` variable in `SOFAFRAMEWORK_DEPENDENCY_INCLUDE_DIRECTORIES`. Why should I drop it ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397#issuecomment-331203853
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331164452:34,Availability,failure,failure,34,It compile...now warnings or test failure so let's merge it. ; Thanks raffaela.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331164452
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331164452:29,Testability,test,test,29,It compile...now warnings or test failure so let's merge it. ; Thanks raffaela.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331164452
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331190290:38,Testability,test,tests,38,I should buy new glasses...one of the tests is now failing. I think this is minor and I'm not sure if the test or the component have to be fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331190290
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331190290:106,Testability,test,test,106,I should buy new glasses...one of the tests is now failing. I think this is minor and I'm not sure if the test or the component have to be fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331190290
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331837341:299,Availability,error,error,299,"It seems that `serr` was outputed as WARNING in the test and thus not making it fail. See pre-merge output [here](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options/267/consoleText) and search for ""Vertex2Frame : no vertices or normals found...""; Replacing it with `msg_error` create a ""real"" error so the test fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331837341
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331837341:52,Testability,test,test,52,"It seems that `serr` was outputed as WARNING in the test and thus not making it fail. See pre-merge output [here](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options/267/consoleText) and search for ""Vertex2Frame : no vertices or normals found...""; Replacing it with `msg_error` create a ""real"" error so the test fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331837341
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331837341:312,Testability,test,test,312,"It seems that `serr` was outputed as WARNING in the test and thus not making it fail. See pre-merge output [here](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options/267/consoleText) and search for ""Vertex2Frame : no vertices or normals found...""; Replacing it with `msg_error` create a ""real"" error so the test fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331837341
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331839847:198,Availability,error,error,198,"Thanks guillaume for the investigation,; The easy solution is to use msg_warning instead (restoring the old behavior). ; But shouldn't something that prevent the component to work be reported as an error and thus we should fix the test ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331839847
https://github.com/sofa-framework/sofa/pull/398#issuecomment-331839847:231,Testability,test,test,231,"Thanks guillaume for the investigation,; The easy solution is to use msg_warning instead (restoring the old behavior). ; But shouldn't something that prevent the component to work be reported as an error and thus we should fix the test ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331839847
https://github.com/sofa-framework/sofa/pull/399#issuecomment-329738621:94,Availability,error,error,94,Thanks for your PR @raffaellatrivisonne :-); Could you add a small description explaining the error and your fix please?; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-329738621
https://github.com/sofa-framework/sofa/pull/399#issuecomment-331917500:45,Availability,failure,failure,45,@raffaellatrivisonne could you fix the build failure please?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-331917500
https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433:112,Availability,error,errors,112,"The function asin is defined in [-1,1].; The fix prevents NAN when the argument is slightly >1 due to numerical errors (1,000000000000001).; Hope it's clear enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433
https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433:151,Usability,clear,clear,151,"The function asin is defined in [-1,1].; The fix prevents NAN when the argument is slightly >1 due to numerical errors (1,000000000000001).; Hope it's clear enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433
https://github.com/sofa-framework/sofa/pull/399#issuecomment-337850046:161,Availability,error,error,161,"From SOFA-dev meeting: ; Hi @raffaellatrivisonne, is there a chance that the argument `y` is rounded to 1 or -1 due to anything else than a very small numerical error? If yes, we should add an epsilon to ensure the error is acceptable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-337850046
https://github.com/sofa-framework/sofa/pull/399#issuecomment-337850046:215,Availability,error,error,215,"From SOFA-dev meeting: ; Hi @raffaellatrivisonne, is there a chance that the argument `y` is rounded to 1 or -1 due to anything else than a very small numerical error? If yes, we should add an epsilon to ensure the error is acceptable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-337850046
https://github.com/sofa-framework/sofa/pull/399#issuecomment-338133353:180,Testability,test,test,180,"I think I get your point but it adds an another parameter that changes nothing in practice. Here the point is to cut everything outside the bounds. With your suggestions, who will test the sensibility of this epsilon parameter ? It is not acceptable to have a number outside these bounds since asin is not defined at all",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338133353
https://github.com/sofa-framework/sofa/pull/399#issuecomment-338594103:137,Availability,error,error,137,"`asin` might be undefined, it is still better to have it crashing instead of working were it should not - again, if `y` contains a ""big"" error (greater than 10e-15 upon @raffaellatrivisonne comment). ; The question is: could `y` contain such a ""big"" error? If no, let's just assume that and round this way. If yes or don't know, let's add a tiny security with something like; ```cpp; const double epsilon = 1e-15;; Real y = Real(2.)*(q[3]*q[1] - q[2]*q[0]);; if( std::abs( double(y) ) - 1.0 > epsilon ); {; msg_error(""Quat"") << ""Unexpectedly out of bounds argument for asin: "" << y << msgendl;; }; ```; or; ```cpp; const double epsilon = 1e-15;; Real y = Real(2.)*(q[3]*q[1] - q[2]*q[0]);; if( std::abs( double(y) ) - 1.0 > epsilon ); {; Real force_round = std::max( Real(-1.0), std::min(Real(1.0), y) );; msg_warning(""Quat"") << ""Unexpectedly out of bounds argument for asin: "" << y; << ""Force rounding to "" << force_round << msgendl;; y = force_round;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338594103
https://github.com/sofa-framework/sofa/pull/399#issuecomment-338594103:250,Availability,error,error,250,"`asin` might be undefined, it is still better to have it crashing instead of working were it should not - again, if `y` contains a ""big"" error (greater than 10e-15 upon @raffaellatrivisonne comment). ; The question is: could `y` contain such a ""big"" error? If no, let's just assume that and round this way. If yes or don't know, let's add a tiny security with something like; ```cpp; const double epsilon = 1e-15;; Real y = Real(2.)*(q[3]*q[1] - q[2]*q[0]);; if( std::abs( double(y) ) - 1.0 > epsilon ); {; msg_error(""Quat"") << ""Unexpectedly out of bounds argument for asin: "" << y << msgendl;; }; ```; or; ```cpp; const double epsilon = 1e-15;; Real y = Real(2.)*(q[3]*q[1] - q[2]*q[0]);; if( std::abs( double(y) ) - 1.0 > epsilon ); {; Real force_round = std::max( Real(-1.0), std::min(Real(1.0), y) );; msg_warning(""Quat"") << ""Unexpectedly out of bounds argument for asin: "" << y; << ""Force rounding to "" << force_round << msgendl;; y = force_round;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338594103
https://github.com/sofa-framework/sofa/pull/399#issuecomment-338594103:346,Security,secur,security,346,"`asin` might be undefined, it is still better to have it crashing instead of working were it should not - again, if `y` contains a ""big"" error (greater than 10e-15 upon @raffaellatrivisonne comment). ; The question is: could `y` contain such a ""big"" error? If no, let's just assume that and round this way. If yes or don't know, let's add a tiny security with something like; ```cpp; const double epsilon = 1e-15;; Real y = Real(2.)*(q[3]*q[1] - q[2]*q[0]);; if( std::abs( double(y) ) - 1.0 > epsilon ); {; msg_error(""Quat"") << ""Unexpectedly out of bounds argument for asin: "" << y << msgendl;; }; ```; or; ```cpp; const double epsilon = 1e-15;; Real y = Real(2.)*(q[3]*q[1] - q[2]*q[0]);; if( std::abs( double(y) ) - 1.0 > epsilon ); {; Real force_round = std::max( Real(-1.0), std::min(Real(1.0), y) );; msg_warning(""Quat"") << ""Unexpectedly out of bounds argument for asin: "" << y; << ""Force rounding to "" << force_round << msgendl;; y = force_round;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338594103
https://github.com/sofa-framework/sofa/pull/399#issuecomment-338692184:10,Integrability,message,message,10,"Well, the message sounded like ""you have to add an epsilon value"" 🙄 . I let @raffaellatrivisonne do her job here for now on... good luck",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338692184
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343083400:183,Availability,error,error,183,"Hi everybody, ; sorry for being late with my answer.; @guparan, as soon as the argument of asin is greater than 1, you have an invalid operation.; It doesn't matter how ""big"" is your error, it can be huge or infinitesimal.; In this case, it is due to numerical errors, that's why I said 10e-15.; If it is the proper way, I can set an epsilon, but then how ?; As @untereiner says, why 1e-15 instead of 1e-11 ?; How do you set a parameter on numerical errors ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343083400
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343083400:261,Availability,error,errors,261,"Hi everybody, ; sorry for being late with my answer.; @guparan, as soon as the argument of asin is greater than 1, you have an invalid operation.; It doesn't matter how ""big"" is your error, it can be huge or infinitesimal.; In this case, it is due to numerical errors, that's why I said 10e-15.; If it is the proper way, I can set an epsilon, but then how ?; As @untereiner says, why 1e-15 instead of 1e-11 ?; How do you set a parameter on numerical errors ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343083400
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343083400:450,Availability,error,errors,450,"Hi everybody, ; sorry for being late with my answer.; @guparan, as soon as the argument of asin is greater than 1, you have an invalid operation.; It doesn't matter how ""big"" is your error, it can be huge or infinitesimal.; In this case, it is due to numerical errors, that's why I said 10e-15.; If it is the proper way, I can set an epsilon, but then how ?; As @untereiner says, why 1e-15 instead of 1e-11 ?; How do you set a parameter on numerical errors ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343083400
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:135,Availability,error,error,135,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:221,Availability,error,error,221,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:698,Availability,error,error,698,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:704,Integrability,message,message,704,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:292,Modifiability,variab,variable,292,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:607,Modifiability,variab,variable,607,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343414028:24,Testability,test,tests,24,Do someone knows why do tests are failing ? (In QuaterTest),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343414028
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343448267:202,Testability,test,test,202,"I'm trying to debug to see where it fails, but it will take a little bit more than expected.; Meanwhile I just want to highlight that coming back to the un-fixed version (the one without my commit) the test doesn't fail YET the **toEulerVector** is doing an invalid operation (the bug that my commit is supposed to fix). ![screenshot from 2017-11-10 12-13-39](https://user-images.githubusercontent.com/20112873/32656351-bf740592-c611-11e7-95a5-786c795763c1.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343448267
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343465411:115,Testability,test,test,115,"maybe I am stating something already well known, but with c++11 there are some built in functions that can help to test floating point arithmetic. ; So with the current implementation adding something to the `EulerAngle` test like; ```lang=cpp; for(std::size_t i=0; i<q0.size(); ++i) // same goes for q1; {; ASSERT_FALSE(std::is_nan(q0[i]));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343465411
https://github.com/sofa-framework/sofa/pull/399#issuecomment-343465411:221,Testability,test,test,221,"maybe I am stating something already well known, but with c++11 there are some built in functions that can help to test floating point arithmetic. ; So with the current implementation adding something to the `EulerAngle` test like; ```lang=cpp; for(std::size_t i=0; i<q0.size(); ++i) // same goes for q1; {; ASSERT_FALSE(std::is_nan(q0[i]));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343465411
https://github.com/sofa-framework/sofa/pull/399#issuecomment-346567483:198,Availability,error,error,198,"Hi everybody, I'm trying to work on this PR, but I'm quite busy with my PhD in this moment and I don't think I will be able to finish it within a short delay.; As suggested by Francois, I added the error message in Quater_test.cpp.; Now is failing, as with the old-code (without my commit) NaN values may appear. ; In Quater.inl (function toEulerVector) I went back to the old code commenting the modifications I made with my commit. This way, if someone else takes the hands on this PR, he will better know what to do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-346567483
https://github.com/sofa-framework/sofa/pull/399#issuecomment-346567483:204,Integrability,message,message,204,"Hi everybody, I'm trying to work on this PR, but I'm quite busy with my PhD in this moment and I don't think I will be able to finish it within a short delay.; As suggested by Francois, I added the error message in Quater_test.cpp.; Now is failing, as with the old-code (without my commit) NaN values may appear. ; In Quater.inl (function toEulerVector) I went back to the old code commenting the modifications I made with my commit. This way, if someone else takes the hands on this PR, he will better know what to do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-346567483
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083:120,Modifiability,plugin,plugins,120,Hi @sergeiNikolaev . I'm not sure what you want. ; There is actually several tests of python functionality in different plugins. ; SofaPython_test and SofaTest are good starting point. . Now if you want to lauch automatically something like 'unittest' or 'coverage' I have no idea but this is a good question.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083:77,Testability,test,tests,77,Hi @sergeiNikolaev . I'm not sure what you want. ; There is actually several tests of python functionality in different plugins. ; SofaPython_test and SofaTest are good starting point. . Now if you want to lauch automatically something like 'unittest' or 'coverage' I have no idea but this is a good question.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331:88,Availability,error,errors,88,"Hello @damienmarchal . I tried to execute tests manually using python. And I got import errors like:; _Traceback (most recent call last):; File ""test_mass.py"", line 8, in <module>; from SofaTest.Macro import *; ImportError: No module named SofaTest.Macro_; or; _Traceback (most recent call last):; File ""test_MeshLoader.py"", line 1, in <module>; import SofaPython.MeshLoader; ImportError: No module named SofaPython.MeshLoader_. It seems I should attach some additional modules (plugins), but I don't know what exactly I should do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331:479,Modifiability,plugin,plugins,479,"Hello @damienmarchal . I tried to execute tests manually using python. And I got import errors like:; _Traceback (most recent call last):; File ""test_mass.py"", line 8, in <module>; from SofaTest.Macro import *; ImportError: No module named SofaTest.Macro_; or; _Traceback (most recent call last):; File ""test_MeshLoader.py"", line 1, in <module>; import SofaPython.MeshLoader; ImportError: No module named SofaPython.MeshLoader_. It seems I should attach some additional modules (plugins), but I don't know what exactly I should do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331:42,Testability,test,tests,42,"Hello @damienmarchal . I tried to execute tests manually using python. And I got import errors like:; _Traceback (most recent call last):; File ""test_mass.py"", line 8, in <module>; from SofaTest.Macro import *; ImportError: No module named SofaTest.Macro_; or; _Traceback (most recent call last):; File ""test_MeshLoader.py"", line 1, in <module>; import SofaPython.MeshLoader; ImportError: No module named SofaPython.MeshLoader_. It seems I should attach some additional modules (plugins), but I don't know what exactly I should do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323:92,Availability,avail,available,92,"Hi there,. You cannot load tests using the python binary because the sofa bindings are only available for the embedded interpreter. . There are some python tests under SofaTest/python IIRC.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323:22,Performance,load,load,22,"Hi there,. You cannot load tests using the python binary because the sofa bindings are only available for the embedded interpreter. . There are some python tests under SofaTest/python IIRC.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323:27,Testability,test,tests,27,"Hi there,. You cannot load tests using the python binary because the sofa bindings are only available for the embedded interpreter. . There are some python tests under SofaTest/python IIRC.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323:156,Testability,test,tests,156,"Hi there,. You cannot load tests using the python binary because the sofa bindings are only available for the embedded interpreter. . There are some python tests under SofaTest/python IIRC.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323
https://github.com/sofa-framework/sofa/issues/400#issuecomment-329798784:36,Performance,load,load,36,"Ok. Then my question is how I could load and use this embedded interpreter?; If, for example, I want to debug or to verify how some script works.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329798784
https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906:8,Usability,simpl,simply,8,"You can simply start a python sofa scene using the main sofa executable, either through `File/Open` or from the command line. . A simple scene goes like this:. ```python; def createScene(node):; child = node.createChild('childname'); object = child.createObject('MechanicalObject', name = 'mobject', size = 1); ```. Please see the docs for more details.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906
https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906:130,Usability,simpl,simple,130,"You can simply start a python sofa scene using the main sofa executable, either through `File/Open` or from the command line. . A simple scene goes like this:. ```python; def createScene(node):; child = node.createChild('childname'); object = child.createObject('MechanicalObject', name = 'mobject', size = 1); ```. Please see the docs for more details.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906
https://github.com/sofa-framework/sofa/issues/400#issuecomment-330598775:10,Testability,test,tests,10,Do python tests work in similar way? Ok.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330598775
https://github.com/sofa-framework/sofa/pull/402#issuecomment-331384661:58,Testability,test,tests,58,Thank for adding new features to Sofa and having provided tests with it.; Seem to compile and does not turn the CI in full red.; So let's merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/402#issuecomment-331384661
https://github.com/sofa-framework/sofa/pull/404#issuecomment-336471217:136,Integrability,depend,dependency,136,Ok... Do we all consider that numpy is mandatory when using SOFA with python ? . It is just a question so that people are aware of that dependency. But I agree to remove the new implementation if less performant . Erwan will do it,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404#issuecomment-336471217
https://github.com/sofa-framework/sofa/pull/404#issuecomment-336471217:201,Performance,perform,performant,201,Ok... Do we all consider that numpy is mandatory when using SOFA with python ? . It is just a question so that people are aware of that dependency. But I agree to remove the new implementation if less performant . Erwan will do it,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404#issuecomment-336471217
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329785483:50,Safety,detect,detect,50,Great...shouldn't the test scene become a test to detect future regression ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329785483
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329785483:22,Testability,test,test,22,Great...shouldn't the test scene become a test to detect future regression ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329785483
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329785483:42,Testability,test,test,42,Great...shouldn't the test scene become a test to detect future regression ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329785483
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709:252,Deployability,configurat,configurations,252,"Well in this case, the bug was a wrongfully warning printed only when Sofa is built in debug. Can we create tests that are that specific?. I could try to do some regex ninja tests on the application output, but it would have to be executed on debugged configurations. Let me know if this is something you would like to see for this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709:252,Modifiability,config,configurations,252,"Well in this case, the bug was a wrongfully warning printed only when Sofa is built in debug. Can we create tests that are that specific?. I could try to do some regex ninja tests on the application output, but it would have to be executed on debugged configurations. Let me know if this is something you would like to see for this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709:108,Testability,test,tests,108,"Well in this case, the bug was a wrongfully warning printed only when Sofa is built in debug. Can we create tests that are that specific?. I could try to do some regex ninja tests on the application output, but it would have to be executed on debugged configurations. Let me know if this is something you would like to see for this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709:174,Testability,test,tests,174,"Well in this case, the bug was a wrongfully warning printed only when Sofa is built in debug. Can we create tests that are that specific?. I could try to do some regex ninja tests on the application output, but it would have to be executed on debugged configurations. Let me know if this is something you would like to see for this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329790996:110,Testability,test,test,110,I was thinking that the PR was about keeping the vsize and real vector size the same so I was thinking ; to a test that fails if there is a size mismatch. But I may be wrong...I'm really weak on these part of Sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329790996
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045:36,Integrability,message,messages,36,Ok so if the pr is just about wrong messages no need for test :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045
https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045:57,Testability,test,test,57,Ok so if the pr is just about wrong messages no need for test :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045
https://github.com/sofa-framework/sofa/pull/406#issuecomment-330821254:23,Testability,test,test,23,@guparan...the failing test on stl exporter are also fixed. ; @jnbrunet Thanks again for the PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-330821254
https://github.com/sofa-framework/sofa/pull/407#issuecomment-330460694:123,Modifiability,plugin,plugins,123,Thank you @damienmarchal for this nice work as always.; I see you removed all the `typedef` but did not re-defined them in plugins. Won't this break user code?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330460694
https://github.com/sofa-framework/sofa/pull/407#issuecomment-330469848:74,Usability,simpl,simply,74,@guparan ; Actually there were not used at all in the sofa code base so I simply remove them. To you have a suggestion about that ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330469848
https://github.com/sofa-framework/sofa/pull/409#issuecomment-330462081:12,Testability,test,test,12,Let's add a test like in https://github.com/sofa-framework/sofa/pull/289 !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409#issuecomment-330462081
https://github.com/sofa-framework/sofa/pull/409#issuecomment-330655999:56,Testability,test,test,56,Looks all good to me ... and gg guillaume for the extra test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409#issuecomment-330655999
https://github.com/sofa-framework/sofa/pull/410#issuecomment-332143846:155,Testability,test,tests,155,"OMG There is so much things to do to finalize this PR. ; I'm reviewing my own code but among things:; - add docstring,; - remove the todo before PR; - add tests to each new features.; - ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-332143846
https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765:116,Modifiability,plugin,plugin,116,"Hi everyone, this this is an ""all in one"" branch that adds functions in Sofa ; before we can make a PR with the PSL plugin. The PR is two month old...no one complains and now all the added function are tested & documented so it may be merged soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765
https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765:202,Testability,test,tested,202,"Hi everyone, this this is an ""all in one"" branch that adds functions in Sofa ; before we can make a PR with the PSL plugin. The PR is two month old...no one complains and now all the added function are tested & documented so it may be merged soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765
https://github.com/sofa-framework/sofa/pull/410#issuecomment-345064392:128,Testability,test,tests,128,"@guparan, @fredroy, @bcarrez , @hugtalbot ; Hello, this branch is now synced with master, CI is ok, added functions have theirs tests...; So it is waiting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-345064392
https://github.com/sofa-framework/sofa/pull/410#issuecomment-346931244:93,Testability,test,testReport,93,Houston we got a problem: https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/545/testReport/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-346931244
https://github.com/sofa-framework/sofa/pull/411#issuecomment-334453911:99,Usability,feedback,feedback,99,"Thank you @maxime-tournier and sorry for the delay; @damienmarchal @matthieu-nesme do you have any feedback regarding the PR, otherwise it should be merged. Thx guys",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-334453911
https://github.com/sofa-framework/sofa/pull/411#issuecomment-335815718:10,Testability,test,test,10,Also: the test is the associated example.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335815718
https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643:115,Performance,load,loading,115,Is the examples automatically started during CI tests ? ; If not please consider adding a dedicated test (even one loading the examples file) because we don't want to be forced to run manually all the examples scenes to detect possible regressions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643
https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643:220,Safety,detect,detect,220,Is the examples automatically started during CI tests ? ; If not please consider adding a dedicated test (even one loading the examples file) because we don't want to be forced to run manually all the examples scenes to detect possible regressions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643
https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643:48,Testability,test,tests,48,Is the examples automatically started during CI tests ? ; If not please consider adding a dedicated test (even one loading the examples file) because we don't want to be forced to run manually all the examples scenes to detect possible regressions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643
https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643:100,Testability,test,test,100,Is the examples automatically started during CI tests ? ; If not please consider adding a dedicated test (even one loading the examples file) because we don't want to be forced to run manually all the examples scenes to detect possible regressions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643
https://github.com/sofa-framework/sofa/pull/411#issuecomment-336932219:26,Testability,test,tests,26,Rebuild and run the scene tests :; [ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-336932219
https://github.com/sofa-framework/sofa/pull/411#issuecomment-336932219:58,Testability,test,tests,58,Rebuild and run the scene tests :; [ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-336932219
https://github.com/sofa-framework/sofa/pull/411#issuecomment-337500620:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-337500620
https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349:163,Modifiability,plugin,pluginizing,163,The details to know:; - where (I vote for the 'salle du conseil' :)); - when (wednesday 4 ?); - who will attend to the coding sprint ? . My dream list:; - SofaNG (pluginizing the modules); - sofaqtquick (only if there is more than 2 QML expert); - Sofa code cleaning (as usual) :) ; - coding standard conformance; - we want more tests (they are crucial for refactoring) !!!; - remove & unify duplicated code (eg...how many fast marching algorithm do we need ?); - remove the not-needed includes. ; - Writing doc :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349
https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349:357,Modifiability,refactor,refactoring,357,The details to know:; - where (I vote for the 'salle du conseil' :)); - when (wednesday 4 ?); - who will attend to the coding sprint ? . My dream list:; - SofaNG (pluginizing the modules); - sofaqtquick (only if there is more than 2 QML expert); - Sofa code cleaning (as usual) :) ; - coding standard conformance; - we want more tests (they are crucial for refactoring) !!!; - remove & unify duplicated code (eg...how many fast marching algorithm do we need ?); - remove the not-needed includes. ; - Writing doc :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349
https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349:329,Testability,test,tests,329,The details to know:; - where (I vote for the 'salle du conseil' :)); - when (wednesday 4 ?); - who will attend to the coding sprint ? . My dream list:; - SofaNG (pluginizing the modules); - sofaqtquick (only if there is more than 2 QML expert); - Sofa code cleaning (as usual) :) ; - coding standard conformance; - we want more tests (they are crucial for refactoring) !!!; - remove & unify duplicated code (eg...how many fast marching algorithm do we need ?); - remove the not-needed includes. ; - Writing doc :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349
https://github.com/sofa-framework/sofa/issues/413#issuecomment-330850319:144,Energy Efficiency,power,powers,144,"You forgot to ask **what** and that's the main point of this issue. - No worries about where, we handle it internally (you can use your Lillois powers to influence the choice though) ;-); - When: tuesday 3 afternoon (setting up and starting) + wednesday 4 whole day (coding like beasts).; - Who: this may influence the tasks but doesn't avoid us to propose everything we want :-) For now I can say we should be around 20-30.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330850319
https://github.com/sofa-framework/sofa/issues/413#issuecomment-330850319:337,Safety,avoid,avoid,337,"You forgot to ask **what** and that's the main point of this issue. - No worries about where, we handle it internally (you can use your Lillois powers to influence the choice though) ;-); - When: tuesday 3 afternoon (setting up and starting) + wednesday 4 whole day (coding like beasts).; - Who: this may influence the tasks but doesn't avoid us to propose everything we want :-) For now I can say we should be around 20-30.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330850319
https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965:730,Availability,redundant,redundant,730,"To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965
https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965:861,Deployability,integrat,integrate,861,"To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965
https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965:861,Integrability,integrat,integrate,861,"To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965
https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965:730,Safety,redund,redundant,730,"To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965
https://github.com/sofa-framework/sofa/issues/413#issuecomment-333147769:67,Modifiability,plugin,pluginization,67,"I just created separated issues for our 3 main tasks: deprecation, pluginization and issofa branches. Please use the appropriate ones (not this one) for future discussions. If issues are also needed for cleaning and documentation tasks, feel free to create them.; This issue can still be used for new suggestions or remarks so I let it open.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333147769
https://github.com/sofa-framework/sofa/issues/413#issuecomment-333149231:149,Deployability,integrat,integration,149,A word about organization: ; - we will work by groups of 4; - we will use specific branches (ignored by the CI) on this repository for our commits + integration branches (built by the CI); - I will create a team to handle permissions so please make sure everyone has a GitHub account,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333149231
https://github.com/sofa-framework/sofa/issues/413#issuecomment-333149231:149,Integrability,integrat,integration,149,A word about organization: ; - we will work by groups of 4; - we will use specific branches (ignored by the CI) on this repository for our commits + integration branches (built by the CI); - I will create a team to handle permissions so please make sure everyone has a GitHub account,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333149231
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:175,Deployability,integrat,integration,175,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:423,Deployability,integrat,integration,423,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:492,Deployability,integrat,integrate,492,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:577,Deployability,integrat,integrate,577,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:609,Deployability,integrat,integrate,609,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:154,Energy Efficiency,efficient,efficient,154,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:175,Integrability,integrat,integration,175,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:423,Integrability,integrat,integration,423,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:492,Integrability,integrat,integrate,492,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:577,Integrability,integrat,integrate,577,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:609,Integrability,integrat,integrate,609,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:623,Modifiability,plugin,pluginization,623,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334468636:399,Usability,clear,clear,399,"@damienmarchal, splitting our sprint branch in 2 was not hard but like you I'd like to merge things correctly.; I agree with your proposal but I think we should also reopen a PR from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 to merge all sprint prerequisites first.; This way, the two PRs from our sprint will be very clear.; What do you think ? I am ready to do it ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334468636
https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138:310,Availability,error,error,310,"@damienmarchal ; This is yet another instance of the ""most vexing parse"", which I assume most c++ programmers are familiar with (c++ really is a terrible language). However, clang issues a warning and I suspect gcc does too, so this is not really an issue to me. An elegant fix is to turn this warning into an error :-) . I understand the problem can go unnoticed since the value is never used elsewhere and won't get to trigger a type error down the road, so removing the default value for the constructor argument seems like a reasonable (and portable) fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138
https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138:436,Availability,error,error,436,"@damienmarchal ; This is yet another instance of the ""most vexing parse"", which I assume most c++ programmers are familiar with (c++ really is a terrible language). However, clang issues a warning and I suspect gcc does too, so this is not really an issue to me. An elegant fix is to turn this warning into an error :-) . I understand the problem can go unnoticed since the value is never used elsewhere and won't get to trigger a type error down the road, so removing the default value for the constructor argument seems like a reasonable (and portable) fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138
https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138:442,Availability,down,down,442,"@damienmarchal ; This is yet another instance of the ""most vexing parse"", which I assume most c++ programmers are familiar with (c++ really is a terrible language). However, clang issues a warning and I suspect gcc does too, so this is not really an issue to me. An elegant fix is to turn this warning into an error :-) . I understand the problem can go unnoticed since the value is never used elsewhere and won't get to trigger a type error down the road, so removing the default value for the constructor argument seems like a reasonable (and portable) fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138
https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138:545,Modifiability,portab,portable,545,"@damienmarchal ; This is yet another instance of the ""most vexing parse"", which I assume most c++ programmers are familiar with (c++ really is a terrible language). However, clang issues a warning and I suspect gcc does too, so this is not really an issue to me. An elegant fix is to turn this warning into an error :-) . I understand the problem can go unnoticed since the value is never used elsewhere and won't get to trigger a type error down the road, so removing the default value for the constructor argument seems like a reasonable (and portable) fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138
https://github.com/sofa-framework/sofa/pull/415#issuecomment-331914492:45,Integrability,message,message,45,I just took the liberty to change the commit message. Hope you don't mind :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415#issuecomment-331914492
https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:294,Availability,error,error,294,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780
https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:904,Integrability,interface,interface,904,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780
https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:327,Modifiability,plugin,plugin,327,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780
https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:1095,Usability,clear,clear,1095,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289:728,Integrability,depend,dependency,728,"Hi Maxime . Very glad that you are interest on those question. On our side we are actively working on this kind of things (deprecating, disable components, remove the no-needed includes in .h, remove the code in .h transforming module into plugin,... ). . We also noticed the problem with SceneCreator and I think that your suggestion is nice. So let's do that ;) . If you are willing to do it please tell us so we wait your PR and we don't duplicate your effort. Otherwise we will do it in the next week (if it does not take too much time). . More generally we would like to make a big effort in this direction during the STC's coding-sprint to end in a cleaner Sofa. . Our approach now is to look at the leaves of the include dependency graph to remove the component that are not part of sofaNG and make PR with that. . Maybe we should all synchronize with other SofaNG guys (@fredroy) so that all our efforts can be merged in the easiest possible way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289:842,Integrability,synchroniz,synchronize,842,"Hi Maxime . Very glad that you are interest on those question. On our side we are actively working on this kind of things (deprecating, disable components, remove the no-needed includes in .h, remove the code in .h transforming module into plugin,... ). . We also noticed the problem with SceneCreator and I think that your suggestion is nice. So let's do that ;) . If you are willing to do it please tell us so we wait your PR and we don't duplicate your effort. Otherwise we will do it in the next week (if it does not take too much time). . More generally we would like to make a big effort in this direction during the STC's coding-sprint to end in a cleaner Sofa. . Our approach now is to look at the leaves of the include dependency graph to remove the component that are not part of sofaNG and make PR with that. . Maybe we should all synchronize with other SofaNG guys (@fredroy) so that all our efforts can be merged in the easiest possible way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289:240,Modifiability,plugin,plugin,240,"Hi Maxime . Very glad that you are interest on those question. On our side we are actively working on this kind of things (deprecating, disable components, remove the no-needed includes in .h, remove the code in .h transforming module into plugin,... ). . We also noticed the problem with SceneCreator and I think that your suggestion is nice. So let's do that ;) . If you are willing to do it please tell us so we wait your PR and we don't duplicate your effort. Otherwise we will do it in the next week (if it does not take too much time). . More generally we would like to make a big effort in this direction during the STC's coding-sprint to end in a cleaner Sofa. . Our approach now is to look at the leaves of the include dependency graph to remove the component that are not part of sofaNG and make PR with that. . Maybe we should all synchronize with other SofaNG guys (@fredroy) so that all our efforts can be merged in the easiest possible way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:173,Modifiability,plugin,plugins,173,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:193,Modifiability,plugin,plugin,193,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:268,Modifiability,plugin,plugin,268,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:350,Modifiability,plugin,plugins,350,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:483,Testability,test,tests,483,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:514,Testability,test,tests,514,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:558,Testability,test,tests,558,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:644,Testability,test,tests,644,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:796,Testability,test,tests,796,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:822,Testability,assert,assertions,822,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:837,Testability,test,testing,837,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:492,Deployability,Pipeline,Pipeline,492,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:1138,Integrability,depend,dependencies,1138,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:571,Safety,Detect,Detection,571,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:44,Testability,test,tests,44,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:101,Usability,simpl,simple,101,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:336,Usability,Simpl,SimpleAPI,336,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:423,Usability,simpl,simpleapi,423,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
