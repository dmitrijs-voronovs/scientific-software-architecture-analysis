id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:95164,Deployability,Continuous,ContinuousBoundaryFunction,95164,"s.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity4)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Nothing, Center, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻˣ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑyzᵃᶜᶠ), typeof(Oceananigans.Operators.identity5)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.LeftBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity1)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center, Nothing, Face, Oceananigans.BoundaryConditions.RightBoundary, typeof(τᶻʸ_drag), Nothing, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}, Tuple{typeof(ℑxzᶜᵃᶠ), typeof(Oceananigans.Operators.identity2)}}}, Nothing, Nothing}}}, Tuple{CPU, CPU}}, Nothing, MultiRegionObject{Tuple{Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}, Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}}}, NamedTuple{(:b,), Tuple{Field{Center, Center, Center, Nothing, MultiRegionGrid{Float64, Periodic, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:104962,Deployability,Continuous,ContinuousForcing,104962,"ltiRegion.Connectivity}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}}, Tuple{CPU, CPU}}, Nothing, MultiRegionObject{Tuple{Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}, Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}}}, WENO{3, Float64, Nothing, Nothing, NTuple{4, OffsetArrays.OffsetVector{Tuple{Float64, Float64, Float64}, Vector{Tuple{Float64, Float64, Float64}}}}, Nothing, true, Nothing, WENO{2,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:105195,Deployability,Continuous,ContinuousForcing,105195,"undaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}}, Tuple{CPU, CPU}}, Nothing, MultiRegionObject{Tuple{Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}, Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}}}, WENO{3, Float64, Nothing, Nothing, NTuple{4, OffsetArrays.OffsetVector{Tuple{Float64, Float64, Float64}, Vector{Tuple{Float64, Float64, Float64}}}}, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Tuple{OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}, OffsetArrays.OffsetVector{Tup",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:105428,Deployability,Continuous,ContinuousForcing,105428,"e{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}, Oceananigans.Fields.FieldBoundaryBuffers{NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}}}, WENO{3, Float64, Nothing, Nothing, NTuple{4, OffsetArrays.OffsetVector{Tuple{Float64, Float64, Float64}, Vector{Tuple{Float64, Float64, Float64}}}}, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Tuple{OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}}, Nothing, true, Nothing, UpwindBiased{1, Float64, Nothing, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{1, Float64, Nothing, No",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524:105661,Deployability,Continuous,ContinuousForcing,105661,"y{Float64, 3}, Array{Float64, 3}}}, NamedTuple{(:send, :recv), Tuple{Array{Float64, 3}, Array{Float64, 3}}}, Nothing, Nothing}}, Tuple{CPU, CPU}}}}}, NamedTuple{(:u, :v, :w, :b), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity5)}}, Oceananigans.Forcings.ContinuousForcing{Center, Face, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_v), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity1)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Face, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_w), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity2)}}, Oceananigans.Forcings.ContinuousForcing{Center, Center, Center, NamedTuple{(:H, :L, :σ, :sp_length_y, :V∞, :f₀, :N²∞), NTuple{7, Float64}}, typeof(forc_b), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity3)}}}}, WENO{3, Float64, Nothing, Nothing, NTuple{4, OffsetArrays.OffsetVector{Tuple{Float64, Float64, Float64}, Vector{Tuple{Float64, Float64, Float64}}}}, Nothing, true, Nothing, WENO{2, Float64, Nothing, Nothing, Tuple{OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}, OffsetArrays.OffsetVector{Tuple{Float64, Float64}, Vector{Tuple{Float64, Float64}}}}, Nothing, true, Nothing, UpwindBiased{1, Float64, Nothing, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{2, Float64, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}}, Oceananigans.MultiRegion.MultiRegionPoissonSolver{MultiRegionGrid{Float64, Periodic, Periodic, Boun",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572:267,Availability,error,error,267,"@simone-silvestri In addition to the NetCDF issue I mentioned [here](https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524), I found out that the `cell_advection_timescale()` and `interior()` aren't working with `MultiRegionGrids` yet. Here's an error example:. ```julia; ERROR: LoadError: type MultiRegionObject has no field parent; Stacktrace:; [1] getproperty; @ ./Base.jl:38 [inlined]; [2] cell_advection_timescale(model::NonhydrostaticModel{Oceananigans.TimeSteppers.QuasiAdamsBashforth2TimeStepper{Float64, NamedTuple{(:u, :v, :w), Tuple{Field{Face, Center, Center, Nothing, MultiRegionGrid{Float64, Bounded, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{RectilinearGrid{Float64, RightConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, RectilinearGrid{Float64, LeftConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}, MultiRegionObject{Tuple{Tuple{Colon, Colon, Colon}, Tuple{Colon, Colon, Colon}}, Tuple{CPU, CPU}}, MultiRegionObject{Tuple{OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}}, Tuple{CPU, CPU}}, Any, MultiRegionObject{Tuple{FieldBoundaryConditions{Nothing, Bo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572:293,Availability,ERROR,ERROR,293,"@simone-silvestri In addition to the NetCDF issue I mentioned [here](https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524), I found out that the `cell_advection_timescale()` and `interior()` aren't working with `MultiRegionGrids` yet. Here's an error example:. ```julia; ERROR: LoadError: type MultiRegionObject has no field parent; Stacktrace:; [1] getproperty; @ ./Base.jl:38 [inlined]; [2] cell_advection_timescale(model::NonhydrostaticModel{Oceananigans.TimeSteppers.QuasiAdamsBashforth2TimeStepper{Float64, NamedTuple{(:u, :v, :w), Tuple{Field{Face, Center, Center, Nothing, MultiRegionGrid{Float64, Bounded, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{RectilinearGrid{Float64, RightConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, RectilinearGrid{Float64, LeftConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}, MultiRegionObject{Tuple{Tuple{Colon, Colon, Colon}, Tuple{Colon, Colon, Colon}}, Tuple{CPU, CPU}}, MultiRegionObject{Tuple{OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}}, Tuple{CPU, CPU}}, Any, MultiRegionObject{Tuple{FieldBoundaryConditions{Nothing, Bo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572:300,Performance,Load,LoadError,300,"@simone-silvestri In addition to the NetCDF issue I mentioned [here](https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304038524), I found out that the `cell_advection_timescale()` and `interior()` aren't working with `MultiRegionGrids` yet. Here's an error example:. ```julia; ERROR: LoadError: type MultiRegionObject has no field parent; Stacktrace:; [1] getproperty; @ ./Base.jl:38 [inlined]; [2] cell_advection_timescale(model::NonhydrostaticModel{Oceananigans.TimeSteppers.QuasiAdamsBashforth2TimeStepper{Float64, NamedTuple{(:u, :v, :w), Tuple{Field{Face, Center, Center, Nothing, MultiRegionGrid{Float64, Bounded, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{RectilinearGrid{Float64, RightConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, RectilinearGrid{Float64, LeftConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}, MultiRegionObject{Tuple{Tuple{Colon, Colon, Colon}, Tuple{Colon, Colon, Colon}}, Tuple{CPU, CPU}}, MultiRegionObject{Tuple{OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}}, Tuple{CPU, CPU}}, Any, MultiRegionObject{Tuple{FieldBoundaryConditions{Nothing, Bo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304897071:734,Availability,error,error,734,"Regarding the comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572), can anyone help me understand some things?. The following MWE works:. ```julia; grid_base = RectilinearGrid(topology=(Bounded, Periodic, Bounded), size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(2), devices = 2); model = NonhydrostaticModel(grid = grid). simulation = Simulation(model, Δt=1, stop_iteration=10,); wizard = TimeStepWizard(max_change=1.02, cfl=0.8); simulation.callbacks[:wizard] = Callback(wizard, IterationInterval(4)); ```. And I can confirm that Δt is indeed changed by the end of the simulation. However, when I issue `wizard.cell_advection_timescale(model)` I get error above. I also get errors when using `wizard.cell_advection_timescale(model.grid, model.velocities)`. . So I'm clearly missing something here. It seems to me the answer includes `construct_regionally` or `@apply_regionally`, but I couldn't figure it out from the available docs and code. PS: for now I'm using only one CPU core to run things, but still passing two devices to the `MultiRegionGrid` constructor, in case that's important.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304897071
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304897071:758,Availability,error,errors,758,"Regarding the comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572), can anyone help me understand some things?. The following MWE works:. ```julia; grid_base = RectilinearGrid(topology=(Bounded, Periodic, Bounded), size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(2), devices = 2); model = NonhydrostaticModel(grid = grid). simulation = Simulation(model, Δt=1, stop_iteration=10,); wizard = TimeStepWizard(max_change=1.02, cfl=0.8); simulation.callbacks[:wizard] = Callback(wizard, IterationInterval(4)); ```. And I can confirm that Δt is indeed changed by the end of the simulation. However, when I issue `wizard.cell_advection_timescale(model)` I get error above. I also get errors when using `wizard.cell_advection_timescale(model.grid, model.velocities)`. . So I'm clearly missing something here. It seems to me the answer includes `construct_regionally` or `@apply_regionally`, but I couldn't figure it out from the available docs and code. PS: for now I'm using only one CPU core to run things, but still passing two devices to the `MultiRegionGrid` constructor, in case that's important.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304897071
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304897071:1002,Availability,avail,available,1002,"Regarding the comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572), can anyone help me understand some things?. The following MWE works:. ```julia; grid_base = RectilinearGrid(topology=(Bounded, Periodic, Bounded), size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(2), devices = 2); model = NonhydrostaticModel(grid = grid). simulation = Simulation(model, Δt=1, stop_iteration=10,); wizard = TimeStepWizard(max_change=1.02, cfl=0.8); simulation.callbacks[:wizard] = Callback(wizard, IterationInterval(4)); ```. And I can confirm that Δt is indeed changed by the end of the simulation. However, when I issue `wizard.cell_advection_timescale(model)` I get error above. I also get errors when using `wizard.cell_advection_timescale(model.grid, model.velocities)`. . So I'm clearly missing something here. It seems to me the answer includes `construct_regionally` or `@apply_regionally`, but I couldn't figure it out from the available docs and code. PS: for now I'm using only one CPU core to run things, but still passing two devices to the `MultiRegionGrid` constructor, in case that's important.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304897071
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304897071:850,Usability,clear,clearly,850,"Regarding the comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304574572), can anyone help me understand some things?. The following MWE works:. ```julia; grid_base = RectilinearGrid(topology=(Bounded, Periodic, Bounded), size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(2), devices = 2); model = NonhydrostaticModel(grid = grid). simulation = Simulation(model, Δt=1, stop_iteration=10,); wizard = TimeStepWizard(max_change=1.02, cfl=0.8); simulation.callbacks[:wizard] = Callback(wizard, IterationInterval(4)); ```. And I can confirm that Δt is indeed changed by the end of the simulation. However, when I issue `wizard.cell_advection_timescale(model)` I get error above. I also get errors when using `wizard.cell_advection_timescale(model.grid, model.velocities)`. . So I'm clearly missing something here. It seems to me the answer includes `construct_regionally` or `@apply_regionally`, but I couldn't figure it out from the available docs and code. PS: for now I'm using only one CPU core to run things, but still passing two devices to the `MultiRegionGrid` constructor, in case that's important.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304897071
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176:725,Integrability,wrap,wrap,725,"The wizard uses `new_time_step`, which is correctly extended within `MultiRegion` ; https://github.com/CliMA/Oceananigans.jl/blob/40ac9d0efff7a0c877df652e3f9114fe53693bc2/src/MultiRegion/multi_region_models.jl#L63-L66.; I haven't extended `cell_advection_timescale` yet. Also, I haven't yet extended `interior`, because data can live on different GPUs, so `interior` should not be used if not after `reconstruct_global_field`.; Maybe I can add `cell_advection_timescale` to multi region, but then I have to extend also `cell_diffusion_timescale` and the extension of `new_time_step` has to be deleted. I ll think about the pros and the cons. ; For every function that does not work in `MultiRegion`, in the meantime, you can wrap it with `@apply_regionally` and you'll get a `MultiRegionObject` containing the local equivalent. In this case; ```; @apply_regionally new_Δt = wizard.cell_advection_timescale(model); new_Δt = minimum(new_Δt.regions); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176:52,Modifiability,extend,extended,52,"The wizard uses `new_time_step`, which is correctly extended within `MultiRegion` ; https://github.com/CliMA/Oceananigans.jl/blob/40ac9d0efff7a0c877df652e3f9114fe53693bc2/src/MultiRegion/multi_region_models.jl#L63-L66.; I haven't extended `cell_advection_timescale` yet. Also, I haven't yet extended `interior`, because data can live on different GPUs, so `interior` should not be used if not after `reconstruct_global_field`.; Maybe I can add `cell_advection_timescale` to multi region, but then I have to extend also `cell_diffusion_timescale` and the extension of `new_time_step` has to be deleted. I ll think about the pros and the cons. ; For every function that does not work in `MultiRegion`, in the meantime, you can wrap it with `@apply_regionally` and you'll get a `MultiRegionObject` containing the local equivalent. In this case; ```; @apply_regionally new_Δt = wizard.cell_advection_timescale(model); new_Δt = minimum(new_Δt.regions); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176:230,Modifiability,extend,extended,230,"The wizard uses `new_time_step`, which is correctly extended within `MultiRegion` ; https://github.com/CliMA/Oceananigans.jl/blob/40ac9d0efff7a0c877df652e3f9114fe53693bc2/src/MultiRegion/multi_region_models.jl#L63-L66.; I haven't extended `cell_advection_timescale` yet. Also, I haven't yet extended `interior`, because data can live on different GPUs, so `interior` should not be used if not after `reconstruct_global_field`.; Maybe I can add `cell_advection_timescale` to multi region, but then I have to extend also `cell_diffusion_timescale` and the extension of `new_time_step` has to be deleted. I ll think about the pros and the cons. ; For every function that does not work in `MultiRegion`, in the meantime, you can wrap it with `@apply_regionally` and you'll get a `MultiRegionObject` containing the local equivalent. In this case; ```; @apply_regionally new_Δt = wizard.cell_advection_timescale(model); new_Δt = minimum(new_Δt.regions); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176:291,Modifiability,extend,extended,291,"The wizard uses `new_time_step`, which is correctly extended within `MultiRegion` ; https://github.com/CliMA/Oceananigans.jl/blob/40ac9d0efff7a0c877df652e3f9114fe53693bc2/src/MultiRegion/multi_region_models.jl#L63-L66.; I haven't extended `cell_advection_timescale` yet. Also, I haven't yet extended `interior`, because data can live on different GPUs, so `interior` should not be used if not after `reconstruct_global_field`.; Maybe I can add `cell_advection_timescale` to multi region, but then I have to extend also `cell_diffusion_timescale` and the extension of `new_time_step` has to be deleted. I ll think about the pros and the cons. ; For every function that does not work in `MultiRegion`, in the meantime, you can wrap it with `@apply_regionally` and you'll get a `MultiRegionObject` containing the local equivalent. In this case; ```; @apply_regionally new_Δt = wizard.cell_advection_timescale(model); new_Δt = minimum(new_Δt.regions); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176:507,Modifiability,extend,extend,507,"The wizard uses `new_time_step`, which is correctly extended within `MultiRegion` ; https://github.com/CliMA/Oceananigans.jl/blob/40ac9d0efff7a0c877df652e3f9114fe53693bc2/src/MultiRegion/multi_region_models.jl#L63-L66.; I haven't extended `cell_advection_timescale` yet. Also, I haven't yet extended `interior`, because data can live on different GPUs, so `interior` should not be used if not after `reconstruct_global_field`.; Maybe I can add `cell_advection_timescale` to multi region, but then I have to extend also `cell_diffusion_timescale` and the extension of `new_time_step` has to be deleted. I ll think about the pros and the cons. ; For every function that does not work in `MultiRegion`, in the meantime, you can wrap it with `@apply_regionally` and you'll get a `MultiRegionObject` containing the local equivalent. In this case; ```; @apply_regionally new_Δt = wizard.cell_advection_timescale(model); new_Δt = minimum(new_Δt.regions); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304946176
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1305850688:54,Modifiability,extend,extend,54,"`interior` is interesting. Are we sure that we should extend this at all? It's main purpose would be debugging I guess, since any time you are using MultiRegion for real, you likely wouldn't want to call it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1305850688
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1309394728:328,Availability,error,error,328,"> No flux are the default for immersed boundary. It looks like you are explicitly setting an immersed boundary condition for a non-immersed field. What is `b`s grid?. The same as `model`s: a MultiRegion grid. I'm not yet using the IB grid since apparently `MultiRegionGrid` isn't working with IBs yet. When I use it, I get this error. ```julia; ERROR: LoadError: MethodError: no method matching PressureSolver(::CPU, ::MultiRegionGrid{Float64, Periodic, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{ImmersedBoundaryGrid{Float64, FullyConnected, Periodic, Bounded, RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, ImmersedBoundaryGrid{Float64, FullyConnected, Periodic, Bounded, RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}); Closest candidates are:; PressureSolver(::Any, ::ImmersedBoundaryGrid) at ~/.julia/packages/Oceananigans/Kq8xW/src/Models/NonhydrostaticModels/NonhydrostaticMod",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1309394728
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1309394728:345,Availability,ERROR,ERROR,345,"> No flux are the default for immersed boundary. It looks like you are explicitly setting an immersed boundary condition for a non-immersed field. What is `b`s grid?. The same as `model`s: a MultiRegion grid. I'm not yet using the IB grid since apparently `MultiRegionGrid` isn't working with IBs yet. When I use it, I get this error. ```julia; ERROR: LoadError: MethodError: no method matching PressureSolver(::CPU, ::MultiRegionGrid{Float64, Periodic, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{ImmersedBoundaryGrid{Float64, FullyConnected, Periodic, Bounded, RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, ImmersedBoundaryGrid{Float64, FullyConnected, Periodic, Bounded, RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}); Closest candidates are:; PressureSolver(::Any, ::ImmersedBoundaryGrid) at ~/.julia/packages/Oceananigans/Kq8xW/src/Models/NonhydrostaticModels/NonhydrostaticMod",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1309394728
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1309394728:352,Performance,Load,LoadError,352,"> No flux are the default for immersed boundary. It looks like you are explicitly setting an immersed boundary condition for a non-immersed field. What is `b`s grid?. The same as `model`s: a MultiRegion grid. I'm not yet using the IB grid since apparently `MultiRegionGrid` isn't working with IBs yet. When I use it, I get this error. ```julia; ERROR: LoadError: MethodError: no method matching PressureSolver(::CPU, ::MultiRegionGrid{Float64, Periodic, Periodic, Bounded, XPartition{Int64}, MultiRegionObject{Tuple{ImmersedBoundaryGrid{Float64, FullyConnected, Periodic, Bounded, RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}, ImmersedBoundaryGrid{Float64, FullyConnected, Periodic, Bounded, RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, Vector{Float64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, CPU}}, Tuple{CPU, CPU}}, Tuple{CPU, CPU}, CPU}); Closest candidates are:; PressureSolver(::Any, ::ImmersedBoundaryGrid) at ~/.julia/packages/Oceananigans/Kq8xW/src/Models/NonhydrostaticModels/NonhydrostaticMod",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1309394728
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185:17,Availability,error,error,17,"I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):. ```julia; ERROR: LoadError: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(1, 36)}, KernelAbstractions.NDIteration.StaticSize{(36, 1)}, typeof(Oceananigans.BoundaryConditions.gpu_fill_periodic_south_and_north_halo!)})(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, ::Tuple{Int64, Int64}, ::typeof(Oceananigans.BoundaryConditions.fill_periodic_south_and_north_halo!), ::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{Int64}, location::Nothing, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Oceananigans.Utils /gl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185:103,Availability,ERROR,ERROR,103,"I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):. ```julia; ERROR: LoadError: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(1, 36)}, KernelAbstractions.NDIteration.StaticSize{(36, 1)}, typeof(Oceananigans.BoundaryConditions.gpu_fill_periodic_south_and_north_halo!)})(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, ::Tuple{Int64, Int64}, ::typeof(Oceananigans.BoundaryConditions.fill_periodic_south_and_north_halo!), ::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{Int64}, location::Nothing, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Oceananigans.Utils /gl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185:936,Integrability,depend,dependencies,936,"I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):. ```julia; ERROR: LoadError: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(1, 36)}, KernelAbstractions.NDIteration.StaticSize{(36, 1)}, typeof(Oceananigans.BoundaryConditions.gpu_fill_periodic_south_and_north_halo!)})(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, ::Tuple{Int64, Int64}, ::typeof(Oceananigans.BoundaryConditions.fill_periodic_south_and_north_halo!), ::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{Int64}, location::Nothing, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Oceananigans.Utils /gl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185:1783,Integrability,depend,dependencies,1783,"(Oceananigans.BoundaryConditions.gpu_fill_periodic_south_and_north_halo!)})(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, ::Tuple{Int64, Int64}, ::typeof(Oceananigans.BoundaryConditions.fill_periodic_south_and_north_halo!), ::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{Int64}, location::Nothing, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Oceananigans.Utils /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Utils/kernel_launching.jl:95; [7] fill_south_and_north_halo!(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, ::BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, ::Tuple{Int64, Int64}, ::Tuple{Int64, Int64}, ::Tuple{Center, Center, Nothing}, ::GPU, ::CUDAKernels.CudaEvent, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRange",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185:110,Performance,Load,LoadError,110,"I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):. ```julia; ERROR: LoadError: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(1, 36)}, KernelAbstractions.NDIteration.StaticSize{(36, 1)}, typeof(Oceananigans.BoundaryConditions.gpu_fill_periodic_south_and_north_halo!)})(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, ::Tuple{Int64, Int64}, ::typeof(Oceananigans.BoundaryConditions.fill_periodic_south_and_north_halo!), ::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{Int64}, location::Nothing, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Oceananigans.Utils /gl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185:145,Security,access,access,145,"I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):. ```julia; ERROR: LoadError: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(1, 36)}, KernelAbstractions.NDIteration.StaticSize{(36, 1)}, typeof(Oceananigans.BoundaryConditions.gpu_fill_periodic_south_and_north_halo!)})(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, ::Tuple{Int64, Int64}, ::typeof(Oceananigans.BoundaryConditions.fill_periodic_south_and_north_halo!), ::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{Int64}, location::Nothing, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Oceananigans.Utils /gl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310681185
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310758094:19,Availability,error,error,19,"> I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):. Hmmmm it has to do with switching `stream` from your stream pool in the GPU you are in. That always worked for the clusters I tried. Any instance of `@apply_regionally` should fail for you. If you can give me a MWE I can take a look at it. In particular, it looks like you are specifying 2 GPUs but your system only sees 1 on them. What is your output of `CUDA.devices()`?. > Also, is there any reason why only `XPartition` is exported?. No particular reason, actually. That is the first partitioning I started working on. `YPartition` came later and apparently, I forgot to export it",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310758094
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261:21,Availability,error,error,21,"> > I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):; > ; > Hmmmm it has to do with switching `stream` from your stream pool in the GPU you are in. That always worked for the clusters I tried. Any instance of `@apply_regionally` should fail for you. If you can give me a MWE I can take a look at it. Here's a MWE:. ```julia; using Oceananigans; using CUDA. if CUDA.has_cuda_gpu(); arch = GPU(); n_partitions = CUDA.ndevices(); else; arch = CPU(); n_partitions = 2; end . grid_base = RectilinearGrid(arch, size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(n_partitions), devices = n_partitions). model = NonhydrostaticModel(grid = grid); ```. Running this on a CPU works, but on a GPU is throws me this error:. ```; ERROR: TaskFailedException. nested task error: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 4)}, typeof(Oceananigans.BoundaryConditions.gpu__fill_bottom_and_top_halo!)})(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Flo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261:787,Availability,error,error,787,"> > I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):; > ; > Hmmmm it has to do with switching `stream` from your stream pool in the GPU you are in. That always worked for the clusters I tried. Any instance of `@apply_regionally` should fail for you. If you can give me a MWE I can take a look at it. Here's a MWE:. ```julia; using Oceananigans; using CUDA. if CUDA.has_cuda_gpu(); arch = GPU(); n_partitions = CUDA.ndevices(); else; arch = CPU(); n_partitions = 2; end . grid_base = RectilinearGrid(arch, size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(n_partitions), devices = n_partitions). model = NonhydrostaticModel(grid = grid); ```. Running this on a CPU works, but on a GPU is throws me this error:. ```; ERROR: TaskFailedException. nested task error: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 4)}, typeof(Oceananigans.BoundaryConditions.gpu__fill_bottom_and_top_halo!)})(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Flo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261:800,Availability,ERROR,ERROR,800,"> > I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):; > ; > Hmmmm it has to do with switching `stream` from your stream pool in the GPU you are in. That always worked for the clusters I tried. Any instance of `@apply_regionally` should fail for you. If you can give me a MWE I can take a look at it. Here's a MWE:. ```julia; using Oceananigans; using CUDA. if CUDA.has_cuda_gpu(); arch = GPU(); n_partitions = CUDA.ndevices(); else; arch = CPU(); n_partitions = 2; end . grid_base = RectilinearGrid(arch, size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(n_partitions), devices = n_partitions). model = NonhydrostaticModel(grid = grid); ```. Running this on a CPU works, but on a GPU is throws me this error:. ```; ERROR: TaskFailedException. nested task error: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 4)}, typeof(Oceananigans.BoundaryConditions.gpu__fill_bottom_and_top_halo!)})(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Flo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261:840,Availability,error,error,840,"> > I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):; > ; > Hmmmm it has to do with switching `stream` from your stream pool in the GPU you are in. That always worked for the clusters I tried. Any instance of `@apply_regionally` should fail for you. If you can give me a MWE I can take a look at it. Here's a MWE:. ```julia; using Oceananigans; using CUDA. if CUDA.has_cuda_gpu(); arch = GPU(); n_partitions = CUDA.ndevices(); else; arch = CPU(); n_partitions = 2; end . grid_base = RectilinearGrid(arch, size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(n_partitions), devices = n_partitions). model = NonhydrostaticModel(grid = grid); ```. Running this on a CPU works, but on a GPU is throws me this error:. ```; ERROR: TaskFailedException. nested task error: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 4)}, typeof(Oceananigans.BoundaryConditions.gpu__fill_bottom_and_top_halo!)})(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Flo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261:1691,Integrability,depend,dependencies,1691," model = NonhydrostaticModel(grid = grid); ```. Running this on a CPU works, but on a GPU is throws me this error:. ```; ERROR: TaskFailedException. nested task error: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 4)}, typeof(Oceananigans.BoundaryConditions.gpu__fill_bottom_and_top_halo!)})(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, ::Symbol, ::typeof(Oceananigans.BoundaryConditions._fill_bottom_and_top_halo!), ::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, kwargs::Base.Pairs{Symbol, U",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261:2535,Integrability,depend,dependencies,2535,"ditions.gpu__fill_bottom_and_top_halo!)})(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, ::Symbol, ::typeof(Oceananigans.BoundaryConditions._fill_bottom_and_top_halo!), ::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Oceananigans.Utils /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Utils/kernel_launching.jl:95; [7] fill_bottom_and_top_halo!(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ::BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, ::Symbol, ::Tuple{Int64, Int64}, ::Tuple{Face, Center, Center}, ::GPU, ::CUDAKernels.CudaEvent, ::RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261:871,Security,access,access,871,"> > I'm getting this error when trying to run my code on multiple GPUs (it works fine on CPUs):; > ; > Hmmmm it has to do with switching `stream` from your stream pool in the GPU you are in. That always worked for the clusters I tried. Any instance of `@apply_regionally` should fail for you. If you can give me a MWE I can take a look at it. Here's a MWE:. ```julia; using Oceananigans; using CUDA. if CUDA.has_cuda_gpu(); arch = GPU(); n_partitions = CUDA.ndevices(); else; arch = CPU(); n_partitions = 2; end . grid_base = RectilinearGrid(arch, size=(4, 4, 4), extent = (1,1,1)); grid = MultiRegionGrid(grid_base, partition = XPartition(n_partitions), devices = n_partitions). model = NonhydrostaticModel(grid = grid); ```. Running this on a CPU works, but on a GPU is throws me this error:. ```; ERROR: TaskFailedException. nested task error: BoundsError: attempt to access Tuple{Vector{CuStream}} at index [2]; Stacktrace:; [1] getindex(t::Tuple, i::Int64); @ Base ./tuple.jl:29; [2] (::Oceananigans.Architectures.var""#3#6"")(); @ Oceananigans.Architectures /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:26; [3] lock(f::Oceananigans.Architectures.var""#3#6"", l::ReentrantLock); @ Base ./lock.jl:185; [4] next_stream; @ /glade/work/tomasc/.julia/packages/Oceananigans/0tK7e/src/Architectures.jl:24 [inlined]; [5] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 4)}, typeof(Oceananigans.BoundaryConditions.gpu__fill_bottom_and_top_halo!)})(::OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels /glade/work/tomasc/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:218; [6] launch!(::GPU, ::RectilinearGrid{Float64, FullyConnected, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Flo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310844261
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186:6,Availability,error,error,6,"Weird error; this line seems to be your problem. https://github.com/CliMA/Oceananigans.jl/blob/31ffa28e11c9a4f6b1e44296f742edd54067582b/src/Architectures.jl#L26. because your `DEVICE_FREE_STREAMS` is a tuple with only one element, while you should have a tuple of 2 elements. I cannot reproduce this error in any cluster. If I test this MWE on our local server, which has 4 GPUs, checking; ```; julia> using Oceananigans.Architectures: DEVICE_STREAMS, DEVICE_FREE_STREAMS. julia> length(DEVICE_STREAMS); 4. julia> DEVICE_FREE_STREAMS; (CuStream[], CuStream[], CuStream[], CuStream[]). julia> DEVICE_STREAMS; (CuStream[CuStream(0x000000000d05d7c0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d038e40, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000a3726f0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000e718430, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000dfa47f0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d0cda30, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000c74e730, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d325890, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000cca0960, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b))], CuStream[CuStream(0x000000000cf80ef0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000cfd5930, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000f2b0160, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000f39d1f0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000db98540, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000e152d60, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000e9f2890, CuContext(0x0000000004eb",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186:300,Availability,error,error,300,"Weird error; this line seems to be your problem. https://github.com/CliMA/Oceananigans.jl/blob/31ffa28e11c9a4f6b1e44296f742edd54067582b/src/Architectures.jl#L26. because your `DEVICE_FREE_STREAMS` is a tuple with only one element, while you should have a tuple of 2 elements. I cannot reproduce this error in any cluster. If I test this MWE on our local server, which has 4 GPUs, checking; ```; julia> using Oceananigans.Architectures: DEVICE_STREAMS, DEVICE_FREE_STREAMS. julia> length(DEVICE_STREAMS); 4. julia> DEVICE_FREE_STREAMS; (CuStream[], CuStream[], CuStream[], CuStream[]). julia> DEVICE_STREAMS; (CuStream[CuStream(0x000000000d05d7c0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d038e40, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000a3726f0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000e718430, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000dfa47f0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d0cda30, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000c74e730, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d325890, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000cca0960, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b))], CuStream[CuStream(0x000000000cf80ef0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000cfd5930, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000f2b0160, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000f39d1f0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000db98540, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000e152d60, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000e9f2890, CuContext(0x0000000004eb",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186:3865,Energy Efficiency,allocate,allocated,3865," CuStream(0x000000000272a8a0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15))], CuStream[CuStream(0x000000000da5bab0, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a)), CuStream(0x000000000e451340, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a)), CuStream(0x000000000e90f370, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a)), CuStream(0x000000000eee90d0, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a)), CuStream(0x000000000ee34910, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a)), CuStream(0x000000000e2fe7b0, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a)), CuStream(0x000000000ee930f0, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a)), CuStream(0x000000000d037900, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a)), CuStream(0x0000000010c48460, CuContext(0x0000000004eb7500, instance 6a70ddd4b63d044a))], CuStream[CuStream(0x000000000cc067c0, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269)), CuStream(0x000000000e82b6b0, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269)), CuStream(0x000000000d6a9280, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269)), CuStream(0x000000000f39bab0, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269)), CuStream(0x000000000ee16c60, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269)), CuStream(0x000000000dcf5900, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269)), CuStream(0x000000001003a3c0, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269)), CuStream(0x000000000d1c46a0, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269)), CuStream(0x000000000ea24a00, CuContext(0x0000000004ef04c0, instance 1769b2a5902e9269))]); ```. confirms me that the stream pool has been allocated correctly (4 GPUs -> `DEVICE_FREE_STREAM` is a tuple of 4 vectors, one per GPU). I can try making one change and see if it works. In the meantime, can you check that the crux of the problem is indeed that for you `length(DEVICE_FREE_STREAMS) == 1`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186:327,Testability,test,test,327,"Weird error; this line seems to be your problem. https://github.com/CliMA/Oceananigans.jl/blob/31ffa28e11c9a4f6b1e44296f742edd54067582b/src/Architectures.jl#L26. because your `DEVICE_FREE_STREAMS` is a tuple with only one element, while you should have a tuple of 2 elements. I cannot reproduce this error in any cluster. If I test this MWE on our local server, which has 4 GPUs, checking; ```; julia> using Oceananigans.Architectures: DEVICE_STREAMS, DEVICE_FREE_STREAMS. julia> length(DEVICE_STREAMS); 4. julia> DEVICE_FREE_STREAMS; (CuStream[], CuStream[], CuStream[], CuStream[]). julia> DEVICE_STREAMS; (CuStream[CuStream(0x000000000d05d7c0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d038e40, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000a3726f0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000e718430, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000dfa47f0, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d0cda30, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000c74e730, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000d325890, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b)), CuStream(0x000000000cca0960, CuContext(0x0000000004ebe820, instance 5f5050451ffbeb0b))], CuStream[CuStream(0x000000000cf80ef0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000cfd5930, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000f2b0160, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000f39d1f0, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000db98540, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000e152d60, CuContext(0x0000000004eb0fb0, instance 5f7361f820420d15)), CuStream(0x000000000e9f2890, CuContext(0x0000000004eb",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310985186
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310992343:191,Modifiability,variab,variable,191,"@simone-silvestri You seem to be right. On the cluster I get:. ```julia; julia> using Oceananigans.Architectures: DEVICE_STREAMS, DEVICE_FREE_STREAMS; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided. julia> length(DEVICE_STREAMS); 1. julia> DEVICE_FREE_STREAMS; (CUDA.CuStream[],). julia> CUDA.dev^C. julia> using CUDA. julia> CUDA.devices(); CUDA.DeviceIterator() for 2 devices:; 0. Tesla V100-SXM2-32GB; 1. Tesla V100-SXM2-32GB. julia> CUDA.ndevices(); 2; ```. If you need to reproduce this and aren't able to, we can set up a PP session via zoom and I can share my screen.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310992343
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310992343:232,Modifiability,config,config,232,"@simone-silvestri You seem to be right. On the cluster I get:. ```julia; julia> using Oceananigans.Architectures: DEVICE_STREAMS, DEVICE_FREE_STREAMS; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided. julia> length(DEVICE_STREAMS); 1. julia> DEVICE_FREE_STREAMS; (CUDA.CuStream[],). julia> CUDA.dev^C. julia> using CUDA. julia> CUDA.devices(); CUDA.DeviceIterator() for 2 devices:; 0. Tesla V100-SXM2-32GB; 1. Tesla V100-SXM2-32GB. julia> CUDA.ndevices(); 2; ```. If you need to reproduce this and aren't able to, we can set up a PP session via zoom and I can share my screen.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310992343
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310992343:292,Modifiability,config,config,292,"@simone-silvestri You seem to be right. On the cluster I get:. ```julia; julia> using Oceananigans.Architectures: DEVICE_STREAMS, DEVICE_FREE_STREAMS; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided. julia> length(DEVICE_STREAMS); 1. julia> DEVICE_FREE_STREAMS; (CUDA.CuStream[],). julia> CUDA.dev^C. julia> using CUDA. julia> CUDA.devices(); CUDA.DeviceIterator() for 2 devices:; 0. Tesla V100-SXM2-32GB; 1. Tesla V100-SXM2-32GB. julia> CUDA.ndevices(); 2; ```. If you need to reproduce this and aren't able to, we can set up a PP session via zoom and I can share my screen.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310992343
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310992343:328,Modifiability,Config,Config,328,"@simone-silvestri You seem to be right. On the cluster I get:. ```julia; julia> using Oceananigans.Architectures: DEVICE_STREAMS, DEVICE_FREE_STREAMS; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided. julia> length(DEVICE_STREAMS); 1. julia> DEVICE_FREE_STREAMS; (CUDA.CuStream[],). julia> CUDA.dev^C. julia> using CUDA. julia> CUDA.devices(); CUDA.DeviceIterator() for 2 devices:; 0. Tesla V100-SXM2-32GB; 1. Tesla V100-SXM2-32GB. julia> CUDA.ndevices(); 2; ```. If you need to reproduce this and aren't able to, we can set up a PP session via zoom and I can share my screen.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1310992343
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961:135,Security,validat,validation,135,"If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like ; ```julia; grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); ```; from the hydrostatic multi-region internal tide validation to include immersed boundaries?. Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 💯",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961:257,Security,validat,validation,257,"If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like ; ```julia; grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); ```; from the hydrostatic multi-region internal tide validation to include immersed boundaries?. Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 💯",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961:565,Security,validat,validation,565,"If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like ; ```julia; grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); ```; from the hydrostatic multi-region internal tide validation to include immersed boundaries?. Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 💯",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961:13,Testability,test,test,13,"If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like ; ```julia; grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); ```; from the hydrostatic multi-region internal tide validation to include immersed boundaries?. Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 💯",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1366766961
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146:137,Security,validat,validation,137,"> If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like; > ; > ```julia; > grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); > mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); > ```; > ; > from the hydrostatic multi-region internal tide validation to include immersed boundaries?; > ; > Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 100. Yes, that's how I was able to get this working for me. One note is that `grid.Nx` must be even atm. Another note is that so far no `OutputWriter` works with this, so as far as I can tell the functionality here is very limited. @glwagner @simone-silvestri I tried to merge main here but couldn't really figure out the proper way to do it. Could any of you do it? I wanna try to at least get `NetCDFWriter` working so that I can write results with this PR and analyze them!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146:259,Security,validat,validation,259,"> If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like; > ; > ```julia; > grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); > mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); > ```; > ; > from the hydrostatic multi-region internal tide validation to include immersed boundaries?; > ; > Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 100. Yes, that's how I was able to get this working for me. One note is that `grid.Nx` must be even atm. Another note is that so far no `OutputWriter` works with this, so as far as I can tell the functionality here is very limited. @glwagner @simone-silvestri I tried to merge main here but couldn't really figure out the proper way to do it. Could any of you do it? I wanna try to at least get `NetCDFWriter` working so that I can write results with this PR and analyze them!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146:584,Security,validat,validation,584,"> If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like; > ; > ```julia; > grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); > mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); > ```; > ; > from the hydrostatic multi-region internal tide validation to include immersed boundaries?; > ; > Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 100. Yes, that's how I was able to get this working for me. One note is that `grid.Nx` must be even atm. Another note is that so far no `OutputWriter` works with this, so as far as I can tell the functionality here is very limited. @glwagner @simone-silvestri I tried to merge main here but couldn't really figure out the proper way to do it. Could any of you do it? I wanna try to at least get `NetCDFWriter` working so that I can write results with this PR and analyze them!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146
https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146:15,Testability,test,test,15,"> If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like; > ; > ```julia; > grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); > mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); > ```; > ; > from the hydrostatic multi-region internal tide validation to include immersed boundaries?; > ; > Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 100. Yes, that's how I was able to get this working for me. One note is that `grid.Nx` must be even atm. Another note is that so far no `OutputWriter` works with this, so as far as I can tell the functionality here is very limited. @glwagner @simone-silvestri I tried to merge main here but couldn't really figure out the proper way to do it. Could any of you do it? I wanna try to at least get `NetCDFWriter` working so that I can write results with this PR and analyze them!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302675445:61,Availability,error,error,61,@francispoulin can you post the whole code that creates this error?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302675445
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302764834:43,Availability,error,error,43,"@glwagner Here is the whole code:. And the error is after defining the ""model"". ```; using Oceananigans; using Oceananigans.BoundaryConditions: fill_halo_regions!; using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom, PartialCellBottom; using Printf; using GLMakie. arch = CPU(); tracer_advection = CenteredSecondOrder(); momentum_advection = CenteredSecondOrder(). underlying_grid = RectilinearGrid(arch,; size=(128, 64), halo=(3, 3), ; y = (-1, 1),; z = (-1, 0),; topology=(Flat, Periodic, Bounded)). # A bump; h₀ = 0.5 # bump height; L = 0.25 # bump width; @inline h(y) = h₀ * exp(- y^2 / L^2); @inline seamount(x, y) = - 1 + h(y). seamount_field = Field{Center, Center, Nothing}(underlying_grid); set!(seamount_field, seamount); fill_halo_regions!(seamount_field). minimum_fractional_Δz = 0.2; immersed_boundaries = [; PartialCellBottom(seamount_field.data;; minimum_fractional_Δz),; GridFittedBottom(seamount_field.data); ]. b = []; v = []. function progress(sim); vmax = maximum(abs, sim.model.velocities.v); @info @sprintf(""Iter: %d, time: %.2e, max|v|: %.2e"",; iteration(sim), time(sim), vmax). return nothing; end. for ib in immersed_boundaries; grid = ImmersedBoundaryGrid(underlying_grid, ib). @show grid. model = HydrostaticFreeSurfaceModel(; grid,; tracer_advection,; momentum_advection,; coriolis = FPlane(f=0.1),; tracers = :b,; buoyancy = BuoyancyTracer()). N² = 1; bᵢ(x, y, z) = N² * z; set!(model, b = bᵢ). simulation = Simulation(model; Δt=1e-3, stop_iteration=1000); simulation.callbacks[:p] = Callback(progress, IterationInterval(100)). run!(simulation). push!(b, Array(interior(model.tracers.b, 1, :, :))); push!(v, Array(interior(model.velocities.v, 1, :, :))); end. b_partial = b[1]; b_full = b[2]; Δb = b_full .- b_partial. v_partial = v[1]; v_full = v[2]; Δv = v_full .- v_partial. fig = Figure(resolution=(1200, 1800)). partial_cell_title = @sprintf(""PartialCellBottom with ϵ = %.1f"", minimum_fractional_Δz); ax_bp = Axis(fig[1, 2], title=partial_ce",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302764834
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302841826:729,Availability,ERROR,ERROR,729,"A more minimal example:. ```Julia; using Oceananigans; using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, PartialCellBottom. arch = CPU(). underlying_grid = RectilinearGrid(arch,; size=(128, 64), halo=(3, 3), ; y = (-1, 1),; z = (-1, 0),; topology=(Flat, Periodic, Bounded)). @inline seamount(x, y) = - 1 + 0.5 * exp(- y^2 / 0.25^2). minimum_fractional_Δz = 0.2. grid = ImmersedBoundaryGrid(underlying_grid, PartialCellBottom(seamount; minimum_fractional_Δz)). tracer_advection = CenteredSecondOrder(); momentum_advection = CenteredSecondOrder(). model = HydrostaticFreeSurfaceModel(; grid,; tracer_advection,; momentum_advection,; coriolis = FPlane(f=0.1),; tracers = :b,; buoyancy = BuoyancyTracer()); ```. ```julia; ERROR: TaskFailedException. nested task error: TaskFailedException. nested task error: BoundsError: attempt to access 1×134 OffsetArray(::Matrix{Float64}, 1:1, -2:131) with eltype Float64 with indices 1:1×-2:131 at index [0, 1]; Stacktrace:; [1] throw_boundserror(A::OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, I::Tuple{Int64, Int64}); @ Base ./abstractarray.jl:703; [2] overdub; @ ~/.julia/packages/KernelAbstractions/3ZHln/src/compiler.jl:51 [inlined]; [3] overdub; @ ./abstractarray.jl:668 [inlined]; [4] getindex(::OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, ::Int64, ::Int64); @ ~/.julia/packages/OffsetArrays/WvkHl/src/OffsetArrays.jl:420 [inlined]; [5] overdub; @ ~/.julia/packages/OffsetArrays/WvkHl/src/OffsetArrays.jl:420 [inlined]; [6] overdub; @ ~/Research/OC2.jl/src/ImmersedBoundaries/partial_cell_immersed_boundaries.jl:49 [inlined]; [7] immersed_cell(::Int64, ::Int64, ::Int64, ::RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.Twi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302841826
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302841826:769,Availability,error,error,769,"A more minimal example:. ```Julia; using Oceananigans; using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, PartialCellBottom. arch = CPU(). underlying_grid = RectilinearGrid(arch,; size=(128, 64), halo=(3, 3), ; y = (-1, 1),; z = (-1, 0),; topology=(Flat, Periodic, Bounded)). @inline seamount(x, y) = - 1 + 0.5 * exp(- y^2 / 0.25^2). minimum_fractional_Δz = 0.2. grid = ImmersedBoundaryGrid(underlying_grid, PartialCellBottom(seamount; minimum_fractional_Δz)). tracer_advection = CenteredSecondOrder(); momentum_advection = CenteredSecondOrder(). model = HydrostaticFreeSurfaceModel(; grid,; tracer_advection,; momentum_advection,; coriolis = FPlane(f=0.1),; tracers = :b,; buoyancy = BuoyancyTracer()); ```. ```julia; ERROR: TaskFailedException. nested task error: TaskFailedException. nested task error: BoundsError: attempt to access 1×134 OffsetArray(::Matrix{Float64}, 1:1, -2:131) with eltype Float64 with indices 1:1×-2:131 at index [0, 1]; Stacktrace:; [1] throw_boundserror(A::OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, I::Tuple{Int64, Int64}); @ Base ./abstractarray.jl:703; [2] overdub; @ ~/.julia/packages/KernelAbstractions/3ZHln/src/compiler.jl:51 [inlined]; [3] overdub; @ ./abstractarray.jl:668 [inlined]; [4] getindex(::OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, ::Int64, ::Int64); @ ~/.julia/packages/OffsetArrays/WvkHl/src/OffsetArrays.jl:420 [inlined]; [5] overdub; @ ~/.julia/packages/OffsetArrays/WvkHl/src/OffsetArrays.jl:420 [inlined]; [6] overdub; @ ~/Research/OC2.jl/src/ImmersedBoundaries/partial_cell_immersed_boundaries.jl:49 [inlined]; [7] immersed_cell(::Int64, ::Int64, ::Int64, ::RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.Twi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302841826
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302841826:809,Availability,error,error,809,"A more minimal example:. ```Julia; using Oceananigans; using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, PartialCellBottom. arch = CPU(). underlying_grid = RectilinearGrid(arch,; size=(128, 64), halo=(3, 3), ; y = (-1, 1),; z = (-1, 0),; topology=(Flat, Periodic, Bounded)). @inline seamount(x, y) = - 1 + 0.5 * exp(- y^2 / 0.25^2). minimum_fractional_Δz = 0.2. grid = ImmersedBoundaryGrid(underlying_grid, PartialCellBottom(seamount; minimum_fractional_Δz)). tracer_advection = CenteredSecondOrder(); momentum_advection = CenteredSecondOrder(). model = HydrostaticFreeSurfaceModel(; grid,; tracer_advection,; momentum_advection,; coriolis = FPlane(f=0.1),; tracers = :b,; buoyancy = BuoyancyTracer()); ```. ```julia; ERROR: TaskFailedException. nested task error: TaskFailedException. nested task error: BoundsError: attempt to access 1×134 OffsetArray(::Matrix{Float64}, 1:1, -2:131) with eltype Float64 with indices 1:1×-2:131 at index [0, 1]; Stacktrace:; [1] throw_boundserror(A::OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, I::Tuple{Int64, Int64}); @ Base ./abstractarray.jl:703; [2] overdub; @ ~/.julia/packages/KernelAbstractions/3ZHln/src/compiler.jl:51 [inlined]; [3] overdub; @ ./abstractarray.jl:668 [inlined]; [4] getindex(::OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, ::Int64, ::Int64); @ ~/.julia/packages/OffsetArrays/WvkHl/src/OffsetArrays.jl:420 [inlined]; [5] overdub; @ ~/.julia/packages/OffsetArrays/WvkHl/src/OffsetArrays.jl:420 [inlined]; [6] overdub; @ ~/Research/OC2.jl/src/ImmersedBoundaries/partial_cell_immersed_boundaries.jl:49 [inlined]; [7] immersed_cell(::Int64, ::Int64, ::Int64, ::RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.Twi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302841826
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302841826:840,Security,access,access,840,"A more minimal example:. ```Julia; using Oceananigans; using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, PartialCellBottom. arch = CPU(). underlying_grid = RectilinearGrid(arch,; size=(128, 64), halo=(3, 3), ; y = (-1, 1),; z = (-1, 0),; topology=(Flat, Periodic, Bounded)). @inline seamount(x, y) = - 1 + 0.5 * exp(- y^2 / 0.25^2). minimum_fractional_Δz = 0.2. grid = ImmersedBoundaryGrid(underlying_grid, PartialCellBottom(seamount; minimum_fractional_Δz)). tracer_advection = CenteredSecondOrder(); momentum_advection = CenteredSecondOrder(). model = HydrostaticFreeSurfaceModel(; grid,; tracer_advection,; momentum_advection,; coriolis = FPlane(f=0.1),; tracers = :b,; buoyancy = BuoyancyTracer()); ```. ```julia; ERROR: TaskFailedException. nested task error: TaskFailedException. nested task error: BoundsError: attempt to access 1×134 OffsetArray(::Matrix{Float64}, 1:1, -2:131) with eltype Float64 with indices 1:1×-2:131 at index [0, 1]; Stacktrace:; [1] throw_boundserror(A::OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, I::Tuple{Int64, Int64}); @ Base ./abstractarray.jl:703; [2] overdub; @ ~/.julia/packages/KernelAbstractions/3ZHln/src/compiler.jl:51 [inlined]; [3] overdub; @ ./abstractarray.jl:668 [inlined]; [4] getindex(::OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, ::Int64, ::Int64); @ ~/.julia/packages/OffsetArrays/WvkHl/src/OffsetArrays.jl:420 [inlined]; [5] overdub; @ ~/.julia/packages/OffsetArrays/WvkHl/src/OffsetArrays.jl:420 [inlined]; [6] overdub; @ ~/Research/OC2.jl/src/ImmersedBoundaries/partial_cell_immersed_boundaries.jl:49 [inlined]; [7] immersed_cell(::Int64, ::Int64, ::Int64, ::RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.Twi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302841826
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302854737:12,Availability,error,error,12,Yes and the error only happens in the case of `PartialCellBottom` and it is fine with `GridFittedBottom`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1302854737
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1305904393:13,Availability,error,error,13,Do we get an error if we aren't using `Flat`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1305904393
https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1306151916:15,Safety,avoid,avoid,15,"I guess we can avoid using `Flat` for the moment and that looks to fix the problem. @fadaie91 , did you want to try this with the example and your original problem?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2798#issuecomment-1306151916
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744:229,Testability,test,test,229,"I've had a play implementing an NPD model in this framework now and think that the other way to define the source functions is preferential:; https://github.com/CliMA/Oceananigans.jl/blob/45971e4b113182958aac43357e2a4633510617db/test/test_biogeochemistry.jl#L33-L37. We could even go one step further and define a model like this:; ```julia; struct NPD; Kₙ :: Float64; m :: Float64; nitrif :: Float64; end. validate_biogeochemistry(::NPD, tracernames) = all([T ∈ tracernames for T in [:N, :P, :D]]). @inline function (model::NPD)(i, j, k, grid, ::Val{:N}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.nitrif*D - P*N/(N+model.Kₙ) ; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:P}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; return P*N/(N+model.Kₙ) - model.m*P; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:D}, clock, fields); P = @inbounds fields.P[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.m*P - model.nitrif*D; end. @inline (model::NPD)(args...) = 0.0; ```; This negates the need to define a `get_biogeochemial_forcing` function, but you do have to define the zero function (last line) and I'm not sure how clear and usable this API is to most users?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744:1268,Usability,clear,clear,1268,"I've had a play implementing an NPD model in this framework now and think that the other way to define the source functions is preferential:; https://github.com/CliMA/Oceananigans.jl/blob/45971e4b113182958aac43357e2a4633510617db/test/test_biogeochemistry.jl#L33-L37. We could even go one step further and define a model like this:; ```julia; struct NPD; Kₙ :: Float64; m :: Float64; nitrif :: Float64; end. validate_biogeochemistry(::NPD, tracernames) = all([T ∈ tracernames for T in [:N, :P, :D]]). @inline function (model::NPD)(i, j, k, grid, ::Val{:N}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.nitrif*D - P*N/(N+model.Kₙ) ; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:P}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; return P*N/(N+model.Kₙ) - model.m*P; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:D}, clock, fields); P = @inbounds fields.P[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.m*P - model.nitrif*D; end. @inline (model::NPD)(args...) = 0.0; ```; This negates the need to define a `get_biogeochemial_forcing` function, but you do have to define the zero function (last line) and I'm not sure how clear and usable this API is to most users?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744:1278,Usability,usab,usable,1278,"I've had a play implementing an NPD model in this framework now and think that the other way to define the source functions is preferential:; https://github.com/CliMA/Oceananigans.jl/blob/45971e4b113182958aac43357e2a4633510617db/test/test_biogeochemistry.jl#L33-L37. We could even go one step further and define a model like this:; ```julia; struct NPD; Kₙ :: Float64; m :: Float64; nitrif :: Float64; end. validate_biogeochemistry(::NPD, tracernames) = all([T ∈ tracernames for T in [:N, :P, :D]]). @inline function (model::NPD)(i, j, k, grid, ::Val{:N}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.nitrif*D - P*N/(N+model.Kₙ) ; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:P}, clock, fields); P = @inbounds fields.P[i, j, k]; N = @inbounds fields.N[i, j, k]; return P*N/(N+model.Kₙ) - model.m*P; end. @inline function (model::NPD)(i, j, k, grid, ::Val{:D}, clock, fields); P = @inbounds fields.P[i, j, k]; D = @inbounds fields.D[i, j, k]. return model.m*P - model.nitrif*D; end. @inline (model::NPD)(args...) = 0.0; ```; This negates the need to define a `get_biogeochemial_forcing` function, but you do have to define the zero function (last line) and I'm not sure how clear and usable this API is to most users?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1304900744
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305830081:577,Integrability,interface,interface,577,"We can use an abstract type to obviate the need for ""zero functions"":. ```julia; abstract type AbstractBiogeochemistry end. struct NutrientsPlanktonDetritus{FT} <: AbstractBiogeochemistry; background_nutrients :: FT; mortality_rate :: FT; nitrification :: FT; end; ```. then with. ```julia; @inline (::AbstractBiogeochemistry)(i, j, k, grid, val_tracer_name, clock, fields) = zero(grid); ```. users don't need to define the ""netural biogeochemical forcing"" themselves. . Very Important: always use verbose names! I don't know how to enforce that within the API 😂 . I like this interface. Let's figure out if `Val{symbol}` is GPU-friendly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305830081
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305838390:199,Availability,error,error,199,"Instead of `validate_biogeochemistry`, maybe. ```julia; required_biogeochemical_tracers(::NutrientsPlanktonDetritus) = (:N, :P, :D); ```. is a better syntax. Then users don't have to write their own error messages (we'll handle that in Oceananigans). It also gives us flexibility regarding the choice between 1) automagically adding the biogeochemical tracers or 2) requiring the user to add tracers themselves. We starting to use tracers for a few important things (TKE, biogeochemistry, buoyancy models). We may also need to come up with a system for handling ""name clashes"" gracefully. For example, someone might introduce a biogeochemistry model with tracer `e`, not realizing that this would prevent them from using the biogeochemistry model with CATKE. There's a tension between simplicity and readability (which we get with short, intuitive tracer names like `e`, `T`, `S`), and catastrophic ""name clashes"" that will inevitably occur as model complexity increases.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305838390
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305838390:205,Integrability,message,messages,205,"Instead of `validate_biogeochemistry`, maybe. ```julia; required_biogeochemical_tracers(::NutrientsPlanktonDetritus) = (:N, :P, :D); ```. is a better syntax. Then users don't have to write their own error messages (we'll handle that in Oceananigans). It also gives us flexibility regarding the choice between 1) automagically adding the biogeochemical tracers or 2) requiring the user to add tracers themselves. We starting to use tracers for a few important things (TKE, biogeochemistry, buoyancy models). We may also need to come up with a system for handling ""name clashes"" gracefully. For example, someone might introduce a biogeochemistry model with tracer `e`, not realizing that this would prevent them from using the biogeochemistry model with CATKE. There's a tension between simplicity and readability (which we get with short, intuitive tracer names like `e`, `T`, `S`), and catastrophic ""name clashes"" that will inevitably occur as model complexity increases.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305838390
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305838390:785,Usability,simpl,simplicity,785,"Instead of `validate_biogeochemistry`, maybe. ```julia; required_biogeochemical_tracers(::NutrientsPlanktonDetritus) = (:N, :P, :D); ```. is a better syntax. Then users don't have to write their own error messages (we'll handle that in Oceananigans). It also gives us flexibility regarding the choice between 1) automagically adding the biogeochemical tracers or 2) requiring the user to add tracers themselves. We starting to use tracers for a few important things (TKE, biogeochemistry, buoyancy models). We may also need to come up with a system for handling ""name clashes"" gracefully. For example, someone might introduce a biogeochemistry model with tracer `e`, not realizing that this would prevent them from using the biogeochemistry model with CATKE. There's a tension between simplicity and readability (which we get with short, intuitive tracer names like `e`, `T`, `S`), and catastrophic ""name clashes"" that will inevitably occur as model complexity increases.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305838390
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305838390:838,Usability,intuit,intuitive,838,"Instead of `validate_biogeochemistry`, maybe. ```julia; required_biogeochemical_tracers(::NutrientsPlanktonDetritus) = (:N, :P, :D); ```. is a better syntax. Then users don't have to write their own error messages (we'll handle that in Oceananigans). It also gives us flexibility regarding the choice between 1) automagically adding the biogeochemical tracers or 2) requiring the user to add tracers themselves. We starting to use tracers for a few important things (TKE, biogeochemistry, buoyancy models). We may also need to come up with a system for handling ""name clashes"" gracefully. For example, someone might introduce a biogeochemistry model with tracer `e`, not realizing that this would prevent them from using the biogeochemistry model with CATKE. There's a tension between simplicity and readability (which we get with short, intuitive tracer names like `e`, `T`, `S`), and catastrophic ""name clashes"" that will inevitably occur as model complexity increases.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305838390
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305857142:174,Security,validat,validation,174,Ah I thought we could do something with abstract types for that but couldn't get it to work before. I'll try this on a GPU now if I can get one. And that makes sense for the validation.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305857142
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305887346:9,Testability,test,tests,9,"A lot of tests are failing too, we need to fix those",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305887346
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305891098:1,Testability,test,test,1,`test/test_biogeochemistry.jl` as it currently is in this branch runs on GPU so it looks like `Val{Symbol}` does work!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305891098
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:556,Deployability,integrat,integrating,556,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:840,Deployability,integrat,integrated,840,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:1540,Deployability,Update,Update,1540,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:1678,Deployability,Update,Update,1678,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:453,Integrability,depend,dependence,453,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:556,Integrability,integrat,integrating,556,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:840,Integrability,integrat,integrated,840,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:899,Integrability,interface,interface,899,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:1798,Modifiability,variab,variable,1798,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:1759,Testability,test,test,1759,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242:891,Usability,simpl,simpler,891,"I've had a go at implementing a proper NPZD model (rather than one I just made up on the fly) and have some thoughts on how we should modify the API:; - I think we need an `required_biogeochemical_auxiliary_fields` like `required_biogeochemical_tracers` because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); - Given what you said the other day about callbacks only being used for features that should be built into Oceananigans we might want to have a think about how a BGC model can specify the attenuation of PAR. You've mentioned that we could define some kind of integrated field?; - It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. `sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P)`, and model makers will need to do the setup stuff I've done to make the advective velocity fields. You can see my implementation [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/src/Models/AdvectedPopulations/NPZD.jl) and a script using it [here](https://github.com/OceanBioME/OceanBioME.jl/blob/Oceananigans-Update/examples/NPZD.jl) since I thought it was probably too complicated for the test (and will change that back to a 1 variable model later). Not finished making it work but yet but will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310609242
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310889513:401,Deployability,integrat,integrating,401,"> I think we need an required_biogeochemical_auxiliary_fields like required_biogeochemical_tracers because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field). Should the user specify this, or should the biogeochemical model add it its struct (taking in `grid` for this purpose) and evaluate it during `update_biogeochemical_state`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310889513
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310889513:298,Integrability,depend,dependence,298,"> I think we need an required_biogeochemical_auxiliary_fields like required_biogeochemical_tracers because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field). Should the user specify this, or should the biogeochemical model add it its struct (taking in `grid` for this purpose) and evaluate it during `update_biogeochemical_state`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310889513
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310889513:401,Integrability,integrat,integrating,401,"> I think we need an required_biogeochemical_auxiliary_fields like required_biogeochemical_tracers because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field). Should the user specify this, or should the biogeochemical model add it its struct (taking in `grid` for this purpose) and evaluate it during `update_biogeochemical_state`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310889513
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310890224:40,Integrability,interface,interface,40,"> It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P), and model makers will need to do the setup stuff I've done to make the advective velocity fields. Can't we add advective terms via the biogeochemical forcing term?. edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples. PS we should add those scripts to `validation/biogeochemistry/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310890224
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310890224:784,Security,validat,validation,784,"> It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P), and model makers will need to do the setup stuff I've done to make the advective velocity fields. Can't we add advective terms via the biogeochemical forcing term?. edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples. PS we should add those scripts to `validation/biogeochemistry/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310890224
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310890224:32,Usability,simpl,simpler,32,"> It might be helpful to have a simpler interface for advection in biogeochemical models. Although a user could just add another forcing, I think the only way for a model to automatically add an advective forcing is how I've implimented it in the below example. I Think this works quite well since a lot of BGC models write the sinking terms with the other forcing terms, but its a little cumbersome to write e.g. sinking = div_Uc(i, j, k, grid, bgc.adv_scheme, bgc.u⃗ᵖ, fields.P), and model makers will need to do the setup stuff I've done to make the advective velocity fields. Can't we add advective terms via the biogeochemical forcing term?. edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples. PS we should add those scripts to `validation/biogeochemistry/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310890224
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285:776,Deployability,continuous,continuous,776,"I think we can impose a little more structure that eases biogeochemical model development. One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like. ```julia; struct TracerBasedBiogeochemistry; biogeochemical_tracers; drift_advection_schemes; drift_velocities; transitions; auxiliary_fields; end; ```. and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior. Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow). I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like. ```julia; biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); ```. rather than having to use the ""discrete form"". This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285:95,Integrability,rout,route,95,"I think we can impose a little more structure that eases biogeochemical model development. One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like. ```julia; struct TracerBasedBiogeochemistry; biogeochemical_tracers; drift_advection_schemes; drift_velocities; transitions; auxiliary_fields; end; ```. and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior. Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow). I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like. ```julia; biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); ```. rather than having to use the ""discrete form"". This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285:705,Integrability,interface,interface,705,"I think we can impose a little more structure that eases biogeochemical model development. One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like. ```julia; struct TracerBasedBiogeochemistry; biogeochemical_tracers; drift_advection_schemes; drift_velocities; transitions; auxiliary_fields; end; ```. and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior. Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow). I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like. ```julia; biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); ```. rather than having to use the ""discrete form"". This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285:793,Integrability,interface,interface,793,"I think we can impose a little more structure that eases biogeochemical model development. One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like. ```julia; struct TracerBasedBiogeochemistry; biogeochemical_tracers; drift_advection_schemes; drift_velocities; transitions; auxiliary_fields; end; ```. and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior. Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow). I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like. ```julia; biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); ```. rather than having to use the ""discrete form"". This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285:1132,Modifiability,coupling,coupling,1132,"I think we can impose a little more structure that eases biogeochemical model development. One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like. ```julia; struct TracerBasedBiogeochemistry; biogeochemical_tracers; drift_advection_schemes; drift_velocities; transitions; auxiliary_fields; end; ```. and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior. Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow). I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like. ```julia; biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); ```. rather than having to use the ""discrete form"". This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1310908285
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311540745:403,Deployability,integrat,integrating,403,"> > I think we need an required_biogeochemical_auxiliary_fields like required_biogeochemical_tracers because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); > ; > Should the user specify this, or should the biogeochemical model add it its struct (taking in `grid` for this purpose) and evaluate it during `update_biogeochemical_state`?. This is a good point, I think doing it as part of the model in update state is a much better solution",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311540745
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311540745:671,Deployability,update,update,671,"> > I think we need an required_biogeochemical_auxiliary_fields like required_biogeochemical_tracers because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); > ; > Should the user specify this, or should the biogeochemical model add it its struct (taking in `grid` for this purpose) and evaluate it during `update_biogeochemical_state`?. This is a good point, I think doing it as part of the model in update state is a much better solution",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311540745
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311540745:300,Integrability,depend,dependence,300,"> > I think we need an required_biogeochemical_auxiliary_fields like required_biogeochemical_tracers because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); > ; > Should the user specify this, or should the biogeochemical model add it its struct (taking in `grid` for this purpose) and evaluate it during `update_biogeochemical_state`?. This is a good point, I think doing it as part of the model in update state is a much better solution",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311540745
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311540745:403,Integrability,integrat,integrating,403,"> > I think we need an required_biogeochemical_auxiliary_fields like required_biogeochemical_tracers because for most models we're going to want the user to at least specify a PAR field (I suppose we may want this to also check the shape of the field because some models may have a pre defined depth dependence of PAR so we might want the user to specify a 2D PAR field rather than doing it properly by integrating a 3D field); > ; > Should the user specify this, or should the biogeochemical model add it its struct (taking in `grid` for this purpose) and evaluate it during `update_biogeochemical_state`?. This is a good point, I think doing it as part of the model in update state is a much better solution",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311540745
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594:1076,Deployability,continuous,continuous,1076,"> Can't we add advective terms via the biogeochemical forcing term?; > ; > edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples.; > ; > PS we should add those scripts to `validation/biogeochemistry/`. > I think we can impose a little more structure that eases biogeochemical model development.; > ; > One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like; > ; > ```julia; > struct TracerBasedBiogeochemistry; > biogeochemical_tracers; > drift_advection_schemes; > drift_velocities; > transitions; > auxiliary_fields; > end; > ```; > ; > and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior.; > ; > Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow).; > ; > I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like; > ; > ```julia; > biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); > ```; > ; > rather than having to use the ""discrete form"".; > ; > This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development. This seems like a good idea, I will have a think and try and come up with something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594:353,Integrability,rout,route,353,"> Can't we add advective terms via the biogeochemical forcing term?; > ; > edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples.; > ; > PS we should add those scripts to `validation/biogeochemistry/`. > I think we can impose a little more structure that eases biogeochemical model development.; > ; > One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like; > ; > ```julia; > struct TracerBasedBiogeochemistry; > biogeochemical_tracers; > drift_advection_schemes; > drift_velocities; > transitions; > auxiliary_fields; > end; > ```; > ; > and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior.; > ; > Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow).; > ; > I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like; > ; > ```julia; > biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); > ```; > ; > rather than having to use the ""discrete form"".; > ; > This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development. This seems like a good idea, I will have a think and try and come up with something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594:998,Integrability,interface,interface,998,"> Can't we add advective terms via the biogeochemical forcing term?; > ; > edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples.; > ; > PS we should add those scripts to `validation/biogeochemistry/`. > I think we can impose a little more structure that eases biogeochemical model development.; > ; > One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like; > ; > ```julia; > struct TracerBasedBiogeochemistry; > biogeochemical_tracers; > drift_advection_schemes; > drift_velocities; > transitions; > auxiliary_fields; > end; > ```; > ; > and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior.; > ; > Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow).; > ; > I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like; > ; > ```julia; > biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); > ```; > ; > rather than having to use the ""discrete form"".; > ; > This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development. This seems like a good idea, I will have a think and try and come up with something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594:1093,Integrability,interface,interface,1093,"> Can't we add advective terms via the biogeochemical forcing term?; > ; > edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples.; > ; > PS we should add those scripts to `validation/biogeochemistry/`. > I think we can impose a little more structure that eases biogeochemical model development.; > ; > One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like; > ; > ```julia; > struct TracerBasedBiogeochemistry; > biogeochemical_tracers; > drift_advection_schemes; > drift_velocities; > transitions; > auxiliary_fields; > end; > ```; > ; > and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior.; > ; > Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow).; > ; > I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like; > ; > ```julia; > biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); > ```; > ; > rather than having to use the ""discrete form"".; > ; > This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development. This seems like a good idea, I will have a think and try and come up with something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594:1455,Modifiability,coupling,coupling,1455,"> Can't we add advective terms via the biogeochemical forcing term?; > ; > edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples.; > ; > PS we should add those scripts to `validation/biogeochemistry/`. > I think we can impose a little more structure that eases biogeochemical model development.; > ; > One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like; > ; > ```julia; > struct TracerBasedBiogeochemistry; > biogeochemical_tracers; > drift_advection_schemes; > drift_velocities; > transitions; > auxiliary_fields; > end; > ```; > ; > and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior.; > ; > Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow).; > ; > I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like; > ; > ```julia; > biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); > ```; > ; > rather than having to use the ""discrete form"".; > ; > This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development. This seems like a good idea, I will have a think and try and come up with something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594:219,Security,validat,validation,219,"> Can't we add advective terms via the biogeochemical forcing term?; > ; > edit: I see you mentioned that, so I might be missing something... I'll take a look at your examples.; > ; > PS we should add those scripts to `validation/biogeochemistry/`. > I think we can impose a little more structure that eases biogeochemical model development.; > ; > One route is to build out a layer on top of `AbstractBiogeochemistry` for models with a common form, something like; > ; > ```julia; > struct TracerBasedBiogeochemistry; > biogeochemical_tracers; > drift_advection_schemes; > drift_velocities; > transitions; > auxiliary_fields; > end; > ```; > ; > and perhaps more properties. This is similar to how `SeawaterBuoyancy` works, in that it provides a concrete structure with a slot `equation_of_state` whereby ""external"" packages like `SeawaterPolynomials` can insert custom behavior.; > ; > Another possibility is to build out a new abstract type below `AbstractBiogeochemistry` with a function-based interface (somehow).; > ; > I was also thinking it would be nice to supply a ""continuous form"" interface, so that model developers can implement functions that look something like; > ; > ```julia; > biogeochemical_transition(x, y, z, t, N, P, Z, D, parameters); > ```; > ; > rather than having to use the ""discrete form"".; > ; > This sort of structure could also be provided by an external package. The advantage of including it here is that we get tighter coupling with Oceananigans development. This seems like a good idea, I will have a think and try and come up with something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311545594
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054:399,Deployability,Continuous,ContinuousForcing,399,I've added `TracerBasedBiogeochemistry` and an example both using and not using it and they both seem to work now:; ![npd_example](https://user-images.githubusercontent.com/26657828/201384805-32bd6dfe-8838-44c8-a838-e3b841845812.png); I am slightly concerned with how I've setup the forcing for `TracerBasedBiogeochemistry` because I assume the weird stuff going on with the interpolation stuff in `ContinuousForcing` is there for a reason (and we can't use the normal continuous forcing stuff because it relies on the index of the tracer which we don't have as the model isn't finished when we setup the biogeochemical model). I'll have a go at adding an example with PAR integration to check its straightforward to add to a model later.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054:469,Deployability,continuous,continuous,469,I've added `TracerBasedBiogeochemistry` and an example both using and not using it and they both seem to work now:; ![npd_example](https://user-images.githubusercontent.com/26657828/201384805-32bd6dfe-8838-44c8-a838-e3b841845812.png); I am slightly concerned with how I've setup the forcing for `TracerBasedBiogeochemistry` because I assume the weird stuff going on with the interpolation stuff in `ContinuousForcing` is there for a reason (and we can't use the normal continuous forcing stuff because it relies on the index of the tracer which we don't have as the model isn't finished when we setup the biogeochemical model). I'll have a go at adding an example with PAR integration to check its straightforward to add to a model later.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054:673,Deployability,integrat,integration,673,I've added `TracerBasedBiogeochemistry` and an example both using and not using it and they both seem to work now:; ![npd_example](https://user-images.githubusercontent.com/26657828/201384805-32bd6dfe-8838-44c8-a838-e3b841845812.png); I am slightly concerned with how I've setup the forcing for `TracerBasedBiogeochemistry` because I assume the weird stuff going on with the interpolation stuff in `ContinuousForcing` is there for a reason (and we can't use the normal continuous forcing stuff because it relies on the index of the tracer which we don't have as the model isn't finished when we setup the biogeochemical model). I'll have a go at adding an example with PAR integration to check its straightforward to add to a model later.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054:673,Integrability,integrat,integration,673,I've added `TracerBasedBiogeochemistry` and an example both using and not using it and they both seem to work now:; ![npd_example](https://user-images.githubusercontent.com/26657828/201384805-32bd6dfe-8838-44c8-a838-e3b841845812.png); I am slightly concerned with how I've setup the forcing for `TracerBasedBiogeochemistry` because I assume the weird stuff going on with the interpolation stuff in `ContinuousForcing` is there for a reason (and we can't use the normal continuous forcing stuff because it relies on the index of the tracer which we don't have as the model isn't finished when we setup the biogeochemical model). I'll have a go at adding an example with PAR integration to check its straightforward to add to a model later.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311916054
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:1096,Performance,optimiz,optimization,1096,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:8,Testability,benchmark,benchmarked,8,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:61,Testability,test,test,61,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:149,Testability,Benchmark,BenchmarkTools,149,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:489,Testability,log,log,489,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:586,Testability,test,test,586,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:639,Testability,Benchmark,BenchmarkTools,639,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286:1186,Testability,benchmark,benchmarked,1186,"Quickly benchmarked stepping the simulation and as setup in `test/test_biogeochemistry_npzd.jl` (just realized this is incorrectly named) got:; ```; BenchmarkTools.Trial: 3359 samples with 1 evaluation.; Range (min … max): 1.162 ms … 11.420 ms ┊ GC (min … max): 0.00% … 62.52%; Time (median): 1.324 ms ┊ GC (median): 0.00%; Time (mean ± σ): 1.479 ms ± 842.222 μs ┊ GC (mean ± σ): 5.25% ± 7.80%. ▇█▆▄▃▂▂▁ ▁; ████████▇▆▆▅▄▁▃▁▁▃▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▆▆ █; 1.16 ms Histogram: log(frequency) by time 7.82 ms <. Memory estimate: 1.52 MiB, allocs estimate: 2522. ```; And in `test/test_biogeochemistry_tracer_based.jl`got:; ```; BenchmarkTools.Trial: 978 samples with 1 evaluation.; Range (min … max): 2.071 ms … 77.292 ms ┊ GC (min … max): 0.00% … 0.00%; Time (median): 3.359 ms ┊ GC (median): 0.00%; Time (mean ± σ): 5.091 ms ± 4.405 ms ┊ GC (mean ± σ): 5.49% ± 10.75%. ▄▂▃▃█▃ ; ███████▄▃▂▂▂▂▁▁▁▂▂▂▂▂▂▂▁▁▁▂▂▃▄▅▄▅▃▃▃▃▃▃▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▂ ▃; 2.07 ms Histogram: frequency by time 18.3 ms <. Memory estimate: 3.84 MiB, allocs estimate: 6731.; ```; So there seems to be a lot of room for optimization in how I've written `TracerBasedBiogeochemistry`. The difference when I just benchmarked `time_step!` was slightly less but still ∼2x slower. (Time to increment stop_iteration by 1 and run! after doing that for an initial step)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1311928286
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513:1190,Availability,avail,available,1190,"I would suggest sticking with PAR rather than light.  PAR is very common in biogeochemistry and it is made up of specific bands of light and hence “light” and PAR aren’t exactly equivalent.  Calling it “light” could cause confusion if someone calculates PAR from the incoming solar radiation (light).; On Nov 18, 2022 at 3:07 PM +0000, Jago Strong-Wright ***@***.***>, wrote:; > @jagoosw commented on this pull request.; > In test/test_biogeochemistry.jl:; > > + wait(device(model.architecture), par_calculation); >; > +end; >; > +; >; > +biogeochemistry_parameters = (; >; > + growth_rate = 1/day,; >; > + light_limit = 3.5,; >; > + mortality_rate = 0.1/day,; >; > +; >; > + water_light_attenuation_coefficient = 0.12,; >; > + phytoplankton_light_attenuation_coefficient = 0.06,; >; > + phytoplankton_light_attenuation_exponent = 0.6,; >; > + surface_PAR = t -> 100*max(0.0, sin(t*π/(12hours))); >; > +); >; > +; >; > +biogeochemistry = SomethingBiogeochemistry(tracers = :P,; >; > + auxiliary_fields = :PAR,; >; > Makses sense, after I started I realised it was a bigger challenge than I thought it would be!; > I'll try and make these changes later.; > PAR stands for photosynthetically available radiation, perhaps it would be more clear to call it light here.; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513:1391,Integrability,Message,Message,1391,"I would suggest sticking with PAR rather than light.  PAR is very common in biogeochemistry and it is made up of specific bands of light and hence “light” and PAR aren’t exactly equivalent.  Calling it “light” could cause confusion if someone calculates PAR from the incoming solar radiation (light).; On Nov 18, 2022 at 3:07 PM +0000, Jago Strong-Wright ***@***.***>, wrote:; > @jagoosw commented on this pull request.; > In test/test_biogeochemistry.jl:; > > + wait(device(model.architecture), par_calculation); >; > +end; >; > +; >; > +biogeochemistry_parameters = (; >; > + growth_rate = 1/day,; >; > + light_limit = 3.5,; >; > + mortality_rate = 0.1/day,; >; > +; >; > + water_light_attenuation_coefficient = 0.12,; >; > + phytoplankton_light_attenuation_coefficient = 0.06,; >; > + phytoplankton_light_attenuation_exponent = 0.6,; >; > + surface_PAR = t -> 100*max(0.0, sin(t*π/(12hours))); >; > +); >; > +; >; > +biogeochemistry = SomethingBiogeochemistry(tracers = :P,; >; > + auxiliary_fields = :PAR,; >; > Makses sense, after I started I realised it was a bigger challenge than I thought it would be!; > I'll try and make these changes later.; > PAR stands for photosynthetically available radiation, perhaps it would be more clear to call it light here.; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513:426,Testability,test,test,426,"I would suggest sticking with PAR rather than light.  PAR is very common in biogeochemistry and it is made up of specific bands of light and hence “light” and PAR aren’t exactly equivalent.  Calling it “light” could cause confusion if someone calculates PAR from the incoming solar radiation (light).; On Nov 18, 2022 at 3:07 PM +0000, Jago Strong-Wright ***@***.***>, wrote:; > @jagoosw commented on this pull request.; > In test/test_biogeochemistry.jl:; > > + wait(device(model.architecture), par_calculation); >; > +end; >; > +; >; > +biogeochemistry_parameters = (; >; > + growth_rate = 1/day,; >; > + light_limit = 3.5,; >; > + mortality_rate = 0.1/day,; >; > +; >; > + water_light_attenuation_coefficient = 0.12,; >; > + phytoplankton_light_attenuation_coefficient = 0.06,; >; > + phytoplankton_light_attenuation_exponent = 0.6,; >; > + surface_PAR = t -> 100*max(0.0, sin(t*π/(12hours))); >; > +); >; > +; >; > +biogeochemistry = SomethingBiogeochemistry(tracers = :P,; >; > + auxiliary_fields = :PAR,; >; > Makses sense, after I started I realised it was a bigger challenge than I thought it would be!; > I'll try and make these changes later.; > PAR stands for photosynthetically available radiation, perhaps it would be more clear to call it light here.; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513:1236,Usability,clear,clear,1236,"I would suggest sticking with PAR rather than light.  PAR is very common in biogeochemistry and it is made up of specific bands of light and hence “light” and PAR aren’t exactly equivalent.  Calling it “light” could cause confusion if someone calculates PAR from the incoming solar radiation (light).; On Nov 18, 2022 at 3:07 PM +0000, Jago Strong-Wright ***@***.***>, wrote:; > @jagoosw commented on this pull request.; > In test/test_biogeochemistry.jl:; > > + wait(device(model.architecture), par_calculation); >; > +end; >; > +; >; > +biogeochemistry_parameters = (; >; > + growth_rate = 1/day,; >; > + light_limit = 3.5,; >; > + mortality_rate = 0.1/day,; >; > +; >; > + water_light_attenuation_coefficient = 0.12,; >; > + phytoplankton_light_attenuation_coefficient = 0.06,; >; > + phytoplankton_light_attenuation_exponent = 0.6,; >; > + surface_PAR = t -> 100*max(0.0, sin(t*π/(12hours))); >; > +); >; > +; >; > +biogeochemistry = SomethingBiogeochemistry(tracers = :P,; >; > + auxiliary_fields = :PAR,; >; > Makses sense, after I started I realised it was a bigger challenge than I thought it would be!; > I'll try and make these changes later.; > PAR stands for photosynthetically available radiation, perhaps it would be more clear to call it light here.; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1320161513
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1324269751:165,Availability,error,error,165,"> Can you paste the code snippet that produces the warning here?. I'm not exactly sure which part of this code is producing it but as an MWE, this produces the same error:; ```julia; grid = RectilinearGrid(size=(10, 10, 20), extent=(1, 1, 2)); model = NonhydrostaticModel(;grid, tracers=TracerFields((:A, :B), grid)); ```. If I specify a boundary condition then it doesn't give this error:; ```julia; model = NonhydrostaticModel(;grid, tracers=TracerFields((:A, :B), grid), boundary_conditions = (A = FieldBoundaryConditions(top = FluxBoundaryCondition(1.0)), )); ```; Which gives this instead:; ```julia; ┌ Warning: B was assigned an immersed FluxBoundaryCondition: Nothing, but this is not supported on; │ 10×10×20 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; │ The immersed boundary condition on B will have no effect.; └ @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/jMMeT/src/BoundaryConditions/field_boundary_conditions.jl:160; NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0); ├── grid: 10×10×20 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── timestepper: QuasiAdamsBashforth2TimeStepper; ├── tracers: (A, B); ├── closure: Nothing; ├── buoyancy: Nothing; └── coriolis: Nothing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1324269751
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1324269751:383,Availability,error,error,383,"> Can you paste the code snippet that produces the warning here?. I'm not exactly sure which part of this code is producing it but as an MWE, this produces the same error:; ```julia; grid = RectilinearGrid(size=(10, 10, 20), extent=(1, 1, 2)); model = NonhydrostaticModel(;grid, tracers=TracerFields((:A, :B), grid)); ```. If I specify a boundary condition then it doesn't give this error:; ```julia; model = NonhydrostaticModel(;grid, tracers=TracerFields((:A, :B), grid), boundary_conditions = (A = FieldBoundaryConditions(top = FluxBoundaryCondition(1.0)), )); ```; Which gives this instead:; ```julia; ┌ Warning: B was assigned an immersed FluxBoundaryCondition: Nothing, but this is not supported on; │ 10×10×20 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; │ The immersed boundary condition on B will have no effect.; └ @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/jMMeT/src/BoundaryConditions/field_boundary_conditions.jl:160; NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0); ├── grid: 10×10×20 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── timestepper: QuasiAdamsBashforth2TimeStepper; ├── tracers: (A, B); ├── closure: Nothing; ├── buoyancy: Nothing; └── coriolis: Nothing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1324269751
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1330454554:386,Deployability,integrat,integrate,386,"> > Yeah, I can change it back to be similar to how it was before?; > ; > I'm not sure exactly how it was before --- but if that works, it works! I can also help (next week, it's Thanksgiving right now over here in the US). Done this now, to make it work with `SomethingBiogeochemistry` I had to add the light attenuation model as a property of the `SomethingBiogeochemistry` so it can integrate, I think it works okay?. Edit for clarity: the default is to have no light attenuation model so if users don't want to integrate one (like the origional phytoplankton growth model) they don't have todo anything.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1330454554
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1330454554:515,Deployability,integrat,integrate,515,"> > Yeah, I can change it back to be similar to how it was before?; > ; > I'm not sure exactly how it was before --- but if that works, it works! I can also help (next week, it's Thanksgiving right now over here in the US). Done this now, to make it work with `SomethingBiogeochemistry` I had to add the light attenuation model as a property of the `SomethingBiogeochemistry` so it can integrate, I think it works okay?. Edit for clarity: the default is to have no light attenuation model so if users don't want to integrate one (like the origional phytoplankton growth model) they don't have todo anything.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1330454554
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1330454554:386,Integrability,integrat,integrate,386,"> > Yeah, I can change it back to be similar to how it was before?; > ; > I'm not sure exactly how it was before --- but if that works, it works! I can also help (next week, it's Thanksgiving right now over here in the US). Done this now, to make it work with `SomethingBiogeochemistry` I had to add the light attenuation model as a property of the `SomethingBiogeochemistry` so it can integrate, I think it works okay?. Edit for clarity: the default is to have no light attenuation model so if users don't want to integrate one (like the origional phytoplankton growth model) they don't have todo anything.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1330454554
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1330454554:515,Integrability,integrat,integrate,515,"> > Yeah, I can change it back to be similar to how it was before?; > ; > I'm not sure exactly how it was before --- but if that works, it works! I can also help (next week, it's Thanksgiving right now over here in the US). Done this now, to make it work with `SomethingBiogeochemistry` I had to add the light attenuation model as a property of the `SomethingBiogeochemistry` so it can integrate, I think it works okay?. Edit for clarity: the default is to have no light attenuation model so if users don't want to integrate one (like the origional phytoplankton growth model) they don't have todo anything.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1330454554
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1334717022:468,Energy Efficiency,adapt,adapt,468,"A few more comments:. * Perhaps we can name `SomethingBiogeochemistry` ""BasicBiogeochemistry"". I think this is appropriate communication about the purpose of this object; large, sophisticated packages should implement their own models from the ground up.; * I think `light_attenuation_model` is too specific for `BasicBiogeochemistry`. For example, it only pertains to biology; however some models are chemistry-only. @jagoosw do you mind if I address these, and also adapt `test_biogeochemistry.jl` into a form that's close to merge-ready?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1334717022
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1334717022:468,Modifiability,adapt,adapt,468,"A few more comments:. * Perhaps we can name `SomethingBiogeochemistry` ""BasicBiogeochemistry"". I think this is appropriate communication about the purpose of this object; large, sophisticated packages should implement their own models from the ground up.; * I think `light_attenuation_model` is too specific for `BasicBiogeochemistry`. For example, it only pertains to biology; however some models are chemistry-only. @jagoosw do you mind if I address these, and also adapt `test_biogeochemistry.jl` into a form that's close to merge-ready?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1334717022
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587:169,Deployability,update,update,169,"I think that name makes sense!. For the light attenuaiton model, I'm not sure how it would work without making it a property of the model? If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up? . I've rewritten it a little bit to make the integration a nothing operation when the user doesn't specify a model but not sure what the best solution might be here. Perhaps we could make it more generic so users can call any kind of update state operation?. But either way, happy for you to fix these issues!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587:319,Deployability,integrat,integration,319,"I think that name makes sense!. For the light attenuaiton model, I'm not sure how it would work without making it a property of the model? If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up? . I've rewritten it a little bit to make the integration a nothing operation when the user doesn't specify a model but not sure what the best solution might be here. Perhaps we could make it more generic so users can call any kind of update state operation?. But either way, happy for you to fix these issues!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587:508,Deployability,update,update,508,"I think that name makes sense!. For the light attenuaiton model, I'm not sure how it would work without making it a property of the model? If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up? . I've rewritten it a little bit to make the integration a nothing operation when the user doesn't specify a model but not sure what the best solution might be here. Perhaps we could make it more generic so users can call any kind of update state operation?. But either way, happy for you to fix these issues!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587:319,Integrability,integrat,integration,319,"I think that name makes sense!. For the light attenuaiton model, I'm not sure how it would work without making it a property of the model? If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up? . I've rewritten it a little bit to make the integration a nothing operation when the user doesn't specify a model but not sure what the best solution might be here. Perhaps we could make it more generic so users can call any kind of update state operation?. But either way, happy for you to fix these issues!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335069587
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335278999:32,Deployability,update,update,32,"> If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up?. The user has to define `update_biogeochemical_state!` for the particular `BasicBiogeochemistry` they would like to use; if they want to compute light attenuation, they'll have to write that. However, I can envision child packages to Oceananigans providing more structured functionality for users. I think we just want to keep the Oceananigans interface as simple and general as possible since we expected it to be used by many different types of chemistry and biology models.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335278999
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335278999:481,Integrability,interface,interface,481,"> If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up?. The user has to define `update_biogeochemical_state!` for the particular `BasicBiogeochemistry` they would like to use; if they want to compute light attenuation, they'll have to write that. However, I can envision child packages to Oceananigans providing more structured functionality for users. I think we just want to keep the Oceananigans interface as simple and general as possible since we expected it to be used by many different types of chemistry and biology models.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335278999
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335278999:494,Usability,simpl,simple,494,"> If it is a parameter then the update state would need to check if there is a parameter before which might be more ambiguous to set up?. The user has to define `update_biogeochemical_state!` for the particular `BasicBiogeochemistry` they would like to use; if they want to compute light attenuation, they'll have to write that. However, I can envision child packages to Oceananigans providing more structured functionality for users. I think we just want to keep the Oceananigans interface as simple and general as possible since we expected it to be used by many different types of chemistry and biology models.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335278999
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335295213:78,Deployability,update,update,78,"I'm thinking maybe that we should not allow `BasicBiogeochemistry` to have an update state or update tracers function. This will help enforce the notion that this object is really for ""truly basic"" situations; for more advanced functioality people need to use the lower level interface (which will produce much more reusable and modular code, so is very much in our interest).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335295213
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335295213:94,Deployability,update,update,94,"I'm thinking maybe that we should not allow `BasicBiogeochemistry` to have an update state or update tracers function. This will help enforce the notion that this object is really for ""truly basic"" situations; for more advanced functioality people need to use the lower level interface (which will produce much more reusable and modular code, so is very much in our interest).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335295213
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335295213:276,Integrability,interface,interface,276,"I'm thinking maybe that we should not allow `BasicBiogeochemistry` to have an update state or update tracers function. This will help enforce the notion that this object is really for ""truly basic"" situations; for more advanced functioality people need to use the lower level interface (which will produce much more reusable and modular code, so is very much in our interest).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335295213
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335297027:466,Availability,down,down,466,"> > I'm still sort of worried that we shouldn't have `BasicBiogeochemistry` at all because I'm worried that will tempt child packages into using it... (the double-edged sword of convenience); > ; > It is also going to be an extra thing to maintain that probably isn't that useful?. That's my main concern. It's basically a convenience thing for model developers who are just getting started. So it is slightly friendly, but it's not a good idea if it slows everyone down...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1335297027
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1400542572:28,Testability,test,tests,28,I don't really know why the tests failed,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1400542572
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1400997721:22,Testability,test,tests,22,"@glwagner I think the tests are failing because the `hydrostatic_turbulent_kinetic_energy_tendency` tracer function is being given `val_tracer_name` when its not expecting it, but when I modify it to take it after `val_tracer_index` it still fails, do you have any ideas?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1400997721
https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1406405519:12,Availability,error,error,12,A different error!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1406405519
https://github.com/CliMA/Oceananigans.jl/issues/2806#issuecomment-1306127523:116,Deployability,install,installed,116,True. Quick response:. We found that if we don't have the Manifest included then different versions of packages get installed in different machines and tests break and it's a nightmare for everyone. I agree with you that in an ideal situation we should just prescribe the `compat` entries in Project.toml and that's that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2806#issuecomment-1306127523
https://github.com/CliMA/Oceananigans.jl/issues/2806#issuecomment-1306127523:152,Testability,test,tests,152,True. Quick response:. We found that if we don't have the Manifest included then different versions of packages get installed in different machines and tests break and it's a nightmare for everyone. I agree with you that in an ideal situation we should just prescribe the `compat` entries in Project.toml and that's that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2806#issuecomment-1306127523
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308122540:65,Testability,test,tests,65,I only saw the problem in Single Column models. In #2786 I added tests for Slice XY models + Ensembles of those and was not seeing this same issue there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308122540
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308123094:35,Usability,simpl,simple,35,"Can we come up with a MWE, maybe a simple 2 point single column model that can be copy/pasted here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308123094
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308123902:117,Availability,error,error,117,"> That line is inside a loop. What if `@show ""hi""` is outside the loop?. If I put `@show ""hi""` _after_ the loop then error goes away. If I put it _before_ error remains.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308123902
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308123902:155,Availability,error,error,155,"> That line is inside a loop. What if `@show ""hi""` is outside the loop?. If I put `@show ""hi""` _after_ the loop then error goes away. If I put it _before_ error remains.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308123902
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308126156:108,Testability,test,test,108,"> Can we come up with a MWE, maybe a simple 2 point single column model that can be copy/pasted here?. This test _is_ done using 2-point single column models :). https://github.com/CliMA/Oceananigans.jl/blob/99ad4c151095835c21ca899561429be30e8181cb/test/test_ensemble_hydrostatic_free_surface_models.jl#L56-L58",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308126156
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308126156:249,Testability,test,test,249,"> Can we come up with a MWE, maybe a simple 2 point single column model that can be copy/pasted here?. This test _is_ done using 2-point single column models :). https://github.com/CliMA/Oceananigans.jl/blob/99ad4c151095835c21ca899561429be30e8181cb/test/test_ensemble_hydrostatic_free_surface_models.jl#L56-L58",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308126156
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308126156:37,Usability,simpl,simple,37,"> Can we come up with a MWE, maybe a simple 2 point single column model that can be copy/pasted here?. This test _is_ done using 2-point single column models :). https://github.com/CliMA/Oceananigans.jl/blob/99ad4c151095835c21ca899561429be30e8181cb/test/test_ensemble_hydrostatic_free_surface_models.jl#L56-L58",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308126156
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308131024:37,Testability,Test,Test,37,"Here:. ```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). coriolises = [FPlane(f=1.0) FPlane(f=1.0); FPlane(f=1.0) FPlane(f=1.1)]. model_kwargs = (; tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.01, stop_iteration=100). models = [HydrostaticFreeSurfaceModel(; grid, coriolis=coriolises[i, j], model_kwargs...) for i=1:2, j=1:2]. set_ic!(model) = set!(model, u=sqrt(2), v=sqrt(2)). for model in models; set_ic!(model); simulation = Simulation(model; simulation_kwargs...); run!(simulation); end . ensemble_size = ColumnEnsembleSize(Nz=2, ensemble=(2, 2), Hz=1); ensemble_grid = RectilinearGrid(size=ensemble_size, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1); ensemble_model = HydrostaticFreeSurfaceModel(; grid=ensemble_grid, coriolis=coriolises, model_kwargs...); set_ic!(ensemble_model); ensemble_simulation = Simulation(ensemble_model; simulation_kwargs...); run!(ensemble_simulation). for i = 1:2, j = 1:2 ; @test parent(ensemble_model.velocities.u)[i, j, :] == parent(models[i, j].velocities.u)[1, 1, :]; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308131024
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308131024:1098,Testability,test,test,1098,"Here:. ```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). coriolises = [FPlane(f=1.0) FPlane(f=1.0); FPlane(f=1.0) FPlane(f=1.1)]. model_kwargs = (; tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.01, stop_iteration=100). models = [HydrostaticFreeSurfaceModel(; grid, coriolis=coriolises[i, j], model_kwargs...) for i=1:2, j=1:2]. set_ic!(model) = set!(model, u=sqrt(2), v=sqrt(2)). for model in models; set_ic!(model); simulation = Simulation(model; simulation_kwargs...); run!(simulation); end . ensemble_size = ColumnEnsembleSize(Nz=2, ensemble=(2, 2), Hz=1); ensemble_grid = RectilinearGrid(size=ensemble_size, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1); ensemble_model = HydrostaticFreeSurfaceModel(; grid=ensemble_grid, coriolis=coriolises, model_kwargs...); set_ic!(ensemble_model); ensemble_simulation = Simulation(ensemble_model; simulation_kwargs...); run!(ensemble_simulation). for i = 1:2, j = 1:2 ; @test parent(ensemble_model.velocities.u)[i, j, :] == parent(models[i, j].velocities.u)[1, 1, :]; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308131024
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308163237:17,Availability,error,error,17,Don't we get the error by only running one model and comparing the two grid points?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308163237
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152:1358,Availability,ERROR,ERROR,1358,"```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). model_kwargs = (; coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.05, stop_iteration=100). model = HydrostaticFreeSurfaceModel(; grid, coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing). set!(model, u=sqrt(2), v=sqrt(2)); simulation = Simulation(model; Δt=0.01, stop_iteration=100). run!(simulation). @show parent(simulation.model.velocities.u)[1, 1, :]; @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; ```. ```Julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9553830695348586, 1.9553830695348586, 1.9549981463078983, 1.9549981463078983]; 4-element Vector{Float64}:; 1.9553830695348586; 1.9553830695348586; 1.9549981463078983; 1.9549981463078983. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Failed at REPL[35]:1; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9553830695348586 == 1.9549981463078983; ERROR: There was an error during testing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152:1378,Availability,error,error,1378,"```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). model_kwargs = (; coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.05, stop_iteration=100). model = HydrostaticFreeSurfaceModel(; grid, coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing). set!(model, u=sqrt(2), v=sqrt(2)); simulation = Simulation(model; Δt=0.01, stop_iteration=100). run!(simulation). @show parent(simulation.model.velocities.u)[1, 1, :]; @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; ```. ```Julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9553830695348586, 1.9553830695348586, 1.9549981463078983, 1.9549981463078983]; 4-element Vector{Float64}:; 1.9553830695348586; 1.9553830695348586; 1.9549981463078983; 1.9549981463078983. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Failed at REPL[35]:1; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9553830695348586 == 1.9549981463078983; ERROR: There was an error during testing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152:30,Testability,Test,Test,30,"```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). model_kwargs = (; coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.05, stop_iteration=100). model = HydrostaticFreeSurfaceModel(; grid, coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing). set!(model, u=sqrt(2), v=sqrt(2)); simulation = Simulation(model; Δt=0.01, stop_iteration=100). run!(simulation). @show parent(simulation.model.velocities.u)[1, 1, :]; @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; ```. ```Julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9553830695348586, 1.9553830695348586, 1.9549981463078983, 1.9549981463078983]; 4-element Vector{Float64}:; 1.9553830695348586; 1.9553830695348586; 1.9549981463078983; 1.9549981463078983. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Failed at REPL[35]:1; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9553830695348586 == 1.9549981463078983; ERROR: There was an error during testing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152:633,Testability,test,test,633,"```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). model_kwargs = (; coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.05, stop_iteration=100). model = HydrostaticFreeSurfaceModel(; grid, coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing). set!(model, u=sqrt(2), v=sqrt(2)); simulation = Simulation(model; Δt=0.01, stop_iteration=100). run!(simulation). @show parent(simulation.model.velocities.u)[1, 1, :]; @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; ```. ```Julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9553830695348586, 1.9553830695348586, 1.9549981463078983, 1.9549981463078983]; 4-element Vector{Float64}:; 1.9553830695348586; 1.9553830695348586; 1.9549981463078983; 1.9549981463078983. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Failed at REPL[35]:1; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9553830695348586 == 1.9549981463078983; ERROR: There was an error during testing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152:1061,Testability,test,test,1061,"```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). model_kwargs = (; coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.05, stop_iteration=100). model = HydrostaticFreeSurfaceModel(; grid, coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing). set!(model, u=sqrt(2), v=sqrt(2)); simulation = Simulation(model; Δt=0.01, stop_iteration=100). run!(simulation). @show parent(simulation.model.velocities.u)[1, 1, :]; @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; ```. ```Julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9553830695348586, 1.9553830695348586, 1.9549981463078983, 1.9549981463078983]; 4-element Vector{Float64}:; 1.9553830695348586; 1.9553830695348586; 1.9549981463078983; 1.9549981463078983. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Failed at REPL[35]:1; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9553830695348586 == 1.9549981463078983; ERROR: There was an error during testing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152:1164,Testability,Test,Test,1164,"```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). model_kwargs = (; coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.05, stop_iteration=100). model = HydrostaticFreeSurfaceModel(; grid, coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing). set!(model, u=sqrt(2), v=sqrt(2)); simulation = Simulation(model; Δt=0.01, stop_iteration=100). run!(simulation). @show parent(simulation.model.velocities.u)[1, 1, :]; @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; ```. ```Julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9553830695348586, 1.9553830695348586, 1.9549981463078983, 1.9549981463078983]; 4-element Vector{Float64}:; 1.9553830695348586; 1.9553830695348586; 1.9549981463078983; 1.9549981463078983. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Failed at REPL[35]:1; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9553830695348586 == 1.9549981463078983; ERROR: There was an error during testing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152:1391,Testability,test,testing,1391,"```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). model_kwargs = (; coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.05, stop_iteration=100). model = HydrostaticFreeSurfaceModel(; grid, coriolis=FPlane(f=1.0), tracers=nothing, buoyancy=nothing, closure=nothing). set!(model, u=sqrt(2), v=sqrt(2)); simulation = Simulation(model; Δt=0.01, stop_iteration=100). run!(simulation). @show parent(simulation.model.velocities.u)[1, 1, :]; @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; ```. ```Julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9553830695348586, 1.9553830695348586, 1.9549981463078983, 1.9549981463078983]; 4-element Vector{Float64}:; 1.9553830695348586; 1.9553830695348586; 1.9549981463078983; 1.9549981463078983. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Failed at REPL[35]:1; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9553830695348586 == 1.9549981463078983; ERROR: There was an error during testing; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308167152
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425:99,Testability,test,test,99,"Also the original pasted code doesn't fail for me, so it seems we may not be able to reproduce the test on all machines... I ran the code just above and I get. ```julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9522654528754464, 1.9522654528754464, 1.9522654528754464, 1.9522654528754464]; 4-element Vector{Float64}:; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Passed; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425:480,Testability,test,test,480,"Also the original pasted code doesn't fail for me, so it seems we may not be able to reproduce the test on all machines... I ran the code just above and I get. ```julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9522654528754464, 1.9522654528754464, 1.9522654528754464, 1.9522654528754464]; 4-element Vector{Float64}:; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Passed; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425:583,Testability,Test,Test,583,"Also the original pasted code doesn't fail for me, so it seems we may not be able to reproduce the test on all machines... I ran the code just above and I get. ```julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9522654528754464, 1.9522654528754464, 1.9522654528754464, 1.9522654528754464]; 4-element Vector{Float64}:; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Passed; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308169259:47,Deployability,update,updated,47,on which commit of Oceananigans? main was just updated... with the latest one?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308169259
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571:849,Availability,ERROR,ERROR,849,"```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (78.718 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.593 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9561509021434433, 1.9561509021434433, 1.9560395693473134, 1.9560395693473134]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9561509021434433 == 1.9560395693473134; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. bingo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571:880,Availability,error,error,880,"```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (78.718 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.593 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9561509021434433, 1.9561509021434433, 1.9560395693473134, 1.9560395693473134]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9561509021434433 == 1.9560395693473134; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. bingo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571:856,Performance,Load,LoadError,856,"```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (78.718 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.593 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9561509021434433, 1.9561509021434433, 1.9560395693473134, 1.9560395693473134]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9561509021434433 == 1.9560395693473134; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. bingo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571:589,Testability,Test,Test,589,"```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (78.718 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.593 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9561509021434433, 1.9561509021434433, 1.9560395693473134, 1.9560395693473134]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9561509021434433 == 1.9560395693473134; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. bingo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571:634,Testability,test,test,634,"```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (78.718 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.593 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9561509021434433, 1.9561509021434433, 1.9560395693473134, 1.9560395693473134]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9561509021434433 == 1.9560395693473134; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. bingo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571:893,Testability,test,testing,893,"```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (78.718 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.593 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9561509021434433, 1.9561509021434433, 1.9560395693473134, 1.9560395693473134]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9561509021434433 == 1.9560395693473134; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. bingo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571:958,Testability,test,test,958,"```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (78.718 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.593 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9561509021434433, 1.9561509021434433, 1.9560395693473134, 1.9560395693473134]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9561509021434433 == 1.9560395693473134; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. bingo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175571
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175859:24,Performance,race condition,race condition,24,"Still, we shouldn't get race condition; that's a bug.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308175859
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308176999:4,Testability,test,tests,4,"the tests are run single-threaded, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308176999
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839:981,Availability,ERROR,ERROR,981,"I don't know. Increasing grid points to 4, there's still a problem with 6 threads. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl [19:56:49]; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.416 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.660 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9557581998545617, 1.9557581998545617, 1.956214574857873, 1.9553566305291932, 1.9553371609848056, 1.9553371609848056]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9557581998545617 == 1.956214574857873; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. and also with 4. But with 3,. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=3 julia --project race_condition_test.jl [19:58:49]; [ Info: Oceananigans will use 3 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (98.396 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.548 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9543734841879783, 1.9543734841879783, 1.9543734841879783, 1.9560232965664703, 1.9567081251492398, 1.9567081251492398]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839:1012,Availability,error,error,1012,"I don't know. Increasing grid points to 4, there's still a problem with 6 threads. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl [19:56:49]; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.416 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.660 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9557581998545617, 1.9557581998545617, 1.956214574857873, 1.9553566305291932, 1.9553371609848056, 1.9553371609848056]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9557581998545617 == 1.956214574857873; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. and also with 4. But with 3,. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=3 julia --project race_condition_test.jl [19:58:49]; [ Info: Oceananigans will use 3 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (98.396 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.548 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9543734841879783, 1.9543734841879783, 1.9543734841879783, 1.9560232965664703, 1.9567081251492398, 1.9567081251492398]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839:988,Performance,Load,LoadError,988,"I don't know. Increasing grid points to 4, there's still a problem with 6 threads. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl [19:56:49]; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.416 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.660 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9557581998545617, 1.9557581998545617, 1.956214574857873, 1.9553566305291932, 1.9553371609848056, 1.9553371609848056]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9557581998545617 == 1.956214574857873; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. and also with 4. But with 3,. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=3 julia --project race_condition_test.jl [19:58:49]; [ Info: Oceananigans will use 3 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (98.396 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.548 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9543734841879783, 1.9543734841879783, 1.9543734841879783, 1.9560232965664703, 1.9567081251492398, 1.9567081251492398]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839:722,Testability,Test,Test,722,"I don't know. Increasing grid points to 4, there's still a problem with 6 threads. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl [19:56:49]; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.416 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.660 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9557581998545617, 1.9557581998545617, 1.956214574857873, 1.9553566305291932, 1.9553371609848056, 1.9553371609848056]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9557581998545617 == 1.956214574857873; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. and also with 4. But with 3,. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=3 julia --project race_condition_test.jl [19:58:49]; [ Info: Oceananigans will use 3 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (98.396 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.548 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9543734841879783, 1.9543734841879783, 1.9543734841879783, 1.9560232965664703, 1.9567081251492398, 1.9567081251492398]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839:767,Testability,test,test,767,"I don't know. Increasing grid points to 4, there's still a problem with 6 threads. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl [19:56:49]; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.416 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.660 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9557581998545617, 1.9557581998545617, 1.956214574857873, 1.9553566305291932, 1.9553371609848056, 1.9553371609848056]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9557581998545617 == 1.956214574857873; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. and also with 4. But with 3,. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=3 julia --project race_condition_test.jl [19:58:49]; [ Info: Oceananigans will use 3 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (98.396 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.548 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9543734841879783, 1.9543734841879783, 1.9543734841879783, 1.9560232965664703, 1.9567081251492398, 1.9567081251492398]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839:1025,Testability,test,testing,1025,"I don't know. Increasing grid points to 4, there's still a problem with 6 threads. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl [19:56:49]; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.416 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.660 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9557581998545617, 1.9557581998545617, 1.956214574857873, 1.9553566305291932, 1.9553371609848056, 1.9553371609848056]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9557581998545617 == 1.956214574857873; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. and also with 4. But with 3,. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=3 julia --project race_condition_test.jl [19:58:49]; [ Info: Oceananigans will use 3 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (98.396 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.548 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9543734841879783, 1.9543734841879783, 1.9543734841879783, 1.9560232965664703, 1.9567081251492398, 1.9567081251492398]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839
https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839:1090,Testability,test,test,1090,"I don't know. Increasing grid points to 4, there's still a problem with 6 threads. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=6 julia --project race_condition_test.jl [19:56:49]; [ Info: Oceananigans will use 6 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.416 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.660 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9557581998545617, 1.9557581998545617, 1.956214574857873, 1.9553566305291932, 1.9553371609848056, 1.9553371609848056]; Test Failed at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; Expression: (parent(simulation.model.velocities.u))[1, 1, 2] == (parent(simulation.model.velocities.u))[1, 1, 3]; Evaluated: 1.9557581998545617 == 1.956214574857873; ERROR: LoadError: There was an error during testing; in expression starting at /Users/gregorywagner/Projects/test/Oceananigans.jl/race_condition_test.jl:17; ```. and also with 4. But with 3,. ```julia; (base) gregorywagner:Oceananigans.jl/ (main✗) $ JULIA_NUM_THREADS=3 julia --project race_condition_test.jl [19:58:49]; [ Info: Oceananigans will use 3 threads; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (98.396 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (6.548 seconds).; [ Info: Simulation is stopping. Model iteration 100 has hit or exceeded simulation stop iteration 100.; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9543734841879783, 1.9543734841879783, 1.9543734841879783, 1.9560232965664703, 1.9567081251492398, 1.9567081251492398]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308177839
https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1308147894:20,Testability,test,test,20,"I am not sure, this test was always running pretty fast (it is always running on the CPU). Maybe tartarus' CPU is being abused at the moment",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1308147894
https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688:21,Availability,down,down,21,"The test that slowed down significantly is this. https://github.com/CliMA/Oceananigans.jl/blob/0163628e3dc810eed76440cc6ceef9870cc50f7f/test/test_matrix_poisson_solver.jl#L141-L148. which runs _only_ on the CPU. I don't know what's the problem with tartarus, but we could add; ```; if arch isa CPU; @info "" Testing Sparse Approximate Inverse..."". A = sprand(100, 100, 0.1); A = A + A' + 1I; A⁻¹ = sparse(inv(Array(A))); M = sparse_approximate_inverse(A, ε = 0.0, nzrel = size(A, 1)); ; @test all(Array(M) .≈ A⁻¹); end; ```; to disable the test on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688
https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688:4,Testability,test,test,4,"The test that slowed down significantly is this. https://github.com/CliMA/Oceananigans.jl/blob/0163628e3dc810eed76440cc6ceef9870cc50f7f/test/test_matrix_poisson_solver.jl#L141-L148. which runs _only_ on the CPU. I don't know what's the problem with tartarus, but we could add; ```; if arch isa CPU; @info "" Testing Sparse Approximate Inverse..."". A = sprand(100, 100, 0.1); A = A + A' + 1I; A⁻¹ = sparse(inv(Array(A))); M = sparse_approximate_inverse(A, ε = 0.0, nzrel = size(A, 1)); ; @test all(Array(M) .≈ A⁻¹); end; ```; to disable the test on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688
https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688:136,Testability,test,test,136,"The test that slowed down significantly is this. https://github.com/CliMA/Oceananigans.jl/blob/0163628e3dc810eed76440cc6ceef9870cc50f7f/test/test_matrix_poisson_solver.jl#L141-L148. which runs _only_ on the CPU. I don't know what's the problem with tartarus, but we could add; ```; if arch isa CPU; @info "" Testing Sparse Approximate Inverse..."". A = sprand(100, 100, 0.1); A = A + A' + 1I; A⁻¹ = sparse(inv(Array(A))); M = sparse_approximate_inverse(A, ε = 0.0, nzrel = size(A, 1)); ; @test all(Array(M) .≈ A⁻¹); end; ```; to disable the test on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688
https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688:307,Testability,Test,Testing,307,"The test that slowed down significantly is this. https://github.com/CliMA/Oceananigans.jl/blob/0163628e3dc810eed76440cc6ceef9870cc50f7f/test/test_matrix_poisson_solver.jl#L141-L148. which runs _only_ on the CPU. I don't know what's the problem with tartarus, but we could add; ```; if arch isa CPU; @info "" Testing Sparse Approximate Inverse..."". A = sprand(100, 100, 0.1); A = A + A' + 1I; A⁻¹ = sparse(inv(Array(A))); M = sparse_approximate_inverse(A, ε = 0.0, nzrel = size(A, 1)); ; @test all(Array(M) .≈ A⁻¹); end; ```; to disable the test on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688
https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688:487,Testability,test,test,487,"The test that slowed down significantly is this. https://github.com/CliMA/Oceananigans.jl/blob/0163628e3dc810eed76440cc6ceef9870cc50f7f/test/test_matrix_poisson_solver.jl#L141-L148. which runs _only_ on the CPU. I don't know what's the problem with tartarus, but we could add; ```; if arch isa CPU; @info "" Testing Sparse Approximate Inverse..."". A = sprand(100, 100, 0.1); A = A + A' + 1I; A⁻¹ = sparse(inv(Array(A))); M = sparse_approximate_inverse(A, ε = 0.0, nzrel = size(A, 1)); ; @test all(Array(M) .≈ A⁻¹); end; ```; to disable the test on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688
https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688:539,Testability,test,test,539,"The test that slowed down significantly is this. https://github.com/CliMA/Oceananigans.jl/blob/0163628e3dc810eed76440cc6ceef9870cc50f7f/test/test_matrix_poisson_solver.jl#L141-L148. which runs _only_ on the CPU. I don't know what's the problem with tartarus, but we could add; ```; if arch isa CPU; @info "" Testing Sparse Approximate Inverse..."". A = sprand(100, 100, 0.1); A = A + A' + 1I; A⁻¹ = sparse(inv(Array(A))); M = sparse_approximate_inverse(A, ε = 0.0, nzrel = size(A, 1)); ; @test all(Array(M) .≈ A⁻¹); end; ```; to disable the test on tartarus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2813#issuecomment-1312598688
https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1317183274:237,Security,validat,validation,237,"For large complex domains, we can obtain an excellent speedup. In the case of the quarter-degree ocean (where the roughly 42% of the domain is immersed), the speedup is about 1.47X!. To document the speedup, here is the profile for the `validation/near_global_lat_lon/near_global_quarter_degree.jl` . On main:; <img width=""1512"" alt=""Screen Shot 2022-11-16 at 10 14 53 AM"" src=""https://user-images.githubusercontent.com/33547697/202219607-aa98d26d-6f6c-4c04-9692-cf9907ad14d6.png"">. On this branch:; <img width=""1512"" alt=""Screen Shot 2022-11-16 at 10 14 48 AM"" src=""https://user-images.githubusercontent.com/33547697/202219640-3476d0a0-e70d-4af8-aa95-f131c86d5379.png"">. The tendency calculations (the four large kernels in the profile) speedup of more than a factor 2!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1317183274
https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1317226117:48,Modifiability,extend,extend,48,Awesome!. How big is `wet_cells_map`? Should we extend `ImmersedBoundaryGrid` so that users can opt in/opt out of this feature?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1317226117
https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1317283775:314,Integrability,Depend,Depending,314,"> Awesome!; > ; > How big is `wet_cells_map`? Should we extend `ImmersedBoundaryGrid` so that users can opt in/opt out of this feature?. It is not that large, I figured that with `UInt16` we can cover almost all practical cases. `wet_cell_map` will be a vector of _active_ locations defined by a tuple of indices. Depending on what % of the domain is active, the size of the map will be. `prod(size(grid)) * %active * 3 * sizeof(Type)`. where `Type` is the `UInt` with the minimum size required to represent `maximum(size(grid)))`; In the example of the ocean, where 57% of the domain is active, the map is 42.75% the size of a standard Float64 `Field`:. a UInt16 occupies 2 bytes, so compared to a field, the map is . `(0.57 * 3 * 2) / 8 ≈ 0.4275` . I guess adding the opt in/opt out can be nice and is very easy because of . https://github.com/CliMA/Oceananigans.jl/blob/b7835edbac0a7318d49462addb1c1046014e39c4/src/ImmersedBoundaries/wet_cells_map.jl#L10-L21. which is used now to calculate the map only when we construct the model.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1317283775
https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1317283775:56,Modifiability,extend,extend,56,"> Awesome!; > ; > How big is `wet_cells_map`? Should we extend `ImmersedBoundaryGrid` so that users can opt in/opt out of this feature?. It is not that large, I figured that with `UInt16` we can cover almost all practical cases. `wet_cell_map` will be a vector of _active_ locations defined by a tuple of indices. Depending on what % of the domain is active, the size of the map will be. `prod(size(grid)) * %active * 3 * sizeof(Type)`. where `Type` is the `UInt` with the minimum size required to represent `maximum(size(grid)))`; In the example of the ocean, where 57% of the domain is active, the map is 42.75% the size of a standard Float64 `Field`:. a UInt16 occupies 2 bytes, so compared to a field, the map is . `(0.57 * 3 * 2) / 8 ≈ 0.4275` . I guess adding the opt in/opt out can be nice and is very easy because of . https://github.com/CliMA/Oceananigans.jl/blob/b7835edbac0a7318d49462addb1c1046014e39c4/src/ImmersedBoundaries/wet_cells_map.jl#L10-L21. which is used now to calculate the map only when we construct the model.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1317283775
https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1384307957:49,Testability,test,tests,49,"@glwagner @navidcy, should be ready to merge (if tests pass)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1384307957
https://github.com/CliMA/Oceananigans.jl/pull/2818#issuecomment-1311951022:91,Deployability,update,update,91,"I don't think you need to change it. I'm running on an older version of Julia, so I didn't update to 0.78.1. But the MWE I added in https://github.com/tomchor/Oceanostics.jl/issues/91 seems to work with 0.78.1 on main without the fix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2818#issuecomment-1311951022
https://github.com/CliMA/Oceananigans.jl/pull/2819#issuecomment-1312068212:95,Testability,test,tests,95,"We should check the docs example directly, but it was just fine (at higher resolution) in some tests I did.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2819#issuecomment-1312068212
https://github.com/CliMA/Oceananigans.jl/pull/2820#issuecomment-1312184365:53,Energy Efficiency,Energy,EnergyConserving,53,I guess they are identical. Maybe we can change the `EnergyConserving` and `EnstrophyConserving` to `CenteredEnergyConserving` and `CenteredEnstrophyConserving`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2820#issuecomment-1312184365
https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384614027:228,Modifiability,variab,variable,228,"@glwagner, @simone-silvestri: Question: How is Δx^faa, defined for the F at the edge of the domain?. Is it the distance between `C[1] - F[1]`? (don't think so...); Or distance between `C[1] - C[0]`?. For a curvilinear grid with variable distances (as the `OrthogonalSphericalShellGrid` we need to compute where the halo faces and centers would be if we actually extended the grid, right? We can't just replicate the `C[2] - C[1]` distances `Hx` times...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384614027
https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384614027:362,Modifiability,extend,extended,362,"@glwagner, @simone-silvestri: Question: How is Δx^faa, defined for the F at the edge of the domain?. Is it the distance between `C[1] - F[1]`? (don't think so...); Or distance between `C[1] - C[0]`?. For a curvilinear grid with variable distances (as the `OrthogonalSphericalShellGrid` we need to compute where the halo faces and centers would be if we actually extended the grid, right? We can't just replicate the `C[2] - C[1]` distances `Hx` times...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384614027
https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384647750:545,Modifiability,variab,variably,545,"The MIT grid seems to just copy the metrics from the first cell... ```; julia> grid = ConformalCubedSphereGrid(cs32_filepath, CPU(), Nz=1, z=(-1, 0));; ┌ Warning: ConformalCubedSphereGrid is experimental: use with caution!; └ @ Oceananigans.CubedSpheres ~/Research/OC.jl/src/CubedSpheres/conformal_cubed_sphere_grid.jl:163. julia> fgrid = grid.faces[1]; 32×32×1 OrthogonalSphericalShellGrid{Float64, FullyConnected, FullyConnected, Bounded} on CPU with 1×1×1 halo and with precomputed metrics; ├── longitude: FullyConnected λ ∈ [-45.0, 44.0312) variably spaced with min(Δλ)=80152.3, max(Δλ)=3.23804e5; ├── latitude: FullyConnected φ ∈ [-45.0, 42.2888) variably spaced with min(Δφ)=80152.3, max(Δφ)=3.23804e5; └── z: Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=1.0. julia> fgrid.Δxᶠᶠᵃ[0:3, 0:3]; 4×4 Matrix{Float64}:; 80152.3 80152.3 1.36265e5 170108.0; 80152.3 80152.3 1.36265e5 170108.0; 1.33313e5 1.33313e5 1.51133e5 1.76175e5; 1.69174e5 1.69174e5 1.75781e5 1.90232e5; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384647750
https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384647750:652,Modifiability,variab,variably,652,"The MIT grid seems to just copy the metrics from the first cell... ```; julia> grid = ConformalCubedSphereGrid(cs32_filepath, CPU(), Nz=1, z=(-1, 0));; ┌ Warning: ConformalCubedSphereGrid is experimental: use with caution!; └ @ Oceananigans.CubedSpheres ~/Research/OC.jl/src/CubedSpheres/conformal_cubed_sphere_grid.jl:163. julia> fgrid = grid.faces[1]; 32×32×1 OrthogonalSphericalShellGrid{Float64, FullyConnected, FullyConnected, Bounded} on CPU with 1×1×1 halo and with precomputed metrics; ├── longitude: FullyConnected λ ∈ [-45.0, 44.0312) variably spaced with min(Δλ)=80152.3, max(Δλ)=3.23804e5; ├── latitude: FullyConnected φ ∈ [-45.0, 42.2888) variably spaced with min(Δφ)=80152.3, max(Δφ)=3.23804e5; └── z: Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=1.0. julia> fgrid.Δxᶠᶠᵃ[0:3, 0:3]; 4×4 Matrix{Float64}:; 80152.3 80152.3 1.36265e5 170108.0; 80152.3 80152.3 1.36265e5 170108.0; 1.33313e5 1.33313e5 1.51133e5 1.76175e5; 1.69174e5 1.69174e5 1.75781e5 1.90232e5; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384647750
https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384677447:485,Deployability,configurat,configuration,485,"@simone-silvestri, from symmetry arguments, the metrics on the halo on one face should be the same as the metrics on some other face. E.g., `Δxᶠᶠᵃ[0]` on one face should be either `Δxᶠᶠᵃ[grid.Nx+1]` or `Δyᶠᶠᵃ[grid.Ny+1]` on the other face (or something like that, depending on whether a rotation applies). Right?. So we could hardcode these in from a single face instead of constructing 6 faces and filling halos to fill the halo metrics. It will assume, thought, that a specific face configuration is implied.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384677447
https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384677447:264,Integrability,depend,depending,264,"@simone-silvestri, from symmetry arguments, the metrics on the halo on one face should be the same as the metrics on some other face. E.g., `Δxᶠᶠᵃ[0]` on one face should be either `Δxᶠᶠᵃ[grid.Nx+1]` or `Δyᶠᶠᵃ[grid.Ny+1]` on the other face (or something like that, depending on whether a rotation applies). Right?. So we could hardcode these in from a single face instead of constructing 6 faces and filling halos to fill the halo metrics. It will assume, thought, that a specific face configuration is implied.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384677447
https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384677447:485,Modifiability,config,configuration,485,"@simone-silvestri, from symmetry arguments, the metrics on the halo on one face should be the same as the metrics on some other face. E.g., `Δxᶠᶠᵃ[0]` on one face should be either `Δxᶠᶠᵃ[grid.Nx+1]` or `Δyᶠᶠᵃ[grid.Ny+1]` on the other face (or something like that, depending on whether a rotation applies). Right?. So we could hardcode these in from a single face instead of constructing 6 faces and filling halos to fill the halo metrics. It will assume, thought, that a specific face configuration is implied.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2836#issuecomment-1384677447
https://github.com/CliMA/Oceananigans.jl/issues/2840#issuecomment-1327966801:81,Availability,avail,available,81,"> It looks like the problem is because NCDatasets needs NetCDF_jll, which is not available for Power9.; https://github.com/JuliaBinaryWrappers/NetCDF_jll.jl#platforms. You may need to raise an issue with `NetCDF_jll.jl`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2840#issuecomment-1327966801
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328167577:139,Usability,simpl,simple,139,"The issue with `Δx` is that these are already defined as ""GridMetricOperation""s, eg objects that can be used within abstract operations. A simple solution is to follow the ""nodes"" semantics (might be better anyways)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328167577
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328353618:10,Testability,test,tests,10,Let's add tests also?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328353618
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328360111:12,Testability,test,tests,12,> Let's add tests also?. > And use these functions in examples in place of things like Δxaaf?. For sure. I'm just waiting for us to converge on usage in https://github.com/CliMA/Oceananigans.jl/issues/2058 before I include these changes.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328360111
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1419813099:339,Energy Efficiency,meter,meters,339,"> I'm not sure what do to for spacings for `LatLonGrid`s. It has spacings in `x`, `y`, `λ`, `φ`:; > ; > ```julia; > Δxᶜᶜᵃ Δxᶜᶠᵃ Δxᶠᶜᵃ Δxᶠᶠᵃ Δyᶜᶠᵃ Δyᶠᶜᵃ Δzᵃᵃᶜ Δzᵃᵃᶠ Δλᶜᵃᵃ Δλᶠᵃᵃ Δφᵃᶜᵃ Δφᵃᶠᵃ; > ```; > ; > Do we want to create separate `xspacings()` and `λspacings()` functions here?. Yes I think we need both --- one for linear distances (in meters) and one for angular distances (in degrees)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1419813099
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1427140335:1413,Testability,test,tests,1413,"rn illustrated below:. ```julia; julia> grid = RectilinearGrid(size=(4, 4, 1), extent=(1,1,1)); 4×4×1 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.25; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.25; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=1.0. julia> xnodes(grid, Center(), Center(), Face()); 4-element view(OffsetArray(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, -2:7), 1:4) with eltype Float64:; 0.125; 0.375; 0.625; 0.875. julia> xnode(2,2,2, grid, Center(), Center(), Face()); 0.375. julia> xspacings(grid, Center(), Center(), Face()); 0.25. julia> xspacing(1, 2, 3, grid, Center(), Center(), Face()); 0.25; ```. These functions also appropriately handle stretched coordinates. In addition, both `xspacings()` and `xnodes()` have a `with_halos` kwarg that controls whether of not halos points are included. Convenience functions with fewer arguments are also defined for the cases where that's possible. For example:. ```julia; julia> xnode(2,2,2, grid, Center(), Center(), Face()); 0.375. julia> xnode(2, grid, Center()); 0.375; ```. I added tests for these functions for every grid in a way that doesn't create new grid instantiations. @glwagner the only issue left on my end is what to do about `xnodes_reshaped()`. For now I've renamed it to `reshaped_xnodes()` like you suggested, but I'm reluctant to merge that functionality into `xnodes()` since it would complicate the code and I couldn't find much use for the reshaped array. I've tried plotting different types of plots with different packages and none of them required reshaping the nodes array, so maybe that behavior comes from old versions of some plotting packages. I'd vote for us keeping things as it is (a separate function called `reshaped_xnodes()` (and same for y, z)). Or to just nuke that function, since reshaping the array isn't hard for the user to do anyway.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1427140335
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1464182824:77,Testability,test,tests,77,"ok, let's see how many things I broke now... (I'll see what happens with the tests and try to fix them...!)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1464182824
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1464621131:43,Usability,simpl,simple,43,"Personally I think it makes sense to start simple from an API perspective, and add convenience when its warranted",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1464621131
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468173242:26,Testability,test,tests,26,@tomchor shall I merge if tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468173242
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468277435:239,Availability,redundant,redundant,239,"It was my impression that `Δx` worked differently. I even asked a similar question [here](https://github.com/CliMA/Oceananigans.jl/issues/2058#issuecomment-1368277630) about it. But if it returns the same thing, maybe indeed `xspacing` is redundant. I believe the functions `xspacings()` and such (which return an array) are novel and necessary though, right @simone-silvestri ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468277435
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468277435:239,Safety,redund,redundant,239,"It was my impression that `Δx` worked differently. I even asked a similar question [here](https://github.com/CliMA/Oceananigans.jl/issues/2058#issuecomment-1368277630) about it. But if it returns the same thing, maybe indeed `xspacing` is redundant. I believe the functions `xspacings()` and such (which return an array) are novel and necessary though, right @simone-silvestri ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468277435
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468296362:36,Availability,redundant,redundant,36,"That's true that `xspacing` etc are redundant. We could also change `xspacings` to `Δx(grid, loc...)`...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468296362
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468296362:36,Safety,redund,redundant,36,"That's true that `xspacing` etc are redundant. We could also change `xspacings` to `Δx(grid, loc...)`...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468296362
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468307924:172,Integrability,interface,interface,172,Or we can rename the grid metric operation to `dx`? Just want to make sure we consider all options. I think in our original discussion we voted for `xspacings` in the user interface for verbosity. If that's priority 1 then I agree it motivates also replacing `Δx` with `xspacing`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468307924
https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468643420:5,Testability,test,tests,5,"omg, tests seems to be going to pass...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468643420
https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1332805489:19,Performance,perform,performance,19,does it change the performance?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1332805489
https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1333146083:75,Testability,benchmark,benchmarks,75,I think it will for slices (I'd have to go digging but I recall mysterious benchmarks showing 10x slowdown for yz models). Probably worth doing the benchmarks before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1333146083
https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1333146083:148,Testability,benchmark,benchmarks,148,I think it will for slices (I'd have to go digging but I recall mysterious benchmarks showing 10x slowdown for yz models). Probably worth doing the benchmarks before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1333146083
https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1454775895:26,Testability,benchmark,benchmarking,26,I'll merge this now since benchmarking / major changes are planned anyways...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2843#issuecomment-1454775895
https://github.com/CliMA/Oceananigans.jl/pull/2847#issuecomment-1344652277:120,Deployability,release,released,120,"OK, after https://github.com/Alexander-Barth/NCDatasets.jl/pull/193 we just have to wait for NCDatatsets v0.12.10 to be released and then we can merge this. And we'll be then free from conditional `using NCDatasets`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2847#issuecomment-1344652277
https://github.com/CliMA/Oceananigans.jl/pull/2847#issuecomment-1345375567:63,Testability,test,tests,63,works on satori; works on my M1 MacBook Pro... I'll merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2847#issuecomment-1345375567
https://github.com/CliMA/Oceananigans.jl/pull/2852#issuecomment-1345188207:69,Deployability,release,release,69,If I understand correctly this is a breaking change so bump up minor release?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2852#issuecomment-1345188207
https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347470713:87,Integrability,wrap,wrap,87,"Right, we cannot form operations with reductions. To operate on reductions, we have to wrap them in a `Field`, so that they can be computed, stored, and _then_ used via the stored result. You can write. ```julia; U = Field(Average(model.velocities.u)); U / 2; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347470713
https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347473891:222,Availability,error,error,222,We could to suggest wrapping the `Reduction` in a `Field`. I'm not 100% sure the best way to inject that kind of hint; we don't own operations like `/` so I think to do that we would have to define them (and then throw an error). Hmm.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347473891
https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347473891:20,Integrability,wrap,wrapping,20,We could to suggest wrapping the `Reduction` in a `Field`. I'm not 100% sure the best way to inject that kind of hint; we don't own operations like `/` so I think to do that we would have to define them (and then throw an error). Hmm.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347473891
https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347473891:93,Integrability,inject,inject,93,We could to suggest wrapping the `Reduction` in a `Field`. I'm not 100% sure the best way to inject that kind of hint; we don't own operations like `/` so I think to do that we would have to define them (and then throw an error). Hmm.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347473891
https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347473891:93,Security,inject,inject,93,We could to suggest wrapping the `Reduction` in a `Field`. I'm not 100% sure the best way to inject that kind of hint; we don't own operations like `/` so I think to do that we would have to define them (and then throw an error). Hmm.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2856#issuecomment-1347473891
https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1349668016:157,Energy Efficiency,reduce,reduced,157,Huh. Is this a bug with `NCDatasets`? E.g. can you save a 0-dimensional array using `NCDatasets`? . I'm not sure what is desirable for NetCDF users. A field reduced in all dimensions is just a scalar. Right now we store this in a 0D array via. https://github.com/CliMA/Oceananigans.jl/blob/5d044fbda67bf8db13738cbaa5a703162cfcd94a/src/OutputWriters/netcdf_output_writer.jl#L489-L491. I don't know enough about NetCDF to say whether we should convert to a scalar in this case.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1349668016
https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1349668504:456,Availability,ERROR,ERROR,456,"And just to clarify, this is what `dropdims(data, dims=(1, 2, 3))` does:. ```julia; julia> a = reshape([1], 1, 1, 1); 1×1×1 Array{Int64, 3}:; [:, :, 1] =; 1. julia> dropdims(a, dims=(1, 2, 3)); 0-dimensional Array{Int64, 0}:; 1; ```. A 0D array can only contain one value, but I guess it still cannot be automatically cast to a scalar:. ```julia; julia> b = dropdims(a, dims=(1, 2, 3)); 0-dimensional Array{Int64, 0}:; 1. julia> b[]; 1. julia> Float32(b); ERROR: MethodError: no method matching Float32(::Array{Int64, 0}); Closest candidates are:; (::Type{T})(::AbstractChar) where T<:Union{AbstractChar, Number} at char.jl:50; (::Type{T})(::Base.TwicePrecision) where T<:Number at twiceprecision.jl:266; (::Type{T})(::Complex) where T<:Real at complex.jl:44; ...; Stacktrace:; [1] top-level scope; @ REPL[7]:1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1349668504
https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454:32,Availability,error,error,32,"Okay so this MWE reproduces the error:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); time = defDim(ds,""time"",Inf); v = defVar(ds,""temp"",Float32,(""time"",)); ds[""temp""][1] = b. close(ds); ```. However, if I create a variable without an unbouded dimension (i.e. without time) and do the same thing, it works properly:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); v = defVar(ds,""temp"",Float32,()); ds[""temp""][] = b. close(ds); ```. So I think this is an edge case that NCDatasets doesn't yet handle well. I'm gonna create an issue there and see what they say.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454
https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454:294,Modifiability,variab,variable,294,"Okay so this MWE reproduces the error:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); time = defDim(ds,""time"",Inf); v = defVar(ds,""temp"",Float32,(""time"",)); ds[""temp""][1] = b. close(ds); ```. However, if I create a variable without an unbouded dimension (i.e. without time) and do the same thing, it works properly:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); v = defVar(ds,""temp"",Float32,()); ds[""temp""][] = b. close(ds); ```. So I think this is an edge case that NCDatasets doesn't yet handle well. I'm gonna create an issue there and see what they say.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454
https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454:150,Testability,test,test,150,"Okay so this MWE reproduces the error:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); time = defDim(ds,""time"",Inf); v = defVar(ds,""temp"",Float32,(""time"",)); ds[""temp""][1] = b. close(ds); ```. However, if I create a variable without an unbouded dimension (i.e. without time) and do the same thing, it works properly:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); v = defVar(ds,""temp"",Float32,()); ds[""temp""][] = b. close(ds); ```. So I think this is an edge case that NCDatasets doesn't yet handle well. I'm gonna create an issue there and see what they say.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454
https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454:506,Testability,test,test,506,"Okay so this MWE reproduces the error:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); time = defDim(ds,""time"",Inf); v = defVar(ds,""temp"",Float32,(""time"",)); ds[""temp""][1] = b. close(ds); ```. However, if I create a variable without an unbouded dimension (i.e. without time) and do the same thing, it works properly:. ```julia; using NCDatasets. a = reshape([1.], 1, 1, 1); b = dropdims(a, dims=(1, 2, 3)). ds = NCDataset(""/tmp/test.nc"",""c""); v = defVar(ds,""temp"",Float32,()); ds[""temp""][] = b. close(ds); ```. So I think this is an edge case that NCDatasets doesn't yet handle well. I'm gonna create an issue there and see what they say.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2857#issuecomment-1362066454
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1364892709:56,Testability,benchmark,benchmarked,56,Sounds great! Can you post here the code with which you benchmarked it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1364892709
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765:38,Testability,Benchmark,BenchmarkTools,38,"Yep! ; ``` julia; using Oceananigans, BenchmarkTools. using Oceananigans.Fields: interpolate. # Regularly spaced grids are interpolated differently; grid = RectilinearGrid(size=(100, 100, 100), x = [i^1.1 for i in 1:101], y = [i^1.2 for i in 1:101], z = [i^2 for i in 1:101]). field = CenterField(grid). @benchmark interpolate(field, rand(), rand(), -rand()); ```; ```bash; BenchmarkTools.Trial: 10000 samples with 181 evaluations.; Range (min … max): 584.481 ns … 26.258 μs ┊ GC (min … max): 0.00% … 97.60%; Time (median): 612.343 ns ┊ GC (median): 0.00%; Time (mean ± σ): 634.835 ns ± 300.484 ns ┊ GC (mean ± σ): 0.40% ± 0.98%. ▆██▄▂▁ ▂; ██████▇▇▆▆▅▅▅▅▆▅▄▄▅▃▁▄▃▁▁▃▁▃▁▃▁▃▁▄▃▁▁▃▃▁▁▃▃▁▁▃▁▁▁▁▁▁▁▃▄▄▁▁▃▃█ █; 584 ns Histogram: log(frequency) by time 1.49 μs <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. Adding the inbounding improves this to:; ```bash; BenchmarkTools.Trial: 10000 samples with 182 evaluations.; Range (min … max): 577.841 ns … 28.209 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 605.769 ns ┊ GC (median): 0.00%; Time (mean ± σ): 625.685 ns ± 444.392 ns ┊ GC (mean ± σ): 0.42% ± 0.98%. █▃ ; ▄▄▄▄▄▅██▆▅▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▂; 578 ns Histogram: frequency by time 839 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. And removing the `issorted` check improves a lot more to:; ```bash; BenchmarkTools.Trial: 10000 samples with 911 evaluations.; Range (min … max): 118.231 ns … 11.848 μs ┊ GC (min … max): 0.00% … 98.73%; Time (median): 125.412 ns ┊ GC (median): 0.00%; Time (mean ± σ): 135.838 ns ± 198.933 ns ┊ GC (mean ± σ): 2.87% ± 2.40%. █▅ ; ▆██▆▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▁▁▂▂▂▁▁▂▂▁▂▁▂▂▁▂▂▁▂▁▂▁▂▁▁▂▂ ▂; 118 ns Histogram: frequency by time 324 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765:305,Testability,benchmark,benchmark,305,"Yep! ; ``` julia; using Oceananigans, BenchmarkTools. using Oceananigans.Fields: interpolate. # Regularly spaced grids are interpolated differently; grid = RectilinearGrid(size=(100, 100, 100), x = [i^1.1 for i in 1:101], y = [i^1.2 for i in 1:101], z = [i^2 for i in 1:101]). field = CenterField(grid). @benchmark interpolate(field, rand(), rand(), -rand()); ```; ```bash; BenchmarkTools.Trial: 10000 samples with 181 evaluations.; Range (min … max): 584.481 ns … 26.258 μs ┊ GC (min … max): 0.00% … 97.60%; Time (median): 612.343 ns ┊ GC (median): 0.00%; Time (mean ± σ): 634.835 ns ± 300.484 ns ┊ GC (mean ± σ): 0.40% ± 0.98%. ▆██▄▂▁ ▂; ██████▇▇▆▆▅▅▅▅▆▅▄▄▅▃▁▄▃▁▁▃▁▃▁▃▁▃▁▄▃▁▁▃▃▁▁▃▃▁▁▃▁▁▁▁▁▁▁▃▄▄▁▁▃▃█ █; 584 ns Histogram: log(frequency) by time 1.49 μs <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. Adding the inbounding improves this to:; ```bash; BenchmarkTools.Trial: 10000 samples with 182 evaluations.; Range (min … max): 577.841 ns … 28.209 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 605.769 ns ┊ GC (median): 0.00%; Time (mean ± σ): 625.685 ns ± 444.392 ns ┊ GC (mean ± σ): 0.42% ± 0.98%. █▃ ; ▄▄▄▄▄▅██▆▅▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▂; 578 ns Histogram: frequency by time 839 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. And removing the `issorted` check improves a lot more to:; ```bash; BenchmarkTools.Trial: 10000 samples with 911 evaluations.; Range (min … max): 118.231 ns … 11.848 μs ┊ GC (min … max): 0.00% … 98.73%; Time (median): 125.412 ns ┊ GC (median): 0.00%; Time (mean ± σ): 135.838 ns ± 198.933 ns ┊ GC (mean ± σ): 2.87% ± 2.40%. █▅ ; ▆██▆▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▁▁▂▂▂▁▁▂▂▁▂▁▂▂▁▂▂▁▂▁▂▁▂▁▁▂▂ ▂; 118 ns Histogram: frequency by time 324 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765:374,Testability,Benchmark,BenchmarkTools,374,"Yep! ; ``` julia; using Oceananigans, BenchmarkTools. using Oceananigans.Fields: interpolate. # Regularly spaced grids are interpolated differently; grid = RectilinearGrid(size=(100, 100, 100), x = [i^1.1 for i in 1:101], y = [i^1.2 for i in 1:101], z = [i^2 for i in 1:101]). field = CenterField(grid). @benchmark interpolate(field, rand(), rand(), -rand()); ```; ```bash; BenchmarkTools.Trial: 10000 samples with 181 evaluations.; Range (min … max): 584.481 ns … 26.258 μs ┊ GC (min … max): 0.00% … 97.60%; Time (median): 612.343 ns ┊ GC (median): 0.00%; Time (mean ± σ): 634.835 ns ± 300.484 ns ┊ GC (mean ± σ): 0.40% ± 0.98%. ▆██▄▂▁ ▂; ██████▇▇▆▆▅▅▅▅▆▅▄▄▅▃▁▄▃▁▁▃▁▃▁▃▁▃▁▄▃▁▁▃▃▁▁▃▃▁▁▃▁▁▁▁▁▁▁▃▄▄▁▁▃▃█ █; 584 ns Histogram: log(frequency) by time 1.49 μs <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. Adding the inbounding improves this to:; ```bash; BenchmarkTools.Trial: 10000 samples with 182 evaluations.; Range (min … max): 577.841 ns … 28.209 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 605.769 ns ┊ GC (median): 0.00%; Time (mean ± σ): 625.685 ns ± 444.392 ns ┊ GC (mean ± σ): 0.42% ± 0.98%. █▃ ; ▄▄▄▄▄▅██▆▅▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▂; 578 ns Histogram: frequency by time 839 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. And removing the `issorted` check improves a lot more to:; ```bash; BenchmarkTools.Trial: 10000 samples with 911 evaluations.; Range (min … max): 118.231 ns … 11.848 μs ┊ GC (min … max): 0.00% … 98.73%; Time (median): 125.412 ns ┊ GC (median): 0.00%; Time (mean ± σ): 135.838 ns ± 198.933 ns ┊ GC (mean ± σ): 2.87% ± 2.40%. █▅ ; ▆██▆▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▁▁▂▂▂▁▁▂▂▁▂▁▂▂▁▂▂▁▂▁▂▁▂▁▁▂▂ ▂; 118 ns Histogram: frequency by time 324 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765:723,Testability,log,log,723,"Yep! ; ``` julia; using Oceananigans, BenchmarkTools. using Oceananigans.Fields: interpolate. # Regularly spaced grids are interpolated differently; grid = RectilinearGrid(size=(100, 100, 100), x = [i^1.1 for i in 1:101], y = [i^1.2 for i in 1:101], z = [i^2 for i in 1:101]). field = CenterField(grid). @benchmark interpolate(field, rand(), rand(), -rand()); ```; ```bash; BenchmarkTools.Trial: 10000 samples with 181 evaluations.; Range (min … max): 584.481 ns … 26.258 μs ┊ GC (min … max): 0.00% … 97.60%; Time (median): 612.343 ns ┊ GC (median): 0.00%; Time (mean ± σ): 634.835 ns ± 300.484 ns ┊ GC (mean ± σ): 0.40% ± 0.98%. ▆██▄▂▁ ▂; ██████▇▇▆▆▅▅▅▅▆▅▄▄▅▃▁▄▃▁▁▃▁▃▁▃▁▃▁▄▃▁▁▃▃▁▁▃▃▁▁▃▁▁▁▁▁▁▁▃▄▄▁▁▃▃█ █; 584 ns Histogram: log(frequency) by time 1.49 μs <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. Adding the inbounding improves this to:; ```bash; BenchmarkTools.Trial: 10000 samples with 182 evaluations.; Range (min … max): 577.841 ns … 28.209 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 605.769 ns ┊ GC (median): 0.00%; Time (mean ± σ): 625.685 ns ± 444.392 ns ┊ GC (mean ± σ): 0.42% ± 0.98%. █▃ ; ▄▄▄▄▄▅██▆▅▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▂; 578 ns Histogram: frequency by time 839 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. And removing the `issorted` check improves a lot more to:; ```bash; BenchmarkTools.Trial: 10000 samples with 911 evaluations.; Range (min … max): 118.231 ns … 11.848 μs ┊ GC (min … max): 0.00% … 98.73%; Time (median): 125.412 ns ┊ GC (median): 0.00%; Time (mean ± σ): 135.838 ns ± 198.933 ns ┊ GC (mean ± σ): 2.87% ± 2.40%. █▅ ; ▆██▆▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▁▁▂▂▂▁▁▂▂▁▂▁▂▂▁▂▂▁▂▁▂▁▂▁▁▂▂ ▂; 118 ns Histogram: frequency by time 324 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765:860,Testability,Benchmark,BenchmarkTools,860,"Yep! ; ``` julia; using Oceananigans, BenchmarkTools. using Oceananigans.Fields: interpolate. # Regularly spaced grids are interpolated differently; grid = RectilinearGrid(size=(100, 100, 100), x = [i^1.1 for i in 1:101], y = [i^1.2 for i in 1:101], z = [i^2 for i in 1:101]). field = CenterField(grid). @benchmark interpolate(field, rand(), rand(), -rand()); ```; ```bash; BenchmarkTools.Trial: 10000 samples with 181 evaluations.; Range (min … max): 584.481 ns … 26.258 μs ┊ GC (min … max): 0.00% … 97.60%; Time (median): 612.343 ns ┊ GC (median): 0.00%; Time (mean ± σ): 634.835 ns ± 300.484 ns ┊ GC (mean ± σ): 0.40% ± 0.98%. ▆██▄▂▁ ▂; ██████▇▇▆▆▅▅▅▅▆▅▄▄▅▃▁▄▃▁▁▃▁▃▁▃▁▃▁▄▃▁▁▃▃▁▁▃▃▁▁▃▁▁▁▁▁▁▁▃▄▄▁▁▃▃█ █; 584 ns Histogram: log(frequency) by time 1.49 μs <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. Adding the inbounding improves this to:; ```bash; BenchmarkTools.Trial: 10000 samples with 182 evaluations.; Range (min … max): 577.841 ns … 28.209 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 605.769 ns ┊ GC (median): 0.00%; Time (mean ± σ): 625.685 ns ± 444.392 ns ┊ GC (mean ± σ): 0.42% ± 0.98%. █▃ ; ▄▄▄▄▄▅██▆▅▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▂; 578 ns Histogram: frequency by time 839 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. And removing the `issorted` check improves a lot more to:; ```bash; BenchmarkTools.Trial: 10000 samples with 911 evaluations.; Range (min … max): 118.231 ns … 11.848 μs ┊ GC (min … max): 0.00% … 98.73%; Time (median): 125.412 ns ┊ GC (median): 0.00%; Time (mean ± σ): 135.838 ns ± 198.933 ns ┊ GC (mean ± σ): 2.87% ± 2.40%. █▅ ; ▆██▆▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▁▁▂▂▂▁▁▂▂▁▂▁▂▂▁▂▂▁▂▁▂▁▂▁▁▂▂ ▂; 118 ns Histogram: frequency by time 324 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765:1352,Testability,Benchmark,BenchmarkTools,1352,"Yep! ; ``` julia; using Oceananigans, BenchmarkTools. using Oceananigans.Fields: interpolate. # Regularly spaced grids are interpolated differently; grid = RectilinearGrid(size=(100, 100, 100), x = [i^1.1 for i in 1:101], y = [i^1.2 for i in 1:101], z = [i^2 for i in 1:101]). field = CenterField(grid). @benchmark interpolate(field, rand(), rand(), -rand()); ```; ```bash; BenchmarkTools.Trial: 10000 samples with 181 evaluations.; Range (min … max): 584.481 ns … 26.258 μs ┊ GC (min … max): 0.00% … 97.60%; Time (median): 612.343 ns ┊ GC (median): 0.00%; Time (mean ± σ): 634.835 ns ± 300.484 ns ┊ GC (mean ± σ): 0.40% ± 0.98%. ▆██▄▂▁ ▂; ██████▇▇▆▆▅▅▅▅▆▅▄▄▅▃▁▄▃▁▁▃▁▃▁▃▁▃▁▄▃▁▁▃▃▁▁▃▃▁▁▃▁▁▁▁▁▁▁▃▄▄▁▁▃▃█ █; 584 ns Histogram: log(frequency) by time 1.49 μs <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. Adding the inbounding improves this to:; ```bash; BenchmarkTools.Trial: 10000 samples with 182 evaluations.; Range (min … max): 577.841 ns … 28.209 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 605.769 ns ┊ GC (median): 0.00%; Time (mean ± σ): 625.685 ns ± 444.392 ns ┊ GC (mean ± σ): 0.42% ± 0.98%. █▃ ; ▄▄▄▄▄▅██▆▅▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂ ▂; 578 ns Histogram: frequency by time 839 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```. And removing the `issorted` check improves a lot more to:; ```bash; BenchmarkTools.Trial: 10000 samples with 911 evaluations.; Range (min … max): 118.231 ns … 11.848 μs ┊ GC (min … max): 0.00% … 98.73%; Time (median): 125.412 ns ┊ GC (median): 0.00%; Time (mean ± σ): 135.838 ns ± 198.933 ns ┊ GC (mean ± σ): 2.87% ± 2.40%. █▅ ; ▆██▆▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▂▂▂▁▁▂▂▂▁▁▂▂▁▂▁▂▂▁▂▂▁▂▁▂▁▂▁▁▂▂ ▂; 118 ns Histogram: frequency by time 324 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365911765
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365912859:70,Testability,benchmark,benchmark,70,"For reference, with the same sized grid but regularly spaced the same benchmark gives this:; ```bash; BenchmarkTools.Trial: 10000 samples with 916 evaluations.; Range (min … max): 116.721 ns … 6.288 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 123.181 ns ┊ GC (median): 0.00%; Time (mean ± σ): 131.844 ns ± 171.767 ns ┊ GC (mean ± σ): 2.51% ± 2.39%. █ ; ▄▃▃▃▃▃█▅▄▅▇▇▄▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁▁▂▂▂▁▂▂▂▂ ▂; 117 ns Histogram: frequency by time 165 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365912859
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365912859:102,Testability,Benchmark,BenchmarkTools,102,"For reference, with the same sized grid but regularly spaced the same benchmark gives this:; ```bash; BenchmarkTools.Trial: 10000 samples with 916 evaluations.; Range (min … max): 116.721 ns … 6.288 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 123.181 ns ┊ GC (median): 0.00%; Time (mean ± σ): 131.844 ns ± 171.767 ns ┊ GC (mean ± σ): 2.51% ± 2.39%. █ ; ▄▃▃▃▃▃█▅▄▅▇▇▄▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁▁▂▂▂▁▂▂▂▂ ▂; 117 ns Histogram: frequency by time 165 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365912859
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1366633576:15,Deployability,update,update,15,@jagoosw let's update the link? @glwagner was it you that wrote this? Is the links that @jagoosw points to above correct?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1366633576
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1366915985:27,Deployability,update,update,27,@jagoosw I think we should update the link and merge,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1366915985
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689:724,Availability,error,errors,724,"I checked and `interpolate(field, x, y, z)` isn't used anywhere in the source code but in a few validation experiment. It basically does the same thing, but extracts the fields location and grid. I've tried changing it to just be a wrapper for `interpolate(field, LX, LY, LZ, grid, x, y, z)` like:; ```julia; @inline interpolate(field::AbstractField{LX, LY, LZ, G, T, N}, x, y, z) where {LX, LY, LZ, G, T, N} = interpolate(field, LX(), LY(), LZ(), G, x, y, z); ```; but this fails as a dynamic funciton invocation. I also tried changing it to:; ```; @inline function interpolate(field, x, y, z); LX, LY, LZ = location(field); grid = field.grid; return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); end; ```. but this errors with `Reason: unsupported call to an unknown function (call to jl_f_getfield)`, so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU. Also, if we want to test interpolation, it always fails on GPU because of scalar indexing if called directly, but if wrapped in a kernel function is fine:; ```julia; @kernel function test!(field, grid, res, x, y, z); n = @index(Global); LX, LY, LZ = location(field); @inbounds res[n] = interpolate(field, Center(), Center(), Center(), grid, x[n], y[n], z[n]); end; ```; (If I put `grid = field.grid ` in the kernel function it also fails like above).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689:232,Integrability,wrap,wrapper,232,"I checked and `interpolate(field, x, y, z)` isn't used anywhere in the source code but in a few validation experiment. It basically does the same thing, but extracts the fields location and grid. I've tried changing it to just be a wrapper for `interpolate(field, LX, LY, LZ, grid, x, y, z)` like:; ```julia; @inline interpolate(field::AbstractField{LX, LY, LZ, G, T, N}, x, y, z) where {LX, LY, LZ, G, T, N} = interpolate(field, LX(), LY(), LZ(), G, x, y, z); ```; but this fails as a dynamic funciton invocation. I also tried changing it to:; ```; @inline function interpolate(field, x, y, z); LX, LY, LZ = location(field); grid = field.grid; return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); end; ```. but this errors with `Reason: unsupported call to an unknown function (call to jl_f_getfield)`, so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU. Also, if we want to test interpolation, it always fails on GPU because of scalar indexing if called directly, but if wrapped in a kernel function is fine:; ```julia; @kernel function test!(field, grid, res, x, y, z); n = @index(Global); LX, LY, LZ = location(field); @inbounds res[n] = interpolate(field, Center(), Center(), Center(), grid, x[n], y[n], z[n]); end; ```; (If I put `grid = field.grid ` in the kernel function it also fails like above).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689:1042,Integrability,wrap,wrapped,1042,"I checked and `interpolate(field, x, y, z)` isn't used anywhere in the source code but in a few validation experiment. It basically does the same thing, but extracts the fields location and grid. I've tried changing it to just be a wrapper for `interpolate(field, LX, LY, LZ, grid, x, y, z)` like:; ```julia; @inline interpolate(field::AbstractField{LX, LY, LZ, G, T, N}, x, y, z) where {LX, LY, LZ, G, T, N} = interpolate(field, LX(), LY(), LZ(), G, x, y, z); ```; but this fails as a dynamic funciton invocation. I also tried changing it to:; ```; @inline function interpolate(field, x, y, z); LX, LY, LZ = location(field); grid = field.grid; return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); end; ```. but this errors with `Reason: unsupported call to an unknown function (call to jl_f_getfield)`, so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU. Also, if we want to test interpolation, it always fails on GPU because of scalar indexing if called directly, but if wrapped in a kernel function is fine:; ```julia; @kernel function test!(field, grid, res, x, y, z); n = @index(Global); LX, LY, LZ = location(field); @inbounds res[n] = interpolate(field, Center(), Center(), Center(), grid, x[n], y[n], z[n]); end; ```; (If I put `grid = field.grid ` in the kernel function it also fails like above).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689:96,Security,validat,validation,96,"I checked and `interpolate(field, x, y, z)` isn't used anywhere in the source code but in a few validation experiment. It basically does the same thing, but extracts the fields location and grid. I've tried changing it to just be a wrapper for `interpolate(field, LX, LY, LZ, grid, x, y, z)` like:; ```julia; @inline interpolate(field::AbstractField{LX, LY, LZ, G, T, N}, x, y, z) where {LX, LY, LZ, G, T, N} = interpolate(field, LX(), LY(), LZ(), G, x, y, z); ```; but this fails as a dynamic funciton invocation. I also tried changing it to:; ```; @inline function interpolate(field, x, y, z); LX, LY, LZ = location(field); grid = field.grid; return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); end; ```. but this errors with `Reason: unsupported call to an unknown function (call to jl_f_getfield)`, so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU. Also, if we want to test interpolation, it always fails on GPU because of scalar indexing if called directly, but if wrapped in a kernel function is fine:; ```julia; @kernel function test!(field, grid, res, x, y, z); n = @index(Global); LX, LY, LZ = location(field); @inbounds res[n] = interpolate(field, Center(), Center(), Center(), grid, x[n], y[n], z[n]); end; ```; (If I put `grid = field.grid ` in the kernel function it also fails like above).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689:945,Testability,test,test,945,"I checked and `interpolate(field, x, y, z)` isn't used anywhere in the source code but in a few validation experiment. It basically does the same thing, but extracts the fields location and grid. I've tried changing it to just be a wrapper for `interpolate(field, LX, LY, LZ, grid, x, y, z)` like:; ```julia; @inline interpolate(field::AbstractField{LX, LY, LZ, G, T, N}, x, y, z) where {LX, LY, LZ, G, T, N} = interpolate(field, LX(), LY(), LZ(), G, x, y, z); ```; but this fails as a dynamic funciton invocation. I also tried changing it to:; ```; @inline function interpolate(field, x, y, z); LX, LY, LZ = location(field); grid = field.grid; return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); end; ```. but this errors with `Reason: unsupported call to an unknown function (call to jl_f_getfield)`, so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU. Also, if we want to test interpolation, it always fails on GPU because of scalar indexing if called directly, but if wrapped in a kernel function is fine:; ```julia; @kernel function test!(field, grid, res, x, y, z); n = @index(Global); LX, LY, LZ = location(field); @inbounds res[n] = interpolate(field, Center(), Center(), Center(), grid, x[n], y[n], z[n]); end; ```; (If I put `grid = field.grid ` in the kernel function it also fails like above).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689:1108,Testability,test,test,1108,"I checked and `interpolate(field, x, y, z)` isn't used anywhere in the source code but in a few validation experiment. It basically does the same thing, but extracts the fields location and grid. I've tried changing it to just be a wrapper for `interpolate(field, LX, LY, LZ, grid, x, y, z)` like:; ```julia; @inline interpolate(field::AbstractField{LX, LY, LZ, G, T, N}, x, y, z) where {LX, LY, LZ, G, T, N} = interpolate(field, LX(), LY(), LZ(), G, x, y, z); ```; but this fails as a dynamic funciton invocation. I also tried changing it to:; ```; @inline function interpolate(field, x, y, z); LX, LY, LZ = location(field); grid = field.grid; return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); end; ```. but this errors with `Reason: unsupported call to an unknown function (call to jl_f_getfield)`, so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU. Also, if we want to test interpolation, it always fails on GPU because of scalar indexing if called directly, but if wrapped in a kernel function is fine:; ```julia; @kernel function test!(field, grid, res, x, y, z); n = @index(Global); LX, LY, LZ = location(field); @inbounds res[n] = interpolate(field, Center(), Center(), Center(), grid, x[n], y[n], z[n]); end; ```; (If I put `grid = field.grid ` in the kernel function it also fails like above).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1367924689
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370313413:11,Availability,error,errors,11,"> but this errors with Reason: unsupported call to an unknown function (call to jl_f_getfield), so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU. I think that's because within a kernal on the GPU, `field` in. ```julia; @inline function interpolate(field, x, y, z); LX, LY, LZ = location(field); grid = field.grid; return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); end; ```. is an OffsetArray and has no property `grid` (or a location).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370313413
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370316103:24,Availability,error,error,24,Interesting. I see that error a lot in #2782,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370316103
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395:26,Energy Efficiency,adapt,adapted,26,"Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394. And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395:50,Energy Efficiency,adapt,adapt,50,"Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394. And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395:238,Energy Efficiency,adapt,adapted,238,"Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394. And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395:26,Modifiability,adapt,adapted,26,"Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394. And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395:50,Modifiability,adapt,adapt,50,"Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394. And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395:238,Modifiability,adapt,adapted,238,"Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394. And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370320395
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014:28,Energy Efficiency,adapt,adapted,28,"> Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394; > ; > And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`. GOTHCA!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014:52,Energy Efficiency,adapt,adapt,52,"> Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394; > ; > And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`. GOTHCA!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014:252,Energy Efficiency,adapt,adapted,252,"> Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394; > ; > And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`. GOTHCA!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014:28,Modifiability,adapt,adapted,28,"> Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394; > ; > And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`. GOTHCA!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014:52,Modifiability,adapt,adapt,52,"> Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394; > ; > And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`. GOTHCA!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014:252,Modifiability,adapt,adapted,252,"> Yes, most containers are ""adapted"" on the GPU. We adapt `field` to `field.data`:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/src/Fields/field.jl#L394; > ; > And note that `field.data` will be further adapted. For example, `CuArray` becomes `CuDeviceArray`. GOTHCA!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370321014
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370810049:104,Security,validat,validation,104,> We might not. Where is interpolate used?. Its not used anywhere in the source code but in quite a few validation scripts,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370810049
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370811046:13,Availability,error,errors,13,"> > but this errors with Reason: unsupported call to an unknown function (call to jl_f_getfield), so I'm not sure its going to be straight forward or worthwhile trying to make the high level version work on GPU.; > ; > I think that's because within a kernal on the GPU, `field` in; > ; > ```julia; > @inline function interpolate(field, x, y, z); > LX, LY, LZ = location(field); > grid = field.grid; > return interpolate(field, LX(), LY(), LZ(), grid, x, y, z); > end; > ```; > ; > is an OffsetArray and has no property `grid` (or a location). Ah this makes sense, thank you",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1370811046
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1371166618:112,Security,validat,validation,112,> > We might not. Where is interpolate used?; > ; > Its not used anywhere in the source code but in quite a few validation scripts. Can you point us to a few?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1371166618
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1372326567:129,Security,validat,validation,129,I think these are the only two instances. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/validation/immersed_boundaries/cylinder_flow_with_tracer.jl#L243-L250. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/validation/near_global_lat_lon/cyclic_interpolate_utils.jl#L18-L30,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1372326567
https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1372326567:287,Security,validat,validation,287,I think these are the only two instances. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/validation/immersed_boundaries/cylinder_flow_with_tracer.jl#L243-L250. https://github.com/CliMA/Oceananigans.jl/blob/7debded91d24520d72857c120303bcd22b805104/validation/near_global_lat_lon/cyclic_interpolate_utils.jl#L18-L30,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1372326567
https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1367095694:138,Security,validat,validation,138,Seems like it has to do with the `Flat` direction: https://github.com/CliMA/Oceananigans.jl/blob/fbfc35348371981feabec10be96820029d4d5c91/validation/immersed_boundaries/flow_over_hills.jl#L32. Perhaps changing that to `Periodic` (plus other appropriate changes to the constructor) will fix it,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1367095694
https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1367096792:14,Availability,error,error,14,Also note the error comes from `ynode` (which is the `Flat` direction). I think that `ynode` is defined incorrectly for your grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1367096792
https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1370324971:0,Security,validat,validation,0,validation scripts are not maintained so oftentimes with breaking changes one need to tweak them a bit...; the scripts in the `examples` directory are maintained... we should include an example with immersed boundaries there,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1370324971
https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1480500435:133,Availability,down,downgrading,133,"~~Ok, I think this is fixed on `main`. Note that it is slow on the CPU due to issues being documented on #2996. That can be fixed by downgrading KernelAbstractions, if you know how to do it...~~. Nevermind, it's not fixed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1480500435
https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1480508282:475,Availability,error,errors,475,"A quick fix is to change. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/validation/immersed_boundaries/flow_over_hills.jl#L30. to . ```julia; underlying_grid = RectilinearGrid(architecture, size = (Nx, Nz), halo = (4, 4), ; ```. ie increase the number of halo points by 1. It does beg the question whether we should increase the number of default halo points to 4 from 3. Both #2989 and #2827 should increase the problem with cryptic errors.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1480508282
https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1480508282:113,Security,validat,validation,113,"A quick fix is to change. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/validation/immersed_boundaries/flow_over_hills.jl#L30. to . ```julia; underlying_grid = RectilinearGrid(architecture, size = (Nx, Nz), halo = (4, 4), ; ```. ie increase the number of halo points by 1. It does beg the question whether we should increase the number of default halo points to 4 from 3. Both #2989 and #2827 should increase the problem with cryptic errors.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2860#issuecomment-1480508282
https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1378195828:39,Deployability,update,update,39,Perhaps split out a PR with just CATKE update + a validation script that runs in 3D? Might make things quicker?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1378195828
https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1378195828:50,Security,validat,validation,50,Perhaps split out a PR with just CATKE update + a validation script that runs in 3D? Might make things quicker?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1378195828
https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1379478112:29,Testability,test,tests,29,Yeah. Something broke in the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1379478112
https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1384668360:88,Testability,test,tests,88,happy to merge this whenever. there's a few experimental things in there but we can add tests later,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2864#issuecomment-1384668360
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362:14,Availability,error,errors,14,"We're getting errors when running the tests on buildkite that I'm not getting when running on a GPU locally. For example this:. ```julia; Field boundary conditions [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475; --;   | Expression: #= /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475 =# CUDA.@allowscalar all(ST.data[1:Nx, 1:Ny, 0] .== ST.data[1:Nx, 1:Ny, 1]); ```. The above line works for me on GPU when doing `include(""test_computed_field.jl"")`, but for some reason fails on buildkite. @glwagner @simone-silvestri any ideas as to why? The fact that I can't reproduce these errors locally is making it hard for me to solve them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362:767,Availability,error,errors,767,"We're getting errors when running the tests on buildkite that I'm not getting when running on a GPU locally. For example this:. ```julia; Field boundary conditions [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475; --;   | Expression: #= /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475 =# CUDA.@allowscalar all(ST.data[1:Nx, 1:Ny, 0] .== ST.data[1:Nx, 1:Ny, 1]); ```. The above line works for me on GPU when doing `include(""test_computed_field.jl"")`, but for some reason fails on buildkite. @glwagner @simone-silvestri any ideas as to why? The fact that I can't reproduce these errors locally is making it hard for me to solve them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362:38,Testability,test,tests,38,"We're getting errors when running the tests on buildkite that I'm not getting when running on a GPU locally. For example this:. ```julia; Field boundary conditions [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475; --;   | Expression: #= /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475 =# CUDA.@allowscalar all(ST.data[1:Nx, 1:Ny, 0] .== ST.data[1:Nx, 1:Ny, 1]); ```. The above line works for me on GPU when doing `include(""test_computed_field.jl"")`, but for some reason fails on buildkite. @glwagner @simone-silvestri any ideas as to why? The fact that I can't reproduce these errors locally is making it hard for me to solve them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362:188,Testability,Test,Test,188,"We're getting errors when running the tests on buildkite that I'm not getting when running on a GPU locally. For example this:. ```julia; Field boundary conditions [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475; --;   | Expression: #= /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475 =# CUDA.@allowscalar all(ST.data[1:Nx, 1:Ny, 0] .== ST.data[1:Nx, 1:Ny, 1]); ```. The above line works for me on GPU when doing `include(""test_computed_field.jl"")`, but for some reason fails on buildkite. @glwagner @simone-silvestri any ideas as to why? The fact that I can't reproduce these errors locally is making it hard for me to solve them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362:295,Testability,test,test,295,"We're getting errors when running the tests on buildkite that I'm not getting when running on a GPU locally. For example this:. ```julia; Field boundary conditions [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475; --;   | Expression: #= /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475 =# CUDA.@allowscalar all(ST.data[1:Nx, 1:Ny, 0] .== ST.data[1:Nx, 1:Ny, 1]); ```. The above line works for me on GPU when doing `include(""test_computed_field.jl"")`, but for some reason fails on buildkite. @glwagner @simone-silvestri any ideas as to why? The fact that I can't reproduce these errors locally is making it hard for me to solve them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362:443,Testability,test,test,443,"We're getting errors when running the tests on buildkite that I'm not getting when running on a GPU locally. For example this:. ```julia; Field boundary conditions [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475; --;   | Expression: #= /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-7/clima/oceananigans/test/test_computed_field.jl:475 =# CUDA.@allowscalar all(ST.data[1:Nx, 1:Ny, 0] .== ST.data[1:Nx, 1:Ny, 1]); ```. The above line works for me on GPU when doing `include(""test_computed_field.jl"")`, but for some reason fails on buildkite. @glwagner @simone-silvestri any ideas as to why? The fact that I can't reproduce these errors locally is making it hard for me to solve them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1410622362
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411314641:102,Modifiability,refactor,refactoring,102,"There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. When we find that we have to use `@allowscalar`, it often indicates that our `Field` infrastructure is somehow deficient / doesn't support necessary operations, which causes us to resort to indexing and other syntax that requires `@allowscalar`. @navidcy @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411314641
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411314641:118,Testability,test,tests,118,"There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. When we find that we have to use `@allowscalar`, it often indicates that our `Field` infrastructure is somehow deficient / doesn't support necessary operations, which causes us to resort to indexing and other syntax that requires `@allowscalar`. @navidcy @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411314641
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468:104,Modifiability,refactor,refactoring,104,"> There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. I added these because it was the only way to make tests pass locally. However, I can't fully reproduce tests results locally anyway, like I mentioned in my previous comment, so these may well be unnecessary (since these lines might be passing on buildkite).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468:120,Testability,test,tests,120,"> There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. I added these because it was the only way to make tests pass locally. However, I can't fully reproduce tests results locally anyway, like I mentioned in my previous comment, so these may well be unnecessary (since these lines might be passing on buildkite).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468:198,Testability,test,tests,198,"> There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. I added these because it was the only way to make tests pass locally. However, I can't fully reproduce tests results locally anyway, like I mentioned in my previous comment, so these may well be unnecessary (since these lines might be passing on buildkite).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468:251,Testability,test,tests,251,"> There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. I added these because it was the only way to make tests pass locally. However, I can't fully reproduce tests results locally anyway, like I mentioned in my previous comment, so these may well be unnecessary (since these lines might be passing on buildkite).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411432495:141,Availability,error,error,141,> I suggested a syntax change that could help. You're right it does help. I'll try replacing these one by one and see if that helps with the error on buildkite. Although if would be useful to figure out why I'm not getting the same errors locally.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411432495
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411432495:232,Availability,error,errors,232,> I suggested a syntax change that could help. You're right it does help. I'll try replacing these one by one and see if that helps with the error on buildkite. Although if would be useful to figure out why I'm not getting the same errors locally.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411432495
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063:114,Availability,error,errors,114,"Apparently the new syntax does help avoid `@allowscalar` instances, and things do compile locally for me, but the errors on buildkite are still [there](https://buildkite.com/clima/oceananigans/builds/9727#01860b25-0d9a-419e-bd01-3ec11bcb8c6b/38-603):. ```; Computations with Averaged Fields [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-13/clima/oceananigans/test/test_computed_field.jl:583; --;   | Expression: all(interior(tke_yz) .== 9 / 2); ```. Any ideas on what might be the cause of the differences between builkite and my local server? If someone could also run one of the failing tests on a GPU locally and see if they get the same errors that buildkite is throwing, that would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063:705,Availability,error,errors,705,"Apparently the new syntax does help avoid `@allowscalar` instances, and things do compile locally for me, but the errors on buildkite are still [there](https://buildkite.com/clima/oceananigans/builds/9727#01860b25-0d9a-419e-bd01-3ec11bcb8c6b/38-603):. ```; Computations with Averaged Fields [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-13/clima/oceananigans/test/test_computed_field.jl:583; --;   | Expression: all(interior(tke_yz) .== 9 / 2); ```. Any ideas on what might be the cause of the differences between builkite and my local server? If someone could also run one of the failing tests on a GPU locally and see if they get the same errors that buildkite is throwing, that would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063:36,Safety,avoid,avoid,36,"Apparently the new syntax does help avoid `@allowscalar` instances, and things do compile locally for me, but the errors on buildkite are still [there](https://buildkite.com/clima/oceananigans/builds/9727#01860b25-0d9a-419e-bd01-3ec11bcb8c6b/38-603):. ```; Computations with Averaged Fields [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-13/clima/oceananigans/test/test_computed_field.jl:583; --;   | Expression: all(interior(tke_yz) .== 9 / 2); ```. Any ideas on what might be the cause of the differences between builkite and my local server? If someone could also run one of the failing tests on a GPU locally and see if they get the same errors that buildkite is throwing, that would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063:315,Testability,Test,Test,315,"Apparently the new syntax does help avoid `@allowscalar` instances, and things do compile locally for me, but the errors on buildkite are still [there](https://buildkite.com/clima/oceananigans/builds/9727#01860b25-0d9a-419e-bd01-3ec11bcb8c6b/38-603):. ```; Computations with Averaged Fields [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-13/clima/oceananigans/test/test_computed_field.jl:583; --;   | Expression: all(interior(tke_yz) .== 9 / 2); ```. Any ideas on what might be the cause of the differences between builkite and my local server? If someone could also run one of the failing tests on a GPU locally and see if they get the same errors that buildkite is throwing, that would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063:423,Testability,test,test,423,"Apparently the new syntax does help avoid `@allowscalar` instances, and things do compile locally for me, but the errors on buildkite are still [there](https://buildkite.com/clima/oceananigans/builds/9727#01860b25-0d9a-419e-bd01-3ec11bcb8c6b/38-603):. ```; Computations with Averaged Fields [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-13/clima/oceananigans/test/test_computed_field.jl:583; --;   | Expression: all(interior(tke_yz) .== 9 / 2); ```. Any ideas on what might be the cause of the differences between builkite and my local server? If someone could also run one of the failing tests on a GPU locally and see if they get the same errors that buildkite is throwing, that would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063:653,Testability,test,tests,653,"Apparently the new syntax does help avoid `@allowscalar` instances, and things do compile locally for me, but the errors on buildkite are still [there](https://buildkite.com/clima/oceananigans/builds/9727#01860b25-0d9a-419e-bd01-3ec11bcb8c6b/38-603):. ```; Computations with Averaged Fields [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-13/clima/oceananigans/test/test_computed_field.jl:583; --;   | Expression: all(interior(tke_yz) .== 9 / 2); ```. Any ideas on what might be the cause of the differences between builkite and my local server? If someone could also run one of the failing tests on a GPU locally and see if they get the same errors that buildkite is throwing, that would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063
https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1418060389:16,Testability,test,tests,16,Finally got the tests passing! It was something having to do with GPUCompiler.jl. This is ready to merge/review.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1418060389
https://github.com/CliMA/Oceananigans.jl/issues/2866#issuecomment-1384668956:28,Availability,Checkpoint,Checkpointer,28,Maybe better to extend the `Checkpointer` constructor specifically for `ShallowWaterModel`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2866#issuecomment-1384668956
https://github.com/CliMA/Oceananigans.jl/issues/2866#issuecomment-1384668956:16,Modifiability,extend,extend,16,Maybe better to extend the `Checkpointer` constructor specifically for `ShallowWaterModel`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2866#issuecomment-1384668956
https://github.com/CliMA/Oceananigans.jl/issues/2866#issuecomment-1385799393:153,Availability,checkpoint,checkpointed,153,"That's true regarding the changes you suggested. However, do we think that the are essential properties unique to the shallow water model that should be checkpointed, which are not checkpointed now? And the question is not just whether this is true now, but whether we expect the shallow water model to diverge during further development, as well.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2866#issuecomment-1385799393
https://github.com/CliMA/Oceananigans.jl/issues/2866#issuecomment-1385799393:181,Availability,checkpoint,checkpointed,181,"That's true regarding the changes you suggested. However, do we think that the are essential properties unique to the shallow water model that should be checkpointed, which are not checkpointed now? And the question is not just whether this is true now, but whether we expect the shallow water model to diverge during further development, as well.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2866#issuecomment-1385799393
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1483785790:53,Integrability,wrap,wrap,53,"I think this PR Is becoming too big. I’m thinking to wrap it up here with the ConformalCubedSphere grid plus tracer halo filling, add tests and then open another one to continue on cubed sphere tasks. What do you reckon @glwagner ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1483785790
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1483785790:134,Testability,test,tests,134,"I think this PR Is becoming too big. I’m thinking to wrap it up here with the ConformalCubedSphere grid plus tracer halo filling, add tests and then open another one to continue on cubed sphere tasks. What do you reckon @glwagner ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1483785790
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:291,Deployability,patch,patch,291,"@simone-silvestri the reconstruction of the tracer after the `solid_body_rotation_test` still shows some problems. Have a look at this MWE:. ```Julia; include(""dependencies_for_runtests.jl""). using Oceananigans.MultiRegion; using Oceananigans.MultiRegion: reconstruct_global_field. # Tracer patch for visualization; Gaussian(x, y, L) = exp(-(x^2 + y^2) / 2L^2). function Δ_min(grid) ; Δx_min = minimum_xspacing(grid, Center(), Center(), Center()); Δy_min = minimum_yspacing(grid, Center(), Center(), Center()); return min(Δx_min, Δy_min); end. function solid_body_rotation_test(grid; P = XPartition, regions = 1). if architecture(grid) isa GPU; devices = (0, 0); else; devices = nothing; end. mrg = MultiRegionGrid(grid, partition = P(regions)). free_surface = ExplicitFreeSurface(gravitational_acceleration = 1); coriolis = HydrostaticSphericalCoriolis(rotation_rate = 1). model = HydrostaticFreeSurfaceModel(grid = mrg,; momentum_advection = VectorInvariant(),; free_surface = free_surface,; coriolis = coriolis,; tracers = :c,; tracer_advection = WENO(),; buoyancy = nothing,; closure = nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconst",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:1896,Integrability,wrap,wrapper,1896,"= VectorInvariant(),; free_surface = free_surface,; coriolis = coriolis,; tracers = :c,; tracer_advection = WENO(),; buoyancy = nothing,; closure = nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then plot. ```Julia; fig = plot_to_compare(cs, c); fig; ```. <img width=""1290"" alt",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:1850,Testability,Test,Testing,1850,"e = 1). model = HydrostaticFreeSurfaceModel(grid = mrg,; momentum_advection = VectorInvariant(),; free_surface = free_surface,; coriolis = coriolis,; tracers = :c,; tracer_advection = WENO(),; buoyancy = nothing,; closure = nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:2530,Testability,test,test,2530," nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then plot. ```Julia; fig = plot_to_compare(cs, c); fig; ```. <img width=""1290"" alt=""Screenshot 2023-04-13 at 2 26 11 pm"" src=""https://user-images.githubusercontent.com/7112768/231653433-fd089614-26ca-4306-9069-0b2194f7dd2d.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:2590,Testability,test,test,2590," nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then plot. ```Julia; fig = plot_to_compare(cs, c); fig; ```. <img width=""1290"" alt=""Screenshot 2023-04-13 at 2 26 11 pm"" src=""https://user-images.githubusercontent.com/7112768/231653433-fd089614-26ca-4306-9069-0b2194f7dd2d.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:2650,Testability,test,test,2650," nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then plot. ```Julia; fig = plot_to_compare(cs, c); fig; ```. <img width=""1290"" alt=""Screenshot 2023-04-13 at 2 26 11 pm"" src=""https://user-images.githubusercontent.com/7112768/231653433-fd089614-26ca-4306-9069-0b2194f7dd2d.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:2710,Testability,test,test,2710," nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then plot. ```Julia; fig = plot_to_compare(cs, c); fig; ```. <img width=""1290"" alt=""Screenshot 2023-04-13 at 2 26 11 pm"" src=""https://user-images.githubusercontent.com/7112768/231653433-fd089614-26ca-4306-9069-0b2194f7dd2d.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:2770,Testability,test,test,2770," nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then plot. ```Julia; fig = plot_to_compare(cs, c); fig; ```. <img width=""1290"" alt=""Screenshot 2023-04-13 at 2 26 11 pm"" src=""https://user-images.githubusercontent.com/7112768/231653433-fd089614-26ca-4306-9069-0b2194f7dd2d.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737:2832,Testability,test,test,2832," nothing). g = model.free_surface.gravitational_acceleration; R = grid.radius; Ω = model.coriolis.rotation_rate. uᵢ(λ, φ, z) = 0.1 * cosd(φ) * sind(λ); ηᵢ(λ, φ, z) = (0.1 * Ω * R + 0.1^2 / 2) * sind(φ)^2 / g * sind(λ); cᵢ(λ, φ, z) = Gaussian(λ - 1, φ - 5, 10). set!(model, u=uᵢ, η=ηᵢ, c=cᵢ). Δt = 0.1 * Δ_min(grid) / sqrt(g * grid.Lz) . for _ in 1:20; time_step!(model, Δt); end. return merge(model.velocities, model.tracers, (; η = model.free_surface.η)); end. Nx = 32; Ny = 32. grid = LatitudeLongitudeGrid(CPU(), size = (Nx, Ny, 1),; halo = (3, 3, 3),; latitude = (-80, 80),; longitude = (-160, 160),; z = (-1, 0),; radius = 1,; topology=(Bounded, Bounded, Bounded)). us, vs, ws, cs, ηs = solid_body_rotation_test(grid). regions = 2; P = XPartition. @info "" Testing $regions $(P)s on $(typeof(grid).name.wrapper) on the $arch""; u, v, w, c, η = solid_body_rotation_test(grid; P=P, regions=regions). u = reconstruct_global_field(u); v = reconstruct_global_field(v); w = reconstruct_global_field(w); c = reconstruct_global_field(c); η = reconstruct_global_field(η). using GLMakie. function plot_to_compare(field1, field2). λ, φ, z = nodes(field1). fig = Figure(fontsize=30); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]). heatmap!(ax1, λ, φ, interior(field1, :, :, 1)); heatmap!(ax2, λ, φ, interior(field2, :, :, 1)); heatmap!(ax3, λ, φ, interior(field1, :, :, 1) .- interior(field2, :, :, 1)). return fig; end. @show @test all(isapprox(u, us, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(v, vs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(w, ws, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(c, cs, atol=1e-20, rtol = 1e-15)); @show @test all(isapprox(η, ηs, atol=1e-20, rtol = 1e-15)); ```. The test for `c` fails. When you then plot. ```Julia; fig = plot_to_compare(cs, c); fig; ```. <img width=""1290"" alt=""Screenshot 2023-04-13 at 2 26 11 pm"" src=""https://user-images.githubusercontent.com/7112768/231653433-fd089614-26ca-4306-9069-0b2194f7dd2d.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1506325737
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1524188389:38,Availability,error,error,38,"Can someone have a look at the gpu bc error in the ci? @simone-silvestri , @glwagner ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1524188389
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1624762386:68,Testability,test,tests,68,"@siddharthabishnu I believe you made a mistake when you created the tests for the halo fillings of u and v. . Let's take, for example, the north side of panel 1 for `u`. The values must come from the west side of panel 3 for v. Look at my schematic. If I am correct, the ❌ marked w 1,2,3 should get values from the ❌ 1, 2, 3 on panel 3. But your tests (and how we filled the halos) put in place of ❌ 1, 2, 3 on north side of panel 1 the $\Large{\color{blue}\circ}$ dots from the west side of panel 3. Am I right? (If I am correct, then probably there are similar mistakes in other sides?). ![Note Jul 6, 2023](https://github.com/CliMA/Oceananigans.jl/assets/7112768/0142ebfe-d19b-4228-81b7-5952c290582e)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1624762386
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1624762386:346,Testability,test,tests,346,"@siddharthabishnu I believe you made a mistake when you created the tests for the halo fillings of u and v. . Let's take, for example, the north side of panel 1 for `u`. The values must come from the west side of panel 3 for v. Look at my schematic. If I am correct, the ❌ marked w 1,2,3 should get values from the ❌ 1, 2, 3 on panel 3. But your tests (and how we filled the halos) put in place of ❌ 1, 2, 3 on north side of panel 1 the $\Large{\color{blue}\circ}$ dots from the west side of panel 3. Am I right? (If I am correct, then probably there are similar mistakes in other sides?). ![Note Jul 6, 2023](https://github.com/CliMA/Oceananigans.jl/assets/7112768/0142ebfe-d19b-4228-81b7-5952c290582e)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1624762386
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646559753:15,Integrability,wrap,wrap,15,"OK, I think we wrap up this PR and merge it. The advection tests and what not can be another PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646559753
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646559753:59,Testability,test,tests,59,"OK, I think we wrap up this PR and merge it. The advection tests and what not can be another PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646559753
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646762912:29,Availability,error,error,29,@simone-silvestri I see this error:. https://buildkite.com/clima/oceananigans/builds/12166#01897e82-b6c9-4935-b819-d578f7976262/19-338. Is this because of the changes in AbstractOperations?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1646762912
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1651626130:272,Testability,test,tests,272,"~hm... @simone-silvestri (personal communication) suggested that the culprit was the commented out velocity halo filling in [852381a](https://github.com/CliMA/Oceananigans.jl/pull/2867/commits/852381af86ce09c3249e895626b7ade365d4dba3). But after bringing them back, still tests fail and code snippet in https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1651385198 gives the same output...~",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1651626130
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653573292:137,Testability,test,test,137,"I admit that I'm not quite satisfied with these:. https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65. tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653573292
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653573292:184,Testability,test,tests,184,"I admit that I'm not quite satisfied with these:. https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65. tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653573292
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653867156:145,Testability,test,test,145,"> I admit that I'm not quite satisfied with these:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65; > ; > tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?. Shouldn't this be implemented with multiple dispatch? Chains of if-statements are the red flag.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653867156
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653867156:198,Testability,test,tests,198,"> I admit that I'm not quite satisfied with these:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65; > ; > tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?. Shouldn't this be implemented with multiple dispatch? Chains of if-statements are the red flag.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653867156
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653880342:145,Testability,test,test,145,"> > I admit that I'm not quite satisfied with these:; > > https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65; > > ; > > tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?; > ; > Shouldn't this be implemented with multiple dispatch? Chains of if-statements are the red flag. Yea, another issue of mine.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653880342
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653880342:202,Testability,test,tests,202,"> > I admit that I'm not quite satisfied with these:; > > https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65; > > ; > > tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?; > ; > Shouldn't this be implemented with multiple dispatch? Chains of if-statements are the red flag. Yea, another issue of mine.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653880342
https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653960932:381,Modifiability,rewrite,rewrite,381,"> > I will add a docstring with some explanation, and replace some of the if-statements with multiple dispatch.; > ; > What will you dispatch on though? A docstring is for sure needed. Thanks!. I see your point. For dispatch, the argument types need to be different, which is not the case here. I used so many if statements to minimize the number of functions. I think I will just rewrite them in more readable way.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653960932
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112:356,Availability,error,error,356,"> What if you edit the forcing functions into the discrete form, e.g. invoking `Forcing` with `discrete_form=true`?. It helps! But doesn't solve the problem. In particular the MWE above (with two tracer) in discrete form compiles for me. But when I add more tracers (I need at least 6 tracers for my simulations) it fails again. Sometimes with a different error:. ```; ERROR: LoadError: Failed to compile PTX code (ptxas exited with code 255); Invocation arguments: --generate-line-info --verbose --gpu-name sm_60 --output-file /glade/scratch/tomasc/jl_hs9AZo7IJq.cubin /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx; ptxas /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx, line 5136; error : Entry function '_Z23julia_gpu_calculate_Gu_7ContextI14__CUDACtx_Namevv14__PassType_312v12DisableHooksE18_gpu_calculate_Gu_16CompilerMetadataI10StaticSizeI9_8__8__6_E12DynamicCheckvv7NDRangeILi3ES5_I9_1__1__6_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE15RectilinearGridIS9_8PeriodicS12_7BoundedS9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1E12StepRangeLenIS9_14TwicePrecisionIS9_ES15_IS9_E5Int64EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvE4WENOILi3ES9_vv5TupleIS8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEEELitrueEvS17_ILi2ES9_vvS18_IS8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEES8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEES8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEEELitrueEv12UpwindBiasedILi1ES9_vvvv8CenteredILi1ES9_vvvvEES20_ILi1ES9_vvvvEES20_ILi2ES9_vvvS20_ILi1ES9_vvvvEEEvv16SmagorinskyLillyI26ExplicitTimeDiscretizationS9_10NamedTupleI34__b____1____2____3____4____5____6_S18_IS9_S9_S9_S9_S9_S9_S9_EEE17BoundaryConditionI4FluxvEvS23_I23__velocities___tracers_S18_IS23_I12__u___v___w_S18_I9ZeroFieldIS16_Li3EES26_IS16_Li3EES26_IS16_Li3EEEES23_I34__b____1____2____3____4____5____6",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112:369,Availability,ERROR,ERROR,369,"> What if you edit the forcing functions into the discrete form, e.g. invoking `Forcing` with `discrete_form=true`?. It helps! But doesn't solve the problem. In particular the MWE above (with two tracer) in discrete form compiles for me. But when I add more tracers (I need at least 6 tracers for my simulations) it fails again. Sometimes with a different error:. ```; ERROR: LoadError: Failed to compile PTX code (ptxas exited with code 255); Invocation arguments: --generate-line-info --verbose --gpu-name sm_60 --output-file /glade/scratch/tomasc/jl_hs9AZo7IJq.cubin /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx; ptxas /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx, line 5136; error : Entry function '_Z23julia_gpu_calculate_Gu_7ContextI14__CUDACtx_Namevv14__PassType_312v12DisableHooksE18_gpu_calculate_Gu_16CompilerMetadataI10StaticSizeI9_8__8__6_E12DynamicCheckvv7NDRangeILi3ES5_I9_1__1__6_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE15RectilinearGridIS9_8PeriodicS12_7BoundedS9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1E12StepRangeLenIS9_14TwicePrecisionIS9_ES15_IS9_E5Int64EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvE4WENOILi3ES9_vv5TupleIS8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEEELitrueEvS17_ILi2ES9_vvS18_IS8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEES8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEES8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEEELitrueEv12UpwindBiasedILi1ES9_vvvv8CenteredILi1ES9_vvvvEES20_ILi1ES9_vvvvEES20_ILi2ES9_vvvS20_ILi1ES9_vvvvEEEvv16SmagorinskyLillyI26ExplicitTimeDiscretizationS9_10NamedTupleI34__b____1____2____3____4____5____6_S18_IS9_S9_S9_S9_S9_S9_S9_EEE17BoundaryConditionI4FluxvEvS23_I23__velocities___tracers_S18_IS23_I12__u___v___w_S18_I9ZeroFieldIS16_Li3EES26_IS16_Li3EES26_IS16_Li3EEEES23_I34__b____1____2____3____4____5____6",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112:669,Availability,error,error,669,"ptx, line 5136; error : Entry function '_Z23julia_gpu_calculate_Gu_7ContextI14__CUDACtx_Namevv14__PassType_312v12DisableHooksE18_gpu_calculate_Gu_16CompilerMetadataI10StaticSizeI9_8__8__6_E12DynamicCheckvv7NDRangeILi3ES5_I9_1__1__6_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE15RectilinearGridIS9_8PeriodicS12_7BoundedS9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1E12StepRangeLenIS9_14TwicePrecisionIS9_ES15_IS9_E5Int64EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvE4WENOILi3ES9_vv5TupleIS8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEEELitrueEvS17_ILi2ES9_vvS18_IS8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEES8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEES8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEEELitrueEv12UpwindBiasedILi1ES9_vvvv8CenteredILi1ES9_vvvvEES20_ILi1ES9_vvvvEES20_ILi2ES9_vvvS20_ILi1ES9_vvvvEEEvv16SmagorinskyLillyI26ExplicitTimeDiscretizationS9_10NamedTupleI34__b____1____2____3____4____5____6_S18_IS9_S9_S9_S9_S9_S9_S9_EEE17BoundaryConditionI4FluxvEvS23_I23__velocities___tracers_S18_IS23_I12__u___v___w_S18_I9ZeroFieldIS16_Li3EES26_IS16_Li3EES26_IS16_Li3EEEES23_I34__b____1____2____3____4____5____6",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112:5057,Availability,error,errors,5057,"8_S31_S8_IS9_Li3ES10_IS9_Li3ELi1EEES9_S32_S33_S11_IS9_S12_S12_S13_S9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvES9_ES30_IS28_S28_S28_S31_S8_IS9_Li3ES10_IS9_Li3ELi1EEES9_S34_S35_S11_IS9_S12_S12_S13_S9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvES9_EEEEES23_I46__u___v___w___b____1____2____3____4____5____6_S18_I15DiscreteForcingIS23_I13______u______S18_IS16_S16_S9_EE9_sponge_uES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_vES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_wES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_bE12_zeroforcingS42_S42_S42_S42_S42_EES8_IS9_Li3ES10_IS9_Li3ELi1EEES23_I27__time___iteration___stage_S18_IS9_S16_S16_EE' uses too much parameter space (0x1a10 bytes, 0x1100 max).; ptxas fatal : Ptx assembly aborted due to errors; If you think this is a bug, please file an issue and attach /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] cufunction_compile(job::GPUCompiler.CompilerJob, ctx::LLVM.Context); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:428; [3] #224; @ /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:347 [inlined]; [4] JuliaContext(f::CUDA.var""#224#225""{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Cassette.overdub), Tuple{Cassette.Context{nametype(CUDACtx), Nothing, Nothing, KernelAbstractions.var""##PassType#312"", Nothing, Cassette.DisableHooks}, typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(8, 8, 6)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112:5183,Availability,error,error,5183,"EEES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvES9_ES30_IS28_S28_S28_S31_S8_IS9_Li3ES10_IS9_Li3ELi1EEES9_S34_S35_S11_IS9_S12_S12_S13_S9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvES9_EEEEES23_I46__u___v___w___b____1____2____3____4____5____6_S18_I15DiscreteForcingIS23_I13______u______S18_IS16_S16_S9_EE9_sponge_uES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_vES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_wES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_bE12_zeroforcingS42_S42_S42_S42_S42_EES8_IS9_Li3ES10_IS9_Li3ELi1EEES23_I27__time___iteration___stage_S18_IS9_S16_S16_EE' uses too much parameter space (0x1a10 bytes, 0x1100 max).; ptxas fatal : Ptx assembly aborted due to errors; If you think this is a bug, please file an issue and attach /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] cufunction_compile(job::GPUCompiler.CompilerJob, ctx::LLVM.Context); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:428; [3] #224; @ /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:347 [inlined]; [4] JuliaContext(f::CUDA.var""#224#225""{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Cassette.overdub), Tuple{Cassette.Context{nametype(CUDACtx), Nothing, Nothing, KernelAbstractions.var""##PassType#312"", Nothing, Cassette.DisableHooks}, typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(8, 8, 6)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 6)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, OffsetArra",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112:5210,Availability,error,error,5210,"S9_ES15_IS9_ES16_EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvES9_ES30_IS28_S28_S28_S31_S8_IS9_Li3ES10_IS9_Li3ELi1EEES9_S34_S35_S11_IS9_S12_S12_S13_S9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvES9_EEEEES23_I46__u___v___w___b____1____2____3____4____5____6_S18_I15DiscreteForcingIS23_I13______u______S18_IS16_S16_S9_EE9_sponge_uES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_vES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_wES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_bE12_zeroforcingS42_S42_S42_S42_S42_EES8_IS9_Li3ES10_IS9_Li3ELi1EEES23_I27__time___iteration___stage_S18_IS9_S16_S16_EE' uses too much parameter space (0x1a10 bytes, 0x1100 max).; ptxas fatal : Ptx assembly aborted due to errors; If you think this is a bug, please file an issue and attach /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] cufunction_compile(job::GPUCompiler.CompilerJob, ctx::LLVM.Context); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:428; [3] #224; @ /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:347 [inlined]; [4] JuliaContext(f::CUDA.var""#224#225""{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Cassette.overdub), Tuple{Cassette.Context{nametype(CUDACtx), Nothing, Nothing, KernelAbstractions.var""##PassType#312"", Nothing, Cassette.DisableHooks}, typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(8, 8, 6)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 6)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, C",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112:376,Performance,Load,LoadError,376,"> What if you edit the forcing functions into the discrete form, e.g. invoking `Forcing` with `discrete_form=true`?. It helps! But doesn't solve the problem. In particular the MWE above (with two tracer) in discrete form compiles for me. But when I add more tracers (I need at least 6 tracers for my simulations) it fails again. Sometimes with a different error:. ```; ERROR: LoadError: Failed to compile PTX code (ptxas exited with code 255); Invocation arguments: --generate-line-info --verbose --gpu-name sm_60 --output-file /glade/scratch/tomasc/jl_hs9AZo7IJq.cubin /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx; ptxas /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx, line 5136; error : Entry function '_Z23julia_gpu_calculate_Gu_7ContextI14__CUDACtx_Namevv14__PassType_312v12DisableHooksE18_gpu_calculate_Gu_16CompilerMetadataI10StaticSizeI9_8__8__6_E12DynamicCheckvv7NDRangeILi3ES5_I9_1__1__6_ES5_I11_16__16__1_EvvEE11OffsetArrayI7Float64Li3E13CuDeviceArrayIS9_Li3ELi1EEE15RectilinearGridIS9_8PeriodicS12_7BoundedS9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1E12StepRangeLenIS9_14TwicePrecisionIS9_ES15_IS9_E5Int64EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvE4WENOILi3ES9_vv5TupleIS8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEES8_IS18_IS9_S9_S9_ELi1ES10_IS18_IS9_S9_S9_ELi1ELi1EEEELitrueEvS17_ILi2ES9_vvS18_IS8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEES8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEES8_IS18_IS9_S9_ELi1ES10_IS18_IS9_S9_ELi1ELi1EEEELitrueEv12UpwindBiasedILi1ES9_vvvv8CenteredILi1ES9_vvvvEES20_ILi1ES9_vvvvEES20_ILi2ES9_vvvS20_ILi1ES9_vvvvEEEvv16SmagorinskyLillyI26ExplicitTimeDiscretizationS9_10NamedTupleI34__b____1____2____3____4____5____6_S18_IS9_S9_S9_S9_S9_S9_S9_EEE17BoundaryConditionI4FluxvEvS23_I23__velocities___tracers_S18_IS23_I12__u___v___w_S18_I9ZeroFieldIS16_Li3EES26_IS16_Li3EES26_IS16_Li3EEEES23_I34__b____1____2____3____4____5____6",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112:5042,Safety,abort,aborted,5042,"8_S31_S8_IS9_Li3ES10_IS9_Li3ELi1EEES9_S32_S33_S11_IS9_S12_S12_S13_S9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvES9_ES30_IS28_S28_S28_S31_S8_IS9_Li3ES10_IS9_Li3ELi1EEES9_S34_S35_S11_IS9_S12_S12_S13_S9_S9_S8_IS9_Li1ES10_IS9_Li1ELi1EEES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES14_IS9_S15_IS9_ES15_IS9_ES16_EES8_IS9_Li1ES10_IS9_Li1ELi1EEEvES9_EEEEES23_I46__u___v___w___b____1____2____3____4____5____6_S18_I15DiscreteForcingIS23_I13______u______S18_IS16_S16_S9_EE9_sponge_uES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_vES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_wES37_IS23_I13______u______S18_IS16_S16_S9_EE9_sponge_bE12_zeroforcingS42_S42_S42_S42_S42_EES8_IS9_Li3ES10_IS9_Li3ELi1EEES23_I27__time___iteration___stage_S18_IS9_S16_S16_EE' uses too much parameter space (0x1a10 bytes, 0x1100 max).; ptxas fatal : Ptx assembly aborted due to errors; If you think this is a bug, please file an issue and attach /glade/scratch/tomasc/jl_XSJ4P4z47a.ptx; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] cufunction_compile(job::GPUCompiler.CompilerJob, ctx::LLVM.Context); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:428; [3] #224; @ /glade/work/tomasc/.julia/packages/CUDA/Ey3w2/src/compiler/execution.jl:347 [inlined]; [4] JuliaContext(f::CUDA.var""#224#225""{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Cassette.overdub), Tuple{Cassette.Context{nametype(CUDACtx), Nothing, Nothing, KernelAbstractions.var""##PassType#312"", Nothing, Cassette.DisableHooks}, typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(8, 8, 6)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401133112
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401327463:352,Safety,avoid,avoid,352,"You can try incorporating the background buoyancy field into the forcing functions (formulated using the discrete form). You may also try inserting the parameters as globals rather than using the kwarg `parameters` (not sure if that will help). I'd also suggest testing whether the Smagorinsky closure affects the results of the simulation; if you can avoid using that you might be able to compile more complexity. After that, we may have to either divide up the kernels or pursue https://github.com/JuliaGPU/CUDA.jl/issues/267",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401327463
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401327463:262,Testability,test,testing,262,"You can try incorporating the background buoyancy field into the forcing functions (formulated using the discrete form). You may also try inserting the parameters as globals rather than using the kwarg `parameters` (not sure if that will help). I'd also suggest testing whether the Smagorinsky closure affects the results of the simulation; if you can avoid using that you might be able to compile more complexity. After that, we may have to either divide up the kernels or pursue https://github.com/JuliaGPU/CUDA.jl/issues/267",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401327463
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401328595:334,Availability,error,error,334,"> It looks like the function `calculate_Gu!` is passing too many parameters to the GPU. there is a limit to the number of parameters you can pass. Can you show the functions you are using?. Also just to clarify for @tomchor note that `Entry function... uses too much parameter space (0x1a10 bytes, 0x1100 max)` in the PTX compilation error refers to parameters in the sense of https://github.com/JuliaGPU/CUDA.jl/issues/267 (not the ""parameters"" of `Forcing`)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401328595
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401329050:226,Availability,error,error,226,"> It looks like the function `calculate_Gu!` is passing too many parameters to the GPU. there is a limit to the number of parameters you can pass. Can you show the functions you are using?. The example below can reproduce the error pretty well for me (it's basically the same as the one above but with discrete forcing and a few more tracers). So if you're trying to debug it, this is probably the way to go. ```julia; using Oceananigans; arch = GPU(). z_faces = collect(0:1:6); grid = RectilinearGrid(arch, size=(8, 8, 6),; x=(0, 1), y=(0, 1), z=z_faces). @inline b_bg(x, y, z, t) = x; B_field = BackgroundField(b_bg). @inline sponge_u(i, j, k, grid, clock, model_fields, p) = -p.σ * (model_fields.u[i,j,k] - p.α*p.u₀); @inline sponge_v(i, j, k, grid, clock, model_fields, p) = -p.σ * (model_fields.v[i,j,k] - p.α*p.u₀); @inline sponge_w(i, j, k, grid, clock, model_fields, p) = -p.σ * (model_fields.w[i,j,k] - p.α*p.u₀); @inline sponge_b(i, j, k, grid, clock, model_fields, p) = -p.σ * (model_fields.b[i,j,k] - p.α*p.u₀). Fᵤ = Forcing(sponge_u, field_dependencies = :u, parameters = (; σ=1, u₀=1, α=4e-5), discrete_form=true); Fᵥ = Forcing(sponge_v, field_dependencies = :v, parameters = (; σ=1, u₀=1, α=4e-5), discrete_form=true); Fw = Forcing(sponge_w, field_dependencies = :w, parameters = (; σ=1, u₀=1, α=4e-5), discrete_form=true); Fb = Forcing(sponge_b, field_dependencies = :b, parameters = (; σ=1, u₀=1, α=4e-5), discrete_form=true). model = NonhydrostaticModel(; grid,; advection = WENO(grid=grid, order=5),; tracers = (:b, :τ1, :τ2, :τ3), # This runs fine with one fewer tracer now; closure = SmagorinskyLilly(C=0.1),; background_fields = (b=B_field,),; forcing = (u=Fᵤ, v=Fᵥ, w=Fw, b=Fb),; ); @info model. simulation = Simulation(model, Δt=1, stop_iteration=10). run!(simulation); ```. My actual production code is far too complicated to paste here, but the relevant forcings I'm using there are:. ```julia; const z₀ = -100; const z₂ = -120; const z₁ = -grid.Lz. @inline function bottom_m",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401329050
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401329050:3427,Availability,error,error,3427,"e). model = NonhydrostaticModel(; grid,; advection = WENO(grid=grid, order=5),; tracers = (:b, :τ1, :τ2, :τ3), # This runs fine with one fewer tracer now; closure = SmagorinskyLilly(C=0.1),; background_fields = (b=B_field,),; forcing = (u=Fᵤ, v=Fᵥ, w=Fw, b=Fb),; ); @info model. simulation = Simulation(model, Δt=1, stop_iteration=10). run!(simulation); ```. My actual production code is far too complicated to paste here, but the relevant forcings I'm using there are:. ```julia; const z₀ = -100; const z₂ = -120; const z₁ = -grid.Lz. @inline function bottom_mask_cos(x, y, z); if z₀ >= z > z₁; return 1/2 * (1 - cos( π*(z-z₀)/(z₁-z₀) )); elseif z₁ >= z #> z₂; return 1.0; else; return 0.0; end ; end. @inline sponge_u(x, y, z, t, u, p) = -bottom_mask_cos(x, y, z) * p.σ * u; @inline sponge_v(x, y, z, t, v, p) = -bottom_mask_cos(x, y, z) * p.σ * v; @inline sponge_w(x, y, z, t, w, p) = -bottom_mask_cos(x, y, z) * p.σ * w; @inline sponge_b(x, y, z, t, b, p) = -bottom_mask_cos(x, y, z) * p.σ * (b - b∞(0, 0, z, 0, p)). Fᵤ = Forcing(sponge_u, field_dependencies = :u, parameters = (; params.σ)); Fᵥ = Forcing(sponge_v, field_dependencies = :v, parameters = (; params.σ)); Fw = Forcing(sponge_w, field_dependencies = :w, parameters = (; params.σ)); Fb = Forcing(sponge_b, field_dependencies = :b, parameters = (; params.σ, params.N²∞)); ```. The above are the forcing functions, and below is the background field. There are also parameters passed for the boundary conditions. ```julia; @inline b_bg(x, y, z, t, p) = p.M² * x; B_field = BackgroundField(b_bg, parameters = (; params.M²)); ```. Changing things so that variables that are currently passed as parameters are set as `const`ants helps (as you can see I did with `z₀`, etc.). However, that also means I can't run back-to-back simulations where those parameters differ, which is something that makes my workflow way more streamlined, so I'm trying to avoid that. (Although I'll ultimately have to do that if we can't figure this error out...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401329050
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401329050:3056,Modifiability,variab,variables,3056,"e). model = NonhydrostaticModel(; grid,; advection = WENO(grid=grid, order=5),; tracers = (:b, :τ1, :τ2, :τ3), # This runs fine with one fewer tracer now; closure = SmagorinskyLilly(C=0.1),; background_fields = (b=B_field,),; forcing = (u=Fᵤ, v=Fᵥ, w=Fw, b=Fb),; ); @info model. simulation = Simulation(model, Δt=1, stop_iteration=10). run!(simulation); ```. My actual production code is far too complicated to paste here, but the relevant forcings I'm using there are:. ```julia; const z₀ = -100; const z₂ = -120; const z₁ = -grid.Lz. @inline function bottom_mask_cos(x, y, z); if z₀ >= z > z₁; return 1/2 * (1 - cos( π*(z-z₀)/(z₁-z₀) )); elseif z₁ >= z #> z₂; return 1.0; else; return 0.0; end ; end. @inline sponge_u(x, y, z, t, u, p) = -bottom_mask_cos(x, y, z) * p.σ * u; @inline sponge_v(x, y, z, t, v, p) = -bottom_mask_cos(x, y, z) * p.σ * v; @inline sponge_w(x, y, z, t, w, p) = -bottom_mask_cos(x, y, z) * p.σ * w; @inline sponge_b(x, y, z, t, b, p) = -bottom_mask_cos(x, y, z) * p.σ * (b - b∞(0, 0, z, 0, p)). Fᵤ = Forcing(sponge_u, field_dependencies = :u, parameters = (; params.σ)); Fᵥ = Forcing(sponge_v, field_dependencies = :v, parameters = (; params.σ)); Fw = Forcing(sponge_w, field_dependencies = :w, parameters = (; params.σ)); Fb = Forcing(sponge_b, field_dependencies = :b, parameters = (; params.σ, params.N²∞)); ```. The above are the forcing functions, and below is the background field. There are also parameters passed for the boundary conditions. ```julia; @inline b_bg(x, y, z, t, p) = p.M² * x; B_field = BackgroundField(b_bg, parameters = (; params.M²)); ```. Changing things so that variables that are currently passed as parameters are set as `const`ants helps (as you can see I did with `z₀`, etc.). However, that also means I can't run back-to-back simulations where those parameters differ, which is something that makes my workflow way more streamlined, so I'm trying to avoid that. (Although I'll ultimately have to do that if we can't figure this error out...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401329050
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401329050:3349,Safety,avoid,avoid,3349,"e). model = NonhydrostaticModel(; grid,; advection = WENO(grid=grid, order=5),; tracers = (:b, :τ1, :τ2, :τ3), # This runs fine with one fewer tracer now; closure = SmagorinskyLilly(C=0.1),; background_fields = (b=B_field,),; forcing = (u=Fᵤ, v=Fᵥ, w=Fw, b=Fb),; ); @info model. simulation = Simulation(model, Δt=1, stop_iteration=10). run!(simulation); ```. My actual production code is far too complicated to paste here, but the relevant forcings I'm using there are:. ```julia; const z₀ = -100; const z₂ = -120; const z₁ = -grid.Lz. @inline function bottom_mask_cos(x, y, z); if z₀ >= z > z₁; return 1/2 * (1 - cos( π*(z-z₀)/(z₁-z₀) )); elseif z₁ >= z #> z₂; return 1.0; else; return 0.0; end ; end. @inline sponge_u(x, y, z, t, u, p) = -bottom_mask_cos(x, y, z) * p.σ * u; @inline sponge_v(x, y, z, t, v, p) = -bottom_mask_cos(x, y, z) * p.σ * v; @inline sponge_w(x, y, z, t, w, p) = -bottom_mask_cos(x, y, z) * p.σ * w; @inline sponge_b(x, y, z, t, b, p) = -bottom_mask_cos(x, y, z) * p.σ * (b - b∞(0, 0, z, 0, p)). Fᵤ = Forcing(sponge_u, field_dependencies = :u, parameters = (; params.σ)); Fᵥ = Forcing(sponge_v, field_dependencies = :v, parameters = (; params.σ)); Fw = Forcing(sponge_w, field_dependencies = :w, parameters = (; params.σ)); Fb = Forcing(sponge_b, field_dependencies = :b, parameters = (; params.σ, params.N²∞)); ```. The above are the forcing functions, and below is the background field. There are also parameters passed for the boundary conditions. ```julia; @inline b_bg(x, y, z, t, p) = p.M² * x; B_field = BackgroundField(b_bg, parameters = (; params.M²)); ```. Changing things so that variables that are currently passed as parameters are set as `const`ants helps (as you can see I did with `z₀`, etc.). However, that also means I can't run back-to-back simulations where those parameters differ, which is something that makes my workflow way more streamlined, so I'm trying to avoid that. (Although I'll ultimately have to do that if we can't figure this error out...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401329050
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401332558:163,Availability,error,error,163,"Also, you don't need the `field_dependencies` argument with `discrete_form=true` (but I think that has no effect, so just a side comment, maybe we should throw an error for that)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401332558
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401359397:165,Availability,error,error,165,"> Also, you don't need the `field_dependencies` argument with `discrete_form=true` (but I think that has no effect, so just a side comment, maybe we should throw an error for that). Ah yeah, I forgot to change that when I adapted it to discrete form. Thanks for catching that and for the other tips!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401359397
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401359397:222,Energy Efficiency,adapt,adapted,222,"> Also, you don't need the `field_dependencies` argument with `discrete_form=true` (but I think that has no effect, so just a side comment, maybe we should throw an error for that). Ah yeah, I forgot to change that when I adapted it to discrete form. Thanks for catching that and for the other tips!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401359397
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401359397:222,Modifiability,adapt,adapted,222,"> Also, you don't need the `field_dependencies` argument with `discrete_form=true` (but I think that has no effect, so just a side comment, maybe we should throw an error for that). Ah yeah, I forgot to change that when I adapted it to discrete form. Thanks for catching that and for the other tips!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1401359397
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1402856222:354,Safety,avoid,avoid,354,"> You can try incorporating the background buoyancy field into the forcing functions (formulated using the discrete form). You may also try inserting the parameters as globals rather than using the kwarg `parameters` (not sure if that will help). I'd also suggest testing whether the Smagorinsky closure affects the results of the simulation; if you can avoid using that you might be able to compile more complexity. @glwagner thanks for all these tips. I've tried them all (including using the discrete form) and the only thing that allows me to achieve the number of tracers I need is using `closure=nothing`. However I don't think that's an option for me since I will probably need the physical (KE) dissipation at some point in the research, which doesn't exist without a closure. ; Also I think `closure=nothing` prevents me from using flux boundary conditions, no?. What would you recommend as the next step?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1402856222
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1402856222:264,Testability,test,testing,264,"> You can try incorporating the background buoyancy field into the forcing functions (formulated using the discrete form). You may also try inserting the parameters as globals rather than using the kwarg `parameters` (not sure if that will help). I'd also suggest testing whether the Smagorinsky closure affects the results of the simulation; if you can avoid using that you might be able to compile more complexity. @glwagner thanks for all these tips. I've tried them all (including using the discrete form) and the only thing that allows me to achieve the number of tracers I need is using `closure=nothing`. However I don't think that's an option for me since I will probably need the physical (KE) dissipation at some point in the research, which doesn't exist without a closure. ; Also I think `closure=nothing` prevents me from using flux boundary conditions, no?. What would you recommend as the next step?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1402856222
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597:165,Deployability,integrat,integrated,165,"You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence. Does `AnisotropicMinimumDissipation` work? Or other closures?. I'm wondering if the problem is the use of a `BinaryOperation` for the diffusivities with `SmagorinskyLilly`:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L214. It might be possible to avoid using that `BinaryOperation` by instead extending the three diffusivity getter functions:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/abstract_scalar_diffusivity_closure.jl#L87-L89",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597:165,Integrability,integrat,integrated,165,"You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence. Does `AnisotropicMinimumDissipation` work? Or other closures?. I'm wondering if the problem is the use of a `BinaryOperation` for the diffusivities with `SmagorinskyLilly`:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L214. It might be possible to avoid using that `BinaryOperation` by instead extending the three diffusivity getter functions:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/abstract_scalar_diffusivity_closure.jl#L87-L89",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597:823,Modifiability,extend,extending,823,"You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence. Does `AnisotropicMinimumDissipation` work? Or other closures?. I'm wondering if the problem is the use of a `BinaryOperation` for the diffusivities with `SmagorinskyLilly`:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L214. It might be possible to avoid using that `BinaryOperation` by instead extending the three diffusivity getter functions:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/abstract_scalar_diffusivity_closure.jl#L87-L89",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597:777,Safety,avoid,avoid,777,"You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence. Does `AnisotropicMinimumDissipation` work? Or other closures?. I'm wondering if the problem is the use of a `BinaryOperation` for the diffusivities with `SmagorinskyLilly`:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L214. It might be possible to avoid using that `BinaryOperation` by instead extending the three diffusivity getter functions:. https://github.com/CliMA/Oceananigans.jl/blob/b7ad891c718c16db35d70ee86da81a74ad2f7370/src/TurbulenceClosures/abstract_scalar_diffusivity_closure.jl#L87-L89",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403103597
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249:167,Deployability,integrat,integrated,167,"> You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence.; > ; > Does `AnisotropicMinimumDissipation` work? Or other closures?. Nice catch! It does work for AMD. I hadn't tried that before because I assumed it wasn't gonna work. Unfortunately I can't really use AMD because it produces a lot of noise in the stratified regions of my domain, but hopefully adapting Smag isn't too hard?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249:706,Energy Efficiency,adapt,adapting,706,"> You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence.; > ; > Does `AnisotropicMinimumDissipation` work? Or other closures?. Nice catch! It does work for AMD. I hadn't tried that before because I assumed it wasn't gonna work. Unfortunately I can't really use AMD because it produces a lot of noise in the stratified regions of my domain, but hopefully adapting Smag isn't too hard?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249:167,Integrability,integrat,integrated,167,"> You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence.; > ; > Does `AnisotropicMinimumDissipation` work? Or other closures?. Nice catch! It does work for AMD. I hadn't tried that before because I assumed it wasn't gonna work. Unfortunately I can't really use AMD because it produces a lot of noise in the stratified regions of my domain, but hopefully adapting Smag isn't too hard?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249:706,Modifiability,adapt,adapting,706,"> You can use `FluxBoundaryCondition` with `closure=nothing` (it's `Value` and `Gradient` that won't work). You can obtain global dissipation by differencing globally integrated TKE (and perhaps a pointwise dissipation by evaluating the TKE budget), but I agree that it's probably more difficult. @simone-silvestri may have some tips as he has been developing an implicit LES scheme for mesoscale turbulence.; > ; > Does `AnisotropicMinimumDissipation` work? Or other closures?. Nice catch! It does work for AMD. I hadn't tried that before because I assumed it wasn't gonna work. Unfortunately I can't really use AMD because it produces a lot of noise in the stratified regions of my domain, but hopefully adapting Smag isn't too hard?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1403796249
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433:0,Energy Efficiency,Adapt,Adapting,0,"Adapting Smagorinsky seems an easy avenue. . In terms of Implicit LES, you could try using just WENO without any closure, but if you are in a true LES regime it would probably be too dissipative. A Smagorinsky viscosity combined with an energy-conserving advection scheme has been found to be less dissipative although noisier (here is an example applied to Burgers equation https://reader.elsevier.com/reader/sd/pii/S0377042717303035?token=83A413B5659B8B16B96E1D0CBDAD5865D8552AE5B2FF2FDFE78FFDEF064F2820B38D1BBFF646D3F7B75D58FE010DF7DB&originRegion=us-east-1&originCreation=20230125193548). You can always try with higher order (maybe 7th?) but the higher the order the lower the stability (i.e. at a certain order your implicit dissipation will be so low that you will start to generate grid-scale noise). . The KE dissipation is there with `closure=nothing` and a WENO scheme, it is just not strictly physical: it's (roughly) akin to a 4th to a 6th-order hyperviscosity. You can compare this to using `UpwindBiased(order = 5)` which would give you everywhere a dissipation that converges to a 6th-order hyperviscosity. In general:. $$\partial_x {uu}^{Upwind_N} \sim \partial_x {uu}^{Centered_{N+1}} + \partial_x {K_{numerical}} \partial_x^{N} u$$. where $K_{numerical} \sim \Delta x u$ and $N$ is the order. The nice thing about using WENO instead of a simple Upwind discretization is that the order of the hyperviscosity adapts to the smoothness of the field. Therefore, where the field is noisier (like in regions of higher gradients) the dissipation is more aggressive. . This procedure not only ensures a smooth field but can be thought of as mimicking the subgrid-scale dissipation (which also increases with the gradient of resolved scale variables. As such people have referred to using particularly diffusive advective schemes (such as WENO) as _Implicit_ LES. I like the idea of implicit LES because it allows you to ""fill in"" for the subgrid-scale dissipation without committing to any s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433:237,Energy Efficiency,energy,energy-conserving,237,"Adapting Smagorinsky seems an easy avenue. . In terms of Implicit LES, you could try using just WENO without any closure, but if you are in a true LES regime it would probably be too dissipative. A Smagorinsky viscosity combined with an energy-conserving advection scheme has been found to be less dissipative although noisier (here is an example applied to Burgers equation https://reader.elsevier.com/reader/sd/pii/S0377042717303035?token=83A413B5659B8B16B96E1D0CBDAD5865D8552AE5B2FF2FDFE78FFDEF064F2820B38D1BBFF646D3F7B75D58FE010DF7DB&originRegion=us-east-1&originCreation=20230125193548). You can always try with higher order (maybe 7th?) but the higher the order the lower the stability (i.e. at a certain order your implicit dissipation will be so low that you will start to generate grid-scale noise). . The KE dissipation is there with `closure=nothing` and a WENO scheme, it is just not strictly physical: it's (roughly) akin to a 4th to a 6th-order hyperviscosity. You can compare this to using `UpwindBiased(order = 5)` which would give you everywhere a dissipation that converges to a 6th-order hyperviscosity. In general:. $$\partial_x {uu}^{Upwind_N} \sim \partial_x {uu}^{Centered_{N+1}} + \partial_x {K_{numerical}} \partial_x^{N} u$$. where $K_{numerical} \sim \Delta x u$ and $N$ is the order. The nice thing about using WENO instead of a simple Upwind discretization is that the order of the hyperviscosity adapts to the smoothness of the field. Therefore, where the field is noisier (like in regions of higher gradients) the dissipation is more aggressive. . This procedure not only ensures a smooth field but can be thought of as mimicking the subgrid-scale dissipation (which also increases with the gradient of resolved scale variables. As such people have referred to using particularly diffusive advective schemes (such as WENO) as _Implicit_ LES. I like the idea of implicit LES because it allows you to ""fill in"" for the subgrid-scale dissipation without committing to any s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433:1426,Energy Efficiency,adapt,adapts,1426,"er.elsevier.com/reader/sd/pii/S0377042717303035?token=83A413B5659B8B16B96E1D0CBDAD5865D8552AE5B2FF2FDFE78FFDEF064F2820B38D1BBFF646D3F7B75D58FE010DF7DB&originRegion=us-east-1&originCreation=20230125193548). You can always try with higher order (maybe 7th?) but the higher the order the lower the stability (i.e. at a certain order your implicit dissipation will be so low that you will start to generate grid-scale noise). . The KE dissipation is there with `closure=nothing` and a WENO scheme, it is just not strictly physical: it's (roughly) akin to a 4th to a 6th-order hyperviscosity. You can compare this to using `UpwindBiased(order = 5)` which would give you everywhere a dissipation that converges to a 6th-order hyperviscosity. In general:. $$\partial_x {uu}^{Upwind_N} \sim \partial_x {uu}^{Centered_{N+1}} + \partial_x {K_{numerical}} \partial_x^{N} u$$. where $K_{numerical} \sim \Delta x u$ and $N$ is the order. The nice thing about using WENO instead of a simple Upwind discretization is that the order of the hyperviscosity adapts to the smoothness of the field. Therefore, where the field is noisier (like in regions of higher gradients) the dissipation is more aggressive. . This procedure not only ensures a smooth field but can be thought of as mimicking the subgrid-scale dissipation (which also increases with the gradient of resolved scale variables. As such people have referred to using particularly diffusive advective schemes (such as WENO) as _Implicit_ LES. I like the idea of implicit LES because it allows you to ""fill in"" for the subgrid-scale dissipation without committing to any sophisticated formulation derived in a particularly idealized situation (take the example of Leith derived in homogeneous 2D turbulence and the geostrophic eddies in the ocean), and guarantees (or at least helps) stability. For this reason, it's pretty handy when you have different unresolved processes at different scales that may be characterized by different dissipation characteristi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433:0,Modifiability,Adapt,Adapting,0,"Adapting Smagorinsky seems an easy avenue. . In terms of Implicit LES, you could try using just WENO without any closure, but if you are in a true LES regime it would probably be too dissipative. A Smagorinsky viscosity combined with an energy-conserving advection scheme has been found to be less dissipative although noisier (here is an example applied to Burgers equation https://reader.elsevier.com/reader/sd/pii/S0377042717303035?token=83A413B5659B8B16B96E1D0CBDAD5865D8552AE5B2FF2FDFE78FFDEF064F2820B38D1BBFF646D3F7B75D58FE010DF7DB&originRegion=us-east-1&originCreation=20230125193548). You can always try with higher order (maybe 7th?) but the higher the order the lower the stability (i.e. at a certain order your implicit dissipation will be so low that you will start to generate grid-scale noise). . The KE dissipation is there with `closure=nothing` and a WENO scheme, it is just not strictly physical: it's (roughly) akin to a 4th to a 6th-order hyperviscosity. You can compare this to using `UpwindBiased(order = 5)` which would give you everywhere a dissipation that converges to a 6th-order hyperviscosity. In general:. $$\partial_x {uu}^{Upwind_N} \sim \partial_x {uu}^{Centered_{N+1}} + \partial_x {K_{numerical}} \partial_x^{N} u$$. where $K_{numerical} \sim \Delta x u$ and $N$ is the order. The nice thing about using WENO instead of a simple Upwind discretization is that the order of the hyperviscosity adapts to the smoothness of the field. Therefore, where the field is noisier (like in regions of higher gradients) the dissipation is more aggressive. . This procedure not only ensures a smooth field but can be thought of as mimicking the subgrid-scale dissipation (which also increases with the gradient of resolved scale variables. As such people have referred to using particularly diffusive advective schemes (such as WENO) as _Implicit_ LES. I like the idea of implicit LES because it allows you to ""fill in"" for the subgrid-scale dissipation without committing to any s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433:1426,Modifiability,adapt,adapts,1426,"er.elsevier.com/reader/sd/pii/S0377042717303035?token=83A413B5659B8B16B96E1D0CBDAD5865D8552AE5B2FF2FDFE78FFDEF064F2820B38D1BBFF646D3F7B75D58FE010DF7DB&originRegion=us-east-1&originCreation=20230125193548). You can always try with higher order (maybe 7th?) but the higher the order the lower the stability (i.e. at a certain order your implicit dissipation will be so low that you will start to generate grid-scale noise). . The KE dissipation is there with `closure=nothing` and a WENO scheme, it is just not strictly physical: it's (roughly) akin to a 4th to a 6th-order hyperviscosity. You can compare this to using `UpwindBiased(order = 5)` which would give you everywhere a dissipation that converges to a 6th-order hyperviscosity. In general:. $$\partial_x {uu}^{Upwind_N} \sim \partial_x {uu}^{Centered_{N+1}} + \partial_x {K_{numerical}} \partial_x^{N} u$$. where $K_{numerical} \sim \Delta x u$ and $N$ is the order. The nice thing about using WENO instead of a simple Upwind discretization is that the order of the hyperviscosity adapts to the smoothness of the field. Therefore, where the field is noisier (like in regions of higher gradients) the dissipation is more aggressive. . This procedure not only ensures a smooth field but can be thought of as mimicking the subgrid-scale dissipation (which also increases with the gradient of resolved scale variables. As such people have referred to using particularly diffusive advective schemes (such as WENO) as _Implicit_ LES. I like the idea of implicit LES because it allows you to ""fill in"" for the subgrid-scale dissipation without committing to any sophisticated formulation derived in a particularly idealized situation (take the example of Leith derived in homogeneous 2D turbulence and the geostrophic eddies in the ocean), and guarantees (or at least helps) stability. For this reason, it's pretty handy when you have different unresolved processes at different scales that may be characterized by different dissipation characteristi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433:1749,Modifiability,variab,variables,1749,"lsevier.com/reader/sd/pii/S0377042717303035?token=83A413B5659B8B16B96E1D0CBDAD5865D8552AE5B2FF2FDFE78FFDEF064F2820B38D1BBFF646D3F7B75D58FE010DF7DB&originRegion=us-east-1&originCreation=20230125193548). You can always try with higher order (maybe 7th?) but the higher the order the lower the stability (i.e. at a certain order your implicit dissipation will be so low that you will start to generate grid-scale noise). . The KE dissipation is there with `closure=nothing` and a WENO scheme, it is just not strictly physical: it's (roughly) akin to a 4th to a 6th-order hyperviscosity. You can compare this to using `UpwindBiased(order = 5)` which would give you everywhere a dissipation that converges to a 6th-order hyperviscosity. In general:. $$\partial_x {uu}^{Upwind_N} \sim \partial_x {uu}^{Centered_{N+1}} + \partial_x {K_{numerical}} \partial_x^{N} u$$. where $K_{numerical} \sim \Delta x u$ and $N$ is the order. The nice thing about using WENO instead of a simple Upwind discretization is that the order of the hyperviscosity adapts to the smoothness of the field. Therefore, where the field is noisier (like in regions of higher gradients) the dissipation is more aggressive. . This procedure not only ensures a smooth field but can be thought of as mimicking the subgrid-scale dissipation (which also increases with the gradient of resolved scale variables. As such people have referred to using particularly diffusive advective schemes (such as WENO) as _Implicit_ LES. I like the idea of implicit LES because it allows you to ""fill in"" for the subgrid-scale dissipation without committing to any sophisticated formulation derived in a particularly idealized situation (take the example of Leith derived in homogeneous 2D turbulence and the geostrophic eddies in the ocean), and guarantees (or at least helps) stability. For this reason, it's pretty handy when you have different unresolved processes at different scales that may be characterized by different dissipation characteristics.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433:1357,Usability,simpl,simple,1357,"er.elsevier.com/reader/sd/pii/S0377042717303035?token=83A413B5659B8B16B96E1D0CBDAD5865D8552AE5B2FF2FDFE78FFDEF064F2820B38D1BBFF646D3F7B75D58FE010DF7DB&originRegion=us-east-1&originCreation=20230125193548). You can always try with higher order (maybe 7th?) but the higher the order the lower the stability (i.e. at a certain order your implicit dissipation will be so low that you will start to generate grid-scale noise). . The KE dissipation is there with `closure=nothing` and a WENO scheme, it is just not strictly physical: it's (roughly) akin to a 4th to a 6th-order hyperviscosity. You can compare this to using `UpwindBiased(order = 5)` which would give you everywhere a dissipation that converges to a 6th-order hyperviscosity. In general:. $$\partial_x {uu}^{Upwind_N} \sim \partial_x {uu}^{Centered_{N+1}} + \partial_x {K_{numerical}} \partial_x^{N} u$$. where $K_{numerical} \sim \Delta x u$ and $N$ is the order. The nice thing about using WENO instead of a simple Upwind discretization is that the order of the hyperviscosity adapts to the smoothness of the field. Therefore, where the field is noisier (like in regions of higher gradients) the dissipation is more aggressive. . This procedure not only ensures a smooth field but can be thought of as mimicking the subgrid-scale dissipation (which also increases with the gradient of resolved scale variables. As such people have referred to using particularly diffusive advective schemes (such as WENO) as _Implicit_ LES. I like the idea of implicit LES because it allows you to ""fill in"" for the subgrid-scale dissipation without committing to any sophisticated formulation derived in a particularly idealized situation (take the example of Leith derived in homogeneous 2D turbulence and the geostrophic eddies in the ocean), and guarantees (or at least helps) stability. For this reason, it's pretty handy when you have different unresolved processes at different scales that may be characterized by different dissipation characteristi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404144433
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404146906:66,Energy Efficiency,energy,energy,66,"@simone-silvestri do you have any formula for computing the local energy dissipation rate due to numerical viscosity? For the global dissipation I think evaluating the time evolution of the total KE is a good route, but I'm less sure the best method for obtaining the local dissipation rate.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404146906
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404146906:209,Integrability,rout,route,209,"@simone-silvestri do you have any formula for computing the local energy dissipation rate due to numerical viscosity? For the global dissipation I think evaluating the time evolution of the total KE is a good route, but I'm less sure the best method for obtaining the local dissipation rate.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404146906
https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404203605:58,Energy Efficiency,energy,energy,58,I guess a way to do it might be by evaluating the kinetic energy budget (using a conservative method for advective fluxes),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1404203605
https://github.com/CliMA/Oceananigans.jl/pull/2872#issuecomment-1399351438:44,Testability,test,tests,44,@simone-silvestri the matrix poisson solver tests take quite a bit... is this. https://github.com/CliMA/Oceananigans.jl/blob/9cd1a348aa3e720249e7569bfeaa7ce97d665211/test/test_matrix_poisson_solver.jl#L143. really needed to be 100x100? would 50x50 do the job?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2872#issuecomment-1399351438
https://github.com/CliMA/Oceananigans.jl/pull/2872#issuecomment-1399351438:166,Testability,test,test,166,@simone-silvestri the matrix poisson solver tests take quite a bit... is this. https://github.com/CliMA/Oceananigans.jl/blob/9cd1a348aa3e720249e7569bfeaa7ce97d665211/test/test_matrix_poisson_solver.jl#L143. really needed to be 100x100? would 50x50 do the job?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2872#issuecomment-1399351438
https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770:22,Deployability,update,update,22,any slight dependency update results in most GPU tests failing... :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770
https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770:11,Integrability,depend,dependency,11,any slight dependency update results in most GPU tests failing... :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770
https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770:49,Testability,test,tests,49,any slight dependency update results in most GPU tests failing... :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2873#issuecomment-1399622770
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1402994491:33,Testability,test,tests,33,It seemed quite easy but now all tests are broken for a weird reason 😅,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1402994491
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1403898162:35,Testability,test,tests,35,> It seemed quite easy but now all tests are broken for a weird reason sweat_smile. Very strange. I can't believe this one simple change would cause all these problems. Is there something else going on here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1403898162
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1403898162:123,Usability,simpl,simple,123,> It seemed quite easy but now all tests are broken for a weird reason sweat_smile. Very strange. I can't believe this one simple change would cause all these problems. Is there something else going on here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1403898162
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1405939303:31,Testability,test,tests,31,Would it be worth retrying the tests to see if the problems persist on a second attempt?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1405939303
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1410489678:30,Testability,test,tests,30,Is anyone able to restart the tests to see if that fixes the problem?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1410489678
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1413856782:84,Testability,test,tests,84,"@simone-silvestri , any idea what might be going on here? Can we try restarting the tests to see if it was just a glitch the first time?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1413856782
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:321,Availability,error,errored,321,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:559,Availability,ERROR,ERROR,559,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:871,Availability,avail,available,871,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:1141,Availability,ERROR,ERROR,1141,"belms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing);   | @ Base ./loadi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:3545,Availability,Error,Error,3545,"8;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing);   | @ Base ./loading.jl:1554;   | [10] top-level scope;   | @ stdin:1;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:1;   | in expression starting at stdin:1;   | Stacktrace:;   | [1] pkgerror(msg::String);   | @ Pkg.Types /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/Types.jl:67;   | [2] precompile(ctx::Pkg.Types.Context, pkgs::Vector{String}; internal_call::Bool, strict::Bool, warn_loaded::Bool, already_instantiated::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}});   | @ Pkg.API /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1432;   | [3] precompile;   | @ /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1063 [inlined];   | [4] #precompile#225;   | @ /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1062 [inlined];   | [5] precompile (repeats 2 times);   | @ /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1062 [inlined];   | [6] top-level scope;   | @ none:1;   | 🚨 Error: The command exited with status 1;   | user command error: exit status 1. ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:3603,Availability,error,error,3603,"8;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing);   | @ Base ./loading.jl:1554;   | [10] top-level scope;   | @ stdin:1;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:1;   | in expression starting at stdin:1;   | Stacktrace:;   | [1] pkgerror(msg::String);   | @ Pkg.Types /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/Types.jl:67;   | [2] precompile(ctx::Pkg.Types.Context, pkgs::Vector{String}; internal_call::Bool, strict::Bool, warn_loaded::Bool, already_instantiated::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}});   | @ Pkg.API /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1432;   | [3] precompile;   | @ /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1063 [inlined];   | [4] #precompile#225;   | @ /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1062 [inlined];   | [5] precompile (repeats 2 times);   | @ /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1062 [inlined];   | [6] top-level scope;   | @ none:1;   | 🚨 Error: The command exited with status 1;   | user command error: exit status 1. ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:250,Integrability,depend,dependencies,250,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:310,Integrability,depend,dependency,310,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:469,Integrability,depend,dependencies,469,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:589,Integrability,depend,dependency,589,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:926,Modifiability,variab,variable,926,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:967,Modifiability,config,config,967,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:1031,Modifiability,config,config,1031,"onal changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.PkgId, input::String, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:1071,Modifiability,Config,Config,1071,"belms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing);   | @ Base ./loadi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:396,Performance,load,load,396,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:1148,Performance,Load,LoadError,1148,"belms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing);   | @ Base ./loadi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:2186,Performance,load,loading,2186,"argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing);   | @ Base ./loading.jl:1554;   | [10] top-level scope;   | @ stdin:1;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | in expression starting at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:1;   | in expression starting at stdin:1;   | Stacktrace:;   | [1] pkgerror(msg::String);   | @ Pkg.Types /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/Types.jl:67;   | [2] precompile(ctx::Pkg.Types.Context, pkgs::Vector{String}; internal_call::Bool, strict::Bool, warn_loaded::Bool, already_instantiated::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}});   | @ Pkg.API /storage5/buildkite-agent/julia-1.8.2/share/julia/stdlib/v1.8/Pkg/src/API.jl:1432;   | [3] precompile;   | @ /storage5/buildkite-agent/julia-1.8.2/share/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445:84,Testability,test,tests,84,"Thanks for the additional changes and it seems to be doing much better! Still three tests that fail. I looked ath the initialize environments and saw what I copied below. It seems to have probelms with Oceananigans?. ```. ✗ Oceananigans; --;   | 105 dependencies successfully precompiled in 112 seconds;   | 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package;   | Precompiling project...;   | ✗ Oceananigans;   | 0 dependencies successfully precompiled in 22 seconds. 105 already precompiled.;   |  ;   | ERROR: The following 1 direct dependency failed to precompile:;   |  ;   | Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09];   |  ;   | Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to /storage5/buildkite-agent/.julia-9773/compiled/v1.8/Oceananigans/jl_yggB5x.;   | [NVBLAS] No Gpu available;   | [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf';   | [NVBLAS] Cannot open default config file 'nvblas.conf';   | [NVBLAS] Config parsed;   | [NVBLAS] CPU Blas library need to be provided;   | ERROR: LoadError: syntax: missing comma or ) in argument list;   | Stacktrace:;   | [1] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/non_traditional_beta_plane.jl:75;   | [2] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [3] include(x::String);   | @ Oceananigans.Coriolis ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:1;   | [4] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Coriolis/Coriolis.jl:28;   | [5] include(mod::Module, _path::String);   | @ Base ./Base.jl:419;   | [6] include(x::String);   | @ Oceananigans ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:5;   | [7] top-level scope;   | @ ~/builds/tartarus-1/clima/oceananigans/src/Oceananigans.jl:230;   | [8] include;   | @ ./Base.jl:419 [inlined];   | [9] include_package_for_output(pkg::Base.Pk",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1414372445
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066:21,Availability,error,error,21,"When I looked at the error I see there is a problem with `yode`?. ```. Coriolis: Error During Test at /var/lib/buildkite-agent/builds/tartarus-10/clima/oceananigans/test/test_time_stepping.jl:280;   | Test threw exception;   | Expression: time_stepping_works_with_coriolis(arch, FT, Coriolis);   | TaskFailedException;   |  ;   | nested task error: MethodError: no method matching ynode(::Type{Center}, ::Int64, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU});   | Closest candidates are:;   | ynode(::Any, ::Any, ::Any, ::AbstractField) at ~/builds/tartarus-10/clima/oceananigans/src/Fields/abstract_field.jl:79;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::ImmersedBoundaryGrid) at ~/builds/tartarus-10/clima/oceananigans/src/ImmersedBoundaries/ImmersedBoundaries.jl:233;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at ~/builds/tartarus-10/clima/oceananigans/src/Grids/grid_utils.jl:228;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066:81,Availability,Error,Error,81,"When I looked at the error I see there is a problem with `yode`?. ```. Coriolis: Error During Test at /var/lib/buildkite-agent/builds/tartarus-10/clima/oceananigans/test/test_time_stepping.jl:280;   | Test threw exception;   | Expression: time_stepping_works_with_coriolis(arch, FT, Coriolis);   | TaskFailedException;   |  ;   | nested task error: MethodError: no method matching ynode(::Type{Center}, ::Int64, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU});   | Closest candidates are:;   | ynode(::Any, ::Any, ::Any, ::AbstractField) at ~/builds/tartarus-10/clima/oceananigans/src/Fields/abstract_field.jl:79;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::ImmersedBoundaryGrid) at ~/builds/tartarus-10/clima/oceananigans/src/ImmersedBoundaries/ImmersedBoundaries.jl:233;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at ~/builds/tartarus-10/clima/oceananigans/src/Grids/grid_utils.jl:228;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066:342,Availability,error,error,342,"When I looked at the error I see there is a problem with `yode`?. ```. Coriolis: Error During Test at /var/lib/buildkite-agent/builds/tartarus-10/clima/oceananigans/test/test_time_stepping.jl:280;   | Test threw exception;   | Expression: time_stepping_works_with_coriolis(arch, FT, Coriolis);   | TaskFailedException;   |  ;   | nested task error: MethodError: no method matching ynode(::Type{Center}, ::Int64, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU});   | Closest candidates are:;   | ynode(::Any, ::Any, ::Any, ::AbstractField) at ~/builds/tartarus-10/clima/oceananigans/src/Fields/abstract_field.jl:79;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::ImmersedBoundaryGrid) at ~/builds/tartarus-10/clima/oceananigans/src/ImmersedBoundaries/ImmersedBoundaries.jl:233;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at ~/builds/tartarus-10/clima/oceananigans/src/Grids/grid_utils.jl:228;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066:94,Testability,Test,Test,94,"When I looked at the error I see there is a problem with `yode`?. ```. Coriolis: Error During Test at /var/lib/buildkite-agent/builds/tartarus-10/clima/oceananigans/test/test_time_stepping.jl:280;   | Test threw exception;   | Expression: time_stepping_works_with_coriolis(arch, FT, Coriolis);   | TaskFailedException;   |  ;   | nested task error: MethodError: no method matching ynode(::Type{Center}, ::Int64, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU});   | Closest candidates are:;   | ynode(::Any, ::Any, ::Any, ::AbstractField) at ~/builds/tartarus-10/clima/oceananigans/src/Fields/abstract_field.jl:79;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::ImmersedBoundaryGrid) at ~/builds/tartarus-10/clima/oceananigans/src/ImmersedBoundaries/ImmersedBoundaries.jl:233;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at ~/builds/tartarus-10/clima/oceananigans/src/Grids/grid_utils.jl:228;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066:165,Testability,test,test,165,"When I looked at the error I see there is a problem with `yode`?. ```. Coriolis: Error During Test at /var/lib/buildkite-agent/builds/tartarus-10/clima/oceananigans/test/test_time_stepping.jl:280;   | Test threw exception;   | Expression: time_stepping_works_with_coriolis(arch, FT, Coriolis);   | TaskFailedException;   |  ;   | nested task error: MethodError: no method matching ynode(::Type{Center}, ::Int64, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU});   | Closest candidates are:;   | ynode(::Any, ::Any, ::Any, ::AbstractField) at ~/builds/tartarus-10/clima/oceananigans/src/Fields/abstract_field.jl:79;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::ImmersedBoundaryGrid) at ~/builds/tartarus-10/clima/oceananigans/src/ImmersedBoundaries/ImmersedBoundaries.jl:233;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at ~/builds/tartarus-10/clima/oceananigans/src/Grids/grid_utils.jl:228;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066:201,Testability,Test,Test,201,"When I looked at the error I see there is a problem with `yode`?. ```. Coriolis: Error During Test at /var/lib/buildkite-agent/builds/tartarus-10/clima/oceananigans/test/test_time_stepping.jl:280;   | Test threw exception;   | Expression: time_stepping_works_with_coriolis(arch, FT, Coriolis);   | TaskFailedException;   |  ;   | nested task error: MethodError: no method matching ynode(::Type{Center}, ::Int64, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU});   | Closest candidates are:;   | ynode(::Any, ::Any, ::Any, ::AbstractField) at ~/builds/tartarus-10/clima/oceananigans/src/Fields/abstract_field.jl:79;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::ImmersedBoundaryGrid) at ~/builds/tartarus-10/clima/oceananigans/src/ImmersedBoundaries/ImmersedBoundaries.jl:233;   | ynode(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at ~/builds/tartarus-10/clima/oceananigans/src/Grids/grid_utils.jl:228;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1426421066
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:202,Availability,error,error,202,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:91,Testability,test,tests,91,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:306,Testability,Test,Test,306,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:414,Testability,test,test,414,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:656,Testability,Test,Test,656,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:665,Testability,Test,Test,665,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345:902,Testability,test,test,902,"Thanks @navidcy for making these changes, this is much better!. I looked in the regression tests and it seems that the `v` velocity is not as close as it used to be. I wonder if this is a matter of the error being slightly bigger?. ```; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;   | Expression: all(test_fields.v .≈ truth_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /net/ocean/home/data44/data5/glwagner/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool);   | @ Main /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-10/clima/oceananigans/test/regression_tests/shallow_water_bickley_jet_regression.jl:93;  ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427067345
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427116093:57,Testability,test,test,57,hm... before we start pondering on that I just rerun the test and see what happens :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427116093
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427118830:25,Modifiability,rewrite,rewrite,25,If it was related to the rewrite of the terms then shouldn't been affecting CPU regression test as well?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427118830
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427118830:91,Testability,test,test,91,If it was related to the rewrite of the terms then shouldn't been affecting CPU regression test as well?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427118830
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427124529:88,Availability,fault,faulty,88,This is a problem on all PRs. I am not sure about our regression test data. It might be faulty.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427124529
https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427124529:65,Testability,test,test,65,This is a problem on all PRs. I am not sure about our regression test data. It might be faulty.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1427124529
https://github.com/CliMA/Oceananigans.jl/pull/2879#issuecomment-1404148796:94,Energy Efficiency,reduce,reduce,94,"Nice! We probably want to replace docstrings judiciously, since there are some we may want to reduce (for the purpose of readability / understability) relative to the automatically generated versions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2879#issuecomment-1404148796
https://github.com/CliMA/Oceananigans.jl/pull/2879#issuecomment-1404336464:96,Energy Efficiency,reduce,reduce,96,"> Nice! We probably want to replace docstrings judiciously, since there are some we may want to reduce (for the purpose of readability / understability) relative to the automatically generated versions?. I think the way DocStringExtensions includes things is pretty minimally invasive so I don't think too-verbose docstring will be an issue (if I understand your point correctly). But I agree with your point. Just as a point of comparison, here's what the start of the docstrings for `RectilinearGrid` looks like on main:. ```julia; help?> RectilinearGrid; search: RectilinearGrid. RectilinearGrid([architecture = CPU(), FT = Float64];; size,; x = nothing,; y = nothing,; z = nothing,; halo = nothing,; extent = nothing,; topology = (Periodic, Periodic, Bounded)). Creates a RectilinearGrid with size = (Nx, Ny, Nz) grid points.; ```. and here's what it looks like o this branch after using DocStringExtensions:. ```julia; help?> RectilinearGrid; search: RectilinearGrid. RectilinearGrid(); RectilinearGrid(architecture); RectilinearGrid(; architecture,; FT;; size,; x,; y,; z,; halo,; extent,; topology; ); . Creates a RectilinearGrid with size = (Nx, Ny, Nz) grid points.; ```. For now the automatic signature isn't showing the default for each argument, which isn't great, but there might be a way to include that with some options.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2879#issuecomment-1404336464
https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1441761614:22,Testability,test,tests,22,the current regriding tests fail... is this alarming?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1441761614
https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1470377304:2369,Availability,error,error,2369,"ect, while `grid.Nz` is completely off.; This is the code I used to generate the regridded data~. ```; using ClimaOcean; using ClimaOcean.DataWrangling; using Oceananigans ; using Oceananigans.BoundaryConditions; using DataDeps; using GLMakie; using JLD2 . regrid_in_z = true. path = ""https://github.com/CliMA/OceananigansArtifacts.jl/raw/ss/new_hydrostatic_data_after_cleared_bugs/quarter_degree_near_global_input_data/"". dh = DataDep(""quarter_degree_near_global_lat_lon"",; ""Forcing data for global latitude longitude simulation"",; path * ""z_faces-50-levels.jld2""; ). DataDeps.register(dh). datadep""quarter_degree_near_global_lat_lon"". datadep_path = @datadep_str ""quarter_degree_near_global_lat_lon/z_faces-50-levels.jld2""; file_z_faces = jldopen(datadep_path); z_faces = file_z_faces[""z_faces""][3:end];. file_init = jldopen(""evolved-initial-conditions-1105days.jld2""). # A spherical domain; grid12 = LatitudeLongitudeGrid(size = (4320, 1800, 48),; longitude = (-180, 180),; latitude = (-75, 75),; z = z_faces,; precompute_metrics = true). T12 = set!(CenterField(grid12), file_init[""T""]); S12 = set!(CenterField(grid12), file_init[""S""]). @inline exponential_profile(z; Lz, h) = (exp(z / h) - exp( - Lz / h)) / (1 - exp( - Lz / h)) . function exponential_z_faces(Nz, Depth; h = Nz / 4.5). z_faces = exponential_profile.((1:Nz+1); Lz = Nz, h). # Normalize; z_faces .-= z_faces[1]; z_faces .*= - Depth / z_faces[end]; ; z_faces[1] = 0.0. return reverse(z_faces); end. Depth = - grid12.Lz. @info ""start regridding in Z!!""; grid12z = LatitudeLongitudeGrid(size = (4320, 1800, 120),; longitude = (-180, 180),; latitude = (-75, 75),; z = exponential_z_faces(120, Depth),; precompute_metrics = true). T12z = CenterField(grid12z); S12z = CenterField(grid12z). using Oceananigans.Fields: regrid!; fill_halo_regions!((T12, S12)); regrid!(T12z, T12); regrid!(S12z, S12); jldsave(""regridded_in_z.jld2"", T = Array(interior(T12z)), S = Array(interior(S12z))); ```. Edit this seems to have been an error on my side",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1470377304
https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1470377304:1213,Modifiability,evolve,evolved-initial-conditions-,1213,"githubusercontent.com/33547697/225382686-301b4f32-73b5-40a3-b5e3-74c52fa189f1.png). ~left is `k = grid.Nz-1` and right is `k = grid.Nz`. `grid.Nz-1` seems to be correct, while `grid.Nz` is completely off.; This is the code I used to generate the regridded data~. ```; using ClimaOcean; using ClimaOcean.DataWrangling; using Oceananigans ; using Oceananigans.BoundaryConditions; using DataDeps; using GLMakie; using JLD2 . regrid_in_z = true. path = ""https://github.com/CliMA/OceananigansArtifacts.jl/raw/ss/new_hydrostatic_data_after_cleared_bugs/quarter_degree_near_global_input_data/"". dh = DataDep(""quarter_degree_near_global_lat_lon"",; ""Forcing data for global latitude longitude simulation"",; path * ""z_faces-50-levels.jld2""; ). DataDeps.register(dh). datadep""quarter_degree_near_global_lat_lon"". datadep_path = @datadep_str ""quarter_degree_near_global_lat_lon/z_faces-50-levels.jld2""; file_z_faces = jldopen(datadep_path); z_faces = file_z_faces[""z_faces""][3:end];. file_init = jldopen(""evolved-initial-conditions-1105days.jld2""). # A spherical domain; grid12 = LatitudeLongitudeGrid(size = (4320, 1800, 48),; longitude = (-180, 180),; latitude = (-75, 75),; z = z_faces,; precompute_metrics = true). T12 = set!(CenterField(grid12), file_init[""T""]); S12 = set!(CenterField(grid12), file_init[""S""]). @inline exponential_profile(z; Lz, h) = (exp(z / h) - exp( - Lz / h)) / (1 - exp( - Lz / h)) . function exponential_z_faces(Nz, Depth; h = Nz / 4.5). z_faces = exponential_profile.((1:Nz+1); Lz = Nz, h). # Normalize; z_faces .-= z_faces[1]; z_faces .*= - Depth / z_faces[end]; ; z_faces[1] = 0.0. return reverse(z_faces); end. Depth = - grid12.Lz. @info ""start regridding in Z!!""; grid12z = LatitudeLongitudeGrid(size = (4320, 1800, 120),; longitude = (-180, 180),; latitude = (-75, 75),; z = exponential_z_faces(120, Depth),; precompute_metrics = true). T12z = CenterField(grid12z); S12z = CenterField(grid12z). using Oceananigans.Fields: regrid!; fill_halo_regions!((T12, S12)); regrid!(T12z, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1470377304
https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1472015231:38,Availability,error,errors,38,@simone-silvestri im getting a lot of errors after merging your suggestions… can you take a look?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2881#issuecomment-1472015231
https://github.com/CliMA/Oceananigans.jl/issues/2882#issuecomment-1411317487:110,Integrability,depend,depends,110,"> Does anybody know what is the rationale for `similar(::Field)` to drop the boundary conditions?. I think it depends on how you view ""boundary conditions"". If we adopt a ""weak formulation philosophy"" then boundary conditions are part of the definition of an equation set and don't belong to fields at all. This is how `ImmersedBoundaryGrid` works; inhomogeneous boundary conditions can only be enforced by adding boundary fluxes to a tendency. There's no such thing as a ""boundary condition"" outside the context of time stepping. Unfortunately, `Oceananigans` is not consistent in how this philosophy is applied and when we are on ""non-immersed"" grids we have more of a ""strong formulation"" philosophy. I believe the rationale for not transferring boundary conditions is the expectation that we will eventually adopt a ""weak formulation philosophy"" consistently throughout the code. In that case, non-default boundary conditions are meaningless on anything but prognostic fields that are evolved during time-stepping.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2882#issuecomment-1411317487
https://github.com/CliMA/Oceananigans.jl/issues/2882#issuecomment-1411317487:989,Modifiability,evolve,evolved,989,"> Does anybody know what is the rationale for `similar(::Field)` to drop the boundary conditions?. I think it depends on how you view ""boundary conditions"". If we adopt a ""weak formulation philosophy"" then boundary conditions are part of the definition of an equation set and don't belong to fields at all. This is how `ImmersedBoundaryGrid` works; inhomogeneous boundary conditions can only be enforced by adding boundary fluxes to a tendency. There's no such thing as a ""boundary condition"" outside the context of time stepping. Unfortunately, `Oceananigans` is not consistent in how this philosophy is applied and when we are on ""non-immersed"" grids we have more of a ""strong formulation"" philosophy. I believe the rationale for not transferring boundary conditions is the expectation that we will eventually adopt a ""weak formulation philosophy"" consistently throughout the code. In that case, non-default boundary conditions are meaningless on anything but prognostic fields that are evolved during time-stepping.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2882#issuecomment-1411317487
https://github.com/CliMA/Oceananigans.jl/pull/2885#issuecomment-1412113470:172,Usability,clear,clear,172,"> btw the function belongs to a generic `matrix_utils.jl` file or something and instead of `initialize_matrix` it should be called `build_matrix`. ""operator"" might be more clear? Or some other semantics. We want to say something like ""Solve A*x=b, where A is..."" I don't think we want to say ""A is The Matrix"". Something more specific?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2885#issuecomment-1412113470
https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1408822466:178,Testability,test,test,178,Should we preview the docs to make sure things are working before merging? They should render here: https://clima.github.io/OceananigansDocumentation/previews/PR2886. Or did you test things locally and are confident enough that this works?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1408822466
https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1409054886:32,Performance,load,load,32,Nah…. Every preview is 200MB of load on the repo I then have to clean and it’s not that easy to clean up a repository’s history. I’d rather I make the PR twice or built the docs locally :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1409054886
https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1409061309:40,Performance,load,load,40,"> Nah…; > ; > Every preview is 200MB of load on the repo I then have to clean and it’s not that easy to clean up a repository’s history. I’d rather I make the PR twice or built the docs locally :). Oof, didn't know that. Sounds fair :). I'll approve it, although we probably have to restart the failed GPU tests",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1409061309
https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1409061309:306,Testability,test,tests,306,"> Nah…; > ; > Every preview is 200MB of load on the repo I then have to clean and it’s not that easy to clean up a repository’s history. I’d rather I make the PR twice or built the docs locally :). Oof, didn't know that. Sounds fair :). I'll approve it, although we probably have to restart the failed GPU tests",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1409061309
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1421225576:10,Deployability,integrat,integration,10,a 20-year integration of the quarter degree simulation (in `validation/near_global_lat_lon/near_global_quarter_degree.jl`) using the following as a free surface:. ```; Δt = 10minutes # probably we can go to 10min or 15min?; CFL = 0.7. wave_speed = sqrt(g_Earth * grid.Lz); Δg = 1 / sqrt(1 / min_Δx(grid)^2 + 1 / min_Δy(grid)^2). @show substeps = Int(ceil(2 * Δt / (CFL / wave_speed * Δg))). free_surface = SplitExplicitFreeSurface(; substeps); ```. https://user-images.githubusercontent.com/33547697/217328677-9c737e8d-140b-4a9f-92b9-d42f5d364a3d.mp4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1421225576
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1421225576:10,Integrability,integrat,integration,10,a 20-year integration of the quarter degree simulation (in `validation/near_global_lat_lon/near_global_quarter_degree.jl`) using the following as a free surface:. ```; Δt = 10minutes # probably we can go to 10min or 15min?; CFL = 0.7. wave_speed = sqrt(g_Earth * grid.Lz); Δg = 1 / sqrt(1 / min_Δx(grid)^2 + 1 / min_Δy(grid)^2). @show substeps = Int(ceil(2 * Δt / (CFL / wave_speed * Δg))). free_surface = SplitExplicitFreeSurface(; substeps); ```. https://user-images.githubusercontent.com/33547697/217328677-9c737e8d-140b-4a9f-92b9-d42f5d364a3d.mp4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1421225576
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1421225576:60,Security,validat,validation,60,a 20-year integration of the quarter degree simulation (in `validation/near_global_lat_lon/near_global_quarter_degree.jl`) using the following as a free surface:. ```; Δt = 10minutes # probably we can go to 10min or 15min?; CFL = 0.7. wave_speed = sqrt(g_Earth * grid.Lz); Δg = 1 / sqrt(1 / min_Δx(grid)^2 + 1 / min_Δy(grid)^2). @show substeps = Int(ceil(2 * Δt / (CFL / wave_speed * Δg))). free_surface = SplitExplicitFreeSurface(; substeps); ```. https://user-images.githubusercontent.com/33547697/217328677-9c737e8d-140b-4a9f-92b9-d42f5d364a3d.mp4,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1421225576
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431366185:465,Integrability,depend,dependent,465,"I share here a double drake experiment that makes full use of this PR ; #### Grid setup; - latitude longitude grid from 75 S to 75 N; - 1/3 of a degree in the horizontal (1080 points in longitude, 450 in latitude); - 150 exponentially stretched vertical levels for a 3km deep ocean; - double drake bathymetry (https://doi.org/10.1175/2009JCLI3197.1); #### Top BC: ; - temperature: restoring to reference profile (cosine shape); - salinity: prescribed latitudinally dependent surface flux; - zonal velocity: prescribed latitudinally dependent wind stress; #### Bottom BC:; - velocities: linear bottom drag with a drag coefficient of 0.003 ms⁻¹; #### Initial conditions; - zero velocities; - exponentially stratified temperature with SST equal to the reference temperature; - constant salinity; #### Model setup; - linear equation of state; - Richardson-based diffusivity for BL mixing ; - vertical background viscosity and diffusivity of 5e-4 and 3e-5, respectively; - vector invariant momentum advection with WENO for vorticity and divergence flux as well as vertical transport (no horizontal viscosity); - WENO for tracer advection (no horizontal diffusivity); - Split explicit free surface using an averaging shape function and a CFL of 0.7 (23 substeps per time step); #### Simulation setup; - time step of 10 minutes; - ran on 2 MPI processes with CUDA-aware MPI; - performs about 10 simulated years per day. On the left, there is the free surface evolution, on the right the surface vertical vorticity (evolved for 9 years). https://user-images.githubusercontent.com/33547697/219039209-e99ad100-2730-4805-bf57-c3b438f64537.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431366185
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431366185:532,Integrability,depend,dependent,532,"I share here a double drake experiment that makes full use of this PR ; #### Grid setup; - latitude longitude grid from 75 S to 75 N; - 1/3 of a degree in the horizontal (1080 points in longitude, 450 in latitude); - 150 exponentially stretched vertical levels for a 3km deep ocean; - double drake bathymetry (https://doi.org/10.1175/2009JCLI3197.1); #### Top BC: ; - temperature: restoring to reference profile (cosine shape); - salinity: prescribed latitudinally dependent surface flux; - zonal velocity: prescribed latitudinally dependent wind stress; #### Bottom BC:; - velocities: linear bottom drag with a drag coefficient of 0.003 ms⁻¹; #### Initial conditions; - zero velocities; - exponentially stratified temperature with SST equal to the reference temperature; - constant salinity; #### Model setup; - linear equation of state; - Richardson-based diffusivity for BL mixing ; - vertical background viscosity and diffusivity of 5e-4 and 3e-5, respectively; - vector invariant momentum advection with WENO for vorticity and divergence flux as well as vertical transport (no horizontal viscosity); - WENO for tracer advection (no horizontal diffusivity); - Split explicit free surface using an averaging shape function and a CFL of 0.7 (23 substeps per time step); #### Simulation setup; - time step of 10 minutes; - ran on 2 MPI processes with CUDA-aware MPI; - performs about 10 simulated years per day. On the left, there is the free surface evolution, on the right the surface vertical vorticity (evolved for 9 years). https://user-images.githubusercontent.com/33547697/219039209-e99ad100-2730-4805-bf57-c3b438f64537.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431366185
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431366185:1508,Modifiability,evolve,evolved,1508,"I share here a double drake experiment that makes full use of this PR ; #### Grid setup; - latitude longitude grid from 75 S to 75 N; - 1/3 of a degree in the horizontal (1080 points in longitude, 450 in latitude); - 150 exponentially stretched vertical levels for a 3km deep ocean; - double drake bathymetry (https://doi.org/10.1175/2009JCLI3197.1); #### Top BC: ; - temperature: restoring to reference profile (cosine shape); - salinity: prescribed latitudinally dependent surface flux; - zonal velocity: prescribed latitudinally dependent wind stress; #### Bottom BC:; - velocities: linear bottom drag with a drag coefficient of 0.003 ms⁻¹; #### Initial conditions; - zero velocities; - exponentially stratified temperature with SST equal to the reference temperature; - constant salinity; #### Model setup; - linear equation of state; - Richardson-based diffusivity for BL mixing ; - vertical background viscosity and diffusivity of 5e-4 and 3e-5, respectively; - vector invariant momentum advection with WENO for vorticity and divergence flux as well as vertical transport (no horizontal viscosity); - WENO for tracer advection (no horizontal diffusivity); - Split explicit free surface using an averaging shape function and a CFL of 0.7 (23 substeps per time step); #### Simulation setup; - time step of 10 minutes; - ran on 2 MPI processes with CUDA-aware MPI; - performs about 10 simulated years per day. On the left, there is the free surface evolution, on the right the surface vertical vorticity (evolved for 9 years). https://user-images.githubusercontent.com/33547697/219039209-e99ad100-2730-4805-bf57-c3b438f64537.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431366185
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431366185:1370,Performance,perform,performs,1370,"I share here a double drake experiment that makes full use of this PR ; #### Grid setup; - latitude longitude grid from 75 S to 75 N; - 1/3 of a degree in the horizontal (1080 points in longitude, 450 in latitude); - 150 exponentially stretched vertical levels for a 3km deep ocean; - double drake bathymetry (https://doi.org/10.1175/2009JCLI3197.1); #### Top BC: ; - temperature: restoring to reference profile (cosine shape); - salinity: prescribed latitudinally dependent surface flux; - zonal velocity: prescribed latitudinally dependent wind stress; #### Bottom BC:; - velocities: linear bottom drag with a drag coefficient of 0.003 ms⁻¹; #### Initial conditions; - zero velocities; - exponentially stratified temperature with SST equal to the reference temperature; - constant salinity; #### Model setup; - linear equation of state; - Richardson-based diffusivity for BL mixing ; - vertical background viscosity and diffusivity of 5e-4 and 3e-5, respectively; - vector invariant momentum advection with WENO for vorticity and divergence flux as well as vertical transport (no horizontal viscosity); - WENO for tracer advection (no horizontal diffusivity); - Split explicit free surface using an averaging shape function and a CFL of 0.7 (23 substeps per time step); #### Simulation setup; - time step of 10 minutes; - ran on 2 MPI processes with CUDA-aware MPI; - performs about 10 simulated years per day. On the left, there is the free surface evolution, on the right the surface vertical vorticity (evolved for 9 years). https://user-images.githubusercontent.com/33547697/219039209-e99ad100-2730-4805-bf57-c3b438f64537.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431366185
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431581342:489,Integrability,depend,dependent,489,"> I share here a double drake experiment that makes full use of this PR; > ; > #### Grid setup; > * latitude longitude grid from 75 S to 75 N; > * 1/3 of a degree in the horizontal (1080 points in longitude, 450 in latitude); > * 150 exponentially stretched vertical levels for a 3km deep ocean; > * double drake bathymetry (https://doi.org/10.1175/2009JCLI3197.1); > ; > #### Top BC:; > * temperature: restoring to reference profile (cosine shape); > * salinity: prescribed latitudinally dependent surface flux; > * zonal velocity: prescribed latitudinally dependent wind stress; > ; > #### Bottom BC:; > * velocities: linear bottom drag with a drag coefficient of 0.003 ms⁻¹; > ; > #### Initial conditions; > * zero velocities; > * exponentially stratified temperature with SST equal to the reference temperature; > * constant salinity; > ; > #### Model setup; > * linear equation of state; > * Richardson-based diffusivity for BL mixing; > * vertical background viscosity and diffusivity of 5e-4 and 3e-5, respectively; > * vector invariant momentum advection with WENO for vorticity and divergence flux as well as vertical transport (no horizontal viscosity); > * WENO for tracer advection (no horizontal diffusivity); > * Split explicit free surface using an averaging shape function and a CFL of 0.7 (23 substeps per time step); > ; > #### Simulation setup; > * time step of 10 minutes; > * ran on 2 MPI processes with CUDA-aware MPI; > * performs about 10 simulated years per day; > ; > On the left, there is the free surface evolution, on the right the surface vertical vorticity (evolved for 9 years). This would be a good setup to add to `ClimaOcean.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431581342
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431581342:558,Integrability,depend,dependent,558,"> I share here a double drake experiment that makes full use of this PR; > ; > #### Grid setup; > * latitude longitude grid from 75 S to 75 N; > * 1/3 of a degree in the horizontal (1080 points in longitude, 450 in latitude); > * 150 exponentially stretched vertical levels for a 3km deep ocean; > * double drake bathymetry (https://doi.org/10.1175/2009JCLI3197.1); > ; > #### Top BC:; > * temperature: restoring to reference profile (cosine shape); > * salinity: prescribed latitudinally dependent surface flux; > * zonal velocity: prescribed latitudinally dependent wind stress; > ; > #### Bottom BC:; > * velocities: linear bottom drag with a drag coefficient of 0.003 ms⁻¹; > ; > #### Initial conditions; > * zero velocities; > * exponentially stratified temperature with SST equal to the reference temperature; > * constant salinity; > ; > #### Model setup; > * linear equation of state; > * Richardson-based diffusivity for BL mixing; > * vertical background viscosity and diffusivity of 5e-4 and 3e-5, respectively; > * vector invariant momentum advection with WENO for vorticity and divergence flux as well as vertical transport (no horizontal viscosity); > * WENO for tracer advection (no horizontal diffusivity); > * Split explicit free surface using an averaging shape function and a CFL of 0.7 (23 substeps per time step); > ; > #### Simulation setup; > * time step of 10 minutes; > * ran on 2 MPI processes with CUDA-aware MPI; > * performs about 10 simulated years per day; > ; > On the left, there is the free surface evolution, on the right the surface vertical vorticity (evolved for 9 years). This would be a good setup to add to `ClimaOcean.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431581342
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431581342:1589,Modifiability,evolve,evolved,1589,"> I share here a double drake experiment that makes full use of this PR; > ; > #### Grid setup; > * latitude longitude grid from 75 S to 75 N; > * 1/3 of a degree in the horizontal (1080 points in longitude, 450 in latitude); > * 150 exponentially stretched vertical levels for a 3km deep ocean; > * double drake bathymetry (https://doi.org/10.1175/2009JCLI3197.1); > ; > #### Top BC:; > * temperature: restoring to reference profile (cosine shape); > * salinity: prescribed latitudinally dependent surface flux; > * zonal velocity: prescribed latitudinally dependent wind stress; > ; > #### Bottom BC:; > * velocities: linear bottom drag with a drag coefficient of 0.003 ms⁻¹; > ; > #### Initial conditions; > * zero velocities; > * exponentially stratified temperature with SST equal to the reference temperature; > * constant salinity; > ; > #### Model setup; > * linear equation of state; > * Richardson-based diffusivity for BL mixing; > * vertical background viscosity and diffusivity of 5e-4 and 3e-5, respectively; > * vector invariant momentum advection with WENO for vorticity and divergence flux as well as vertical transport (no horizontal viscosity); > * WENO for tracer advection (no horizontal diffusivity); > * Split explicit free surface using an averaging shape function and a CFL of 0.7 (23 substeps per time step); > ; > #### Simulation setup; > * time step of 10 minutes; > * ran on 2 MPI processes with CUDA-aware MPI; > * performs about 10 simulated years per day; > ; > On the left, there is the free surface evolution, on the right the surface vertical vorticity (evolved for 9 years). This would be a good setup to add to `ClimaOcean.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431581342
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431581342:1445,Performance,perform,performs,1445,"> I share here a double drake experiment that makes full use of this PR; > ; > #### Grid setup; > * latitude longitude grid from 75 S to 75 N; > * 1/3 of a degree in the horizontal (1080 points in longitude, 450 in latitude); > * 150 exponentially stretched vertical levels for a 3km deep ocean; > * double drake bathymetry (https://doi.org/10.1175/2009JCLI3197.1); > ; > #### Top BC:; > * temperature: restoring to reference profile (cosine shape); > * salinity: prescribed latitudinally dependent surface flux; > * zonal velocity: prescribed latitudinally dependent wind stress; > ; > #### Bottom BC:; > * velocities: linear bottom drag with a drag coefficient of 0.003 ms⁻¹; > ; > #### Initial conditions; > * zero velocities; > * exponentially stratified temperature with SST equal to the reference temperature; > * constant salinity; > ; > #### Model setup; > * linear equation of state; > * Richardson-based diffusivity for BL mixing; > * vertical background viscosity and diffusivity of 5e-4 and 3e-5, respectively; > * vector invariant momentum advection with WENO for vorticity and divergence flux as well as vertical transport (no horizontal viscosity); > * WENO for tracer advection (no horizontal diffusivity); > * Split explicit free surface using an averaging shape function and a CFL of 0.7 (23 substeps per time step); > ; > #### Simulation setup; > * time step of 10 minutes; > * ran on 2 MPI processes with CUDA-aware MPI; > * performs about 10 simulated years per day; > ; > On the left, there is the free surface evolution, on the right the surface vertical vorticity (evolved for 9 years). This would be a good setup to add to `ClimaOcean.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1431581342
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1437178605:127,Modifiability,refactor,refactor,127,"I should have addressed all the changes except the `Field{loc...}(grid)` to `Field(loc, grid)`. I will do another PR that will refactor all the instances of `Field(loc, grid)` to `Field{loc...}(grid)`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1437178605
https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1437202030:129,Modifiability,refactor,refactor,129,"> I should have addressed all the changes except the `Field{loc...}(grid)` to `Field(loc, grid)`. I will do another PR that will refactor all the instances of `Field(loc, grid)` to `Field{loc...}(grid)`. sounds good",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2888#issuecomment-1437202030
https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1416674470:147,Performance,load,load,147,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1416674470
https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1416674470:19,Testability,test,tests,19,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1416674470
https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1416674470:63,Testability,test,tests,63,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1416674470
https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1417214083:27,Deployability,patch,patch,27,"merge?; we didn't bump any patch release, is this OK?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1417214083
https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1417214083:33,Deployability,release,release,33,"merge?; we didn't bump any patch release, is this OK?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2890#issuecomment-1417214083
https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414102299:521,Availability,down,downsides,521,"> @tomchor this may affect your results. Suprisingly, with this change the velocity field appears to _both_ divergence free _and_ satisfies impenetrability. Prior to this PR, the velocity was not divergence free. Thus I think this is important for correctness. Do you want to evaluate it?. Wow that's interesting. I don't know if I have the time to evaluate this right now, so feel free to move forward without me. But if you observe that the velocity retains impenetrability and is now divergence-free then there are no downsides to this PR!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414102299
https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414117039:78,Security,validat,validation,78,"It might be good to add divergence and tracer budget calculations to either a validation or a test, no? What do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414117039
https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414117039:94,Testability,test,test,94,"It might be good to add divergence and tracer budget calculations to either a validation or a test, no? What do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2892#issuecomment-1414117039
https://github.com/CliMA/Oceananigans.jl/pull/2897#issuecomment-1416674456:147,Performance,load,load,147,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2897#issuecomment-1416674456
https://github.com/CliMA/Oceananigans.jl/pull/2897#issuecomment-1416674456:19,Testability,test,tests,19,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2897#issuecomment-1416674456
https://github.com/CliMA/Oceananigans.jl/pull/2897#issuecomment-1416674456:63,Testability,test,tests,63,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2897#issuecomment-1416674456
https://github.com/CliMA/Oceananigans.jl/pull/2898#issuecomment-1416674425:147,Performance,load,load,147,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2898#issuecomment-1416674425
https://github.com/CliMA/Oceananigans.jl/pull/2898#issuecomment-1416674425:19,Testability,test,tests,19,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2898#issuecomment-1416674425
https://github.com/CliMA/Oceananigans.jl/pull/2898#issuecomment-1416674425:63,Testability,test,tests,63,(fyi I stopped the tests because everything was clogged... all tests in PRs have been running for 6-7 hrs... so perhaps restart when there is less load),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2898#issuecomment-1416674425
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416872443:17,Deployability,update,update,17,Ideally we would update to CUDA 4 at the same time but for that we need to update AMGX.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416872443
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416872443:75,Deployability,update,update,75,Ideally we would update to CUDA 4 at the same time but for that we need to update AMGX.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416872443
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416874430:31,Deployability,upgrade,upgrade,31,@vchuravy I also an attempt to upgrade in #2782. If you feel that's useful then pick up that one?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416874430
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:52,Availability,Error,Error,52,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:627,Availability,error,error,627,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:654,Availability,error,error,654,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:65,Testability,Test,Test,65,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:105,Testability,test,test,105,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:143,Testability,Test,Test,143,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522:671,Testability,assert,assertscalar,671,"Locally I am seeing:. ```; Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; Test threw exception; Expression: ZeroField() - u == -u; Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; [4] getindex; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418338522
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631:62,Availability,Error,Error,62,"> Locally I am seeing:; > ; > ```; > Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; > Test threw exception; > Expression: ZeroField() - u == -u; > Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; > [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; > [4] getindex; > ```. Ok, I'll take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631:657,Availability,error,error,657,"> Locally I am seeing:; > ; > ```; > Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; > Test threw exception; > Expression: ZeroField() - u == -u; > Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; > [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; > [4] getindex; > ```. Ok, I'll take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631:686,Availability,error,error,686,"> Locally I am seeing:; > ; > ```; > Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; > Test threw exception; > Expression: ZeroField() - u == -u; > Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; > [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; > [4] getindex; > ```. Ok, I'll take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631:75,Testability,Test,Test,75,"> Locally I am seeing:; > ; > ```; > Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; > Test threw exception; > Expression: ZeroField() - u == -u; > Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; > [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; > [4] getindex; > ```. Ok, I'll take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631:115,Testability,test,test,115,"> Locally I am seeing:; > ; > ```; > Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; > Test threw exception; > Expression: ZeroField() - u == -u; > Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; > [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; > [4] getindex; > ```. Ok, I'll take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631:155,Testability,Test,Test,155,"> Locally I am seeing:; > ; > ```; > Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; > Test threw exception; > Expression: ZeroField() - u == -u; > Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; > [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; > [4] getindex; > ```. Ok, I'll take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631
https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631:705,Testability,assert,assertscalar,705,"> Locally I am seeing:; > ; > ```; > Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; > Test threw exception; > Expression: ZeroField() - u == -u; > Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; > [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; > [4] getindex; > ```. Ok, I'll take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822:836,Availability,down,down,836,"> @tomchor Which version of GPUCompiler are you trying to pin to? It's not listed in `Project.toml` and so the pin is not effective. @vchuravy Maybe pinning wasn't the right word to use. I'm doing `]add GPUCompiler@0.16.4` and then `]rm GPUCompiler`, which ensures that Manifest.toml retains version 0.16.4 even though GPUCompiler doesn't appear in `Project.toml`. That's probably not the best-practices way to do things, but afaik it works. That was the only way I could get tests passing in https://github.com/CliMA/Oceananigans.jl/pull/2865. The issues I was seeing there were very similar to the issues that appeared in https://github.com/CliMA/Oceananigans.jl/pull/2782 and to some degree in https://github.com/CliMA/Oceananigans.jl/pull/2899, so I suspect keeping `GPUCompiler.jl` will help make those tests pass (or least narrow down what the issues are). The reason tests didn't pass here here is because there's an error related to the `always_inline=true` flag, which (based on your comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416876175), hasn't made it into the `main` channel.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822:924,Availability,error,error,924,"> @tomchor Which version of GPUCompiler are you trying to pin to? It's not listed in `Project.toml` and so the pin is not effective. @vchuravy Maybe pinning wasn't the right word to use. I'm doing `]add GPUCompiler@0.16.4` and then `]rm GPUCompiler`, which ensures that Manifest.toml retains version 0.16.4 even though GPUCompiler doesn't appear in `Project.toml`. That's probably not the best-practices way to do things, but afaik it works. That was the only way I could get tests passing in https://github.com/CliMA/Oceananigans.jl/pull/2865. The issues I was seeing there were very similar to the issues that appeared in https://github.com/CliMA/Oceananigans.jl/pull/2782 and to some degree in https://github.com/CliMA/Oceananigans.jl/pull/2899, so I suspect keeping `GPUCompiler.jl` will help make those tests pass (or least narrow down what the issues are). The reason tests didn't pass here here is because there's an error related to the `always_inline=true` flag, which (based on your comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416876175), hasn't made it into the `main` channel.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822:476,Testability,test,tests,476,"> @tomchor Which version of GPUCompiler are you trying to pin to? It's not listed in `Project.toml` and so the pin is not effective. @vchuravy Maybe pinning wasn't the right word to use. I'm doing `]add GPUCompiler@0.16.4` and then `]rm GPUCompiler`, which ensures that Manifest.toml retains version 0.16.4 even though GPUCompiler doesn't appear in `Project.toml`. That's probably not the best-practices way to do things, but afaik it works. That was the only way I could get tests passing in https://github.com/CliMA/Oceananigans.jl/pull/2865. The issues I was seeing there were very similar to the issues that appeared in https://github.com/CliMA/Oceananigans.jl/pull/2782 and to some degree in https://github.com/CliMA/Oceananigans.jl/pull/2899, so I suspect keeping `GPUCompiler.jl` will help make those tests pass (or least narrow down what the issues are). The reason tests didn't pass here here is because there's an error related to the `always_inline=true` flag, which (based on your comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416876175), hasn't made it into the `main` channel.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822:808,Testability,test,tests,808,"> @tomchor Which version of GPUCompiler are you trying to pin to? It's not listed in `Project.toml` and so the pin is not effective. @vchuravy Maybe pinning wasn't the right word to use. I'm doing `]add GPUCompiler@0.16.4` and then `]rm GPUCompiler`, which ensures that Manifest.toml retains version 0.16.4 even though GPUCompiler doesn't appear in `Project.toml`. That's probably not the best-practices way to do things, but afaik it works. That was the only way I could get tests passing in https://github.com/CliMA/Oceananigans.jl/pull/2865. The issues I was seeing there were very similar to the issues that appeared in https://github.com/CliMA/Oceananigans.jl/pull/2782 and to some degree in https://github.com/CliMA/Oceananigans.jl/pull/2899, so I suspect keeping `GPUCompiler.jl` will help make those tests pass (or least narrow down what the issues are). The reason tests didn't pass here here is because there's an error related to the `always_inline=true` flag, which (based on your comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416876175), hasn't made it into the `main` channel.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822:874,Testability,test,tests,874,"> @tomchor Which version of GPUCompiler are you trying to pin to? It's not listed in `Project.toml` and so the pin is not effective. @vchuravy Maybe pinning wasn't the right word to use. I'm doing `]add GPUCompiler@0.16.4` and then `]rm GPUCompiler`, which ensures that Manifest.toml retains version 0.16.4 even though GPUCompiler doesn't appear in `Project.toml`. That's probably not the best-practices way to do things, but afaik it works. That was the only way I could get tests passing in https://github.com/CliMA/Oceananigans.jl/pull/2865. The issues I was seeing there were very similar to the issues that appeared in https://github.com/CliMA/Oceananigans.jl/pull/2782 and to some degree in https://github.com/CliMA/Oceananigans.jl/pull/2899, so I suspect keeping `GPUCompiler.jl` will help make those tests pass (or least narrow down what the issues are). The reason tests didn't pass here here is because there's an error related to the `always_inline=true` flag, which (based on your comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416876175), hasn't made it into the `main` channel.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418267423:81,Deployability,release,release,81,How sure are you about the precise version? Is `GPUCompiler@0.16.5` the breaking release for you?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418267423
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665:199,Testability,test,test,199,"> > best-practices way to do things, but afaik it works; > ; > it only works within the Oceananigans environment, not for users of Oceananigans. True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665:332,Testability,test,tests,332,"> > best-practices way to do things, but afaik it works; > ; > it only works within the Oceananigans environment, not for users of Oceananigans. True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665:384,Testability,test,tests,384,"> > best-practices way to do things, but afaik it works; > ; > it only works within the Oceananigans environment, not for users of Oceananigans. True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665:416,Usability,simpl,simply,416,"> > best-practices way to do things, but afaik it works; > ; > it only works within the Oceananigans environment, not for users of Oceananigans. True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418274125:191,Availability,error,errors,191,"> How sure are you about the precise version? Is `GPUCompiler@0.16.5` the breaking release for you?. I haven't tried to find the precise version, but `GPUCompiler@0.16.7` already creates the errors, so the breaking release is either 0.16.7 or 0.16.6.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418274125
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418274125:83,Deployability,release,release,83,"> How sure are you about the precise version? Is `GPUCompiler@0.16.5` the breaking release for you?. I haven't tried to find the precise version, but `GPUCompiler@0.16.7` already creates the errors, so the breaking release is either 0.16.7 or 0.16.6.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418274125
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418274125:215,Deployability,release,release,215,"> How sure are you about the precise version? Is `GPUCompiler@0.16.5` the breaking release for you?. I haven't tried to find the precise version, but `GPUCompiler@0.16.7` already creates the errors, so the breaking release is either 0.16.7 or 0.16.6.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418274125
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880:56,Testability,test,test,56,"> True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?. Here's GPU + driver info. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880:189,Testability,test,tests,189,"> True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?. Here's GPU + driver info. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880:241,Testability,test,tests,241,"> True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?. Here's GPU + driver info. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880:416,Testability,LOG,LOG,416,"> True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?. Here's GPU + driver info. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880
https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880:273,Usability,simpl,simply,273,"> True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?. Here's GPU + driver info. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418248505:18,Availability,error,error,18,@maleadt . CUBLAS error (for `cublasDnrm2_v2`) in https://buildkite.com/clima/oceananigans/builds/9877#018622f8-7cb1-4d4a-b58b-9e12aec6c441. Might be https://github.com/JuliaGPU/CUDA.jl/issues/1755#issuecomment-1417166636,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418248505
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:556,Availability,failure,failure,556,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:253,Modifiability,variab,variable,253,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:294,Modifiability,config,config,294,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:354,Modifiability,config,config,354,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:390,Modifiability,Config,Config,390,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:175,Testability,test,test,175,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:187,Testability,Test,Testing,187,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849
https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849:203,Testability,test,tests,203,"```; [e9e359dc] CUDA_jll v10.0.130+3; ```. That JLL is deprecated and shouldn't be used. For one, it `dlopen`s plenty of libraries eagerly, as can be seen at the start of the test:. ```; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; ```. Opening many copies of CUDA libraries easily breaks the whole system, and might explain the CUBLAS failure here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2902#issuecomment-1418738849
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419238472:122,Modifiability,extend,extend,122,"There's no need for a new kernel because the diffusivities are `νₑ / Pr` so they can be calculated on the fly. We need to extend `κᶠᶜᶜ` and `κᶜᶠᶜ` and `κᶜᶜᶠ`. ```julia; @inline κᶠᶜᶜ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑxᶠᵃᵃ(i, j, k, grid, K.νₑ) / closure.Pr[id]; @inline κᶜᶠᶜ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑyᵃᶠᵃ(i, j, k, grid, K.νₑ) / closure.Pr[id]; @inline κᶜᶜᶠ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑzᵃᵃᶠ(i, j, k, grid, K.νₑ) / closure.Pr[id]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419238472
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419454342:646,Availability,error,errors,646,"> There's no need for a new kernel because the diffusivities are `νₑ / Pr` so they can be calculated on the fly.; > ; > We need to extend `κᶠᶜᶜ` and `κᶜᶠᶜ` and `κᶜᶜᶠ`; > ; > ```julia; > @inline κᶠᶜᶜ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑxᶠᵃᵃ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > @inline κᶜᶠᶜ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑyᵃᶠᵃ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > @inline κᶜᶜᶠ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑzᵃᵃᶠ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > ```. I may be missing something, but when I make those changes I still get the errors in #2869. The changes in this PR are the only ones I've tried that seem to solve the issue. I've implemented and pushed your solution to the [tc/smag-binary-op2 branch](https://github.com/CliMA/Oceananigans.jl/blob/tc/smag-binary-op2/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl) in case you wanna check if I understood your suggestion. Basically these are the changes:. https://github.com/CliMA/Oceananigans.jl/blob/56a76ae24d7199a3efe822d06969acc7b6ce6b16/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L127-L129. I'm getting a `device kernel image is invalid (code 200, ERROR_INVALID_IMAGE)` error with only those changes.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419454342
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419454342:1314,Availability,error,error,1314,"> There's no need for a new kernel because the diffusivities are `νₑ / Pr` so they can be calculated on the fly.; > ; > We need to extend `κᶠᶜᶜ` and `κᶜᶠᶜ` and `κᶜᶜᶠ`; > ; > ```julia; > @inline κᶠᶜᶜ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑxᶠᵃᵃ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > @inline κᶜᶠᶜ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑyᵃᶠᵃ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > @inline κᶜᶜᶠ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑzᵃᵃᶠ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > ```. I may be missing something, but when I make those changes I still get the errors in #2869. The changes in this PR are the only ones I've tried that seem to solve the issue. I've implemented and pushed your solution to the [tc/smag-binary-op2 branch](https://github.com/CliMA/Oceananigans.jl/blob/tc/smag-binary-op2/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl) in case you wanna check if I understood your suggestion. Basically these are the changes:. https://github.com/CliMA/Oceananigans.jl/blob/56a76ae24d7199a3efe822d06969acc7b6ce6b16/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L127-L129. I'm getting a `device kernel image is invalid (code 200, ERROR_INVALID_IMAGE)` error with only those changes.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419454342
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419454342:131,Modifiability,extend,extend,131,"> There's no need for a new kernel because the diffusivities are `νₑ / Pr` so they can be calculated on the fly.; > ; > We need to extend `κᶠᶜᶜ` and `κᶜᶠᶜ` and `κᶜᶜᶠ`; > ; > ```julia; > @inline κᶠᶜᶜ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑxᶠᵃᵃ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > @inline κᶜᶠᶜ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑyᵃᶠᵃ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > @inline κᶜᶜᶠ(i, j, k, grid, closure::SmagorinskyLilly, K, ::Val{id}, args...) = ℑzᵃᵃᶠ(i, j, k, grid, K.νₑ) / closure.Pr[id]; > ```. I may be missing something, but when I make those changes I still get the errors in #2869. The changes in this PR are the only ones I've tried that seem to solve the issue. I've implemented and pushed your solution to the [tc/smag-binary-op2 branch](https://github.com/CliMA/Oceananigans.jl/blob/tc/smag-binary-op2/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl) in case you wanna check if I understood your suggestion. Basically these are the changes:. https://github.com/CliMA/Oceananigans.jl/blob/56a76ae24d7199a3efe822d06969acc7b6ce6b16/src/TurbulenceClosures/turbulence_closure_implementations/smagorinsky_lilly.jl#L127-L129. I'm getting a `device kernel image is invalid (code 200, ERROR_INVALID_IMAGE)` error with only those changes.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419454342
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419525329:219,Usability,clear,clear,219,"> On that branch you are still forming the `BinaryOperation` which is the problem. You also need to remove the `BinaryOperation`. If you open a PR we can work on it?. Sure, I'll open a new PR soon then!. But just to be clear, I totally get that the problem is that I'm still passing the binary operations. I kept them there because (if I understan correctly) if don't pass $\kappa_e$ in `DiffusivityFields()` then `model.diffusivity_fields` won't get populated, right? Or is your point that we don't have to populate `model.diffusivity_fields` for Smagorinsky?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419525329
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419719914:197,Usability,clear,clear,197,"> The change I suggested will still put the eddy viscosity into diffusivity_fields, and removes the eddy diffusivities (calculating them on the fly from Pr and eddy viscosity). Yes! Sorry I wasn't clear enough. I got that. I meant populate it with the diffuvisities specifically, so we're on the same page.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419719914
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419759789:1041,Usability,clear,clearer,1041,"y for going slow on this, but if I understand correctly what you're proposing is:. - Remove the calculation of diffusivities from `DiffusivityFields()` (and thus remove tracer diffusivities from `model.diffusivity_fields`); - Specialize `κᶠᶜᶜ()` functions for `SmagoriknskyLilly` so that diffusivities are calculated on the fly. As opposed to what I'm doing here which is just to change the calculation of diffusivities in `DiffusivityFields()` from using a `BinaryOperation` to a kernel (keeping them in `model.diffusivity_fields`). If I understand correctly both methods do the same number of operations (one calculation of $\nu_e$, a division by `Pr` and one interpolation for each face of each grid cell), no?. So I guess the advantage of what you're proposing is that it saves memory (since diffusivities are calculated on the fly), at the cost of a bit more code complexity (i.e., one more specialization). Conversely, the direction this PR is going atm uses more memory (for the diffusivities) but in my opinion the code is a bit clearer, since there's one fewer specialization (i.e. `κᶠᶜᶜ()` remains the same) and the code in `smagorinsky_lilly.jl` looks more like the code in `anisotropic_minimum_dissipation.jl`, which makes things more standardized. I'll defer to you either way, but I vote that we take the approach that this PR is currently doing since, as we discussed before in a few PRs, the code in `TurbulenceClosures` is already a bit on the complex side and not super easy to understand. So I think the standardization of having `smagorinsky_lilly.jl` have the same structure as `anisotropic_minimum_dissipation.jl` I'd argue is a benefit. If we follow with this PR, the increase in memory should be around 15% for one tracer and less for more tracers, so relatively small, plus the memory limitation is about to become less severe since hopefully https://github.com/CliMA/Oceananigans.jl/pull/2795 will be merged soon?. @glwagner like I said I'll defer to you either way. So if y",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419759789
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419777537:8,Modifiability,extend,extending,8,I think extending `κᶠᶜᶜ` is simpler --- less code and less memory usage.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419777537
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419777537:28,Usability,simpl,simpler,28,I think extending `κᶠᶜᶜ` is simpler --- less code and less memory usage.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419777537
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419779168:77,Integrability,interface,interface,77,I also don't like `calc_nonlinear_κᶜᶜᶜ`. I hope we can come up with a better interface for defining LES closures in the future.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419779168
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419789153:395,Energy Efficiency,reduce,reduce,395,The memory savings is a major advantage of this closure over `AnisotropicMinimumDissipation` for problems with very large numbers of tracers (eg biogeochemistry problems with 10+ tracers). Note also that there is overhead to launching a kernel which cannot be ignored --- we can't estimate computational cost just by adding the number of operations. Typically (though not always) our goal is to reduce the number of kernel launches as much as possible.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419789153
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419839733:404,Energy Efficiency,reduce,reduce,404,> The memory savings is a major advantage of this closure over `AnisotropicMinimumDissipation` for problems with very large numbers of tracers (eg biogeochemistry problems with 10+ tracers).; > ; > Note also that there is overhead to launching a kernel which cannot be ignored --- we can't estimate computational cost just by adding the number of operations. Typically (though not always) our goal is to reduce the number of kernel launches as much as possible. Good points. I also wasn't aware that the kernel launch time was an important issue. I'll close this PR and open another one extending `κᶠᶜᶜ()`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419839733
https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419839733:587,Modifiability,extend,extending,587,> The memory savings is a major advantage of this closure over `AnisotropicMinimumDissipation` for problems with very large numbers of tracers (eg biogeochemistry problems with 10+ tracers).; > ; > Note also that there is overhead to launching a kernel which cannot be ignored --- we can't estimate computational cost just by adding the number of operations. Typically (though not always) our goal is to reduce the number of kernel launches as much as possible. Good points. I also wasn't aware that the kernel launch time was an important issue. I'll close this PR and open another one extending `κᶠᶜᶜ()`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2904#issuecomment-1419839733
https://github.com/CliMA/Oceananigans.jl/issues/2905#issuecomment-1427077897:102,Availability,mask,masking,102,"before documenting it let's make sure this feature is consistent with the rest of the code base (i.e. masking, immersed derivatives, implicit solvers, etc)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2905#issuecomment-1427077897
https://github.com/CliMA/Oceananigans.jl/issues/2905#issuecomment-1427078258:15,Testability,test,test,15,maybe adding a test for cases in which `immersed_condition = FaceImmersedCondition()`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2905#issuecomment-1427078258
https://github.com/CliMA/Oceananigans.jl/pull/2908#issuecomment-1419957403:51,Testability,test,tested,51,"> Perfect, does this also solve the issue?. Yes! I tested it with up to 10 tracers:. ```julia; ┌ Info: NonhydrostaticModel{GPU, RectilinearGrid}(time = 0 seconds, iteration = 0); │ ├── grid: 8×8×6 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; │ ├── timestepper: QuasiAdamsBashforth2TimeStepper; │ ├── tracers: (b, τ1, τ2, t3, t4, t5, t6, t8, t9, t10); │ ├── closure: SmagorinskyLilly: C=0.1, Cb=1.0, Pr=(b = 1.0, τ1 = 1.0, τ2 = 1.0, t3 = 1.0, t4 = 1.0, t5 = 1.0, t6 = 1.0, t8 = 1.0, t9 = 1.0, t10 = 1.0); │ ├── buoyancy: Nothing; └ └── coriolis: Nothing; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.486 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (4.737 minutes).; [ Info: Simulation is stopping after running for 4.739 minutes.; [ Info: Model iteration 10 equals or exceeds stop iteration 10.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2908#issuecomment-1419957403
https://github.com/CliMA/Oceananigans.jl/issues/2911#issuecomment-1422978861:630,Availability,avail,available,630,"Something is fishy there, but I don't think it has to do with an irregularly spaced grid, more with the fact that you have `Flat` in x and y. You have the same problem on a non-stretched grid. ```; julia> using Oceananigans; julia> using Oceananigans: interpolate. julia> z_faces(k) = 100 * ((k/Nz) ^ 2 - 2); julia> grid = RectilinearGrid(topology = (Flat, Flat, Bounded), size = (Nz, ), z = (-100, 0)). julia> model = NonhydrostaticModel(; grid, tracers = :P). julia> P(x, y, z) = z; julia> set!(model; P). julia> interpolate(model.tracers.P, 0, 0, -10.0); -20.0; ```; Note that interpolation assumes that there are 3 directions available:; https://github.com/CliMA/Oceananigans.jl/blob/4940d29901d693addca7a84aea302d870031bed6/src/Fields/interpolate.jl#L105-L113",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2911#issuecomment-1422978861
https://github.com/CliMA/Oceananigans.jl/issues/2911#issuecomment-1425633946:17,Availability,error,error,17,"I replicate this error with:; ```; julia> z_faces(k) = 100 * ((k/Nz) ^ 2 - 2); julia> grid = RectilinearGrid(size = (10, 10, Nz), x = (0, 20), y = (0, 20), z = z_faces); julia> model = NonhydrostaticModel(; grid, tracers=:P); julia> P(x, y, z) = z; julia> set!(model; P); ```. e.g.; ```; julia> interpolate(model.tracers.P, 10.0, 10.0, -100.0); -96.92378328741964; ````; Without the fix or `-100.0` with the fix",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2911#issuecomment-1425633946
https://github.com/CliMA/Oceananigans.jl/issues/2911#issuecomment-1425648922:258,Testability,test,test,258,"With a `Flat` topology `fractional_indices` correctly returns `0.0` in the flat direction (if I correctly put in `grid.xᶜᵃᵃ[1]` which I think is always `1`), so only $\phi_1$ and $\phi_2$ would be non-zero so this should be correct?. I think the reason your test was returning wrong is because you used $x=y=0$ rather than $1$?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2911#issuecomment-1425648922
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1426238455:12,Testability,test,test,12,How about a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1426238455
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1442585957:46,Deployability,pipeline,pipeline,46,Can we resolve the conflicts? for `.buildkite/pipeline.yml` just accept all incoming changes from`main`. For the `interpolate.jl` I'm not sure what we want...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1442585957
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1480285884:50,Testability,test,test,50,It was working just waiting for the shallow water test to be fixed. Some merge conflicts now which I can fix tomorrow.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1480285884
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481354840:33,Testability,test,tests,33,I'm not sure whats causing these tests to fail now?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481354840
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:97,Availability,error,errors,97,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:118,Availability,ERROR,ERROR,118,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:480,Availability,error,error,480,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:125,Performance,Load,LoadError,125,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:45,Testability,test,tests,45,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:275,Testability,test,tests,275,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:381,Testability,test,tests,381,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:576,Testability,test,tests,576,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:322,Usability,clear,clear,322,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484158671:16,Testability,test,tests,16,Can I merge now tests have passed?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484158671
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484234313:0,Deployability,update,update,0,update/merge main first?; I see some file changes that they shouldn't be there..,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484234313
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484466427:206,Testability,test,tests,206,"omg, I merged main and I noticed that the file changes in buildkite bringing back the SWE regression remained! it was commented out in main! I am sure I uncommented that at some point... anyway, given that tests pass we should merge this",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484466427
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1487558579:49,Usability,undo,undo,49,@jagoosw I committed a few changes. Feel free to undo or comment!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1487558579
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1487694853:51,Usability,undo,undo,51,"> @jagoosw I committed a few changes. Feel free to undo or comment!. Looks good, thank you!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1487694853
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488595081:12,Testability,test,test,12,"I think the test is failing becaue `f` is returning a `Float64`, so when the grid is `Float32` `eps(maximum(f))` is wrong. Is there a way to set the type returned by `f`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488595081
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488640934:14,Testability,test,test,14,"> I think the test is failing becaue `f` is returning a `Float64`, so when the grid is `Float32` `eps(maximum(f))` is wrong. Is there a way to set the type returned by `f`?. you can also pass the grid; ```julia; f(x, y, z, grid) = eltype(grid)(...); ε_max = CUDA.@allowscalar f.(nodes(grid, (Face(), Face(), Face()), reshape=true)..., Ref(grid)) |> maximum |> eps; ```. `eltype` is the function I couldn't remember!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488640934
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492068738:240,Availability,error,error,240,"I don't understand why this is failing (it also fails locally). It is only:; https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything. Also, the maximum error for each interpolation is:; ```; u -> 1.9073486e-6; v -> 4.7683716e-6; w -> 3.8146973e-6; c -> 3.8146973e-6; ```; with $\epsilon_{max} =$ 3.8146973f-6 and I don't know why they wouldn't all be the same?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492068738
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492068738:384,Availability,error,error,384,"I don't understand why this is failing (it also fails locally). It is only:; https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything. Also, the maximum error for each interpolation is:; ```; u -> 1.9073486e-6; v -> 4.7683716e-6; w -> 3.8146973e-6; c -> 3.8146973e-6; ```; with $\epsilon_{max} =$ 3.8146973f-6 and I don't know why they wouldn't all be the same?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492068738
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492068738:164,Testability,test,test,164,"I don't understand why this is failing (it also fails locally). It is only:; https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything. Also, the maximum error for each interpolation is:; ```; u -> 1.9073486e-6; v -> 4.7683716e-6; w -> 3.8146973e-6; c -> 3.8146973e-6; ```; with $\epsilon_{max} =$ 3.8146973f-6 and I don't know why they wouldn't all be the same?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492068738
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386:265,Availability,error,error,265,"> I don't understand why this is failing (it also fails locally).; > ; > It is only:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; > ; > ; > that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything.; > Also, the maximum error for each interpolation is:; > ; > ```; > u -> 1.9073486e-6; > v -> 4.7683716e-6; > w -> 3.8146973e-6; > c -> 3.8146973e-6; > ```; > ; > with ϵmax= 3.8146973f-6 and I don't know why they wouldn't all be the same?. I'm not sure what you mean by ""they"", but with different nodes, ie different `nodes(v, reshape=true)`, then shouldn't they be different (to within machine precision)?. The function involves a few arithmetic operations:. https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L109. and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386:412,Availability,error,error,412,"> I don't understand why this is failing (it also fails locally).; > ; > It is only:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; > ; > ; > that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything.; > Also, the maximum error for each interpolation is:; > ; > ```; > u -> 1.9073486e-6; > v -> 4.7683716e-6; > w -> 3.8146973e-6; > c -> 3.8146973e-6; > ```; > ; > with ϵmax= 3.8146973f-6 and I don't know why they wouldn't all be the same?. I'm not sure what you mean by ""they"", but with different nodes, ie different `nodes(v, reshape=true)`, then shouldn't they be different (to within machine precision)?. The function involves a few arithmetic operations:. https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L109. and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386:977,Availability,error,error,977,"> I don't understand why this is failing (it also fails locally).; > ; > It is only:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; > ; > ; > that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything.; > Also, the maximum error for each interpolation is:; > ; > ```; > u -> 1.9073486e-6; > v -> 4.7683716e-6; > w -> 3.8146973e-6; > c -> 3.8146973e-6; > ```; > ; > with ϵmax= 3.8146973f-6 and I don't know why they wouldn't all be the same?. I'm not sure what you mean by ""they"", but with different nodes, ie different `nodes(v, reshape=true)`, then shouldn't they be different (to within machine precision)?. The function involves a few arithmetic operations:. https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L109. and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386:1035,Availability,toler,tolerance,1035,"> I don't understand why this is failing (it also fails locally).; > ; > It is only:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; > ; > ; > that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything.; > Also, the maximum error for each interpolation is:; > ; > ```; > u -> 1.9073486e-6; > v -> 4.7683716e-6; > w -> 3.8146973e-6; > c -> 3.8146973e-6; > ```; > ; > with ϵmax= 3.8146973f-6 and I don't know why they wouldn't all be the same?. I'm not sure what you mean by ""they"", but with different nodes, ie different `nodes(v, reshape=true)`, then shouldn't they be different (to within machine precision)?. The function involves a few arithmetic operations:. https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L109. and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386:179,Testability,test,test,179,"> I don't understand why this is failing (it also fails locally).; > ; > It is only:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; > ; > ; > that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything.; > Also, the maximum error for each interpolation is:; > ; > ```; > u -> 1.9073486e-6; > v -> 4.7683716e-6; > w -> 3.8146973e-6; > c -> 3.8146973e-6; > ```; > ; > with ϵmax= 3.8146973f-6 and I don't know why they wouldn't all be the same?. I'm not sure what you mean by ""they"", but with different nodes, ie different `nodes(v, reshape=true)`, then shouldn't they be different (to within machine precision)?. The function involves a few arithmetic operations:. https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L109. and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386:938,Testability,test,test,938,"> I don't understand why this is failing (it also fails locally).; > ; > It is only:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; > ; > ; > that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything.; > Also, the maximum error for each interpolation is:; > ; > ```; > u -> 1.9073486e-6; > v -> 4.7683716e-6; > w -> 3.8146973e-6; > c -> 3.8146973e-6; > ```; > ; > with ϵmax= 3.8146973f-6 and I don't know why they wouldn't all be the same?. I'm not sure what you mean by ""they"", but with different nodes, ie different `nodes(v, reshape=true)`, then shouldn't they be different (to within machine precision)?. The function involves a few arithmetic operations:. https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L109. and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492756062:16,Availability,error,error,16,"> and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something. Ah I see, thank you, I wasn't sure how this worked. It passes locally now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492756062
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492756062:74,Availability,toler,tolerance,74,"> and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something. Ah I see, thank you, I wasn't sure how this worked. It passes locally now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492756062
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1511478135:45,Security,access,access,45,I can't re-run the tests but if someone with access can I think this PR should be done?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1511478135
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1511478135:19,Testability,test,tests,19,I can't re-run the tests but if someone with access can I think this PR should be done?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1511478135
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1514631344:25,Testability,test,test,25,Not sure why the poisson test has failed now...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1514631344
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516146111:20,Testability,test,tests,20,Can I merge now the tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516146111
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516179441:101,Testability,test,tests,101,I think it’s done but I haven’t payed attention to what was happening here. I was excited to see the tests pass tho :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516179441
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516672326:16,Testability,test,test,16,"> > I think the test is failing becaue `f` is returning a `Float64`, so when the grid is `Float32` `eps(maximum(f))` is wrong. Is there a way to set the type returned by `f`?; > ; > you can also pass the grid; > ; > ```julia; > f(x, y, z, grid) = eltype(grid)(...); > ε_max = CUDA.@allowscalar f.(nodes(grid, (Face(), Face(), Face()), reshape=true)..., Ref(grid)) |> maximum |> eps; > ```; > ; > `eltype` is the function I couldn't remember!. I only saw this now -- just to help keep our tests well-written and easy to maintain you should use `convert` rather than the convenience constructors --- eg. ```julia; f(x, y, z) = convert(typeof(x), ...); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516672326
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516672326:488,Testability,test,tests,488,"> > I think the test is failing becaue `f` is returning a `Float64`, so when the grid is `Float32` `eps(maximum(f))` is wrong. Is there a way to set the type returned by `f`?; > ; > you can also pass the grid; > ; > ```julia; > f(x, y, z, grid) = eltype(grid)(...); > ε_max = CUDA.@allowscalar f.(nodes(grid, (Face(), Face(), Face()), reshape=true)..., Ref(grid)) |> maximum |> eps; > ```; > ; > `eltype` is the function I couldn't remember!. I only saw this now -- just to help keep our tests well-written and easy to maintain you should use `convert` rather than the convenience constructors --- eg. ```julia; f(x, y, z) = convert(typeof(x), ...); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516672326
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1550228541:192,Energy Efficiency,meter,meters,192,I think I've fixed this for lat/lon grids given the new `x/ynode` definitions for lat/lon grids without touching the lagrangian particles (and assuming they're still positioned in degrees not meters) (@tomchor). I'm not so keen on my function names:; https://github.com/CliMA/Oceananigans.jl/blob/92709dd96852af2806ec91148e6d463c67f25787/src/Fields/interpolate.jl#L61-L77; but can't think of better alternatives,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1550228541
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1557727578:194,Energy Efficiency,meter,meters,194,"> I think I've fixed this for lat/lon grids given the new `x/ynode` definitions for lat/lon grids without touching the lagrangian particles (and assuming they're still positioned in degrees not meters) (@tomchor).; > ; > I'm not so keen on my function names:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/92709dd96852af2806ec91148e6d463c67f25787/src/Fields/interpolate.jl#L61-L77; > ; > ; > but can't think of better alternatives. I tthink you just need. ```julia; node(1, j, k, grid, loc...)[1] # ""first x node""; node(i, 1, k, grid, loc...)[2] # ""first y node""; ```. So you don't need special function names. As for `x_interpolant_spacings` I think the name is confusing because `x` becomes `λ`. An if-statement might work better. ```julia; first_dimension_spacings =; if grid isa RectilinearGrid; xspacings(grid, loc...); elseif LatitudeLongitudeGrid; λspacings(grid, loc...); end; ```. Why is it sometimes `loc` and other times `loc...`? Is the API inconsistent?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1557727578
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582658520:36,Testability,test,tests,36,Please could someone re-run the GPU tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582658520
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582705245:63,Testability,test,tests,63,the /tmp directory in sverdrup (the server on which we run the tests) is full. We have to clean it up first then we can rerun the tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582705245
https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582705245:130,Testability,test,tests,130,the /tmp directory in sverdrup (the server on which we run the tests) is full. We have to clean it up first then we can rerun the tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1582705245
https://github.com/CliMA/Oceananigans.jl/issues/2914#issuecomment-1424467066:11,Availability,error,error,11,this is an error at parse time right?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2914#issuecomment-1424467066
https://github.com/CliMA/Oceananigans.jl/issues/2915#issuecomment-1426277751:258,Security,validat,validation,258,`∇²ᶜᶜᶜ` gives the right solution for the pressure solver (correct as in no flow divergence at the boundary) that we are developing for the `ImmersedPoissonSolver` here:; https://github.com/xkykai/Oceananigans.jl/blob/df579ed61935378273f2f0e3df0706554be22c30/validation/immersed_boundaries/immersed_pressure_solver.jl#L114,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2915#issuecomment-1426277751
https://github.com/CliMA/Oceananigans.jl/issues/2915#issuecomment-1426334459:216,Testability,test,tested,216,"Ok, I see why this is happening. `conditional_∂z_c` ""throws away"" the immersed boundary when it passes through. ; Since a second derivative is just a first derivative of a first derivative, the immersed condition is tested only on the ""outer"" derivative, which doesn't see the immersed boundary. The inner derivative is then just called on the underlying grid and does not satisfy immersed boundary conditions. This does not happen in the `∇²` operator since the ""inner"" derivative correctly calls the `conditional_∂z_c`, thus being aware of the immersed boundaries. Good catch, I ll solve this issue",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2915#issuecomment-1426334459
https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136406:4,Testability,test,tests,4,the tests were not passing here,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136406
https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695:6,Testability,test,tests,6,"> the tests were not passing here. Yeah, I should have been more clear that I approved to merge after tests were passing, I didn't know we could even merge without tests passing. I thought that behavior was blocked",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695
https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695:102,Testability,test,tests,102,"> the tests were not passing here. Yeah, I should have been more clear that I approved to merge after tests were passing, I didn't know we could even merge without tests passing. I thought that behavior was blocked",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695
https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695:164,Testability,test,tests,164,"> the tests were not passing here. Yeah, I should have been more clear that I approved to merge after tests were passing, I didn't know we could even merge without tests passing. I thought that behavior was blocked",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695
https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695:65,Usability,clear,clear,65,"> the tests were not passing here. Yeah, I should have been more clear that I approved to merge after tests were passing, I didn't know we could even merge without tests passing. I thought that behavior was blocked",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1427297511:89,Deployability,update,updates,89,@simone-silvestri and I think there is a missing synchronization for one of the boundary updates,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1427297511
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1427297511:49,Integrability,synchroniz,synchronization,49,@simone-silvestri and I think there is a missing synchronization for one of the boundary updates,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1427297511
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1427950971:57,Integrability,synchroniz,synchronization,57,"I am also doubting our regression data. For sure it is a synchronization problem, but it is difficult to understand wether it's on the data (generated long time ago) or in the current code",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1427950971
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1428721649:70,Integrability,synchroniz,synchronized,70,"You are also right, the data was generated on the CPU so it should be synchronized correctly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1428721649
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429895265:63,Testability,test,test,63,"It might be also another problem not related to BC. ; When the test passes we get; ```; [2023/02/12 17:00:57.335] INFO Δv: min=-2.709402e-11, max=+2.834735e-11, mean=-2.606411e-14, absmean=+1.007853e-12, std=+2.676095e-12 (16512/16512 matching grid points); ```; On test failing; ```; [2023/02/14 10:02:14.671] INFO Δv: min=-3.212770e-11, max=+2.834735e-11, mean=-2.751160e-13, absmean=+1.256905e-12, std=+3.884381e-12 (16384/16512 matching grid points); ```; (same maximum difference, larger minimum, larger mean). All in all very small values, considering that `v` is a very small field. I will check which points are actually not matching, it might help us",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429895265
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429895265:266,Testability,test,test,266,"It might be also another problem not related to BC. ; When the test passes we get; ```; [2023/02/12 17:00:57.335] INFO Δv: min=-2.709402e-11, max=+2.834735e-11, mean=-2.606411e-14, absmean=+1.007853e-12, std=+2.676095e-12 (16512/16512 matching grid points); ```; On test failing; ```; [2023/02/14 10:02:14.671] INFO Δv: min=-3.212770e-11, max=+2.834735e-11, mean=-2.751160e-13, absmean=+1.256905e-12, std=+3.884381e-12 (16384/16512 matching grid points); ```; (same maximum difference, larger minimum, larger mean). All in all very small values, considering that `v` is a very small field. I will check which points are actually not matching, it might help us",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429895265
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429963449:40,Testability,test,test,40,"running on my new PR (#2888) where this test fails for the v velocity, I get this. `diff = Bool.(1 .- (truth_fields.v .≈ test_fields.v))`. ![Screenshot 2023-02-14 at 10 41 48 AM](https://user-images.githubusercontent.com/33547697/218787450-f6426596-03bc-4680-bc6b-89e9be925357.png). which seems to suggest that it is not a BC issue; It is true that on that PR more nodes are failing, so it might have introduced another issue; ```; [2023/02/14 10:33:50.948] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1429963449
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430067998:145,Integrability,synchroniz,synchronization,145,"maximum iterations for this test are 20 with a 128 grid size, so I think we need to exclude the boundary condition possibility and look at other synchronization issues (maybe particular to the shallow water model)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430067998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430067998:28,Testability,test,test,28,"maximum iterations for this test are 20 with a 128 grid size, so I think we need to exclude the boundary condition possibility and look at other synchronization issues (maybe particular to the shallow water model)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430067998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:75,Availability,error,errors,75,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:91,Deployability,integrat,integrated,91,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:244,Deployability,integrat,integration,244,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:91,Integrability,integrat,integrated,91,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:244,Integrability,integrat,integration,244,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012:191,Testability,test,test,191,"Since we don't have bitwise reproducibility, each run has random round-off errors that, if integrated into a nonlinear trajectory, can cause two solution to diverge eventually. Possibly this test case is a little too challenging (too long time integration, or too nonlinear), meaning that occasional chaotic divergence of the solution is expected?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430089012
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430090495:228,Availability,robust,robust,228,There's a tradeoff between taking too few time-steps (not enough time for subtle differences to manifest above the noise floor) and taking too many time steps. Perhaps just halving the time-steps for this test will make it more robust but hopefully still useful,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430090495
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430090495:205,Testability,test,test,205,There's a tradeoff between taking too few time-steps (not enough time for subtle differences to manifest above the noise floor) and taking too many time steps. Perhaps just halving the time-steps for this test will make it more robust but hopefully still useful,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430090495
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087:82,Modifiability,rewrite,rewrite,82,"I agree, let's just disable this test for now so we can merge outstanding PRs and rewrite the test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087:33,Testability,test,test,33,"I agree, let's just disable this test for now so we can merge outstanding PRs and rewrite the test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087:94,Testability,test,test,94,"I agree, let's just disable this test for now so we can merge outstanding PRs and rewrite the test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430385749:1098,Testability,Test,Test,1098,"tiveFormulation(); regenerate_data = false); [2023/02/15 08:09:30.057] INFO Initializing simulation...; [2023/02/15 08:09:30.137] INFO ... simulation initialization complete (79.862 ms); [2023/02/15 08:09:30.137] INFO Executing initial time step...; [2023/02/15 08:09:49.128] INFO ... initial time step complete (18.991 seconds).; [2023/02/15 08:09:49.218] INFO Simulation is stopping after running for 19.159 seconds.; [2023/02/15 08:09:49.218] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/15 08:09:49.338] INFO Δu: min=-2.979433e-08, max=+2.978377e-08, mean=-1.025389e-10, absmean=+1.911258e-09, std=+5.570608e-09 (16384/16384 matching grid points); [2023/02/15 08:09:49.338] INFO Δv: min=-2.709283e-11, max=+2.834728e-11, mean=-2.606411e-14, absmean=+1.007855e-12, std=+2.676083e-12 (16512/16512 matching grid points); [2023/02/15 08:09:49.339] INFO Δh: min=-4.765317e-07, max=+4.756881e-07, mean=+1.373701e-08, absmean=+2.044855e-07, std=+2.513230e-07 (16384/16384 matching grid points); Test Passed. julia> run_shallow_water_regression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C. julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/15 08:10:46.449] INFO Initializing simulation...; [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); [2023/02/15 08:10:46.450] INFO Executing initial time step...; [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/15 08:10:46.492] INFO Δu: min=-2.91040",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430385749
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430385749:2544,Testability,Test,Test,2544,".979433e-08, max=+2.978377e-08, mean=-1.025389e-10, absmean=+1.911258e-09, std=+5.570608e-09 (16384/16384 matching grid points); [2023/02/15 08:09:49.338] INFO Δv: min=-2.709283e-11, max=+2.834728e-11, mean=-2.606411e-14, absmean=+1.007855e-12, std=+2.676083e-12 (16512/16512 matching grid points); [2023/02/15 08:09:49.339] INFO Δh: min=-4.765317e-07, max=+4.756881e-07, mean=+1.373701e-08, absmean=+2.044855e-07, std=+2.513230e-07 (16384/16384 matching grid points); Test Passed. julia> run_shallow_water_regression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C. julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/15 08:10:46.449] INFO Initializing simulation...; [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); [2023/02/15 08:10:46.450] INFO Executing initial time step...; [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/15 08:10:46.492] INFO Δu: min=-2.910407e-08, max=+2.965560e-08, mean=+4.423683e-11, absmean=+1.880294e-09, std=+5.514070e-09 (16384/16384 matching grid points); [2023/02/15 08:10:46.492] INFO Δv: min=-2.905665e-11, max=+2.481851e-11, mean=-8.868305e-14, absmean=+1.029733e-12, std=+2.802455e-12 (16512/16512 matching grid points); [2023/02/15 08:10:46.492] INFO Δh: min=-4.765574e-07, max=+4.768079e-07, mean=+3.492460e-09, absmean=+2.039438e-07, std=+2.510525e-07 (16384/16384 matching grid points); Test Passed; ```. Weird. Why we get that warning for the VectorInvariant formulation?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430385749
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430387807:148,Availability,error,error,148,because vector invariant advects vorticity that requires one extra point for vorticity calculation (we should remove that inflate and just throw an error). . On what branch is this?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430387807
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430388903:140,Availability,error,error,140,"> Do you reckon the problems stem from https://github.com/CliMA/Oceananigans.jl/pull/2890?. Oh well, that could be... but probably it would error on CPUs as well? I can test it out",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430388903
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430388903:169,Testability,test,test,169,"> Do you reckon the problems stem from https://github.com/CliMA/Oceananigans.jl/pull/2890?. Oh well, that could be... but probably it would error on CPUs as well? I can test it out",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430388903
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013:1128,Testability,Test,Test,1128," simulation initialization complete (79.862 ms); > [2023/02/15 08:09:30.137] INFO Executing initial time step...; > [2023/02/15 08:09:49.128] INFO ... initial time step complete (18.991 seconds).; > [2023/02/15 08:09:49.218] INFO Simulation is stopping after running for 19.159 seconds.; > [2023/02/15 08:09:49.218] INFO Model iteration 20 equals or exceeds stop iteration 20.; > [2023/02/15 08:09:49.338] INFO Δu: min=-2.979433e-08, max=+2.978377e-08, mean=-1.025389e-10, absmean=+1.911258e-09, std=+5.570608e-09 (16384/16384 matching grid points); > [2023/02/15 08:09:49.338] INFO Δv: min=-2.709283e-11, max=+2.834728e-11, mean=-2.606411e-14, absmean=+1.007855e-12, std=+2.676083e-12 (16512/16512 matching grid points); > [2023/02/15 08:09:49.339] INFO Δh: min=-4.765317e-07, max=+4.756881e-07, mean=+1.373701e-08, absmean=+2.044855e-07, std=+2.513230e-07 (16384/16384 matching grid points); > Test Passed; > ; > julia> run_shallow_water_regression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C; > ; > julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); > [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; > [2023/02/15 08:10:46.449] INFO Initializing simulation...; > [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); > [2023/02/15 08:10:46.450] INFO Executing initial time step...; > [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; > [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; > [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; > [2023/02/15 08:10:46.492] INFO Δu: min=-2.910407e-08, max=+2.965560e-08, mean=+4.423683e-11, absmean=+1.880294e-09, std=+5.514070e-09 (16384",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013:2608,Testability,Test,Test,2608,"gression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C; > ; > julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); > [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; > [2023/02/15 08:10:46.449] INFO Initializing simulation...; > [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); > [2023/02/15 08:10:46.450] INFO Executing initial time step...; > [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; > [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; > [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; > [2023/02/15 08:10:46.492] INFO Δu: min=-2.910407e-08, max=+2.965560e-08, mean=+4.423683e-11, absmean=+1.880294e-09, std=+5.514070e-09 (16384/16384 matching grid points); > [2023/02/15 08:10:46.492] INFO Δv: min=-2.905665e-11, max=+2.481851e-11, mean=-8.868305e-14, absmean=+1.029733e-12, std=+2.802455e-12 (16512/16512 matching grid points); > [2023/02/15 08:10:46.492] INFO Δh: min=-4.765574e-07, max=+4.768079e-07, mean=+3.492460e-09, absmean=+2.039438e-07, std=+2.510525e-07 (16384/16384 matching grid points); > Test Passed; > ```; > ; > Weird.; > ; > Why we get that warning for the VectorInvariant formulation?. @navidcy do you know the GPU and driver info for these tests?. As a reference [here's the info for tests on buildkite](https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880):. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013:2765,Testability,test,tests,2765,"gression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C; > ; > julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); > [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; > [2023/02/15 08:10:46.449] INFO Initializing simulation...; > [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); > [2023/02/15 08:10:46.450] INFO Executing initial time step...; > [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; > [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; > [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; > [2023/02/15 08:10:46.492] INFO Δu: min=-2.910407e-08, max=+2.965560e-08, mean=+4.423683e-11, absmean=+1.880294e-09, std=+5.514070e-09 (16384/16384 matching grid points); > [2023/02/15 08:10:46.492] INFO Δv: min=-2.905665e-11, max=+2.481851e-11, mean=-8.868305e-14, absmean=+1.029733e-12, std=+2.802455e-12 (16512/16512 matching grid points); > [2023/02/15 08:10:46.492] INFO Δh: min=-4.765574e-07, max=+4.768079e-07, mean=+3.492460e-09, absmean=+2.039438e-07, std=+2.510525e-07 (16384/16384 matching grid points); > Test Passed; > ```; > ; > Weird.; > ; > Why we get that warning for the VectorInvariant formulation?. @navidcy do you know the GPU and driver info for these tests?. As a reference [here's the info for tests on buildkite](https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880):. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013:2809,Testability,test,tests,2809,"gression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C; > ; > julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); > [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; > [2023/02/15 08:10:46.449] INFO Initializing simulation...; > [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); > [2023/02/15 08:10:46.450] INFO Executing initial time step...; > [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; > [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; > [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; > [2023/02/15 08:10:46.492] INFO Δu: min=-2.910407e-08, max=+2.965560e-08, mean=+4.423683e-11, absmean=+1.880294e-09, std=+5.514070e-09 (16384/16384 matching grid points); > [2023/02/15 08:10:46.492] INFO Δv: min=-2.905665e-11, max=+2.481851e-11, mean=-8.868305e-14, absmean=+1.029733e-12, std=+2.802455e-12 (16512/16512 matching grid points); > [2023/02/15 08:10:46.492] INFO Δh: min=-4.765574e-07, max=+4.768079e-07, mean=+3.492460e-09, absmean=+2.039438e-07, std=+2.510525e-07 (16384/16384 matching grid points); > Test Passed; > ```; > ; > Weird.; > ; > Why we get that warning for the VectorInvariant formulation?. @navidcy do you know the GPU and driver info for these tests?. As a reference [here's the info for tests on buildkite](https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880):. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013:2968,Testability,LOG,LOG,2968,"gression(arch, formulation; regenerate_data = false)VectorInvariantFormulation()^C; > ; > julia> run_shallow_water_regression(arch, VectorInvariantFormulation(); regenerate_data = false); > [2023/02/15 08:10:46.432] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /g/data/v45/nc3020/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; > [2023/02/15 08:10:46.449] INFO Initializing simulation...; > [2023/02/15 08:10:46.450] INFO ... simulation initialization complete (580.963 μs); > [2023/02/15 08:10:46.450] INFO Executing initial time step...; > [2023/02/15 08:10:46.453] INFO ... initial time step complete (3.038 ms).; > [2023/02/15 08:10:46.490] INFO Simulation is stopping after running for 39.012 ms.; > [2023/02/15 08:10:46.490] INFO Model iteration 20 equals or exceeds stop iteration 20.; > [2023/02/15 08:10:46.492] INFO Δu: min=-2.910407e-08, max=+2.965560e-08, mean=+4.423683e-11, absmean=+1.880294e-09, std=+5.514070e-09 (16384/16384 matching grid points); > [2023/02/15 08:10:46.492] INFO Δv: min=-2.905665e-11, max=+2.481851e-11, mean=-8.868305e-14, absmean=+1.029733e-12, std=+2.802455e-12 (16512/16512 matching grid points); > [2023/02/15 08:10:46.492] INFO Δh: min=-4.765574e-07, max=+4.768079e-07, mean=+3.492460e-09, absmean=+2.039438e-07, std=+2.510525e-07 (16384/16384 matching grid points); > Test Passed; > ```; > ; > Weird.; > ; > Why we get that warning for the VectorInvariant formulation?. @navidcy do you know the GPU and driver info for these tests?. As a reference [here's the info for tests on buildkite](https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880):. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430398013
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:155,Integrability,depend,dependency,155,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:298,Modifiability,variab,variable,298,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:339,Modifiability,config,config,339,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:399,Modifiability,config,config,399,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:435,Modifiability,Config,Config,435,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:16,Testability,test,test,16,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:95,Testability,test,test,95,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:232,Testability,Test,Testing,232,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:248,Testability,test,tests,248,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:561,Testability,test,tests,561,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:602,Testability,Test,Testing,602,"did you use the test environment or Oceananigans's enviroment? On Tartarus, branch main in the test environment does this. ```; Precompiling project...; 1 dependency successfully precompiled in 38 seconds. 218 already precompiled.; Testing Running tests...; [NVBLAS] NVBLAS_CONFIG_FILE environment variable is NOT set : relying on default config filename 'nvblas.conf'; [NVBLAS] Cannot open default config file 'nvblas.conf'; [NVBLAS] Config parsed; [NVBLAS] CPU Blas library need to be provided; [2023/02/14 16:22:39.804] INFO Running shallow water regression tests...; [2023/02/14 16:22:40.097] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/14 16:23:08.854] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/ssilvest/stable_oceananigans/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:233; [2023/02/14 16:24:01.792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvar",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:2019,Testability,Test,Test,2019,"792] INFO Initializing simulation...; [2023/02/14 16:24:08.481] INFO ... simulation initialization complete (6.689 seconds); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping afte",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:2085,Testability,test,test,2085,"); [2023/02/14 16:24:08.481] INFO Executing initial time step...; [2023/02/14 16:24:43.227] INFO ... initial time step complete (34.746 seconds).; [2023/02/14 16:24:43.387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [20",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:2275,Testability,Test,Test,2275,"387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:2284,Testability,Test,Test,2284,"387] INFO Simulation is stopping after running for 41.593 seconds.; [2023/02/14 16:24:43.387] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:24:48.950] INFO Δu: min=-1.671992e-04, max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:2461,Testability,test,test,2461,", max=+4.237079e-06, mean=-8.685825e-06, absmean=+8.778487e-06, std=+2.661356e-05 (16384/16384 matching grid points); [2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:2558,Testability,Test,Testing,2558,"[2023/02/14 16:24:48.951] INFO Δv: min=-2.347391e-05, max=+4.751164e-05, mean=+1.746998e-06, absmean=+3.169677e-06, std=+8.513593e-06 (10752/16512 matching grid points); [2023/02/14 16:24:48.952] INFO Δh: min=-1.340684e-04, max=+1.454704e-04, mean=+2.980232e-08, absmean=+1.029445e-05, std=+2.835074e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching gr",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:3689,Testability,Test,Test,3689,"ression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Test Summary: | Pass Fail Total Time; Oceananigans | 4 2 6 3m14.4s; Single file test | 4 2 6 3m14.4s; Shallow Water Regression | 4 2 6 3m09.1s; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3 2m11.7s; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3 56.4s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:3755,Testability,test,test,3755,"ression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Test Summary: | Pass Fail Total Time; Oceananigans | 4 2 6 3m14.4s; Single file test | 4 2 6 3m14.4s; Shallow Water Regression | 4 2 6 3m09.1s; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3 2m11.7s; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3 56.4s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:3945,Testability,Test,Test,3945,"ression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Test Summary: | Pass Fail Total Time; Oceananigans | 4 2 6 3m14.4s; Single file test | 4 2 6 3m14.4s; Shallow Water Regression | 4 2 6 3m09.1s; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3 2m11.7s; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3 56.4s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:3954,Testability,Test,Test,3954,"ression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Test Summary: | Pass Fail Total Time; Oceananigans | 4 2 6 3m14.4s; Single file test | 4 2 6 3m14.4s; Shallow Water Regression | 4 2 6 3m09.1s; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3 2m11.7s; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3 56.4s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:4128,Testability,test,test,4128,"ression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Test Summary: | Pass Fail Total Time; Oceananigans | 4 2 6 3m14.4s; Single file test | 4 2 6 3m14.4s; Shallow Water Regression | 4 2 6 3m09.1s; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3 2m11.7s; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3 56.4s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:4194,Testability,Test,Test,4194,"ression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Test Summary: | Pass Fail Total Time; Oceananigans | 4 2 6 3m14.4s; Single file test | 4 2 6 3m14.4s; Shallow Water Regression | 4 2 6 3m09.1s; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3 2m11.7s; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3 56.4s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637:4274,Testability,test,test,4274,"ression.jl:93; [2023/02/14 16:24:51.806] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/14 16:25:16.858] INFO Initializing simulation...; [2023/02/14 16:25:16.992] INFO ... simulation initialization complete (134.028 ms); [2023/02/14 16:25:16.992] INFO Executing initial time step...; [2023/02/14 16:25:47.962] INFO ... initial time step complete (30.969 seconds).; [2023/02/14 16:25:48.168] INFO Simulation is stopping after running for 31.304 seconds.; [2023/02/14 16:25:48.168] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/14 16:25:48.190] INFO Δu: min=-1.672000e-04, max=+4.242261e-06, mean=-8.684623e-06, absmean=+8.777260e-06, std=+2.661194e-05 (16384/16384 matching grid points); [2023/02/14 16:25:48.191] INFO Δv: min=-2.345113e-05, max=+4.749113e-05, mean=+1.747024e-06, absmean=+3.169309e-06, std=+8.512156e-06 (10620/16512 matching grid points); [2023/02/14 16:25:48.191] INFO Δh: min=-1.338214e-04, max=+1.449336e-04, mean=-4.033232e-17, absmean=+1.028773e-05, std=+2.832882e-05 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /home/ssilvest/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/julia-1.8.0/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/stable_oceananigans/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:93; Test Summary: | Pass Fail Total Time; Oceananigans | 4 2 6 3m14.4s; Single file test | 4 2 6 3m14.4s; Shallow Water Regression | 4 2 6 3m09.1s; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3 2m11.7s; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3 56.4s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430401637
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409842:33,Testability,test,test,33,Interesting. No I didn't use the test env. I run in the repl...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409842
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409915:149,Testability,test,test,149,"What surprises me is that not only `v` is different. Despite passing, also the summary for `u` and `h` is very different.; actually also outside the test environment, I get the same results 😅 . . I guess this confirms that this test is a bit too hard and we just should decrease the number of time steps",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409915
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409915:228,Testability,test,test,228,"What surprises me is that not only `v` is different. Despite passing, also the summary for `u` and `h` is very different.; actually also outside the test environment, I get the same results 😅 . . I guess this confirms that this test is a bit too hard and we just should decrease the number of time steps",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430409915
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430413002:154,Deployability,release,releases,154,I could try to regenerate the data with the version of Oceananigans we used the last time (I guess it's this one https://github.com/CliMA/Oceananigans.jl/releases/tag/v0.76.5) but only 10 time steps and see if the results change,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430413002
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430431312:69,Testability,LOG,LOG,69,```; nc3020@gadi-gpu-v100-0104:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Wed Feb 15 08:59:13 2023; Driver Version : 525.60.13; CUDA Version : 12.0. Attached GPUs : 1; GPU 00000000:B2:00.0; Product Name : Tesla V100-SXM2-32GB; Product Brand : Tesla; Product Architecture : Volta; Display Mode : Enabled; Display Active : Disabled; Persistence Mode : Enabled; ...; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430431312
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:8685,Availability,Down,Downloads,8685,faa095f] x265_jll v3.5.0+0; [d8fb68d0] xkbcommon_jll v1.4.1+0; [0dad84c5] ArgTools `@stdlib/ArgTools`; [56f22d72] Artifacts `@stdlib/Artifacts`; [2a0f44e3] Base64 `@stdlib/Base64`; [ade2ca70] Dates `@stdlib/Dates`; [8bb1440f] DelimitedFiles `@stdlib/DelimitedFiles`; [8ba89e20] Distributed `@stdlib/Distributed`; [f43a241f] Downloads `@stdlib/Downloads`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [4af54fe1] LazyArtifacts `@stdlib/LazyArtifacts`; [b27032c2] LibCURL `@stdlib/LibCURL`; [76f85450] LibGit2 `@stdlib/LibGit2`; [8f399da3] Libdl `@stdlib/Libdl`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [d6f4376e] Markdown `@stdlib/Markdown`; [a63ad114] Mmap `@stdlib/Mmap`; [ca575930] NetworkOptions `@stdlib/NetworkOptions`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9abbd945] Profile `@stdlib/Profile`; [3fa0cd96] REPL `@stdlib/REPL`; [9a3f8284] Random `@stdlib/Random`; [ea8e919c] SHA `@stdlib/SHA`; [9e88b42a] Serialization `@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfull,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:8704,Availability,Down,Downloads,8704,faa095f] x265_jll v3.5.0+0; [d8fb68d0] xkbcommon_jll v1.4.1+0; [0dad84c5] ArgTools `@stdlib/ArgTools`; [56f22d72] Artifacts `@stdlib/Artifacts`; [2a0f44e3] Base64 `@stdlib/Base64`; [ade2ca70] Dates `@stdlib/Dates`; [8bb1440f] DelimitedFiles `@stdlib/DelimitedFiles`; [8ba89e20] Distributed `@stdlib/Distributed`; [f43a241f] Downloads `@stdlib/Downloads`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [4af54fe1] LazyArtifacts `@stdlib/LazyArtifacts`; [b27032c2] LibCURL `@stdlib/LibCURL`; [76f85450] LibGit2 `@stdlib/LibGit2`; [8f399da3] Libdl `@stdlib/Libdl`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [d6f4376e] Markdown `@stdlib/Markdown`; [a63ad114] Mmap `@stdlib/Mmap`; [ca575930] NetworkOptions `@stdlib/NetworkOptions`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9abbd945] Profile `@stdlib/Profile`; [3fa0cd96] REPL `@stdlib/REPL`; [9a3f8284] Random `@stdlib/Random`; [ea8e919c] SHA `@stdlib/SHA`; [9e88b42a] Serialization `@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfull,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10430,Availability,error,errored,10430,"`@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing reg",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17348,Availability,ERROR,ERROR,17348,"est/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17413,Availability,error,errored,17413,"est/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17504,Availability,ERROR,ERROR,17504,"jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] Sparse",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17532,Availability,error,errored,17532,"jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] Sparse",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21334,Availability,Error,Errors,21334,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10688,Deployability,Configurat,Configuration,10688,"Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow wat",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:477,Energy Efficiency,Adapt,Adapt,477,"Tests fail on v0.76.5 on GPU... weird... ```Julia; nc3020@gadi-gpu-v100-0100:/g/data/v45/nc3020/OC.jl$ julia-1.6 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:1917,Energy Efficiency,Adapt,Adapt,1917,[da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] CoverageTools v1.3.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [9a962f9c] DataAPI v1.10.0; [124859b0] DataDeps v0.7.10; [864edb3b] DataStructures v0.18.12; [e2d170a0] DataValueInterfaces v1.0.0; [b552c78f] DiffRules v1.11.0; [ffbed154] DocStringExtensions v0.8.6; [fa6b7ba4] DualNu,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17669,Energy Efficiency,Adapt,Adapt,17669,"er_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] SparseArrays; [10745b16] Statistics. julia> versioninfo(); Julia Version 1.6.7; Commit 3b76b25b64* (2022-07-19 15:11 UTC); Platform Info:; OS: L",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:19856,Energy Efficiency,Power,Power,19856,idia-smi -q. ==============NVSMI LOG==============. Timestamp : Tue Feb 21 07:30:33 2023; Driver Version : 525.60.13; CUDA Version : 12.0. Attached GPUs : 1; GPU 00000000:3D:00.0; Product Name : Tesla V100-SXM2-32GB; Product Brand : Tesla; Product Architecture : Volta; Display Mode : Enabled; Display Active : Disabled; Persistence Mode : Enabled; MIG Mode; Current : N/A; Pending : N/A; Accounting Mode : Disabled; Accounting Mode Buffer Size : 4000; Driver Model; Current : N/A; Pending : N/A; Serial Number : 1562019007305; GPU UUID : GPU-afa33ac3-cef0-ac1a-9dfd-491463f321e9; Minor Number : 0; VBIOS Version : 88.00.80.00.01; MultiGPU Board : No; Board ID : 0x3d00; Board Part Number : 900-2G503-0010-000; GPU Part Number : 1DB5-896-A1; Module ID : 0; Inforom Version; Image Version : G503.0203.00.05; OEM Object : 1.1; ECC Object : 5.0; Power Management Object : N/A; GPU Operation Mode; Current : N/A; Pending : N/A; GSP Firmware Version : N/A; GPU Virtualization Mode; Virtualization Mode : None; Host VGPU Mode : N/A; IBMNPU; Relaxed Ordering Mode : N/A; PCI; Bus : 0x3D; Device : 0x00; Domain : 0x0000; Device Id : 0x1DB510DE; Bus Id : 00000000:3D:00.0; Sub System Id : 0x124910DE; GPU Link Info; PCIe Generation; Max : 3; Current : 3; Device Current : 3; Device Max : 3; Host Max : 3; Link Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; ,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:20671,Energy Efficiency,Power,Power,20671,,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:20758,Energy Efficiency,Power,Power,20758,,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:22253,Energy Efficiency,Power,Power,22253,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:22269,Energy Efficiency,Power,Power,22269,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:22299,Energy Efficiency,Power,Power,22299,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:22321,Energy Efficiency,Power,Power,22321,B; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.85 W; Power Limit : 300.00 W; Default Power Limit : 300.00 W; Enforced Power Limit : 300.00 W; Min Power Limit : 150.00 W; Max Power Limit : 300.00 W; Clocks; Graphics : 135 MHz; SM : 135 MHz; Memory : 877 MHz; Video : 555 MHz; Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Default Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Deferred Clocks; Memory : N/A; Max Clocks; Graphics : 1530 MHz; SM : 1530 MHz; Memory : 877 MHz; Video : 1372 MHz; Max Customer Boost Clocks; Graphics : 1530 MHz; Clock Policy; Auto Boost : N/A; Auto Boost Default : N/A; Voltage; Graphics : N/A; Fabric; State : N/A; Status : N/A; Processes : None; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:22353,Energy Efficiency,Power,Power,22353,B; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.85 W; Power Limit : 300.00 W; Default Power Limit : 300.00 W; Enforced Power Limit : 300.00 W; Min Power Limit : 150.00 W; Max Power Limit : 300.00 W; Clocks; Graphics : 135 MHz; SM : 135 MHz; Memory : 877 MHz; Video : 555 MHz; Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Default Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Deferred Clocks; Memory : N/A; Max Clocks; Graphics : 1530 MHz; SM : 1530 MHz; Memory : 877 MHz; Video : 1372 MHz; Max Customer Boost Clocks; Graphics : 1530 MHz; Clock Policy; Auto Boost : N/A; Auto Boost Default : N/A; Voltage; Graphics : N/A; Fabric; State : N/A; Status : N/A; Processes : None; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:22386,Energy Efficiency,Power,Power,22386,B; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.85 W; Power Limit : 300.00 W; Default Power Limit : 300.00 W; Enforced Power Limit : 300.00 W; Min Power Limit : 150.00 W; Max Power Limit : 300.00 W; Clocks; Graphics : 135 MHz; SM : 135 MHz; Memory : 877 MHz; Video : 555 MHz; Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Default Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Deferred Clocks; Memory : N/A; Max Clocks; Graphics : 1530 MHz; SM : 1530 MHz; Memory : 877 MHz; Video : 1372 MHz; Max Customer Boost Clocks; Graphics : 1530 MHz; Clock Policy; Auto Boost : N/A; Auto Boost Default : N/A; Voltage; Graphics : N/A; Fabric; State : N/A; Status : N/A; Processes : None; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:22414,Energy Efficiency,Power,Power,22414,B; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.85 W; Power Limit : 300.00 W; Default Power Limit : 300.00 W; Enforced Power Limit : 300.00 W; Min Power Limit : 150.00 W; Max Power Limit : 300.00 W; Clocks; Graphics : 135 MHz; SM : 135 MHz; Memory : 877 MHz; Video : 555 MHz; Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Default Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Deferred Clocks; Memory : N/A; Max Clocks; Graphics : 1530 MHz; SM : 1530 MHz; Memory : 877 MHz; Video : 1372 MHz; Max Customer Boost Clocks; Graphics : 1530 MHz; Clock Policy; Auto Boost : N/A; Auto Boost Default : N/A; Voltage; Graphics : N/A; Fabric; State : N/A; Status : N/A; Processes : None; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:22442,Energy Efficiency,Power,Power,22442,B; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.85 W; Power Limit : 300.00 W; Default Power Limit : 300.00 W; Enforced Power Limit : 300.00 W; Min Power Limit : 150.00 W; Max Power Limit : 300.00 W; Clocks; Graphics : 135 MHz; SM : 135 MHz; Memory : 877 MHz; Video : 555 MHz; Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Default Applications Clocks; Graphics : 1290 MHz; Memory : 877 MHz; Deferred Clocks; Memory : N/A; Max Clocks; Graphics : 1530 MHz; SM : 1530 MHz; Memory : 877 MHz; Video : 1372 MHz; Max Customer Boost Clocks; Graphics : 1530 MHz; Clock Policy; Auto Boost : N/A; Auto Boost Default : N/A; Voltage; Graphics : N/A; Fabric; State : N/A; Status : N/A; Processes : None; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10337,Integrability,depend,dependencies,10337,"`@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing reg",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10417,Integrability,depend,dependencies,10417,"`@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing reg",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:20347,Integrability,Bridg,Bridge,20347,,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:477,Modifiability,Adapt,Adapt,477,"Tests fail on v0.76.5 on GPU... weird... ```Julia; nc3020@gadi-gpu-v100-0100:/g/data/v45/nc3020/OC.jl$ julia-1.6 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:1917,Modifiability,Adapt,Adapt,1917,[da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] CoverageTools v1.3.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [9a962f9c] DataAPI v1.10.0; [124859b0] DataDeps v0.7.10; [864edb3b] DataStructures v0.18.12; [e2d170a0] DataValueInterfaces v1.0.0; [b552c78f] DiffRules v1.11.0; [ffbed154] DocStringExtensions v0.8.6; [fa6b7ba4] DualNu,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10688,Modifiability,Config,Configuration,10688,"Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow wat",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17669,Modifiability,Adapt,Adapt,17669,"er_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] SparseArrays; [10745b16] Statistics. julia> versioninfo(); Julia Version 1.6.7; Commit 3b76b25b64* (2022-07-19 15:11 UTC); Platform Info:; OS: L",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10505,Performance,load,load,10505,"arseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17355,Performance,Load,LoadError,17355,"est/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:20445,Performance,Throughput,Throughput,20445,,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:20469,Performance,Throughput,Throughput,20469,,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:20562,Performance,Perform,Performance,20562,,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:20593,Performance,Throttle,Throttle,20593,,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21199,Performance,Latency,Latency,21199,; GPU Link Info; PCIe Generation; Max : 3; Current : 3; Device Current : 3; Device Max : 3; Host Max : 3; Link Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Curre,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21269,Performance,Latency,Latency,21269, : 3; Device Max : 3; Host Max : 3; Link Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Powe,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21405,Performance,Cache,Cache,21405,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21419,Performance,Cache,Cache,21419,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21549,Performance,Cache,Cache,21549,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21563,Performance,Cache,Cache,21563,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21702,Performance,Cache,Cache,21702,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21716,Performance,Cache,Cache,21716,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21846,Performance,Cache,Cache,21846,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:21860,Performance,Cache,Cache,21860,Width; Max : 16x; Current : 16x; Bridge Chip; Type : N/A; Firmware : N/A; Replays Since Reset : 0; Replay Number Rollovers : 0; Tx Throughput : 0 KB/s; Rx Throughput : 0 KB/s; Atomic Caps Inbound : N/A; Atomic Caps Outbound : N/A; Fan Speed : N/A; Performance State : P0; Clocks Throttle Reasons; Idle : Active; Applications Clocks Setting : Not Active; SW Power Cap : Not Active; HW Slowdown : Not Active; HW Thermal Slowdown : Not Active; HW Power Brake Slowdown : Not Active; Sync Boost : Not Active; SW Thermal Slowdown : Not Active; Display Clock Setting : Not Active; FB Memory Usage; Total : 32768 MiB; Reserved : 267 MiB; Used : 0 MiB; Free : 32500 MiB; BAR1 Memory Usage; Total : 32768 MiB; Used : 2 MiB; Free : 32766 MiB; Compute Mode : Default; Utilization; Gpu : 0 %; Memory : 0 %; Encoder : 0 %; Decoder : 0 %; Encoder Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; FBC Stats; Active Sessions : 0; Average FPS : 0; Average Latency : 0; Ecc Mode; Current : Enabled; Pending : Enabled; ECC Errors; Volatile; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Aggregate; Single Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : N/A; Total : 0; Double Bit; Device Memory : 0; Register File : 0; L1 Cache : 0; L2 Cache : 0; Texture Memory : N/A; Texture Shared : N/A; CBU : 0; Total : 0; Retired Pages; Single Bit ECC : 0; Double Bit ECC : 0; Pending Page Blacklist : No; Remapped Rows : N/A; Temperature; GPU Current Temp : 41 C; GPU Shutdown Temp : 90 C; GPU Slowdown Temp : 87 C; GPU Max Operating Temp : 83 C; GPU Target Temperature : N/A; Memory Current Temp : 44 C; Memory Max Operating Temp : 85 C; Power Readings; Power Management : Supported; Power Draw : 44.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:1230,Safety,Safe,SafeTestsets,1230,"lp, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:4826,Safety,Safe,SafeTestsets,4826,c] LogExpFunctions v0.3.15; [e6f89c97] LoggingExtras v1.0.0; [da04e1cc] MPI v0.19.2; [3da0fdf6] MPIPreferences v0.1.7; [1914dd2f] MacroTools v0.5.9; [739be429] MbedTLS v1.1.7; [442fdcdd] Measures v0.3.2; [e1d29d7a] Missings v1.1.0; [78c3b35d] Mocking v0.7.5; [85f8d34a] NCDatasets v0.12.4; [77ba4419] NaNMath v1.0.0; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [4d8831e6] OpenSSL v1.3.3; [bac558e1] OrderedCollections v1.4.1; [69de0a69] Parsers v2.3.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [b98c9c47] Pipe v1.3.0; [ccf2f8ad] PlotThemes v3.1.0; [995b91a9] PlotUtils v1.3.4; [91a5bcdd] Plots v1.36.0; [21216c6a] Preferences v1.3.0; [94ee1d12] Quaternions v0.5.6; [74087812] Random123 v1.5.0; [e6cf234a] RandomNumbers v1.5.3; [3cdcf5f2] RecipesBase v1.2.1; [01d81517] RecipesPipeline v0.6.9; [189a3867] Reexport v1.2.2; [05181044] RelocatableFolders v1.0.0; [ae029012] Requires v1.3.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [6c6a2e73] Scratch v1.1.1; [d496a93d] SeawaterPolynomials v0.2.3; [992d4aef] Showoff v1.0.3; [777ac1f9] SimpleBufferStream v1.1.0; [66db9d55] SnoopPrecompile v1.0.3; [a2af1166] SortingAlgorithms v1.1.0; [276daf66] SpecialFunctions v2.1.5; [aedffcd0] Static v0.6.5; [90137ffa] StaticArrays v1.4.4; [15972242] StaticPermutations v0.3.0; [82ae8749] StatsAPI v1.5.0; [2913bbd2] StatsBase v0.33.21; [5e0ebb24] Strided v1.2.2; [09ab397b] StructArrays v0.6.7; [856f2bd8] StructTypes v1.8.1; [3783bdb8] TableTraits v1.0.1; [bd369af6] Tables v1.7.0; [6aa5eb33] TaylorSeries v0.10.13; [62fd8b95] TensorCore v0.1.1; [f269a46b] TimeZones v1.9.1; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [3bb67fe8] TranscodingStreams v0.9.6; [bc48ee85] Tullio v0.3.4; [9d95972d] TupleTools v1.3.0; [5c2747f8] URIs v1.4.2; [1cfade01] UnicodeFun v0.4.1; [41fe7b60] Unzip v0.1.2; [81def892] VersionParsing v1.3.0; [6e34b625] Bzip2_jll v1.0.8+0; [83423d85] Cairo_jll v1.16.1+1; [2e619515] Ex,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:18245,Safety,Safe,SafeTestsets,18245,"antFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] SparseArrays; [10745b16] Statistics. julia> versioninfo(); Julia Version 1.6.7; Commit 3b76b25b64* (2022-07-19 15:11 UTC); Platform Info:; OS: Linux (x86_64-redhat-linux); CPU: Intel(R) Xeon(R) Platinum 8268 CPU @ 2.90GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; JULIA_DEPOT_PATH = /g/data/v45/nc3020/.julia:/share/julia/site/; JULIA_CUDA_USE_BINARYBUILDER = false; JULIA_LOAD_PATH = @:@v#.#:@stdlib:@site; JULIA_NUM_THREADS = 48. shell> nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Tue Feb 21 07:30:33 2023; Driver Version : 525.60.13; CUDA Version : 12.0. Attached GPUs : 1; GPU 00000000:3D:00.0; Product Name : Tesla V100-SXM2-32GB; Product Brand : ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:0,Testability,Test,Tests,0,"Tests fail on v0.76.5 on GPU... weird... ```Julia; nc3020@gadi-gpu-v100-0100:/g/data/v45/nc3020/OC.jl$ julia-1.6 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:380,Testability,test,test,380,"Tests fail on v0.76.5 on GPU... weird... ```Julia; nc3020@gadi-gpu-v100-0100:/g/data/v45/nc3020/OC.jl$ julia-1.6 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:386,Testability,Test,Testing,386,"Tests fail on v0.76.5 on GPU... weird... ```Julia; nc3020@gadi-gpu-v100-0100:/g/data/v45/nc3020/OC.jl$ julia-1.6 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:502,Testability,Benchmark,BenchmarkTools,502,"Tests fail on v0.76.5 on GPU... weird... ```Julia; nc3020@gadi-gpu-v100-0100:/g/data/v45/nc3020/OC.jl$ julia-1.6 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| |; |__/ |. (Oceananigans) pkg> test; Testing Oceananigans; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Project.toml`; [79e6a3ab] Adapt v3.3.3; [6e4b80f9] BenchmarkTools v1.3.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a2441757] Coverage v1.6.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:1562,Testability,Log,Logging,1562,yons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] Coverag,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:1579,Testability,Log,Logging,1579,yons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] Coverag,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:1794,Testability,Test,Test,1794,yons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] Coverag,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:1808,Testability,Test,Test,1808,yons v4.1.1; [7445602f] CubedSphere v0.2.0; [124859b0] DataDeps v0.7.10; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] Coverag,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:2043,Testability,Benchmark,BenchmarkTools,2043,tArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [91a5bcdd] Plots v1.36.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates `@stdlib/Dates`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9a3f8284] Random `@stdlib/Random`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [8dfed614] Test `@stdlib/Test`; Status `/jobfs/73413669.gadi-pbs/jl_XhyZPR/Manifest.toml`; [621f4979] AbstractFFTs v1.1.0; [79e6a3ab] Adapt v3.3.3; [4fba245c] ArrayInterface v6.0.1; [30b0a656] ArrayInterfaceCore v0.1.2; [ab4f0b2a] BFloat16s v0.2.0; [6e4b80f9] BenchmarkTools v1.3.2; [d1d4a3ce] BitFlags v0.1.7; [fa961155] CEnum v0.4.2; [179af706] CFTime v0.1.2; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [49dc2e85] Calculus v0.5.1; [7057c7e9] Cassette v0.3.10; [d360d2e6] ChainRulesCore v1.15.0; [9e997f8a] ChangesOfVariables v0.1.3; [944b1d66] CodecZlib v0.7.1; [35d6a980] ColorSchemes v3.20.0; [3da002f7] ColorTypes v0.11.4; [c3611d14] ColorVectorSpace v0.9.10; [5ae59095] Colors v0.12.10; [34da2185] Compat v3.43.0; [a216cea6] CompoundPeriods v0.5.1; [d38c429a] Contour v0.6.2; [a2441757] Coverage v1.6.0; [c36e975a] CoverageTools v1.3.0; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [9a962f9c] DataAPI v1.10.0; [124859b0] DataDeps v0.7.10; [864edb3b] DataStructures v0.18.12; [e2d170a0] DataValueInterfaces v1.0.0; [b552c78f] DiffRules v1.11.0; [ffbed154] DocStringExtensions v0.8.6; [fa6b7ba4] DualNumbers v0.6.8; [b305315f] Elliptic v1.0.1; [e2ba6199] ExprTools v0.1.8; [c87230d0] FFMPEG v0.4.1; [7a1cc6ca] FFTW v1.4.6; [5789e2e9,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:3830,Testability,Log,LogExpFunctions,3830,52c78f] DiffRules v1.11.0; [ffbed154] DocStringExtensions v0.8.6; [fa6b7ba4] DualNumbers v0.6.8; [b305315f] Elliptic v1.0.1; [e2ba6199] ExprTools v0.1.8; [c87230d0] FFMPEG v0.4.1; [7a1cc6ca] FFTW v1.4.6; [5789e2e9] FileIO v1.14.0; [53c48c17] FixedPointNumbers v0.8.4; [59287772] Formatting v0.4.2; [0c68f7d7] GPUArrays v8.3.2; [61eb1bfa] GPUCompiler v0.15.2; [28b8d3ca] GR v0.69.5; [c27321d9] Glob v1.3.0; [42e2da0e] Grisu v1.0.2; [cd3eb016] HTTP v1.7.4; [615f187c] IfElse v0.1.1; [40713840] IncompleteLU v0.2.0; [83e8ac13] IniFile v0.5.1; [842dd82b] InlineStrings v1.4.0; [3587e190] InverseFunctions v0.1.4; [92d709cd] IrrationalConstants v0.1.1; [42fd0dbc] IterativeSolvers v0.9.2; [82899510] IteratorInterfaceExtensions v1.0.0; [033835bb] JLD2 v0.4.22; [1019f520] JLFzf v0.1.5; [692b3bcd] JLLWrappers v1.4.1; [682c06a0] JSON v0.21.3; [0f8b85d8] JSON3 v1.9.5; [63c18a36] KernelAbstractions v0.7.2; [929cbde3] LLVM v4.11.1; [b964fa9f] LaTeXStrings v1.3.0; [23fbe1c1] Latexify v0.15.18; [2ab3a3ac] LogExpFunctions v0.3.15; [e6f89c97] LoggingExtras v1.0.0; [da04e1cc] MPI v0.19.2; [3da0fdf6] MPIPreferences v0.1.7; [1914dd2f] MacroTools v0.5.9; [739be429] MbedTLS v1.1.7; [442fdcdd] Measures v0.3.2; [e1d29d7a] Missings v1.1.0; [78c3b35d] Mocking v0.7.5; [85f8d34a] NCDatasets v0.12.4; [77ba4419] NaNMath v1.0.0; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [4d8831e6] OpenSSL v1.3.3; [bac558e1] OrderedCollections v1.4.1; [69de0a69] Parsers v2.3.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [b98c9c47] Pipe v1.3.0; [ccf2f8ad] PlotThemes v3.1.0; [995b91a9] PlotUtils v1.3.4; [91a5bcdd] Plots v1.36.0; [21216c6a] Preferences v1.3.0; [94ee1d12] Quaternions v0.5.6; [74087812] Random123 v1.5.0; [e6cf234a] RandomNumbers v1.5.3; [3cdcf5f2] RecipesBase v1.2.1; [01d81517] RecipesPipeline v0.6.9; [189a3867] Reexport v1.2.2; [05181044] RelocatableFolders v1.0.0; [ae029012] Requires v1.3.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTe,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:3866,Testability,Log,LoggingExtras,3866,4] DocStringExtensions v0.8.6; [fa6b7ba4] DualNumbers v0.6.8; [b305315f] Elliptic v1.0.1; [e2ba6199] ExprTools v0.1.8; [c87230d0] FFMPEG v0.4.1; [7a1cc6ca] FFTW v1.4.6; [5789e2e9] FileIO v1.14.0; [53c48c17] FixedPointNumbers v0.8.4; [59287772] Formatting v0.4.2; [0c68f7d7] GPUArrays v8.3.2; [61eb1bfa] GPUCompiler v0.15.2; [28b8d3ca] GR v0.69.5; [c27321d9] Glob v1.3.0; [42e2da0e] Grisu v1.0.2; [cd3eb016] HTTP v1.7.4; [615f187c] IfElse v0.1.1; [40713840] IncompleteLU v0.2.0; [83e8ac13] IniFile v0.5.1; [842dd82b] InlineStrings v1.4.0; [3587e190] InverseFunctions v0.1.4; [92d709cd] IrrationalConstants v0.1.1; [42fd0dbc] IterativeSolvers v0.9.2; [82899510] IteratorInterfaceExtensions v1.0.0; [033835bb] JLD2 v0.4.22; [1019f520] JLFzf v0.1.5; [692b3bcd] JLLWrappers v1.4.1; [682c06a0] JSON v0.21.3; [0f8b85d8] JSON3 v1.9.5; [63c18a36] KernelAbstractions v0.7.2; [929cbde3] LLVM v4.11.1; [b964fa9f] LaTeXStrings v1.3.0; [23fbe1c1] Latexify v0.15.18; [2ab3a3ac] LogExpFunctions v0.3.15; [e6f89c97] LoggingExtras v1.0.0; [da04e1cc] MPI v0.19.2; [3da0fdf6] MPIPreferences v0.1.7; [1914dd2f] MacroTools v0.5.9; [739be429] MbedTLS v1.1.7; [442fdcdd] Measures v0.3.2; [e1d29d7a] Missings v1.1.0; [78c3b35d] Mocking v0.7.5; [85f8d34a] NCDatasets v0.12.4; [77ba4419] NaNMath v1.0.0; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [4d8831e6] OpenSSL v1.3.3; [bac558e1] OrderedCollections v1.4.1; [69de0a69] Parsers v2.3.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [b98c9c47] Pipe v1.3.0; [ccf2f8ad] PlotThemes v3.1.0; [995b91a9] PlotUtils v1.3.4; [91a5bcdd] Plots v1.36.0; [21216c6a] Preferences v1.3.0; [94ee1d12] Quaternions v0.5.6; [74087812] Random123 v1.5.0; [e6cf234a] RandomNumbers v1.5.3; [3cdcf5f2] RecipesBase v1.2.1; [01d81517] RecipesPipeline v0.6.9; [189a3867] Reexport v1.2.2; [05181044] RelocatableFolders v1.0.0; [ae029012] Requires v1.3.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [6c6a2e73] Scratch v,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:4070,Testability,Mock,Mocking,4070,8c17] FixedPointNumbers v0.8.4; [59287772] Formatting v0.4.2; [0c68f7d7] GPUArrays v8.3.2; [61eb1bfa] GPUCompiler v0.15.2; [28b8d3ca] GR v0.69.5; [c27321d9] Glob v1.3.0; [42e2da0e] Grisu v1.0.2; [cd3eb016] HTTP v1.7.4; [615f187c] IfElse v0.1.1; [40713840] IncompleteLU v0.2.0; [83e8ac13] IniFile v0.5.1; [842dd82b] InlineStrings v1.4.0; [3587e190] InverseFunctions v0.1.4; [92d709cd] IrrationalConstants v0.1.1; [42fd0dbc] IterativeSolvers v0.9.2; [82899510] IteratorInterfaceExtensions v1.0.0; [033835bb] JLD2 v0.4.22; [1019f520] JLFzf v0.1.5; [692b3bcd] JLLWrappers v1.4.1; [682c06a0] JSON v0.21.3; [0f8b85d8] JSON3 v1.9.5; [63c18a36] KernelAbstractions v0.7.2; [929cbde3] LLVM v4.11.1; [b964fa9f] LaTeXStrings v1.3.0; [23fbe1c1] Latexify v0.15.18; [2ab3a3ac] LogExpFunctions v0.3.15; [e6f89c97] LoggingExtras v1.0.0; [da04e1cc] MPI v0.19.2; [3da0fdf6] MPIPreferences v0.1.7; [1914dd2f] MacroTools v0.5.9; [739be429] MbedTLS v1.1.7; [442fdcdd] Measures v0.3.2; [e1d29d7a] Missings v1.1.0; [78c3b35d] Mocking v0.7.5; [85f8d34a] NCDatasets v0.12.4; [77ba4419] NaNMath v1.0.0; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [4d8831e6] OpenSSL v1.3.3; [bac558e1] OrderedCollections v1.4.1; [69de0a69] Parsers v2.3.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [b98c9c47] Pipe v1.3.0; [ccf2f8ad] PlotThemes v3.1.0; [995b91a9] PlotUtils v1.3.4; [91a5bcdd] Plots v1.36.0; [21216c6a] Preferences v1.3.0; [94ee1d12] Quaternions v0.5.6; [74087812] Random123 v1.5.0; [e6cf234a] RandomNumbers v1.5.3; [3cdcf5f2] RecipesBase v1.2.1; [01d81517] RecipesPipeline v0.6.9; [189a3867] Reexport v1.2.2; [05181044] RelocatableFolders v1.0.0; [ae029012] Requires v1.3.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [6c6a2e73] Scratch v1.1.1; [d496a93d] SeawaterPolynomials v0.2.3; [992d4aef] Showoff v1.0.3; [777ac1f9] SimpleBufferStream v1.1.0; [66db9d55] SnoopPrecompile v1.0.3; [a2af1166] SortingAlgorithms v1.1.0; [276daf66] SpecialF,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:8993,Testability,Log,Logging,8993,faa095f] x265_jll v3.5.0+0; [d8fb68d0] xkbcommon_jll v1.4.1+0; [0dad84c5] ArgTools `@stdlib/ArgTools`; [56f22d72] Artifacts `@stdlib/Artifacts`; [2a0f44e3] Base64 `@stdlib/Base64`; [ade2ca70] Dates `@stdlib/Dates`; [8bb1440f] DelimitedFiles `@stdlib/DelimitedFiles`; [8ba89e20] Distributed `@stdlib/Distributed`; [f43a241f] Downloads `@stdlib/Downloads`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [4af54fe1] LazyArtifacts `@stdlib/LazyArtifacts`; [b27032c2] LibCURL `@stdlib/LibCURL`; [76f85450] LibGit2 `@stdlib/LibGit2`; [8f399da3] Libdl `@stdlib/Libdl`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [d6f4376e] Markdown `@stdlib/Markdown`; [a63ad114] Mmap `@stdlib/Mmap`; [ca575930] NetworkOptions `@stdlib/NetworkOptions`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9abbd945] Profile `@stdlib/Profile`; [3fa0cd96] REPL `@stdlib/REPL`; [9a3f8284] Random `@stdlib/Random`; [ea8e919c] SHA `@stdlib/SHA`; [9e88b42a] Serialization `@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfull,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:9010,Testability,Log,Logging,9010,faa095f] x265_jll v3.5.0+0; [d8fb68d0] xkbcommon_jll v1.4.1+0; [0dad84c5] ArgTools `@stdlib/ArgTools`; [56f22d72] Artifacts `@stdlib/Artifacts`; [2a0f44e3] Base64 `@stdlib/Base64`; [ade2ca70] Dates `@stdlib/Dates`; [8bb1440f] DelimitedFiles `@stdlib/DelimitedFiles`; [8ba89e20] Distributed `@stdlib/Distributed`; [f43a241f] Downloads `@stdlib/Downloads`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [4af54fe1] LazyArtifacts `@stdlib/LazyArtifacts`; [b27032c2] LibCURL `@stdlib/LibCURL`; [76f85450] LibGit2 `@stdlib/LibGit2`; [8f399da3] Libdl `@stdlib/Libdl`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [d6f4376e] Markdown `@stdlib/Markdown`; [a63ad114] Mmap `@stdlib/Mmap`; [ca575930] NetworkOptions `@stdlib/NetworkOptions`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9abbd945] Profile `@stdlib/Profile`; [3fa0cd96] REPL `@stdlib/REPL`; [9a3f8284] Random `@stdlib/Random`; [ea8e919c] SHA `@stdlib/SHA`; [9e88b42a] Serialization `@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfull,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:9693,Testability,Test,Test,9693,faa095f] x265_jll v3.5.0+0; [d8fb68d0] xkbcommon_jll v1.4.1+0; [0dad84c5] ArgTools `@stdlib/ArgTools`; [56f22d72] Artifacts `@stdlib/Artifacts`; [2a0f44e3] Base64 `@stdlib/Base64`; [ade2ca70] Dates `@stdlib/Dates`; [8bb1440f] DelimitedFiles `@stdlib/DelimitedFiles`; [8ba89e20] Distributed `@stdlib/Distributed`; [f43a241f] Downloads `@stdlib/Downloads`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [4af54fe1] LazyArtifacts `@stdlib/LazyArtifacts`; [b27032c2] LibCURL `@stdlib/LibCURL`; [76f85450] LibGit2 `@stdlib/LibGit2`; [8f399da3] Libdl `@stdlib/Libdl`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [d6f4376e] Markdown `@stdlib/Markdown`; [a63ad114] Mmap `@stdlib/Mmap`; [ca575930] NetworkOptions `@stdlib/NetworkOptions`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9abbd945] Profile `@stdlib/Profile`; [3fa0cd96] REPL `@stdlib/REPL`; [9a3f8284] Random `@stdlib/Random`; [ea8e919c] SHA `@stdlib/SHA`; [9e88b42a] Serialization `@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfull,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:9707,Testability,Test,Test,9707,faa095f] x265_jll v3.5.0+0; [d8fb68d0] xkbcommon_jll v1.4.1+0; [0dad84c5] ArgTools `@stdlib/ArgTools`; [56f22d72] Artifacts `@stdlib/Artifacts`; [2a0f44e3] Base64 `@stdlib/Base64`; [ade2ca70] Dates `@stdlib/Dates`; [8bb1440f] DelimitedFiles `@stdlib/DelimitedFiles`; [8ba89e20] Distributed `@stdlib/Distributed`; [f43a241f] Downloads `@stdlib/Downloads`; [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`; [4af54fe1] LazyArtifacts `@stdlib/LazyArtifacts`; [b27032c2] LibCURL `@stdlib/LibCURL`; [76f85450] LibGit2 `@stdlib/LibGit2`; [8f399da3] Libdl `@stdlib/Libdl`; [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`; [56ddb016] Logging `@stdlib/Logging`; [d6f4376e] Markdown `@stdlib/Markdown`; [a63ad114] Mmap `@stdlib/Mmap`; [ca575930] NetworkOptions `@stdlib/NetworkOptions`; [44cfe95a] Pkg `@stdlib/Pkg`; [de0858da] Printf `@stdlib/Printf`; [9abbd945] Profile `@stdlib/Profile`; [3fa0cd96] REPL `@stdlib/REPL`; [9a3f8284] Random `@stdlib/Random`; [ea8e919c] SHA `@stdlib/SHA`; [9e88b42a] Serialization `@stdlib/Serialization`; [1a1011a3] SharedArrays `@stdlib/SharedArrays`; [6462fe0b] Sockets `@stdlib/Sockets`; [2f01184e] SparseArrays `@stdlib/SparseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfull,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10524,Testability,Test,Testing,10524,"arseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:10540,Testability,test,tests,10540,"arseArrays`; [10745b16] Statistics `@stdlib/Statistics`; [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`; [fa267f1f] TOML `@stdlib/TOML`; [a4e569a6] Tar `@stdlib/Tar`; [8dfed614] Test `@stdlib/Test`; [cf7118a7] UUIDs `@stdlib/UUIDs`; [4ec0a83e] Unicode `@stdlib/Unicode`; [e66e0078] CompilerSupportLibraries_jll `@stdlib/CompilerSupportLibraries_jll`; [deac9b47] LibCURL_jll `@stdlib/LibCURL_jll`; [29816b5a] LibSSH2_jll `@stdlib/LibSSH2_jll`; [c8ffd9c3] MbedTLS_jll `@stdlib/MbedTLS_jll`; [14a3606d] MozillaCACerts_jll `@stdlib/MozillaCACerts_jll`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:11046,Testability,test,test,11046,"l`; [05823500] OpenLibm_jll `@stdlib/OpenLibm_jll`; [efcefdf7] PCRE2_jll `@stdlib/PCRE2_jll`; [83775a58] Zlib_jll `@stdlib/Zlib_jll`; [8e850ede] nghttp2_jll `@stdlib/nghttp2_jll`; [3f19e933] p7zip_jll `@stdlib/p7zip_jll`; Precompiling project...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow water regression tests...; [2023/02/21 06:36:19.143] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/21 06:36:29.566] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.345] WARN ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:11287,Testability,test,test,11287,"t...; ✗ RecipesPipeline; ✗ Plots; 0 dependencies successfully precompiled in 7 seconds (205 already precompiled); 2 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages; Testing Running tests...; ┌ Warning: You appear to be using MPI.jl with the default MPI binary on a cluster.; │ We recommend using the system-provided MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow water regression tests...; [2023/02/21 06:36:19.143] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/21 06:36:29.566] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.345] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.346] WARN defaulting to uniform WENO scheme w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:11691,Testability,test,tests,11691,"ed MPI, see the Configuration section of the MPI.jl docs.; └ @ MPI /g/data/v45/nc3020/.julia/packages/MPI/08SPr/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow water regression tests...; [2023/02/21 06:36:19.143] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/21 06:36:29.566] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.345] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.346] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:37:27.833] INFO Initializing simulation...; [2023/02/21 06:37:32.539] INFO ... simulation initialization complete (4.632 seconds); [2023/02/21 06:37:32.539] INFO Executing initial time step...; [2023/02/21 06:37:52.29",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:11732,Testability,Test,Testing,11732,"/deps/deps.jl:15; [ Info: Oceananigans will use 48 threads; [2023/02/21 06:36:13.652] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.673] WARN allowscalar([true]) is deprecated, use `allowscalar() do end` or `@allowscalar` to denote exactly which operations can use scalar operations. -@-> /g/data/v45/nc3020/OC.jl/test/dependencies_for_runtests.jl:71; [2023/02/21 06:36:18.728] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:18.729] WARN Over-writing registration of the datadep -@-> /g/data/v45/nc3020/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/21 06:36:19.136] INFO Running shallow water regression tests...; [2023/02/21 06:36:19.143] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/21 06:36:29.566] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.345] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:36:32.346] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:37:27.833] INFO Initializing simulation...; [2023/02/21 06:37:32.539] INFO ... simulation initialization complete (4.632 seconds); [2023/02/21 06:37:32.539] INFO Executing initial time step...; [2023/02/21 06:37:52.296] WARN `query(s::CuStream)` is deprecated, use `isdone(s)` instead. -@-> /g/data/v45/nc3020/.julia/packages/C",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:13611,Testability,Test,Test,13611,"(4.632 seconds); [2023/02/21 06:37:32.539] INFO Executing initial time step...; [2023/02/21 06:37:52.296] WARN `query(s::CuStream)` is deprecated, use `isdone(s)` instead. -@-> /g/data/v45/nc3020/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:41; [2023/02/21 06:37:54.934] INFO ... initial time step complete (22.395 seconds).; [2023/02/21 06:37:56.880] INFO Simulation is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:00.743] INFO Δu: min=-3.188983e-08, max=+2.966291e-08, mean=+3.932481e-11, absmean=+1.978398e-09, std=+5.640766e-09 (16384/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:13651,Testability,test,test,13651,"N `query(s::CuStream)` is deprecated, use `isdone(s)` instead. -@-> /g/data/v45/nc3020/.julia/packages/CUDAKernels/kCOA4/src/CUDAKernels.jl:41; [2023/02/21 06:37:54.934] INFO ... initial time step complete (22.395 seconds).; [2023/02/21 06:37:56.880] INFO Simulation is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:00.743] INFO Δu: min=-3.188983e-08, max=+2.966291e-08, mean=+3.932481e-11, absmean=+1.978398e-09, std=+5.640766e-09 (16384/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:13921,Testability,test,test,13921,"stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:00.743] INFO Δu: min=-3.188983e-08, max=+2.966291e-08, mean=+3.932481e-11, absmean=+1.978398e-09, std=+5.640766e-09 (16384/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not in",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14035,Testability,test,test,14035,"43] INFO Δu: min=-3.188983e-08, max=+2.966291e-08, mean=+3.932481e-11, absmean=+1.978398e-09, std=+5.640766e-09 (16384/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14163,Testability,Test,Test,14163,"/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14172,Testability,Test,Test,14172,"/16384 matching grid points); [2023/02/21 06:38:00.744] INFO Δv: min=-2.539346e-09, max=+1.967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14244,Testability,test,test,14244,"967717e-09, mean=+2.462280e-12, absmean=+1.480658e-10, std=+4.143014e-10 (16488/16512 matching grid points); [2023/02/21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:30.393] INF",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14372,Testability,Test,Test,14372,"21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:30.393] INFO Initializing simulation...; [2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [202",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14381,Testability,Test,Test,14381,"21 06:38:00.744] INFO Δh: min=-4.767265e-07, max=+4.779508e-07, mean=+3.492460e-09, absmean=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:30.393] INFO Initializing simulation...; [2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [202",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14453,Testability,test,test,14453,"=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:30.393] INFO Initializing simulation...; [2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [2023/02/21 06:38:30.504] INFO Executing initial time step...; [2023/02/21 06:38:40.776] INFO .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14525,Testability,Test,Testing,14525,"n [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:30.393] INFO Initializing simulation...; [2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [2023/02/21 06:38:30.504] INFO Executing initial time step...; [2023/02/21 06:38:40.776] INFO ... initial time step complete (10.272 seconds).; [2023/02/21 06:38:42.742] INFO Simulation is stopping. Mo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16222,Testability,Test,Test,16222,"020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:30.393] INFO Initializing simulation...; [2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [2023/02/21 06:38:30.504] INFO Executing initial time step...; [2023/02/21 06:38:40.776] INFO ... initial time step complete (10.272 seconds).; [2023/02/21 06:38:42.742] INFO Simulation is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:46.004] INFO Δu: min=-3.698171e-08, max=+2.977649e-08, mean=-9.793714e-11, absmean=+2.315996e-09, std=+6.206031e-09 (16384/16384 matching grid points); [2023/02/21 06:38:46.005] INFO Δv: min=-5.495966e-10, max=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16262,Testability,test,test,16262,"[2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [2023/02/21 06:38:30.504] INFO Executing initial time step...; [2023/02/21 06:38:40.776] INFO ... initial time step complete (10.272 seconds).; [2023/02/21 06:38:42.742] INFO Simulation is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:46.004] INFO Δu: min=-3.698171e-08, max=+2.977649e-08, mean=-9.793714e-11, absmean=+2.315996e-09, std=+6.206031e-09 (16384/16384 matching grid points); [2023/02/21 06:38:46.005] INFO Δv: min=-5.495966e-10, max=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16529,Testability,test,test,16529,"on is stopping. Model iteration 20 has hit or exceeded simulation stop iteration 20.; [2023/02/21 06:38:46.004] INFO Δu: min=-3.698171e-08, max=+2.977649e-08, mean=-9.793714e-11, absmean=+2.315996e-09, std=+6.206031e-09 (16384/16384 matching grid points); [2023/02/21 06:38:46.005] INFO Δv: min=-5.495966e-10, max=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16643,Testability,test,test,16643,"8:46.004] INFO Δu: min=-3.698171e-08, max=+2.977649e-08, mean=-9.793714e-11, absmean=+2.315996e-09, std=+6.206031e-09 (16384/16384 matching grid points); [2023/02/21 06:38:46.005] INFO Δv: min=-5.495966e-10, max=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16771,Testability,Test,Test,16771,"(16384/16384 matching grid points); [2023/02/21 06:38:46.005] INFO Δv: min=-5.495966e-10, max=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16780,Testability,Test,Test,16780,"(16384/16384 matching grid points); [2023/02/21 06:38:46.005] INFO Δv: min=-5.495966e-10, max=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16852,Testability,test,test,16852,"ax=+1.063640e-09, mean=-3.441143e-13, absmean=+4.699188e-11, std=+1.347006e-10 (16508/16512 matching grid points); [2023/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16980,Testability,Test,Test,16980,"23/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:16989,Testability,Test,Test,16989,"23/02/21 06:38:46.005] INFO Δh: min=-4.766520e-07, max=+4.757091e-07, mean=+1.373701e-08, absmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17061,Testability,test,test,17061,"bsmean=+2.044884e-07, std=+2.513218e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bf",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17102,Testability,Test,Test,17102,"est/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17371,Testability,test,tests,17371,"est/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17484,Testability,test,test,17484,":Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf;",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17547,Testability,test,testing,17547,"jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] Sparse",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:18447,Testability,Log,Logging,18447," /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] SparseArrays; [10745b16] Statistics. julia> versioninfo(); Julia Version 1.6.7; Commit 3b76b25b64* (2022-07-19 15:11 UTC); Platform Info:; OS: Linux (x86_64-redhat-linux); CPU: Intel(R) Xeon(R) Platinum 8268 CPU @ 2.90GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; JULIA_DEPOT_PATH = /g/data/v45/nc3020/.julia:/share/julia/site/; JULIA_CUDA_USE_BINARYBUILDER = false; JULIA_LOAD_PATH = @:@v#.#:@stdlib:@site; JULIA_NUM_THREADS = 48. shell> nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Tue Feb 21 07:30:33 2023; Driver Version : 525.60.13; CUDA Version : 12.0. Attached GPUs : 1; GPU 00000000:3D:00.0; Product Name : Tesla V100-SXM2-32GB; Product Brand : Tesla; Product Architecture : Volta; Display Mode : Enabled; Display Active : Disabled; Persistence Mode : Enabled; MIG Mode; Current : N/A; Pending : N/A; Accounting Mode : Disabled; Accounting Mode Buffer Size :",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:19046,Testability,LOG,LOG,19046,"d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf; [9a3f8284] Random; [2f01184e] SparseArrays; [10745b16] Statistics. julia> versioninfo(); Julia Version 1.6.7; Commit 3b76b25b64* (2022-07-19 15:11 UTC); Platform Info:; OS: Linux (x86_64-redhat-linux); CPU: Intel(R) Xeon(R) Platinum 8268 CPU @ 2.90GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; JULIA_DEPOT_PATH = /g/data/v45/nc3020/.julia:/share/julia/site/; JULIA_CUDA_USE_BINARYBUILDER = false; JULIA_LOAD_PATH = @:@v#.#:@stdlib:@site; JULIA_NUM_THREADS = 48. shell> nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Tue Feb 21 07:30:33 2023; Driver Version : 525.60.13; CUDA Version : 12.0. Attached GPUs : 1; GPU 00000000:3D:00.0; Product Name : Tesla V100-SXM2-32GB; Product Brand : Tesla; Product Architecture : Volta; Display Mode : Enabled; Display Active : Disabled; Persistence Mode : Enabled; MIG Mode; Current : N/A; Pending : N/A; Accounting Mode : Disabled; Accounting Mode Buffer Size : 4000; Driver Model; Current : N/A; Pending : N/A; Serial Number : 1562019007305; GPU UUID : GPU-afa33ac3-cef0-ac1a-9dfd-491463f321e9; Minor Number : 0; VBIOS Version : 88.00.80.00.01; MultiGPU Board : No; Board ID : 0x3d00; Board Part Number : 900-2G503-0010-000; GPU Part Number : 1DB5-896-A1; Module ID : 0; Inforom Version; Image Version : G503.0203.00.05; OEM Object : 1.1; ECC Object : 5.0; Power Management Object : N/A; GPU Operation Mode; Current : N/A; Pending : N/A; GSP Firmware Version : N/A; GPU Virtualization Mode; Virtualization Mode : None; Host VGPU Mode : N/A; IBMNP",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:4951,Usability,Simpl,SimpleBufferStream,4951,] MacroTools v0.5.9; [739be429] MbedTLS v1.1.7; [442fdcdd] Measures v0.3.2; [e1d29d7a] Missings v1.1.0; [78c3b35d] Mocking v0.7.5; [85f8d34a] NCDatasets v0.12.4; [77ba4419] NaNMath v1.0.0; [9e8cae18] Oceananigans v0.76.5 `/g/data/v45/nc3020/OC.jl`; [6fe1bfb0] OffsetArrays v1.11.2; [4d8831e6] OpenSSL v1.3.3; [bac558e1] OrderedCollections v1.4.1; [69de0a69] Parsers v2.3.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [b98c9c47] Pipe v1.3.0; [ccf2f8ad] PlotThemes v3.1.0; [995b91a9] PlotUtils v1.3.4; [91a5bcdd] Plots v1.36.0; [21216c6a] Preferences v1.3.0; [94ee1d12] Quaternions v0.5.6; [74087812] Random123 v1.5.0; [e6cf234a] RandomNumbers v1.5.3; [3cdcf5f2] RecipesBase v1.2.1; [01d81517] RecipesPipeline v0.6.9; [189a3867] Reexport v1.2.2; [05181044] RelocatableFolders v1.0.0; [ae029012] Requires v1.3.0; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [6c6a2e73] Scratch v1.1.1; [d496a93d] SeawaterPolynomials v0.2.3; [992d4aef] Showoff v1.0.3; [777ac1f9] SimpleBufferStream v1.1.0; [66db9d55] SnoopPrecompile v1.0.3; [a2af1166] SortingAlgorithms v1.1.0; [276daf66] SpecialFunctions v2.1.5; [aedffcd0] Static v0.6.5; [90137ffa] StaticArrays v1.4.4; [15972242] StaticPermutations v0.3.0; [82ae8749] StatsAPI v1.5.0; [2913bbd2] StatsBase v0.33.21; [5e0ebb24] Strided v1.2.2; [09ab397b] StructArrays v0.6.7; [856f2bd8] StructTypes v1.8.1; [3783bdb8] TableTraits v1.0.1; [bd369af6] Tables v1.7.0; [6aa5eb33] TaylorSeries v0.10.13; [62fd8b95] TensorCore v0.1.1; [f269a46b] TimeZones v1.9.1; [a759f4b9] TimerOutputs v0.5.19; [bdfc003b] TimesDates v0.3.1; [3bb67fe8] TranscodingStreams v0.9.6; [bc48ee85] Tullio v0.3.4; [9d95972d] TupleTools v1.3.0; [5c2747f8] URIs v1.4.2; [1cfade01] UnicodeFun v0.4.1; [41fe7b60] Unzip v0.1.2; [81def892] VersionParsing v1.3.0; [6e34b625] Bzip2_jll v1.0.8+0; [83423d85] Cairo_jll v1.16.1+1; [2e619515] Expat_jll v2.4.8+0; [b22a6f82] FFMPEG_jll v4.4.2+2; [f5851436] FFTW_jll v3.3.10+0; [a3f928ae] Fontconfig_jll v2.13.93+0; [d7e528f0,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1438707297:38,Testability,test,test,38,@simone-silvestri do you also get the test passing if you run on v0.76.5?. I'm quite confused... I'm running using Julia v1.6.7,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1438707297
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1438778981:91,Testability,test,test,91,"@navidcy I am happy to try something to compare. If yes, what exactly would you like me to test?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1438778981
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439341447:24,Testability,test,test,24,"OK, I tried to make the test pass and it doesn't on v0.76.5-v0.76.8 it it won't pass. On v0.77.0 it passes. This hints that the data were created with v0.77.0. @simone-silvestri do you have any recollection of this or a way to figure it out?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439341447
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439353217:67,Testability,test,test,67,"Hmmm, I think it was created with the first PR that introduces the test and then left untouched. What if we regenerate the data in main. Will it work on previous versions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439353217
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439356548:157,Testability,test,test,157,Well doesn't generating the data with `main` beats the purpose a bit? What if we have introduced a bug and then we regenerate the data with the bug and then test against that...?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439356548
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439363214:34,Testability,test,testing,34,I meant generating it on main and testing it on 0.76.5 or 0.76.8. I guess it will not make a difference though,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439363214
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441839736:92,Testability,test,test,92,"So main agrees with Artifacts (the previously generated data?)? ; Was this generated in the test environment or from oceananigans' environment?. ~~Is this on a CPU, because it seems like the difference arises on the GPU.~~",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441839736
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441917982:16,Testability,test,tests,16,It agrees _but_ tests fail on buildkite which is so confusing,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1441917982
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1442103670:8,Testability,test,test,8,Did you test on sverdrup?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1442103670
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1444012005:62,Availability,failure,failure,62,unfortunately I am reopening this since we had an instance of failure once more. https://buildkite.com/clima/oceananigans/builds/10225#_,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1444012005
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3567,Availability,ERROR,ERROR,3567,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3632,Availability,error,errored,3632,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3574,Performance,Load,LoadError,3574,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:124,Testability,test,test,124,"I am running `julia 1.8.2` with `Oceananigans v0.79.4`, which I am running from my repo that I cloned. I find that the same test fails on a `CPU` for either formulations. When I focus on one test case I see that the differences are almost everywhere, `256/16512`. Note that I am running the test case from REPL. Please see below for the details. I found that the data files that we are comparing with are from June 1 2022. I wanted to try and reproduce them by going into `shallow_water_bickley_jet_regression.jl` and changed `regenerate_data` from `false` to `true`. This ran but it didn't save the data. Where can I find the file that generated the `truth` data?. I made some figures to see whether there is a visual difference between the two and the answer is yes. I am including `vtruth.png`, `vnew.png` and `vdiff.png`, One observation is the amplitude of the `truth` is significantly larger and noisier. I wonder whether the noise that was added before was of larger amplitude than what we have here?. ![vdiff](https://user-images.githubusercontent.com/8239041/221380109-96ff99c1-d6cf-4ce5-9b40-52c38eaaca11.png); ![vtruth](https://user-images.githubusercontent.com/8239041/221380111-3ee2224e-3ba3-4169-90e2-3f03cd00e78b.png); ![vnew](https://user-images.githubusercontent.com/8239041/221380112-8a34bccf-4485-406b-92e6-74f6a13f479e.png). ```; julia> include(""test_shallow_water_regression.jl""); [2023/02/25 15:42:20.222] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.223] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.355] INFO Running shallow water regression tests...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initializ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:191,Testability,test,test,191,"I am running `julia 1.8.2` with `Oceananigans v0.79.4`, which I am running from my repo that I cloned. I find that the same test fails on a `CPU` for either formulations. When I focus on one test case I see that the differences are almost everywhere, `256/16512`. Note that I am running the test case from REPL. Please see below for the details. I found that the data files that we are comparing with are from June 1 2022. I wanted to try and reproduce them by going into `shallow_water_bickley_jet_regression.jl` and changed `regenerate_data` from `false` to `true`. This ran but it didn't save the data. Where can I find the file that generated the `truth` data?. I made some figures to see whether there is a visual difference between the two and the answer is yes. I am including `vtruth.png`, `vnew.png` and `vdiff.png`, One observation is the amplitude of the `truth` is significantly larger and noisier. I wonder whether the noise that was added before was of larger amplitude than what we have here?. ![vdiff](https://user-images.githubusercontent.com/8239041/221380109-96ff99c1-d6cf-4ce5-9b40-52c38eaaca11.png); ![vtruth](https://user-images.githubusercontent.com/8239041/221380111-3ee2224e-3ba3-4169-90e2-3f03cd00e78b.png); ![vnew](https://user-images.githubusercontent.com/8239041/221380112-8a34bccf-4485-406b-92e6-74f6a13f479e.png). ```; julia> include(""test_shallow_water_regression.jl""); [2023/02/25 15:42:20.222] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.223] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.355] INFO Running shallow water regression tests...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initializ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:291,Testability,test,test,291,"I am running `julia 1.8.2` with `Oceananigans v0.79.4`, which I am running from my repo that I cloned. I find that the same test fails on a `CPU` for either formulations. When I focus on one test case I see that the differences are almost everywhere, `256/16512`. Note that I am running the test case from REPL. Please see below for the details. I found that the data files that we are comparing with are from June 1 2022. I wanted to try and reproduce them by going into `shallow_water_bickley_jet_regression.jl` and changed `regenerate_data` from `false` to `true`. This ran but it didn't save the data. Where can I find the file that generated the `truth` data?. I made some figures to see whether there is a visual difference between the two and the answer is yes. I am including `vtruth.png`, `vnew.png` and `vdiff.png`, One observation is the amplitude of the `truth` is significantly larger and noisier. I wonder whether the noise that was added before was of larger amplitude than what we have here?. ![vdiff](https://user-images.githubusercontent.com/8239041/221380109-96ff99c1-d6cf-4ce5-9b40-52c38eaaca11.png); ![vtruth](https://user-images.githubusercontent.com/8239041/221380111-3ee2224e-3ba3-4169-90e2-3f03cd00e78b.png); ![vnew](https://user-images.githubusercontent.com/8239041/221380112-8a34bccf-4485-406b-92e6-74f6a13f479e.png). ```; julia> include(""test_shallow_water_regression.jl""); [2023/02/25 15:42:20.222] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.223] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.355] INFO Running shallow water regression tests...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initializ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:1758,Testability,test,tests,1758,"he two and the answer is yes. I am including `vtruth.png`, `vnew.png` and `vdiff.png`, One observation is the amplitude of the `truth` is significantly larger and noisier. I wonder whether the noise that was added before was of larger amplitude than what we have here?. ![vdiff](https://user-images.githubusercontent.com/8239041/221380109-96ff99c1-d6cf-4ce5-9b40-52c38eaaca11.png); ![vtruth](https://user-images.githubusercontent.com/8239041/221380111-3ee2224e-3ba3-4169-90e2-3f03cd00e78b.png); ![vnew](https://user-images.githubusercontent.com/8239041/221380112-8a34bccf-4485-406b-92e6-74f6a13f479e.png). ```; julia> include(""test_shallow_water_regression.jl""); [2023/02/25 15:42:20.222] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.223] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.355] INFO Running shallow water regression tests...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:1799,Testability,Test,Testing,1799," amplitude of the `truth` is significantly larger and noisier. I wonder whether the noise that was added before was of larger amplitude than what we have here?. ![vdiff](https://user-images.githubusercontent.com/8239041/221380109-96ff99c1-d6cf-4ce5-9b40-52c38eaaca11.png); ![vtruth](https://user-images.githubusercontent.com/8239041/221380111-3ee2224e-3ba3-4169-90e2-3f03cd00e78b.png); ![vnew](https://user-images.githubusercontent.com/8239041/221380112-8a34bccf-4485-406b-92e6-74f6a13f479e.png). ```; julia> include(""test_shallow_water_regression.jl""); [2023/02/25 15:42:20.222] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.223] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/25 15:42:20.355] INFO Running shallow water regression tests...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid p",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:2926,Testability,Test,Test,2926,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:2980,Testability,test,test,2980,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3179,Testability,Test,Test,3179,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3188,Testability,Test,Test,3188,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3351,Testability,test,test,3351,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3417,Testability,Test,Test,3417,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3590,Testability,test,tests,3590,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446:3717,Testability,test,test,3717,"ts...; [2023/02/25 15:42:20.355] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/25 15:42:21.128] INFO Initializing simulation...; [2023/02/25 15:42:21.129] INFO ... simulation initialization complete (685.283 μs); [2023/02/25 15:42:21.129] INFO Executing initial time step...; [2023/02/25 15:42:23.148] INFO ... initial time step complete (2.019 seconds).; [2023/02/25 15:42:23.672] INFO Simulation is stopping after running for 2.521 seconds.; [2023/02/25 15:42:23.672] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/25 15:42:23.814] INFO Δu: min=-1.673332e-04, max=+1.094476e-04, mean=+2.507827e-07, absmean=+5.538768e-06, std=+1.574960e-05 (16384/16384 matching grid points); [2023/02/25 15:42:23.814] INFO Δv: min=-2.878156e-04, max=+1.230686e-04, mean=+1.406671e-07, absmean=+2.141572e-05, std=+4.550342e-05 (256/16512 matching grid points); [2023/02/25 15:42:23.814] INFO Δh: min=-1.126421e-03, max=+1.182485e-03, mean=+9.255018e-09, absmean=+7.901569e-05, std=+2.067916e-04 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]: Test Failed at /home/fpoulin/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] macro expansion; @ ~/Software/julia-1.8.2/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [2] run_shallow_water_regression(arch::CPU, formulation::ConservativeFormulation; regenerate_data::Bool); @ Main ~/Software/Oceananigans.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:95; Test Summary: | Fail Total Time; Shallow Water Regression | 1 1 3.5s; Shallow Water Bickley jet simulation [CPU, ConservativeFormulation] | 1 1 3.5s; ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.; in expression starting at /home/fpoulin/Software/Oceananigans.jl/test/test_shallow_water_regression.jl:6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1445209446
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783:171,Deployability,update,updated,171,"So what is ""truth"" above? Also, how did you figure out that the data we are comparing is from June 1st?. Hm... The regression tests show that only `v` fails... I recently updated the data we are comparing but perhaps somehow it's not updated? I'm not sure what you are comparing above. The initial conditions should be identical! If the initial conditions are that different then there is no way we will get tests to pass. What I wanted to see is the tendency fields at the first time step (but given we provide the initial condition) with v0.79.4 and with v0.77.0. The data we are comparing with was generated with v0.77.0 -- we thought we were pretty sure about that but might be wrong.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783:234,Deployability,update,updated,234,"So what is ""truth"" above? Also, how did you figure out that the data we are comparing is from June 1st?. Hm... The regression tests show that only `v` fails... I recently updated the data we are comparing but perhaps somehow it's not updated? I'm not sure what you are comparing above. The initial conditions should be identical! If the initial conditions are that different then there is no way we will get tests to pass. What I wanted to see is the tendency fields at the first time step (but given we provide the initial condition) with v0.79.4 and with v0.77.0. The data we are comparing with was generated with v0.77.0 -- we thought we were pretty sure about that but might be wrong.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783:126,Testability,test,tests,126,"So what is ""truth"" above? Also, how did you figure out that the data we are comparing is from June 1st?. Hm... The regression tests show that only `v` fails... I recently updated the data we are comparing but perhaps somehow it's not updated? I'm not sure what you are comparing above. The initial conditions should be identical! If the initial conditions are that different then there is no way we will get tests to pass. What I wanted to see is the tendency fields at the first time step (but given we provide the initial condition) with v0.79.4 and with v0.77.0. The data we are comparing with was generated with v0.77.0 -- we thought we were pretty sure about that but might be wrong.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783:408,Testability,test,tests,408,"So what is ""truth"" above? Also, how did you figure out that the data we are comparing is from June 1st?. Hm... The regression tests show that only `v` fails... I recently updated the data we are comparing but perhaps somehow it's not updated? I'm not sure what you are comparing above. The initial conditions should be identical! If the initial conditions are that different then there is no way we will get tests to pass. What I wanted to see is the tendency fields at the first time step (but given we provide the initial condition) with v0.79.4 and with v0.77.0. The data we are comparing with was generated with v0.77.0 -- we thought we were pretty sure about that but might be wrong.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446341783
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:1521,Availability,error,errors,1521,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:1324,Performance,load,load,1324,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:52,Testability,test,test,52,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:247,Testability,test,test,247,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:505,Testability,test,test,505,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:557,Testability,test,test,557,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:1070,Testability,test,test,1070,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883:1276,Testability,test,tests,1276,"I tried to follow the terminology in the regression test and sorry it was confusing. I used `truth` to refer to the data that is read from a file, done [here.](https://github.com/CliMA/Oceananigans.jl/blob/3676a718be1160f3ea70c3cce5dd21c5f06f144a/test/regression_tests/shallow_water_bickley_jet_regression.jl#L82) . I agree that only `v` fails but that means that `v` has larger differences compared to `u` and `h`. They all have differences. . I compared the initial data that we used in this regression test with the initial data read from the regression test. I saw that we had the 0th and 20th step saved. If there are differences at the beginning, then they are not solving exactly the same problem. In both we have that v is set to 0 and u and h are set to the Bickley jet with a random perturbation on `u`. The randomness will not be the same (unless we use a seed, which we don't, but we could) however the amplitude of the perturbations are different. This suggests to me that the initial conditions are not the same, and maybe the soruce of why the regression test fails. This is why I would like to know how the initial data was generated, using what script. I do suggest we regenerate it as that might solve a lot of the problems we are having with the regression tests. Do you want me to generate a script that load the inital data and compare it? You can see the results above. The fact that h has differences of `1e-7` is due to single precison, which means they are the same. However, u is different with errors much larger then `1e-7`, so the initial data is different. Unless there is something that I'm missing here?. I saw that the data files were dated June 1st 2022. For me it is stored at the following location. `/home/fpoulin/.julia/datadeps/regression_test_data/`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446357883
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446424887:62,Availability,down,downloaded,62,"hm... the data in `.julia/datadeps/regression_test_data/` are downloaded once from the CliMA/OceananigansArtifacts.jl repo. So perhaps you are using some outdated data for your ""truth""?. But regardless, if there are differences in the initial condition then we shall look no further! That's the issue!. @simone-silvestri, is there a way to enforce DataDeps to download again?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446424887
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446424887:360,Availability,down,download,360,"hm... the data in `.julia/datadeps/regression_test_data/` are downloaded once from the CliMA/OceananigansArtifacts.jl repo. So perhaps you are using some outdated data for your ""truth""?. But regardless, if there are differences in the initial condition then we shall look no further! That's the issue!. @simone-silvestri, is there a way to enforce DataDeps to download again?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446424887
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465:43,Deployability,install,installed,43,"I tried it on a different computer where I installed datadeps brand new and the tests ran on the CPU. I guess I am catching up to the problem. Unfortunately, my laptop doesn't have a GPU so I need to run it elsewhere to reproduce the problem. Will work on that today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465:80,Testability,test,tests,80,"I tried it on a different computer where I installed datadeps brand new and the tests ran on the CPU. I guess I am catching up to the problem. Unfortunately, my laptop doesn't have a GPU so I need to run it elsewhere to reproduce the problem. Will work on that today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1446678465
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:90,Testability,test,tests,90,"I removed the `.julia` file on my computer with a GPU and then it passed all 4 regression tests: `CPU/GPU` and `VectorInvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:203,Testability,test,test,203,"I removed the `.julia` file on my computer with a GPU and then it passed all 4 regression tests: `CPU/GPU` and `VectorInvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:533,Testability,test,tests,533,"I removed the `.julia` file on my computer with a GPU and then it passed all 4 regression tests: `CPU/GPU` and `VectorInvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:567,Testability,test,test,567,"I removed the `.julia` file on my computer with a GPU and then it passed all 4 regression tests: `CPU/GPU` and `VectorInvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:964,Testability,test,tests,964,"I removed the `.julia` file on my computer with a GPU and then it passed all 4 regression tests: `CPU/GPU` and `VectorInvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:1068,Testability,Test,Testing,1068,"nvariant/Conservative`. Maybe this needs to be done on the other servers to get the test to pass?. I will point out that for the `VectorInvariantFormulation` the absmean and std are identical to four or more decimals for GPU and CPU. However, for the `ConservativeFormulation`, the values for `v` and `h` are as good but the `u` value for absmean and std off by about 100. Maybe this is a concern, even though the tests pass?. ```; julia> include(""test/test_shallow_water_regression.jl""); [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:22.803] WARN Over-writing registration of the datadep -@-> /home/fpoulin/.julia/packages/DataDeps/ae6dT/src/registration.jl:15; [2023/02/27 18:57:23.118] INFO Running shallow water regression tests...; FJP: arch and formulation = CPU()VectorInvariantFormulation(); [2023/02/27 18:57:23.119] INFO Testing shallow water Bickley jet simulation regression [CPU, VectorInvariantFormulation]; [2023/02/27 18:57:23.124] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:57:23.525] INFO Initializing simulation...; [2023/02/27 18:57:23.526] INFO ... simulation initialization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, std=+5.534008e-09 (16384/16384 matching grid points); [2023/02/27 18:57:46.680] INFO Δv: min=-1.426954e-11, max=+1.432",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:2486,Testability,Test,Testing,2486,"lization complete (1.081 ms); [2023/02/27 18:57:23.526] INFO Executing initial time step...; [2023/02/27 18:57:24.661] INFO ... initial time step complete (1.135 seconds).; [2023/02/27 18:57:46.538] INFO Simulation is stopping after running for 21.864 seconds.; [2023/02/27 18:57:46.538] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:57:46.680] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, std=+5.534008e-09 (16384/16384 matching grid points); [2023/02/27 18:57:46.680] INFO Δv: min=-1.426954e-11, max=+1.432324e-11, mean=-2.560603e-14, absmean=+6.119071e-13, std=+1.792743e-12 (16512/16512 matching grid points); [2023/02/27 18:57:46.680] INFO Δh: min=-4.754092e-07, max=+4.764754e-07, mean=+2.561137e-09, absmean=+2.079621e-07, std=+2.556520e-07 (16384/16384 matching grid points); FJP: arch and formulation = CPU()ConservativeFormulation(); [2023/02/27 18:57:46.680] INFO Testing shallow water Bickley jet simulation regression [CPU, ConservativeFormulation]; [2023/02/27 18:57:49.567] INFO Initializing simulation...; [2023/02/27 18:57:49.625] INFO ... simulation initialization complete (57.503 ms); [2023/02/27 18:57:49.625] INFO Executing initial time step...; [2023/02/27 18:58:00.006] INFO ... initial time step complete (10.381 seconds).; [2023/02/27 18:58:00.502] INFO Simulation is stopping after running for 10.911 seconds.; [2023/02/27 18:58:00.502] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:58:00.509] INFO Δu: min=-2.972623e-08, max=+2.977460e-08, mean=+3.472408e-11, absmean=+2.084662e-09, std=+5.973908e-09 (16384/16384 matching grid points); [2023/02/27 18:58:00.509] INFO Δv: min=-1.453264e-11, max=+1.436524e-11, mean=+4.659518e-15, absmean=+6.267771e-13, std=+1.805375e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.509] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching gri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:3641,Testability,Test,Testing,3641,"n complete (57.503 ms); [2023/02/27 18:57:49.625] INFO Executing initial time step...; [2023/02/27 18:58:00.006] INFO ... initial time step complete (10.381 seconds).; [2023/02/27 18:58:00.502] INFO Simulation is stopping after running for 10.911 seconds.; [2023/02/27 18:58:00.502] INFO Model iteration 20 equals or exceeds stop iteration 20.; [2023/02/27 18:58:00.509] INFO Δu: min=-2.972623e-08, max=+2.977460e-08, mean=+3.472408e-11, absmean=+2.084662e-09, std=+5.973908e-09 (16384/16384 matching grid points); [2023/02/27 18:58:00.509] INFO Δv: min=-1.453264e-11, max=+1.436524e-11, mean=+4.659518e-15, absmean=+6.267771e-13, std=+1.805375e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.509] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); FJP: arch and formulation = GPU()VectorInvariantFormulation(); [2023/02/27 18:58:00.510] INFO Testing shallow water Bickley jet simulation regression [GPU, VectorInvariantFormulation]; [2023/02/27 18:58:00.515] WARN Inflating model grid halo size to (4, 4, 0) and recreating grid. Note that an ImmersedBoundaryGrid requires an extra halo point. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_model.jl:223; [2023/02/27 18:58:00.613] INFO Initializing simulation...; [2023/02/27 18:58:00.613] INFO ... simulation initialization complete (299.591 μs); [2023/02/27 18:58:00.613] INFO Executing initial time step...; [2023/02/27 18:58:00.615] INFO ... initial time step complete (1.524 ms).; [2023/02/27 18:58:00.636] INFO Simulation is stopping after running for 21.966 ms.; [2023/02/27 18:58:00.636] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.644] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, a",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:5347,Testability,Test,Testing,5347,"el iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.644] INFO Δu: min=-2.958580e-08, max=+2.921001e-08, mean=-7.420989e-11, absmean=+1.893230e-09, std=+5.534008e-09 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.644] INFO Δv: min=-1.426930e-11, max=+1.432286e-11, mean=-2.560596e-14, absmean=+6.119088e-13, std=+1.792748e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.644] INFO Δh: min=-4.754092e-07, max=+4.764754e-07, mean=+2.561137e-09, absmean=+2.079621e-07, std=+2.556520e-07 (16384/16384 matching grid points); FJP: arch and formulation = GPU()ConservativeFormulation(); [2023/02/27 18:58:00.644] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/27 18:58:00.731] INFO Initializing simulation...; [2023/02/27 18:58:00.732] INFO ... simulation initialization complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:6694,Testability,Test,Test,6694,"ation complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.453306e-11, max=+1.436533e-11, mean=+4.659446e-15, absmean=+6.267764e-13, std=+1.805380e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.795] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); Test Summary: | Pass Total Time; Shallow Water Regression | 4 4 37.7s; Test.DefaultTestSet(""Shallow Water Regression"", Any[Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542243119075e9, 1.677542266680591e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542266680676e9, 1.677542280509984e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542280510052e9, 1.677542280644663e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542280644765e9, 1.677542280795948e9)], 0, false, false, true, 1.677542243118905e9, 1.677542280795951e9); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:6765,Testability,Test,Test,6765,"ation complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.453306e-11, max=+1.436533e-11, mean=+4.659446e-15, absmean=+6.267764e-13, std=+1.805380e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.795] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); Test Summary: | Pass Total Time; Shallow Water Regression | 4 4 37.7s; Test.DefaultTestSet(""Shallow Water Regression"", Any[Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542243119075e9, 1.677542266680591e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542266680676e9, 1.677542280509984e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542280510052e9, 1.677542280644663e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542280644765e9, 1.677542280795948e9)], 0, false, false, true, 1.677542243118905e9, 1.677542280795951e9); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:6817,Testability,Test,Test,6817,"ation complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.453306e-11, max=+1.436533e-11, mean=+4.659446e-15, absmean=+6.267764e-13, std=+1.805380e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.795] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); Test Summary: | Pass Total Time; Shallow Water Regression | 4 4 37.7s; Test.DefaultTestSet(""Shallow Water Regression"", Any[Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542243119075e9, 1.677542266680591e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542266680676e9, 1.677542280509984e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542280510052e9, 1.677542280644663e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542280644765e9, 1.677542280795948e9)], 0, false, false, true, 1.677542243118905e9, 1.677542280795951e9); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:6984,Testability,Test,Test,6984,"ation complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.453306e-11, max=+1.436533e-11, mean=+4.659446e-15, absmean=+6.267764e-13, std=+1.805380e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.795] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); Test Summary: | Pass Total Time; Shallow Water Regression | 4 4 37.7s; Test.DefaultTestSet(""Shallow Water Regression"", Any[Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542243119075e9, 1.677542266680591e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542266680676e9, 1.677542280509984e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542280510052e9, 1.677542280644663e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542280644765e9, 1.677542280795948e9)], 0, false, false, true, 1.677542243118905e9, 1.677542280795951e9); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:7148,Testability,Test,Test,7148,"ation complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.453306e-11, max=+1.436533e-11, mean=+4.659446e-15, absmean=+6.267764e-13, std=+1.805380e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.795] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); Test Summary: | Pass Total Time; Shallow Water Regression | 4 4 37.7s; Test.DefaultTestSet(""Shallow Water Regression"", Any[Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542243119075e9, 1.677542266680591e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542266680676e9, 1.677542280509984e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542280510052e9, 1.677542280644663e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542280644765e9, 1.677542280795948e9)], 0, false, false, true, 1.677542243118905e9, 1.677542280795951e9); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226:7315,Testability,Test,Test,7315,"ation complete (546.689 μs); [2023/02/27 18:58:00.732] INFO Executing initial time step...; [2023/02/27 18:58:00.734] INFO ... initial time step complete (2.363 ms).; [2023/02/27 18:58:00.795] INFO Simulation is stopping after running for 61.833 ms.; [2023/02/27 18:58:00.795] INFO Model iteration 20 equals or exceeds stop iteration 20.; --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δu: min=-2.584649e-06, max=+1.597348e-06, mean=+3.118505e-09, absmean=+1.254639e-07, std=+3.731235e-07 (16384/16384 matching grid points); --------------------------------------------------------------------------------------------------------------------------------------------------; [2023/02/27 18:58:00.795] INFO Δv: min=-1.453306e-11, max=+1.436533e-11, mean=+4.659446e-15, absmean=+6.267764e-13, std=+1.805380e-12 (16512/16512 matching grid points); [2023/02/27 18:58:00.795] INFO Δh: min=-4.766880e-07, max=+4.767828e-07, mean=-9.313224e-10, absmean=+2.070016e-07, std=+2.552765e-07 (16384/16384 matching grid points); Test Summary: | Pass Total Time; Shallow Water Regression | 4 4 37.7s; Test.DefaultTestSet(""Shallow Water Regression"", Any[Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542243119075e9, 1.677542266680591e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [CPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542266680676e9, 1.677542280509984e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]"", Any[], 1, false, false, true, 1.677542280510052e9, 1.677542280644663e9), Test.DefaultTestSet(""Shallow Water Bickley jet simulation [GPU, ConservativeFormulation]"", Any[], 1, false, false, true, 1.677542280644765e9, 1.677542280795948e9)], 0, false, false, true, 1.677542243118905e9, 1.677542280795951e9); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1447332226
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450252882:79,Testability,test,tests,79,@navidcy : did you want to try deleting the `.julia` folder and then retry the tests to see if this fixes the problem for you?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450252882
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450294530:54,Availability,down,downloads,54,"@simone-silvestri, do you know if the buildkite CI re-downloads the artifacts every time? I think it does...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450294530
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:62,Deployability,install,installing,62,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:133,Testability,test,tests,133,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:255,Testability,Test,Test,255,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:405,Testability,test,testset,405,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:487,Testability,test,tests,487,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:670,Testability,test,testset,670,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998:774,Testability,Test,Testing,774,"I can confirm that I tried this on a server and after freshly installing the data it worked fine. I should say that I didn't run the tests exactly but ran this code below. Note the comment was just to make it easier for me to parse the output. ```; using Test; include(""dependencies_for_runtests.jl""); include(""data_dependencies.jl""). include(""regression_tests/shallow_water_bickley_jet_regression.jl""). @testset ""Shallow Water Regression"" begin; @info ""Running shallow water regression tests..."". for arch in (CPU(), GPU()); for formulation in (VectorInvariantFormulation(), ConservativeFormulation()); print("" FJP: arch and formulation = "", arch, formulation, ""\n""); @testset ""Shallow Water Bickley jet simulation [$(typeof(arch)), $(typeof(formulation))]"" begin; @info "" Testing shallow water Bickley jet simulation regression [$(typeof(arch)), $(typeof(formulation))]""; run_shallow_water_regression(arch, formulation; regenerate_data = false); end; end; end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450763998
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1466507669:83,Testability,test,test,83,@simone-silvestri : did you get a change to try deleting the files and running the test again?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1466507669
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477939147:97,Testability,test,test,97,"@simone-silvestri and @glwagner, does someone want to try and removing the data and retrying the test?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477939147
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477954278:20,Deployability,install,installed,20,"i think the data is installed freshly every time buildkite launches a new job, isn't it?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477954278
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477960735:95,Testability,test,tests,95,"Strange. This ran for me on my local machine and a server, so it's strange that it fails these tests. . I don't believe this is a major concern but thought I would check in.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477960735
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477962673:8,Testability,test,test,8,Did you test on a GPU?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477962673
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477969649:83,Testability,test,tests,83,"Yes, both CPU and GPU. But I did run the script separately, rather than do all the tests. I would not think that should matter though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477969649
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1480991004:18,Testability,test,tests,18,Great to hear the tests are working!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1480991004
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1484467353:172,Testability,test,tests,172,> They haven't failed for a while... I'm closing this for now. Turns out they were STILL commented out! See my comment on #2912. I'm opening and will close if indeed these tests don't constitute issue any more!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1484467353
https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1498244806:41,Testability,test,tests,41,For sure because there are no regression tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1498244806
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1429353692:157,Performance,queue,queues,157,"Are the current options (`@async` blocks) not sufficient? I'd rather not have a parallel mechanism and have to maintain the APIs (explicitly passing streams/queues) to support it. Even right now it's relatively broken, only supporting kernel launches and memory copies (i.e. BLAS APIs do not take explicit stream arguments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1429353692
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1429925832:99,Performance,perform,performance,99,My goal right now is to do all of the changes without introducing new constructs and then evaluate performance from there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1429925832
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1464051102:267,Performance,concurren,concurrency,267,"In discussion with Tim I decided against it. I tried implementing it on the CPU, but that's basically why I required events everywhere. See https://github.com/JuliaGPU/KernelAbstractions.jl/blob/main/examples/mpi.jl, but Tim and I are bullish on using Julia's native concurrency mechanism, to express what streams normally do.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1464051102
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424:31,Availability,error,error,31,"I am not sure about the `nrm2` error, (in here https://buildkite.com/clima/oceananigans/builds/10815#01872595-ab18-49c3-9f40-682de39fcdea) when I try locally; ```julia; (Oceananigans) pkg> test; ```; I cannot reproduce the error. Neither on Tartarus nor on Sverdrup (which is our GPU testing host)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424:223,Availability,error,error,223,"I am not sure about the `nrm2` error, (in here https://buildkite.com/clima/oceananigans/builds/10815#01872595-ab18-49c3-9f40-682de39fcdea) when I try locally; ```julia; (Oceananigans) pkg> test; ```; I cannot reproduce the error. Neither on Tartarus nor on Sverdrup (which is our GPU testing host)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424:189,Testability,test,test,189,"I am not sure about the `nrm2` error, (in here https://buildkite.com/clima/oceananigans/builds/10815#01872595-ab18-49c3-9f40-682de39fcdea) when I try locally; ```julia; (Oceananigans) pkg> test; ```; I cannot reproduce the error. Neither on Tartarus nor on Sverdrup (which is our GPU testing host)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424:284,Testability,test,testing,284,"I am not sure about the `nrm2` error, (in here https://buildkite.com/clima/oceananigans/builds/10815#01872595-ab18-49c3-9f40-682de39fcdea) when I try locally; ```julia; (Oceananigans) pkg> test; ```; I cannot reproduce the error. Neither on Tartarus nor on Sverdrup (which is our GPU testing host)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1486064424
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:36,Availability,error,errors,36,"@maleadt we are seeing a couple odd errors here:. ```; /net/ocean/home/data44/data5/glwagner/julia-1.8.5/bin/julia: relocation error: /data5/glwagner/.julia-10861/artifacts/ebadc1bf983003ca3f714f062af4451365761171/lib/libcublas.so: symbol cublasLt_for_cublas_DDD version libcublasLt.so.11 not defined in file libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:127,Availability,error,error,127,"@maleadt we are seeing a couple odd errors here:. ```; /net/ocean/home/data44/data5/glwagner/julia-1.8.5/bin/julia: relocation error: /data5/glwagner/.julia-10861/artifacts/ebadc1bf983003ca3f714f062af4451365761171/lib/libcublas.so: symbol cublasLt_for_cublas_DDD version libcublasLt.so.11 not defined in file libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:368,Availability,Error,Error,368,"@maleadt we are seeing a couple odd errors here:. ```; /net/ocean/home/data44/data5/glwagner/julia-1.8.5/bin/julia: relocation error: /data5/glwagner/.julia-10861/artifacts/ebadc1bf983003ca3f714f062af4451365761171/lib/libcublas.so: symbol cublasLt_for_cublas_DDD version libcublasLt.so.11 not defined in file libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:2655,Availability,error,error,2655,"ILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:140; [9] cg!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}; abstol::Float64, reltol::Float64, maxiter::Int64, log::Bool, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, verbose::Bool, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:224; ```. But in particular the nrm2 error we are having trouble reproducing locally.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:1241,Integrability,wrap,wrappers,1241,"las.so: symbol cublasLt_for_cublas_DDD version libcublasLt.so.11 not defined in file libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:140; [9] cg!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}; abstol::Float64, reltol::Float64",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:1326,Integrability,wrap,wrappers,1326,"libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:140; [9] cg!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}; abstol::Float64, reltol::Float64, maxiter::Int64, log::Bool, statevars::IterativeSolvers.CGStateVariables{Float64, Cu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:381,Testability,Test,Test,381,"@maleadt we are seeing a couple odd errors here:. ```; /net/ocean/home/data44/data5/glwagner/julia-1.8.5/bin/julia: relocation error: /data5/glwagner/.julia-10861/artifacts/ebadc1bf983003ca3f714f062af4451365761171/lib/libcublas.so: symbol cublasLt_for_cublas_DDD version libcublasLt.so.11 not defined in file libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:481,Testability,test,test,481,"@maleadt we are seeing a couple odd errors here:. ```; /net/ocean/home/data44/data5/glwagner/julia-1.8.5/bin/julia: relocation error: /data5/glwagner/.julia-10861/artifacts/ebadc1bf983003ca3f714f062af4451365761171/lib/libcublas.so: symbol cublasLt_for_cublas_DDD version libcublasLt.so.11 not defined in file libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:531,Testability,Test,Test,531,"@maleadt we are seeing a couple odd errors here:. ```; /net/ocean/home/data44/data5/glwagner/julia-1.8.5/bin/julia: relocation error: /data5/glwagner/.julia-10861/artifacts/ebadc1bf983003ca3f714f062af4451365761171/lib/libcublas.so: symbol cublasLt_for_cublas_DDD version libcublasLt.so.11 not defined in file libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:2242,Testability,log,log,2242,"ILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:140; [9] cg!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}; abstol::Float64, reltol::Float64, maxiter::Int64, log::Bool, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, verbose::Bool, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ IterativeSolvers ~/.julia-10861/packages/IterativeSolvers/rhYBz/src/cg.jl:224; ```. But in particular the nrm2 error we are having trouble reproducing locally.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015:694,Availability,avail,available,694,"Simone observed:. ```; sverdrup:~/Oceananigans.jl$ julia --project --check-bounds=yes -O0 -e 'using CUDA; try CUDA.versioninfo(); catch; end' ; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0. Libraries: ; - CUBLAS: 11.11.3; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27. Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86. 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 21.353 GiB / 23.869 GiB available); ```. But on CI on the same machine:; ```; Info Packages marked with ⌃ have new versions available and may be upgradable.; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0; ; Libraries:; - CUBLAS: 11.3.0; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27; ; Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86; ; 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 23.779 GiB / 23.869 GiB available); ```. So it looks like CUBLAS 11.03 is leaking through...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015:794,Availability,avail,available,794,"Simone observed:. ```; sverdrup:~/Oceananigans.jl$ julia --project --check-bounds=yes -O0 -e 'using CUDA; try CUDA.versioninfo(); catch; end' ; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0. Libraries: ; - CUBLAS: 11.11.3; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27. Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86. 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 21.353 GiB / 23.869 GiB available); ```. But on CI on the same machine:; ```; Info Packages marked with ⌃ have new versions available and may be upgradable.; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0; ; Libraries:; - CUBLAS: 11.3.0; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27; ; Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86; ; 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 23.779 GiB / 23.869 GiB available); ```. So it looks like CUBLAS 11.03 is leaking through...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015:1382,Availability,avail,available,1382,"Simone observed:. ```; sverdrup:~/Oceananigans.jl$ julia --project --check-bounds=yes -O0 -e 'using CUDA; try CUDA.versioninfo(); catch; end' ; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0. Libraries: ; - CUBLAS: 11.11.3; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27. Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86. 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 21.353 GiB / 23.869 GiB available); ```. But on CI on the same machine:; ```; Info Packages marked with ⌃ have new versions available and may be upgradable.; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0; ; Libraries:; - CUBLAS: 11.3.0; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27; ; Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86; ; 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 23.779 GiB / 23.869 GiB available); ```. So it looks like CUBLAS 11.03 is leaking through...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015:172,Deployability,install,installation,172,"Simone observed:. ```; sverdrup:~/Oceananigans.jl$ julia --project --check-bounds=yes -O0 -e 'using CUDA; try CUDA.versioninfo(); catch; end' ; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0. Libraries: ; - CUBLAS: 11.11.3; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27. Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86. 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 21.353 GiB / 23.869 GiB available); ```. But on CI on the same machine:; ```; Info Packages marked with ⌃ have new versions available and may be upgradable.; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0; ; Libraries:; - CUBLAS: 11.3.0; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27; ; Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86; ; 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 23.779 GiB / 23.869 GiB available); ```. So it looks like CUBLAS 11.03 is leaking through...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015:856,Deployability,install,installation,856,"Simone observed:. ```; sverdrup:~/Oceananigans.jl$ julia --project --check-bounds=yes -O0 -e 'using CUDA; try CUDA.versioninfo(); catch; end' ; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0. Libraries: ; - CUBLAS: 11.11.3; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27. Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86. 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 21.353 GiB / 23.869 GiB available); ```. But on CI on the same machine:; ```; Info Packages marked with ⌃ have new versions available and may be upgradable.; CUDA runtime 11.8, artifact installation; CUDA driver 11.3; NVIDIA driver 465.27.0; ; Libraries:; - CUBLAS: 11.3.0; - CURAND: 10.3.0; - CUFFT: 10.9.0; - CUSOLVER: 11.4.1; - CUSPARSE: 11.7.5; - CUPTI: 18.0.0; - NVML: 11.0.0+465.27; ; Toolchain:; - Julia: 1.8.5; - LLVM: 13.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5, 7.0, 7.1, 7.2; - Device capability support: sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75, sm_80, sm_86; ; 1 device:; 0: NVIDIA Quadro P6000 (sm_61, 23.779 GiB / 23.869 GiB available); ```. So it looks like CUBLAS 11.03 is leaking through...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1490383015
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1497609415:178,Integrability,depend,depend,178,"@glwagner @navidcy the biggest blocker here is AMGX. I would propose moving AMGX support to a separate package?. The primary motivation is that ideally `Oceananigans` should not depend directly on CUDA.jl, but ""just"" use KA. The backend packages are large and not necessarily compatible. So all CUDA.jl/AMDGPU.jl/Metal.jl specific code should go into an extension package.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1497609415
https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1513035348:32,Testability,benchmark,benchmarks,32,We'll have to generate some new benchmarks after this especially for smaller / 1D / 2D problems,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1513035348
https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431592249:27,Testability,test,test,27,You mean in the regression test or in general?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431592249
https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431761715:35,Testability,test,test,35,"In general, it can. The regression test is on a rectilinear grid",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2926#issuecomment-1431761715
https://github.com/CliMA/Oceananigans.jl/pull/2927#issuecomment-1431577460:24,Testability,test,test,24,"Since it's a regression test, we will lose continuity of the code if any PRs are merged from now on. So I suggest regenerating the data ASAP and merging the regression test back in.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2927#issuecomment-1431577460
https://github.com/CliMA/Oceananigans.jl/pull/2927#issuecomment-1431577460:168,Testability,test,test,168,"Since it's a regression test, we will lose continuity of the code if any PRs are merged from now on. So I suggest regenerating the data ASAP and merging the regression test back in.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2927#issuecomment-1431577460
https://github.com/CliMA/Oceananigans.jl/issues/2928#issuecomment-1435106594:43,Safety,avoid,avoid,43,"I wonder if we can lean on the compiler to avoid having to store objects directly, eg. ```julia; struct SumOfFields{N, F}; fields :: F; function SumOfFields{N}(fields...) = new{N, typeof(fields)}(fields); end. @inline getindex(s::SumOfFields{1}, i, j, k) = @inbounds s.fields[1][i, j, k]; @inline getindex(s::SumOfFields{2}, i, j, k) = @inbounds s.fields[1][i, j, k] + s.fields[2][i, j, k]; @inline getindex(s::SumOfFields{3}, i, j, k) = @inbounds s.fields[1][i, j, k] + s.fields[2][i, j, k] + s.fields[3][i, j, k]; ```. then inside kernels maybe it'll be enough to write. ```julia; i, j, k = @index(Global, NTuple). U = SumOfFields{2}(velocities, background_fields.velocities). div_Uc(i, j, k, grid, U, c); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2928#issuecomment-1435106594
https://github.com/CliMA/Oceananigans.jl/issues/2928#issuecomment-1679169187:298,Usability,simpl,simply,298,"Ah yes, we will have to change the user API so that it no longer accepts an advection scheme. We would also need a utility like. ```julia; total_velocities = with_advective_forcing(forcing, total_velocities); ```. that would add the forcing velocity when `forcing::AdvectiveForcing` (and otherwise simply returns `total_velocities`). That utility probably belongs in `advective_forcing.jl`. And `SumOfArrays` needs to support 3?. https://github.com/CliMA/Oceananigans.jl/blob/fa5e280115f619d01a460f012328bd7e6d253b38/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl#L64-L66",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2928#issuecomment-1679169187
https://github.com/CliMA/Oceananigans.jl/issues/2930#issuecomment-1557910267:28,Integrability,depend,depending,28,"I am open to either option, depending on which is possible at the moment.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2930#issuecomment-1557910267
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435830614:7,Energy Efficiency,reduce,reduce,7,"Can we reduce the MWE even more? Why not `Nx, Ny, Nz = 4, 4, 4`? And `stop_time=30`?. Also, can you post the code to plot?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435830614
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:7736,Deployability,integrat,integration,7736,"00207786 -0.000570261 -0.00113736 -0.0011126 -0.00095512 -0.000668289 0.000187081 -2.50371e-5 -0.000234227 -3.30057e-5 7.37231e-5 4.74698e-5 0.0; 0.0 3.44085e-5 6.01794e-5 0.000160129 -5.71002e-5 -0.000251935 -0.000348341 0.000175676 0.000452654 0.000757255 0.000292256 1.47004e-5 -4.29739e-5 0.0; 0.0 0.000127176 0.000354777 0.000538542 0.000684584 0.000355887 0.000248227 0.000121747 -8.66234e-5 -5.15146e-5 0.000247927 0.000267242 0.000177876 0.0; 0.0 -0.000112676 -0.000247409 -0.000271409 -0.00044693 0.000199694 0.000249875 -0.000585559 -0.00072856 -0.000851675 -0.000696049 -0.000430978 -0.00022939 0.0; 0.0 -6.48691e-5 -0.0002854 -0.0005231 -0.000241099 -0.000523152 -0.000253047 … 0.000609541 0.0009479 0.000772055 0.000367521 0.000193174 8.25992e-5 0.0. julia> ds[""wτ2_yavg""] == ds[""wτ1_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ3_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ4_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ5_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ6_yavg""]; true; ```. So seems that all is good? So the problem comes when I continue the integration longer?; But why do the `info` statements appear in this order?. ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; ```; ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:973,Energy Efficiency,schedul,schedule,973,"I run this:. ```Julia; using Oceananigans. grid = RectilinearGrid(size=(16, 16, 16), extent = (500, 500, 120)). n_tracers = 6; tracer_symbols = [ Symbol(:τ, i) for i in 1:n_tracers ]; model = NonhydrostaticModel(; grid, tracers = (tracer_symbols...,)); @info model. uᵢ(x, y, z) = 1e-2 * randn(); set!(model, w=uᵢ). tracer_IC_odd(x, y, z) = sin(2π * z / grid.Lz); for i in 1:n_tracers; @info ""Setting tracer $i""; expression = Meta.parse(""set!(model, τ$i=tracer_IC_odd)""); eval(expression); end. simulation = Simulation(model, Δt=30, stop_iteration=4). u, v, w = model.velocities. wτ = NamedTuple(Symbol(:w, key) => Field(w*τ) for (key, τ) in pairs(model.tracers)). outputs_full = (; wτ...). outputs_yavg = NamedTuple( Symbol(key, :_yavg)=>Average(val, dims=(2,)) for (key, val) in zip(keys(outputs_full), outputs_full)). outputs_xz1 = merge(outputs_full, outputs_yavg); simulation.output_writers[:xz1_writer] = NetCDFOutputWriter(model, outputs_xz1;; filename = ""test.nc"",; schedule = TimeInterval(simulation.stop_time),; verbose=true,; indices = (:, 1, :),; overwrite_existing = true,; ); run!(simulation); ```. and got; ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:4871,Energy Efficiency,schedul,schedule,4871,"1 × 17 × 1); Datatype: Float64; Dimensions: xC × yC × zF × time. wτ5 (16 × 1 × 17 × 1); Datatype: Float64; Dimensions: xC × yC × zF × time. wτ4 (16 × 1 × 17 × 1); Datatype: Float64; Dimensions: xC × yC × zF × time. wτ1_yavg (16 × 17 × 1); Datatype: Float64; Dimensions: xC × zF × time. wτ4_yavg (16 × 17 × 1); Datatype: Float64; Dimensions: xC × zF × time. wτ3_yavg (16 × 17 × 1); Datatype: Float64; Dimensions: xC × zF × time. Global attributes; interval = Inf; Oceananigans = This file was generated using Oceananigans v0.79.4 (DEVELOPMENT BRANCH); Julia = This file was generated using Julia Version 1.8.5; Commit 17cfb8e65e (2023-01-08 06:45 UTC); Platform Info:; OS: macOS (arm64-apple-darwin22.2.0); CPU: 10 × Apple M1 Max; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-13.0.1 (ORCJIT, apple-m1); Threads: 6 on 8 virtual cores; Environment:; JULIA_EDITOR = code. output time interval = Output was saved every Inf years.; date = This file was generated on 2023-02-18T19:16:16.882.; schedule = TimeInterval. julia> ds[""wτ2_yavg""][:, :, 1]; 16×17 Matrix{Float64}:; 0.0 0.000239391 0.00083127 0.00119759 0.00100968 0.00105376 0.000547622 … -0.000823575 -0.00120598 -0.00105608 -0.000569584 -0.000338584 -7.31754e-5 0.0; 0.0 -0.000272188 -0.000758612 -0.000936866 -0.000932501 -0.000901216 -0.000569969 0.000851883 0.0010599 0.00082886 0.000575857 0.000439241 7.574e-5 0.0; 0.0 0.000214064 0.000566256 0.000828549 0.00134003 0.00116415 0.000864495 -0.000798704 -0.000681288 -0.00016673 -8.373e-5 -0.000169139 4.80975e-6 0.0; 0.0 -9.46733e-5 -0.000369457 -0.000711505 -0.00134226 -0.00106128 -0.00056589 0.000770231 0.000740732 0.0003337 0.000169505 0.00016793 6.28015e-5 0.0; 0.0 7.24424e-6 8.88843e-5 0.000181775 0.000217206 -7.28566e-5 -0.000650438 5.28438e-5 7.66377e-5 0.000354346 0.000364643 0.000234465 3.8087e-5 0.0; 0.0 -0.000138346 -0.000478074 -0.000792918 -0.000680375 -0.000466813 0.000147319 … 0.000106948 -2.15028e-5 -0.000203383 -0.000232146 -0.000163638 -0.000101512 0.0; 0.0 0.000",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:7736,Integrability,integrat,integration,7736,"00207786 -0.000570261 -0.00113736 -0.0011126 -0.00095512 -0.000668289 0.000187081 -2.50371e-5 -0.000234227 -3.30057e-5 7.37231e-5 4.74698e-5 0.0; 0.0 3.44085e-5 6.01794e-5 0.000160129 -5.71002e-5 -0.000251935 -0.000348341 0.000175676 0.000452654 0.000757255 0.000292256 1.47004e-5 -4.29739e-5 0.0; 0.0 0.000127176 0.000354777 0.000538542 0.000684584 0.000355887 0.000248227 0.000121747 -8.66234e-5 -5.15146e-5 0.000247927 0.000267242 0.000177876 0.0; 0.0 -0.000112676 -0.000247409 -0.000271409 -0.00044693 0.000199694 0.000249875 -0.000585559 -0.00072856 -0.000851675 -0.000696049 -0.000430978 -0.00022939 0.0; 0.0 -6.48691e-5 -0.0002854 -0.0005231 -0.000241099 -0.000523152 -0.000253047 … 0.000609541 0.0009479 0.000772055 0.000367521 0.000193174 8.25992e-5 0.0. julia> ds[""wτ2_yavg""] == ds[""wτ1_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ3_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ4_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ5_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ6_yavg""]; true; ```. So seems that all is good? So the problem comes when I continue the integration longer?; But why do the `info` statements appear in this order?. ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; ```; ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:2563,Modifiability,Variab,Variables,2563,"o: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 seconds, size=19.5 KiB, Δsize=0.0 B; [ Info: ... simulation initialization complete (18.528 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (30.965 seconds).; [ Info: Simulation is stopping after running for 49.565 seconds.; [ Info: Model iteration 4 equals or exceeds stop iteration 4.; ```. and then . ```Julia; julia> using NCDatasets. julia> ds = NCDataset(simulation.output_writers[:xz1_writer].filepath, ""r""); NCDataset: ./test.nc; Group: /. Dimensions; zC = 16; zF = 17; xC = 16; yF = 1; xF = 16; yC = 1; time = 1. Variables; zC (16); Datatype: Float64; Dimensions: zC; Attributes:; units = m; longname = Locations of the cell centers in the z-direction. zF (17); Datatype: Float64; Dimensions: zF; Attributes:; units = m; longname = Locations of the cell faces in the z-direction. xC (16); Datatype: Float64; Dimensions: xC; Attributes:; units = m; longname = Locations of the cell centers in the x-direction. yF (1); Datatype: Float64; Dimensions: yF; Attributes:; units = m; longname = Locations of the cell faces in the y-direction. xF (16); Datatype: Float64; Dimensions: xF; Attributes:; units = m; longname = Locations of the cell faces in the x-direction. yC (1); Datatype: Float64; Dimensions: yC; Attributes:; units = m; longname = Locations of the cell centers in the y-direction. time (1); Datatype: Float64; Dimensions: time; Attributes:; units = seconds; longname = Time. wτ3 (16 × 1 × 17 × 1); Datatype: Float64; Dimensions: xC × yC × zF × time. wτ2_yavg (16 × 17 × 1); Datatype: Float64; Dimensions: xC × zF × time. wτ6_yavg (16 × 17 × 1); Datatype: Float64; Dimension",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:962,Testability,test,test,962,"I run this:. ```Julia; using Oceananigans. grid = RectilinearGrid(size=(16, 16, 16), extent = (500, 500, 120)). n_tracers = 6; tracer_symbols = [ Symbol(:τ, i) for i in 1:n_tracers ]; model = NonhydrostaticModel(; grid, tracers = (tracer_symbols...,)); @info model. uᵢ(x, y, z) = 1e-2 * randn(); set!(model, w=uᵢ). tracer_IC_odd(x, y, z) = sin(2π * z / grid.Lz); for i in 1:n_tracers; @info ""Setting tracer $i""; expression = Meta.parse(""set!(model, τ$i=tracer_IC_odd)""); eval(expression); end. simulation = Simulation(model, Δt=30, stop_iteration=4). u, v, w = model.velocities. wτ = NamedTuple(Symbol(:w, key) => Field(w*τ) for (key, τ) in pairs(model.tracers)). outputs_full = (; wτ...). outputs_yavg = NamedTuple( Symbol(key, :_yavg)=>Average(val, dims=(2,)) for (key, val) in zip(keys(outputs_full), outputs_full)). outputs_xz1 = merge(outputs_full, outputs_yavg); simulation.output_writers[:xz1_writer] = NetCDFOutputWriter(model, outputs_xz1;; filename = ""test.nc"",; schedule = TimeInterval(simulation.stop_time),; verbose=true,; indices = (:, 1, :),; overwrite_existing = true,; ); run!(simulation); ```. and got; ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:1196,Testability,test,test,1196,"rostaticModel(; grid, tracers = (tracer_symbols...,)); @info model. uᵢ(x, y, z) = 1e-2 * randn(); set!(model, w=uᵢ). tracer_IC_odd(x, y, z) = sin(2π * z / grid.Lz); for i in 1:n_tracers; @info ""Setting tracer $i""; expression = Meta.parse(""set!(model, τ$i=tracer_IC_odd)""); eval(expression); end. simulation = Simulation(model, Δt=30, stop_iteration=4). u, v, w = model.velocities. wτ = NamedTuple(Symbol(:w, key) => Field(w*τ) for (key, τ) in pairs(model.tracers)). outputs_full = (; wτ...). outputs_yavg = NamedTuple( Symbol(key, :_yavg)=>Average(val, dims=(2,)) for (key, val) in zip(keys(outputs_full), outputs_full)). outputs_xz1 = merge(outputs_full, outputs_yavg); simulation.output_writers[:xz1_writer] = NetCDFOutputWriter(model, outputs_xz1;; filename = ""test.nc"",; schedule = TimeInterval(simulation.stop_time),; verbose=true,; indices = (:, 1, :),; overwrite_existing = true,; ); run!(simulation); ```. and got; ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 seconds, size=19.5 KiB, Δsize=0.0 B; [ Info: ... simulation initialization complete (18.528 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (30.965 seconds).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:2470,Testability,test,test,2470,"ds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; [ Info: Writing done: time=17.732 seconds, size=19.5 KiB, Δsize=0.0 B; [ Info: ... simulation initialization complete (18.528 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (30.965 seconds).; [ Info: Simulation is stopping after running for 49.565 seconds.; [ Info: Model iteration 4 equals or exceeds stop iteration 4.; ```. and then . ```Julia; julia> using NCDatasets. julia> ds = NCDataset(simulation.output_writers[:xz1_writer].filepath, ""r""); NCDataset: ./test.nc; Group: /. Dimensions; zC = 16; zF = 17; xC = 16; yF = 1; xF = 16; yC = 1; time = 1. Variables; zC (16); Datatype: Float64; Dimensions: zC; Attributes:; units = m; longname = Locations of the cell centers in the z-direction. zF (17); Datatype: Float64; Dimensions: zF; Attributes:; units = m; longname = Locations of the cell faces in the z-direction. xC (16); Datatype: Float64; Dimensions: xC; Attributes:; units = m; longname = Locations of the cell centers in the x-direction. yF (1); Datatype: Float64; Dimensions: yF; Attributes:; units = m; longname = Locations of the cell faces in the y-direction. xF (16); Datatype: Float64; Dimensions: xF; Attributes:; units = m; longname = Locations of the cell faces in the x-direction. yC (1); Datatype: Float64; Dimensions: yC; Attributes:; units = m; longname = Locations of the cell centers in the y-direction. time (1); Datatype: Float64; Dimensions: time; Attributes:; units = seconds; longname = Time. wτ3 (16 × 1 × 17 × 1); Datatype: Float",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387:7888,Testability,test,test,7888,"00207786 -0.000570261 -0.00113736 -0.0011126 -0.00095512 -0.000668289 0.000187081 -2.50371e-5 -0.000234227 -3.30057e-5 7.37231e-5 4.74698e-5 0.0; 0.0 3.44085e-5 6.01794e-5 0.000160129 -5.71002e-5 -0.000251935 -0.000348341 0.000175676 0.000452654 0.000757255 0.000292256 1.47004e-5 -4.29739e-5 0.0; 0.0 0.000127176 0.000354777 0.000538542 0.000684584 0.000355887 0.000248227 0.000121747 -8.66234e-5 -5.15146e-5 0.000247927 0.000267242 0.000177876 0.0; 0.0 -0.000112676 -0.000247409 -0.000271409 -0.00044693 0.000199694 0.000249875 -0.000585559 -0.00072856 -0.000851675 -0.000696049 -0.000430978 -0.00022939 0.0; 0.0 -6.48691e-5 -0.0002854 -0.0005231 -0.000241099 -0.000523152 -0.000253047 … 0.000609541 0.0009479 0.000772055 0.000367521 0.000193174 8.25992e-5 0.0. julia> ds[""wτ2_yavg""] == ds[""wτ1_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ3_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ4_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ5_yavg""]; true. julia> ds[""wτ2_yavg""] == ds[""wτ6_yavg""]; true; ```. So seems that all is good? So the problem comes when I continue the integration longer?; But why do the `info` statements appear in this order?. ```Julia; [ Info: Initializing simulation...; [ Info: Writing to NetCDF: ./test.nc...; [ Info: Computing NetCDF outputs for time index 1: [""wτ3"", ""wτ2_yavg"", ""wτ6_yavg"", ""wτ1"", ""wτ5_yavg"", ""wτ6"", ""wτ2"", ""wτ5"", ""wτ4"", ""wτ1_yavg"", ""wτ4_yavg"", ""wτ3_yavg""]...; [ Info: Computing wτ3 done: time=439.823 ms; [ Info: Computing wτ2_yavg done: time=3.404 seconds; [ Info: Computing wτ6_yavg done: time=3.018 seconds; [ Info: Computing wτ1 done: time=225.326 ms; [ Info: Computing wτ5_yavg done: time=2.950 seconds; [ Info: Computing wτ6 done: time=292.708 μs; [ Info: Computing wτ2 done: time=192.674 ms; [ Info: Computing wτ5 done: time=190.263 ms; [ Info: Computing wτ4 done: time=193.185 ms; [ Info: Computing wτ1_yavg done: time=1.210 seconds; [ Info: Computing wτ4_yavg done: time=2.954 seconds; [ Info: Computing wτ3_yavg done: time=2.953 seconds; ```; ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1435832387
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436095497:58,Integrability,depend,dependent,58,"But the way @tomchor wrote the example, is `outputs_yavg` dependent on `outputs_full`? Seems like it... E.g.,. ```julia; outputs_yavg = NamedTuple( Symbol(key, :_yavg)=>Average(val, dims=(2,)) for (key, val) in zip(keys(outputs_full), outputs_full)); ```; ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436095497
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436096348:75,Usability,simpl,simplify,75,I also have trouble understanding it... Perhaps @tomchor can elaborate? Or simplify it to exemplify the issue?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436096348
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436096967:0,Integrability,Depend,Dependencies,0,"Dependencies between fields are supposed to be accounted for. For example if we write. ```julia; wc = Field(w * c); wc_average = Field(Average(wc, dims=1)); ```. then . ```julia; compute!(wc_average); ```. should first call `compute!(wc)`. For example:. https://github.com/CliMA/Oceananigans.jl/blob/c929676bcce7fc19c3f96faafd459371935a6eba/src/Fields/field_reductions.jl#L72-L77. where `reduction.operand === `wc` in the above example. Thus this calls. https://github.com/CliMA/Oceananigans.jl/blob/c929676bcce7fc19c3f96faafd459371935a6eba/src/AbstractOperations/computed_field.jl#L64-L72. Note that `compute_at!` should always compute if needed because. https://github.com/CliMA/Oceananigans.jl/blob/c929676bcce7fc19c3f96faafd459371935a6eba/src/Fields/field.jl#L451-L462",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436096967
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436097202:110,Energy Efficiency,efficient,efficient,110,"However, I would also recommend using. ```julia; wc_average = Average(w*c, dims=1); ```. because this is more efficient (usually). One can in principle save some time by constructing a computational graph for the diagnostics, but I'm not sure it's worth it most of the time...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436097202
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436104605:43,Deployability,integrat,integration,43,"> So the problem comes when I continue the integration longer?. This could be worth trying, note that. ```julia; julia> using Oceananigans.Units. julia> 0.15hours / 30; 18.0; ```. So you can run for 18 steps instead of 4. (@tomchor why 18?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436104605
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436104605:43,Integrability,integrat,integration,43,"> So the problem comes when I continue the integration longer?. This could be worth trying, note that. ```julia; julia> using Oceananigans.Units. julia> 0.15hours / 30; 18.0; ```. So you can run for 18 steps instead of 4. (@tomchor why 18?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436104605
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039:744,Energy Efficiency,schedul,schedule,744,"I ran. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""avg_wτ$n"") for n = 1:Ntracers). flux_1_nc = ds[""wτ1""]; avg_flux_1_nc = ds[""avg_wτ1""]; flux_1 = flux_timeseries[""wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(flux_1[:, 1, :, :] .≈ flux_n[:, 1, :, :]); @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(flux_1_nc .≈ ds[""wτ$n""]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""]); end. close(ds); ```. and all the fluxes and averaged fluxes are identical for both JLD2 and NetCDF output writers.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039:697,Testability,test,test,697,"I ran. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""avg_wτ$n"") for n = 1:Ntracers). flux_1_nc = ds[""wτ1""]; avg_flux_1_nc = ds[""avg_wτ1""]; flux_1 = flux_timeseries[""wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(flux_1[:, 1, :, :] .≈ flux_n[:, 1, :, :]); @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(flux_1_nc .≈ ds[""wτ$n""]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""]); end. close(ds); ```. and all the fluxes and averaged fluxes are identical for both JLD2 and NetCDF output writers.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039:724,Testability,test,test,724,"I ran. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(filename, ""avg_wτ$n"") for n = 1:Ntracers). flux_1_nc = ds[""wτ1""]; avg_flux_1_nc = ds[""avg_wτ1""]; flux_1 = flux_timeseries[""wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(flux_1[:, 1, :, :] .≈ flux_n[:, 1, :, :]); @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(flux_1_nc .≈ ds[""wτ$n""]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""]); end. close(ds); ```. and all the fluxes and averaged fluxes are identical for both JLD2 and NetCDF output writers.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1436113039
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437230261:84,Usability,simpl,simplify,84,"> I also have trouble understanding it...; > ; > Perhaps @tomchor can elaborate? Or simplify it to exemplify the issue?. > So you can run for 18 steps instead of 4. (@tomchor why 18?). Sorry for the unclear example, guys and thanks for the help. I posted this after many hours of trying to catch the culprit in a _very_ complex simulation and at the time I was so tired that the MWE seemed reasonable to me. Now I see it's pretty badly set up. I'm gonna work a bit on this today and come up with a better MWE if we need one. But to explain a bit better, the main goal of this snippet (other than showing the issue) is to write (in the same file) an xz-slice (at `j=1`) and a y-average (using `Average(field, dims=(2,))`. For that I first create a tuple of ""full"" fields (fields without slicing or averaging, which I call `outputs_full`). Then, based on that tuple, get each element and average it in `y`, creating the tuple `outputs_yavg`. When I pass both of those tuples (merged) to the `NetCDFOutputWriter` along with the option `indices=(:,1,:)`, I get, in the same file, sliced fields (which are called `wτ1`, etc.) and y-averaged fields (called `wτ1_yavg`, etc.). I just ran @glwagner's MWE locally and the issue doesn't appear, even though at first it does exactly what my MWE does, so I need to track what's the important change there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437230261
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437234615:70,Deployability,integrat,integration,70,"> So seems that all is good? So the problem comes when I continue the integration longer?. It appears that the issue does get worse the longer you run, yes. The original MWE I posted runs for 18 time steps and it looks like this:. ![image](https://user-images.githubusercontent.com/13205162/219516253-394a7e77-8c7e-4be1-be29-d2bdfadacdb3.png). Running it for 2 time steps it looks like this:. ![image](https://user-images.githubusercontent.com/13205162/220152519-7dab5501-6636-4c57-851d-5a944ab1d524.png). The results are still different from different tracers, but not visibly so. (The order of magnitude of the differences is around 1e-5 in this case)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437234615
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437234615:70,Integrability,integrat,integration,70,"> So seems that all is good? So the problem comes when I continue the integration longer?. It appears that the issue does get worse the longer you run, yes. The original MWE I posted runs for 18 time steps and it looks like this:. ![image](https://user-images.githubusercontent.com/13205162/219516253-394a7e77-8c7e-4be1-be29-d2bdfadacdb3.png). Running it for 2 time steps it looks like this:. ![image](https://user-images.githubusercontent.com/13205162/220152519-7dab5501-6636-4c57-851d-5a944ab1d524.png). The results are still different from different tracers, but not visibly so. (The order of magnitude of the differences is around 1e-5 in this case)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437234615
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069:1071,Energy Efficiency,schedul,schedule,1071," In @glwagner's original example the JLD2 writer is added first, and then the netcdf writer, and there's no issue. The example below (which is pretty much the same example, except with that order switched) fails for me:. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...); simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""avg_wτ$n"") for n = 1:Ntracers). avg_flux_1_nc = ds[""avg_wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""]); end. close(ds); ```. This gives me:. ```; ""Fluxes for tracer $(n):"" = ""Fluxes for tracer 2:""; ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069:1024,Testability,test,test,1024,"ely switching the order you add the output writer in @glwagner's example makes the issue pop up. In @glwagner's original example the JLD2 writer is added first, and then the netcdf writer, and there's no issue. The example below (which is pretty much the same example, except with that order switched) fails for me:. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...); simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""avg_wτ$n"") for n = 1:Ntracers). avg_flux_1_nc = ds[""avg_wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""])",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069:1051,Testability,test,test,1051,"ou add the output writer in @glwagner's example makes the issue pop up. In @glwagner's original example the JLD2 writer is added first, and then the netcdf writer, and there's no issue. The example below (which is pretty much the same example, except with that order switched) fails for me:. ```julia; using Oceananigans; using NCDatasets. Nx = Ny = Nz = 16; grid = RectilinearGrid(size=(Nx, Ny, Nz), extent=(1, 1, 1)). tracer_names = Tuple(Symbol(:τ, n) for n = 1:6); model = NonhydrostaticModel(; grid, tracers=tracer_names). uᵢ(x, y, z) = randn(); cᵢ(x, y, z) = sin(2π * z / grid.Lz); kw = NamedTuple(c => cᵢ for c in tracer_names); set!(model; u=uᵢ, v=uᵢ, w=uᵢ, kw...). simulation = Simulation(model, Δt=0.1/Nx, stop_iteration=100). u, v, w = model.velocities; fluxes = NamedTuple(Symbol(""wτ$n"") => Field(w*c) for (n, c) in enumerate(model.tracers)); averaged_fluxes = NamedTuple(Symbol(""avg_wτ$n"") => Average(flux, dims=2) for (n, flux) in enumerate(fluxes)). jld2_filename = ""test.jld2""; nc_filename = ""test.nc""; kwargs = (schedule = IterationInterval(1),; verbose = true,; indices = (:, 1, :),; overwrite_existing = true). simulation.output_writers[:nc] = NetCDFOutputWriter(model, merge(fluxes, averaged_fluxes);; filename = nc_filename,; kwargs...); simulation.output_writers[:jld2] = JLD2OutputWriter(model, merge(fluxes, averaged_fluxes);; filename = jld2_filename,; kwargs...). run!(simulation). ds = Dataset(nc_filename). Ntracers = length(tracer_names); flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""wτ$n"") for n = 1:Ntracers); average_flux_timeseries = Dict(""wτ$n"" => FieldTimeSeries(jld2_filename, ""avg_wτ$n"") for n = 1:Ntracers). avg_flux_1_nc = ds[""avg_wτ1""]; avg_flux_1 = average_flux_timeseries[""wτ1""]. for n = 2:Ntracers; flux_n = flux_timeseries[""wτ$n""]; avg_flux_n = average_flux_timeseries[""wτ$n""]. @show ""Fluxes for tracer $n:""; @show all(avg_flux_1[:, 1, :, :] .≈ avg_flux_n[:, 1, :, :]); @show all(avg_flux_1_nc .≈ ds[""avg_wτ$n""]); end. close(ds); ```. Th",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437330069
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437859485:515,Testability,test,tested,515,"Ok, I can reproduce this. Here's a few observations:. 1. It works when JLD2OutputWriter computes the outputs first.; 2. When NetCDFOutputWriter computes the outputs, the JLD2 output is _also_ wrong. This shows that the output is not being recomputed.; 3. The different between JLD2 and NetCDF is that JLD2 uses a NamedTuple while NetCDF uses Dict. With Dict, the order in which the outputs are computed is not deterministic. Yet that should not matter here, as far as I can tell. So there is a bug somewhere.; 4. I tested changing Dict to OrderedDict and the problem disappears. We can merge this last change. But I'd also like to dig a little further to see if there isn't some more insidious bug, because I don't understand why we _need_ deterministic computation of output. (On the other hand, I think deterministic output computation is a potentially useful feature so it makes sense to support this with NetCDFOutputWriter).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437859485
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437909887:162,Energy Efficiency,allocate,allocate,162,"Hmm I also want to point out that this pattern is inefficient with memory. If we are only interested in the values at `indices=(:, 1, :)`, then it is wasteful to allocate `Field(w*c)` etc. Instead we should compute `w*c` only at the indices required. The other ambiguous aspect of this setup is what we expect to happen when we ask for `Field(Average(field, dims=2), indices=(:, 1, :))`. The field is reduced in `y`, but we are asking for specific y-indices --- should this be allowed?. There's still a mystery here, even if the setup if a little confusing...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437909887
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437909887:401,Energy Efficiency,reduce,reduced,401,"Hmm I also want to point out that this pattern is inefficient with memory. If we are only interested in the values at `indices=(:, 1, :)`, then it is wasteful to allocate `Field(w*c)` etc. Instead we should compute `w*c` only at the indices required. The other ambiguous aspect of this setup is what we expect to happen when we ask for `Field(Average(field, dims=2), indices=(:, 1, :))`. The field is reduced in `y`, but we are asking for specific y-indices --- should this be allowed?. There's still a mystery here, even if the setup if a little confusing...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1437909887
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438391810:150,Energy Efficiency,reduce,reduced,150,"> The other ambiguous aspect of this setup is what we expect to happen when we ask for Field(Average(field, dims=2), indices=(:, 1, :)). The field is reduced in y, but we are asking for specific y-indices --- should this be allowed?. That we do/allow this is bit confusing for me also.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438391810
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438426850:110,Energy Efficiency,reduce,reduced,110,"It could be consistent with the indexing behavior of `Nothing` location --- ie if you ""slice"" a field along a reduced dimension, nothing happens. Yet still I feel that the `indices` kwarg isn't being used properly here...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438426850
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184:143,Energy Efficiency,reduce,reduced,143,"I think I understand the issue now. Here's a summary of what we are trying to do. 1. Create a 3D computed field `wc = Field(w*c)`; 2. Create a reduced field that averages this field: `wc_avg = Average(wc, dims=2)`. Note that we usually recommend averaging an _operation_ rather than `Field` via `wc_avg = Average(w*c, dims=2)`, which is more efficient if we don't require the three-dimensional results in `wc`. If we do require the 3D `wc` as well, we could compute its average in post processing on the fly. But I guess there are use cases for precomputing the 3D field (convenience, or GPU compilation issues...). Next, we . 3. Slice into both the reduced field _and_ the 3D field in an output writer by passing the kwarg `indices = (:, 1, :)`. As discussed above, we aren't sure if this is good practice, since we're asking the output writers to ""reindex"" a reduced field in `y` along a specific y index, ie `(:, 1, :)`. Being a reduced field, the y-index is meaningless, so this kwarg is basically ignored for the reduced field. I think a better way to write this code is to build the `indices` for each output individually / manually rather than using the convenience kwarg. Nevertheless --- for this last step, the output writer creates a ""view field"" that slices into the original 3D field (ie it does not allocate any additional memory, but instead creates a new field whose `data` is a view into the parent 3D field):. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/OutputWriters/output_construction.jl#L46. this calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L180. which calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L298-L322. Note that `view(f, i, j, k)` passes `f.status` into the sliced field. This is the issue --- then when we call `compute!(sliced_f)`, the parent field `f` ""thinks"" it has been computed, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184:342,Energy Efficiency,efficient,efficient,342,"I think I understand the issue now. Here's a summary of what we are trying to do. 1. Create a 3D computed field `wc = Field(w*c)`; 2. Create a reduced field that averages this field: `wc_avg = Average(wc, dims=2)`. Note that we usually recommend averaging an _operation_ rather than `Field` via `wc_avg = Average(w*c, dims=2)`, which is more efficient if we don't require the three-dimensional results in `wc`. If we do require the 3D `wc` as well, we could compute its average in post processing on the fly. But I guess there are use cases for precomputing the 3D field (convenience, or GPU compilation issues...). Next, we . 3. Slice into both the reduced field _and_ the 3D field in an output writer by passing the kwarg `indices = (:, 1, :)`. As discussed above, we aren't sure if this is good practice, since we're asking the output writers to ""reindex"" a reduced field in `y` along a specific y index, ie `(:, 1, :)`. Being a reduced field, the y-index is meaningless, so this kwarg is basically ignored for the reduced field. I think a better way to write this code is to build the `indices` for each output individually / manually rather than using the convenience kwarg. Nevertheless --- for this last step, the output writer creates a ""view field"" that slices into the original 3D field (ie it does not allocate any additional memory, but instead creates a new field whose `data` is a view into the parent 3D field):. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/OutputWriters/output_construction.jl#L46. this calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L180. which calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L298-L322. Note that `view(f, i, j, k)` passes `f.status` into the sliced field. This is the issue --- then when we call `compute!(sliced_f)`, the parent field `f` ""thinks"" it has been computed, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184:650,Energy Efficiency,reduce,reduced,650,"I think I understand the issue now. Here's a summary of what we are trying to do. 1. Create a 3D computed field `wc = Field(w*c)`; 2. Create a reduced field that averages this field: `wc_avg = Average(wc, dims=2)`. Note that we usually recommend averaging an _operation_ rather than `Field` via `wc_avg = Average(w*c, dims=2)`, which is more efficient if we don't require the three-dimensional results in `wc`. If we do require the 3D `wc` as well, we could compute its average in post processing on the fly. But I guess there are use cases for precomputing the 3D field (convenience, or GPU compilation issues...). Next, we . 3. Slice into both the reduced field _and_ the 3D field in an output writer by passing the kwarg `indices = (:, 1, :)`. As discussed above, we aren't sure if this is good practice, since we're asking the output writers to ""reindex"" a reduced field in `y` along a specific y index, ie `(:, 1, :)`. Being a reduced field, the y-index is meaningless, so this kwarg is basically ignored for the reduced field. I think a better way to write this code is to build the `indices` for each output individually / manually rather than using the convenience kwarg. Nevertheless --- for this last step, the output writer creates a ""view field"" that slices into the original 3D field (ie it does not allocate any additional memory, but instead creates a new field whose `data` is a view into the parent 3D field):. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/OutputWriters/output_construction.jl#L46. this calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L180. which calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L298-L322. Note that `view(f, i, j, k)` passes `f.status` into the sliced field. This is the issue --- then when we call `compute!(sliced_f)`, the parent field `f` ""thinks"" it has been computed, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184:861,Energy Efficiency,reduce,reduced,861,"I think I understand the issue now. Here's a summary of what we are trying to do. 1. Create a 3D computed field `wc = Field(w*c)`; 2. Create a reduced field that averages this field: `wc_avg = Average(wc, dims=2)`. Note that we usually recommend averaging an _operation_ rather than `Field` via `wc_avg = Average(w*c, dims=2)`, which is more efficient if we don't require the three-dimensional results in `wc`. If we do require the 3D `wc` as well, we could compute its average in post processing on the fly. But I guess there are use cases for precomputing the 3D field (convenience, or GPU compilation issues...). Next, we . 3. Slice into both the reduced field _and_ the 3D field in an output writer by passing the kwarg `indices = (:, 1, :)`. As discussed above, we aren't sure if this is good practice, since we're asking the output writers to ""reindex"" a reduced field in `y` along a specific y index, ie `(:, 1, :)`. Being a reduced field, the y-index is meaningless, so this kwarg is basically ignored for the reduced field. I think a better way to write this code is to build the `indices` for each output individually / manually rather than using the convenience kwarg. Nevertheless --- for this last step, the output writer creates a ""view field"" that slices into the original 3D field (ie it does not allocate any additional memory, but instead creates a new field whose `data` is a view into the parent 3D field):. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/OutputWriters/output_construction.jl#L46. this calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L180. which calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L298-L322. Note that `view(f, i, j, k)` passes `f.status` into the sliced field. This is the issue --- then when we call `compute!(sliced_f)`, the parent field `f` ""thinks"" it has been computed, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184:932,Energy Efficiency,reduce,reduced,932,"I think I understand the issue now. Here's a summary of what we are trying to do. 1. Create a 3D computed field `wc = Field(w*c)`; 2. Create a reduced field that averages this field: `wc_avg = Average(wc, dims=2)`. Note that we usually recommend averaging an _operation_ rather than `Field` via `wc_avg = Average(w*c, dims=2)`, which is more efficient if we don't require the three-dimensional results in `wc`. If we do require the 3D `wc` as well, we could compute its average in post processing on the fly. But I guess there are use cases for precomputing the 3D field (convenience, or GPU compilation issues...). Next, we . 3. Slice into both the reduced field _and_ the 3D field in an output writer by passing the kwarg `indices = (:, 1, :)`. As discussed above, we aren't sure if this is good practice, since we're asking the output writers to ""reindex"" a reduced field in `y` along a specific y index, ie `(:, 1, :)`. Being a reduced field, the y-index is meaningless, so this kwarg is basically ignored for the reduced field. I think a better way to write this code is to build the `indices` for each output individually / manually rather than using the convenience kwarg. Nevertheless --- for this last step, the output writer creates a ""view field"" that slices into the original 3D field (ie it does not allocate any additional memory, but instead creates a new field whose `data` is a view into the parent 3D field):. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/OutputWriters/output_construction.jl#L46. this calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L180. which calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L298-L322. Note that `view(f, i, j, k)` passes `f.status` into the sliced field. This is the issue --- then when we call `compute!(sliced_f)`, the parent field `f` ""thinks"" it has been computed, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184:1018,Energy Efficiency,reduce,reduced,1018,"I think I understand the issue now. Here's a summary of what we are trying to do. 1. Create a 3D computed field `wc = Field(w*c)`; 2. Create a reduced field that averages this field: `wc_avg = Average(wc, dims=2)`. Note that we usually recommend averaging an _operation_ rather than `Field` via `wc_avg = Average(w*c, dims=2)`, which is more efficient if we don't require the three-dimensional results in `wc`. If we do require the 3D `wc` as well, we could compute its average in post processing on the fly. But I guess there are use cases for precomputing the 3D field (convenience, or GPU compilation issues...). Next, we . 3. Slice into both the reduced field _and_ the 3D field in an output writer by passing the kwarg `indices = (:, 1, :)`. As discussed above, we aren't sure if this is good practice, since we're asking the output writers to ""reindex"" a reduced field in `y` along a specific y index, ie `(:, 1, :)`. Being a reduced field, the y-index is meaningless, so this kwarg is basically ignored for the reduced field. I think a better way to write this code is to build the `indices` for each output individually / manually rather than using the convenience kwarg. Nevertheless --- for this last step, the output writer creates a ""view field"" that slices into the original 3D field (ie it does not allocate any additional memory, but instead creates a new field whose `data` is a view into the parent 3D field):. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/OutputWriters/output_construction.jl#L46. this calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L180. which calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L298-L322. Note that `view(f, i, j, k)` passes `f.status` into the sliced field. This is the issue --- then when we call `compute!(sliced_f)`, the parent field `f` ""thinks"" it has been computed, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184:1313,Energy Efficiency,allocate,allocate,1313," reduced field that averages this field: `wc_avg = Average(wc, dims=2)`. Note that we usually recommend averaging an _operation_ rather than `Field` via `wc_avg = Average(w*c, dims=2)`, which is more efficient if we don't require the three-dimensional results in `wc`. If we do require the 3D `wc` as well, we could compute its average in post processing on the fly. But I guess there are use cases for precomputing the 3D field (convenience, or GPU compilation issues...). Next, we . 3. Slice into both the reduced field _and_ the 3D field in an output writer by passing the kwarg `indices = (:, 1, :)`. As discussed above, we aren't sure if this is good practice, since we're asking the output writers to ""reindex"" a reduced field in `y` along a specific y index, ie `(:, 1, :)`. Being a reduced field, the y-index is meaningless, so this kwarg is basically ignored for the reduced field. I think a better way to write this code is to build the `indices` for each output individually / manually rather than using the convenience kwarg. Nevertheless --- for this last step, the output writer creates a ""view field"" that slices into the original 3D field (ie it does not allocate any additional memory, but instead creates a new field whose `data` is a view into the parent 3D field):. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/OutputWriters/output_construction.jl#L46. this calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L180. which calls. https://github.com/CliMA/Oceananigans.jl/blob/e394bf7ef7e4341ffddd449f52f58cee84698813/src/Fields/field.jl#L298-L322. Note that `view(f, i, j, k)` passes `f.status` into the sliced field. This is the issue --- then when we call `compute!(sliced_f)`, the parent field `f` ""thinks"" it has been computed, even though values were only computed on `(:, 1, :)`. It's an easy fix since we just have to set the status of the sliced field to `nothing`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438491184
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438636158:270,Availability,error,error,270,"That's some great debugging there, @glwagner. Thanks!. Yeah I agree passing indices alongside averages is unclear to say the least. When I first set up the output writer to do this (with only one tracer) I was surprised that it worked out of the box since I expected an error or warning. But since it made code simpler and it worked, I kept it. Then this error creeped up on me :grimacing: . I'd be okay if you want to not allow that, or throw a warning or something in this case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438636158
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438636158:355,Availability,error,error,355,"That's some great debugging there, @glwagner. Thanks!. Yeah I agree passing indices alongside averages is unclear to say the least. When I first set up the output writer to do this (with only one tracer) I was surprised that it worked out of the box since I expected an error or warning. But since it made code simpler and it worked, I kept it. Then this error creeped up on me :grimacing: . I'd be okay if you want to not allow that, or throw a warning or something in this case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438636158
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438636158:311,Usability,simpl,simpler,311,"That's some great debugging there, @glwagner. Thanks!. Yeah I agree passing indices alongside averages is unclear to say the least. When I first set up the output writer to do this (with only one tracer) I was surprised that it worked out of the box since I expected an error or warning. But since it made code simpler and it worked, I kept it. Then this error creeped up on me :grimacing: . I'd be okay if you want to not allow that, or throw a warning or something in this case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438636158
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438706195:124,Safety,avoid,avoid,124,"Have you tried using `wc = Field(w*c, indices=(:, 1, :))` and also `wc_avg = Average(w*c, dims=2)`? This would allow you to avoid using the `indices` kwarg.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438706195
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438716451:126,Safety,avoid,avoid,126,"> Have you tried using `wc = Field(w*c, indices=(:, 1, :))` and also `wc_avg = Average(w*c, dims=2)`? This would allow you to avoid using the `indices` kwarg. I haven't tried that solution specifically, but I suspect it would work. I think the issue with this bug isn't that there aren't workarounds (for example, one could just separate slices and averages into two different files, which is what I'm currently doing) it's just that it fails silently and subtly, so it could catch users off guard.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438716451
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438718756:89,Safety,avoid,avoid,89,No we should fix this for sure. I'm asking because you would save a lot of memory if you avoid writing `Field(w*c)`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438718756
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438745870:178,Integrability,wrap,wrapping,178,"> No we should fix this for sure. I'm asking because you would save a lot of memory if you avoid writing `Field(w*c)`. Ah, I see. That's a good point, I'll investigate that. I'm wrapping things in `Field()` calls because I use the `data` option in all of them to reuse scratch space and save memory. But indeed when averages are involved that might not be the best way to go...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438745870
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438745870:91,Safety,avoid,avoid,91,"> No we should fix this for sure. I'm asking because you would save a lot of memory if you avoid writing `Field(w*c)`. Ah, I see. That's a good point, I'll investigate that. I'm wrapping things in `Field()` calls because I use the `data` option in all of them to reuse scratch space and save memory. But indeed when averages are involved that might not be the best way to go...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1438745870
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1439244612:30,Energy Efficiency,allocate,allocate,30,"Averaging operations does not allocate any extra memory and is more performant than precalculating a field, storing the data, and then taking the average of that. In general, you only need 3D scratch space if you have 3D output.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1439244612
https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1439244612:68,Performance,perform,performant,68,"Averaging operations does not allocate any extra memory and is more performant than precalculating a field, storing the data, and then taking the average of that. In general, you only need 3D scratch space if you have 3D output.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2931#issuecomment-1439244612
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865:37,Testability,test,test,37,"> Closes #2931; > ; > We could add a test... A test would be good, but like you said it yourself the tests are already pretty resource-intensive so feel free to merge without a test if you think it wouldn't be worth it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865:47,Testability,test,test,47,"> Closes #2931; > ; > We could add a test... A test would be good, but like you said it yourself the tests are already pretty resource-intensive so feel free to merge without a test if you think it wouldn't be worth it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865:101,Testability,test,tests,101,"> Closes #2931; > ; > We could add a test... A test would be good, but like you said it yourself the tests are already pretty resource-intensive so feel free to merge without a test if you think it wouldn't be worth it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865:177,Testability,test,test,177,"> Closes #2931; > ; > We could add a test... A test would be good, but like you said it yourself the tests are already pretty resource-intensive so feel free to merge without a test if you think it wouldn't be worth it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438701228:73,Testability,test,tested,73,> @tomchor can you confirm that this PR doesn't show that issue?. Yes. I tested this with a couple different number of tracers and all was good,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438701228
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438703466:67,Deployability,patch,patch,67,"OK, I'll try to resolve #2922 before we merge this. @glwagner bump patch release?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438703466
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438703466:73,Deployability,release,release,73,"OK, I'll try to resolve #2922 before we merge this. @glwagner bump patch release?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438703466
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073:16,Deployability,release,release,16,"Since we didn't release v0.79.4 yet, I suggest we wait for this to merge + some other bug fixes in PRs that are ready to be merged after tests pass and release after. cc @tomchor, @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073:152,Deployability,release,release,152,"Since we didn't release v0.79.4 yet, I suggest we wait for this to merge + some other bug fixes in PRs that are ready to be merged after tests pass and release after. cc @tomchor, @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073
https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073:137,Testability,test,tests,137,"Since we didn't release v0.79.4 yet, I suggest we wait for this to merge + some other bug fixes in PRs that are ready to be merged after tests pass and release after. cc @tomchor, @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1442589073
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1439213293:79,Deployability,update,updated,79,"> But it's not initially quiescent, there is some flow. That's a fair point. I updated the issue to be more precise. I also added a note at the bottom to report that this happens even when the average noise is below machine-precision. In any case, I don't this behavior of amplifying noise is to be expected regardless of the noise amplitude, no? I should also say that this happens with other time-steppers and advection schemes (including high order WENO schemes).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1439213293
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1439243627:58,Availability,error,error,58,Is energy increasing? If so that might be a time stepping error and you need to reduce your time step.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1439243627
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1439243627:3,Energy Efficiency,energy,energy,3,Is energy increasing? If so that might be a time stepping error and you need to reduce your time step.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1439243627
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1439243627:80,Energy Efficiency,reduce,reduce,80,Is energy increasing? If so that might be a time stepping error and you need to reduce your time step.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1439243627
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442082140:60,Availability,error,error,60,"> Is energy increasing? If so that might be a time stepping error and you need to reduce your time step. Yes, and the issue does seem to decrease with a time step but not nearly fast enough (at least for this specific setup). Here are some results with the MWE above using 1e-6 m/s initial noise amplitude and running the simulation for 10 days. . In all cases the initial KE is ~5e-14 m2/s2. | Target CFL | KE final / KE initial |; | ------------- | ------------- |; | 5e-1 | 1e7 |; | 5e-2 | 1e5 |; | 5e-3 | 1e3 |; | 5e-4 | 16 |. So even running with a 5e-4 cfl there's still an order of magnitude increase in the KE after 10 days. To me this is totally unexpected for the setup in question.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442082140
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442082140:5,Energy Efficiency,energy,energy,5,"> Is energy increasing? If so that might be a time stepping error and you need to reduce your time step. Yes, and the issue does seem to decrease with a time step but not nearly fast enough (at least for this specific setup). Here are some results with the MWE above using 1e-6 m/s initial noise amplitude and running the simulation for 10 days. . In all cases the initial KE is ~5e-14 m2/s2. | Target CFL | KE final / KE initial |; | ------------- | ------------- |; | 5e-1 | 1e7 |; | 5e-2 | 1e5 |; | 5e-3 | 1e3 |; | 5e-4 | 16 |. So even running with a 5e-4 cfl there's still an order of magnitude increase in the KE after 10 days. To me this is totally unexpected for the setup in question.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442082140
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442082140:82,Energy Efficiency,reduce,reduce,82,"> Is energy increasing? If so that might be a time stepping error and you need to reduce your time step. Yes, and the issue does seem to decrease with a time step but not nearly fast enough (at least for this specific setup). Here are some results with the MWE above using 1e-6 m/s initial noise amplitude and running the simulation for 10 days. . In all cases the initial KE is ~5e-14 m2/s2. | Target CFL | KE final / KE initial |; | ------------- | ------------- |; | 5e-1 | 1e7 |; | 5e-2 | 1e5 |; | 5e-3 | 1e3 |; | 5e-4 | 16 |. So even running with a 5e-4 cfl there's still an order of magnitude increase in the KE after 10 days. To me this is totally unexpected for the setup in question.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442082140
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442101185:22,Energy Efficiency,energy,energy,22,What is the source of energy? (Of course it's unexpected for a simulation to blow up --- unless you like simulating NaNs??),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442101185
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442267170:24,Energy Efficiency,energy,energy,24,"> What is the source of energy? (Of course it's unexpected for a simulation to blow up --- unless you like simulating NaNs??). In this case, unless I'm missing something, there shouldn't be a source of energy. All the BCs are no-flux and there are no forcing terms. So the only thing I can think of is a numerical issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442267170
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442267170:202,Energy Efficiency,energy,energy,202,"> What is the source of energy? (Of course it's unexpected for a simulation to blow up --- unless you like simulating NaNs??). In this case, unless I'm missing something, there shouldn't be a source of energy. All the BCs are no-flux and there are no forcing terms. So the only thing I can think of is a numerical issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442267170
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442553443:201,Energy Efficiency,energy,energy,201,That's a good point. Upon further inspection I can see that indeed the time step wizard increases Δt past that 100 s at some point. I ran the same set-up for a fixed `Δt=10` (also for 10 days) and the energy increased by a factor of 5. Definitely better! But it still seems too large of an increase for a quasi-quiescent run for such a short period of time for me. I'd expect something in the single-digit percentages...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442553443
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442558213:521,Energy Efficiency,energy,energy,521,"For future reference, this is what the KE evolution looks like for the simulation with Δt=10 s:. ![Screenshot_20230223_144849](https://user-images.githubusercontent.com/13205162/221052306-22881de1-a2e1-4107-a3a4-749896e70cbd.png). And, for comparison, this is what is looks like for the same simulation but with `buoyancy=nothing`:. ![image](https://user-images.githubusercontent.com/13205162/221052579-168ce258-e5ec-471a-bdf3-015ce5a9913f.png). The latter figure looks way more reasonable to me (with only about 2.5% of energy lost due to numerics).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442558213
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442561766:10,Energy Efficiency,energy,energy,10,How could energy increase at all? This is stably stratified right?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442561766
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442563608:12,Energy Efficiency,energy,energy,12,"> How could energy increase at all? This is stably stratified right?. Yup, initial distribution of buoyancy is pretty much just `1e-5 * z`. Like I said, I haven't been able to figure out why energy is increasing. Although it's hard for me to imagine anything other than a numerical instability.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442563608
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442563608:191,Energy Efficiency,energy,energy,191,"> How could energy increase at all? This is stably stratified right?. Yup, initial distribution of buoyancy is pretty much just `1e-5 * z`. Like I said, I haven't been able to figure out why energy is increasing. Although it's hard for me to imagine anything other than a numerical instability.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442563608
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442564404:12,Energy Efficiency,energy,energy,12,> How could energy increase at all? This is stably stratified right?. I guess that's the whole point of the issue?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442564404
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442565402:547,Energy Efficiency,energy,energy,547,"> For future reference, this is what the KE evolution looks like for the simulation with Δt=10 s:; > ; > ![Screenshot_20230223_144849](https://user-images.githubusercontent.com/13205162/221052306-22881de1-a2e1-4107-a3a4-749896e70cbd.png); > ; > And, for comparison, this is what is looks like for the same simulation but with `buoyancy=nothing`:; > ; > ![image](https://user-images.githubusercontent.com/13205162/221052579-168ce258-e5ec-471a-bdf3-015ce5a9913f.png); > ; > The latter figure looks way more reasonable to me (with only about 2.5% of energy lost due to numerics). At the top figure, Initially it falls! Then it starts going up. What's happening there? That might be illuminating.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442565402
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442569111:69,Energy Efficiency,energy,energy,69,"Numerical dissipation by `UpwindBiasedFifthOrder()` should dissipate energy, similarly as in the two dimensional turbulence example. I would also expect to see a lot of small scale waves because this is stably stratified. I guess those would also dissipate?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442569111
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:963,Energy Efficiency,schedul,schedule,963,"Here's a script with a visualization. ```julia; using Oceananigans; using Oceananigans.Units; using GLMakie. grid = RectilinearGrid(topology=(Periodic, Flat, Bounded), size=(64, 32), x=(0, 200), z=(0, 100)). model = NonhydrostaticModel(; grid,; timestepper = :RungeKutta3,; advection = UpwindBiasedFifthOrder(),; buoyancy = BuoyancyTracer(),; tracers = :b). noise(x, y, z) = 1e-6 * (rand() - 1/2); constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=noise, b=constant_stratification). simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:1419,Energy Efficiency,energy,energy,1419,", z) = 1e-5 * z; set!(model, u=noise, b=constant_stratification). simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```. github won't let me attach the movie or image but basically at first energy decreases, then there is a lot of grid scale noise with wave dynamics. So nothing is resolved, and the energy oscillates around. Perh",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:1577,Energy Efficiency,energy,energy,1577,", z) = 1e-5 * z; set!(model, u=noise, b=constant_stratification). simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```. github won't let me attach the movie or image but basically at first energy decreases, then there is a lot of grid scale noise with wave dynamics. So nothing is resolved, and the energy oscillates around. Perh",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:2287,Energy Efficiency,energy,energy,2287,"simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```. github won't let me attach the movie or image but basically at first energy decreases, then there is a lot of grid scale noise with wave dynamics. So nothing is resolved, and the energy oscillates around. Perhaps later it increases. This might need a background diffusivity?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:2397,Energy Efficiency,energy,energy,2397,"simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```. github won't let me attach the movie or image but basically at first energy decreases, then there is a lot of grid scale noise with wave dynamics. So nothing is resolved, and the energy oscillates around. Perhaps later it increases. This might need a background diffusivity?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:869,Testability,test,test,869,"Here's a script with a visualization. ```julia; using Oceananigans; using Oceananigans.Units; using GLMakie. grid = RectilinearGrid(topology=(Periodic, Flat, Bounded), size=(64, 32), x=(0, 200), z=(0, 100)). model = NonhydrostaticModel(; grid,; timestepper = :RungeKutta3,; advection = UpwindBiasedFifthOrder(),; buoyancy = BuoyancyTracer(),; tracers = :b). noise(x, y, z) = 1e-6 * (rand() - 1/2); constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=noise, b=constant_stratification). simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:2138,Testability,test,test,2138,"simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```. github won't let me attach the movie or image but basically at first energy decreases, then there is a lot of grid scale noise with wave dynamics. So nothing is resolved, and the energy oscillates around. Perhaps later it increases. This might need a background diffusivity?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442579461:210,Energy Efficiency,energy,energy,210,But there's a big difference in the dynamics of course; with `buoyancy=nothing` then we just have 2D turbulence whereas with stratification (very strong here relative to the initial velocity perturbations) the energy does not dissipate as strongly.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442579461
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442582678:13,Energy Efficiency,energy,energy,13,"I guess when energy decreases to the point that advection is negligible compared to buoyancy/wave dynamics, the numerical diffusivity has no effect. At that point we just have wave dynamics acting on grid scale noise. I don't know what we expect. It is surprising that things blow up eventually. Adding `closure = ScalarDiffusivity(ν=1e-4, κ=1e-4)` causes energy to decrease monotonically.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442582678
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442582678:356,Energy Efficiency,energy,energy,356,"I guess when energy decreases to the point that advection is negligible compared to buoyancy/wave dynamics, the numerical diffusivity has no effect. At that point we just have wave dynamics acting on grid scale noise. I don't know what we expect. It is surprising that things blow up eventually. Adding `closure = ScalarDiffusivity(ν=1e-4, κ=1e-4)` causes energy to decrease monotonically.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442582678
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442594450:91,Modifiability,layers,layers,91,"The buoyancy is actually a buoyancy perturbation, showing the growth of diffusive boundary layers + waves. But the viscosity and diffusivity help dissipate the grid scale waves so that larger scale waves dominate later on.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442594450
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442609489:47,Energy Efficiency,energy,energy,47,"With no background diffusivity I also find the energy increases slowly. This is with WENO advection scheme. https://user-images.githubusercontent.com/15271942/221060649-86deb92a-45c3-401d-96ac-3dceabacc686.mp4. Perhaps one could compute the discrete conservation laws for the linear wave equations here given our staggered discretization of buoyancy / hydrostatic pressure + nonhydrostatic pressure... I'm not sure what we would find. It's not that simple, because nonhydrostatic pressure is treated implicitly / with a fractional step. Our hydrostatic pressure scheme is not the only possible scheme one might use. Perhaps other schemes have different numerical properties.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442609489
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442609489:449,Usability,simpl,simple,449,"With no background diffusivity I also find the energy increases slowly. This is with WENO advection scheme. https://user-images.githubusercontent.com/15271942/221060649-86deb92a-45c3-401d-96ac-3dceabacc686.mp4. Perhaps one could compute the discrete conservation laws for the linear wave equations here given our staggered discretization of buoyancy / hydrostatic pressure + nonhydrostatic pressure... I'm not sure what we would find. It's not that simple, because nonhydrostatic pressure is treated implicitly / with a fractional step. Our hydrostatic pressure scheme is not the only possible scheme one might use. Perhaps other schemes have different numerical properties.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442609489
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442661794:46,Energy Efficiency,energy,energy,46,"Another solution is to increase the amount of energy in the initial condition, which leads to strong numerical dissipation at the beginning and yields a smoother solution at later times...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442661794
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444063809:189,Energy Efficiency,energy,energy,189,"> At the top figure, Initially it falls! Then it starts going up. What's happening there? That might be illuminating. > Numerical dissipation by `UpwindBiasedFifthOrder()` should dissipate energy, similarly as in the two dimensional turbulence example.; > ; > I would also expect to see a lot of small scale waves because this is stably stratified. I guess those would also dissipate?. I think the initial big drop has to do with energy being quickly exchange between KE and APE in this case. So I think that big drop is expected given the initial small-scale noise we include in the IC.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444063809
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444063809:430,Energy Efficiency,energy,energy,430,"> At the top figure, Initially it falls! Then it starts going up. What's happening there? That might be illuminating. > Numerical dissipation by `UpwindBiasedFifthOrder()` should dissipate energy, similarly as in the two dimensional turbulence example.; > ; > I would also expect to see a lot of small scale waves because this is stably stratified. I guess those would also dissipate?. I think the initial big drop has to do with energy being quickly exchange between KE and APE in this case. So I think that big drop is expected given the initial small-scale noise we include in the IC.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444063809
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:359,Deployability,continuous,continuous,359,"In this case if we see convergence with decreasing time-step (spatial resolution isn't relevant for these dynamics, which are at the grid scale and therefore not physical) then I suppose that would be an indication the issue is due to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could div",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:2077,Integrability,depend,depends,2077,"ue to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could dive much deeper into that example and test a wide variety of wave numbers. It depends whether you are interested in the grid-scale noise system, or whether you are interested in verifying that smooth resolved dynamics are correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:494,Testability,test,test,494,"In this case if we see convergence with decreasing time-step (spatial resolution isn't relevant for these dynamics, which are at the grid scale and therefore not physical) then I suppose that would be an indication the issue is due to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could div",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:1787,Testability,test,test,1787,"ue to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could dive much deeper into that example and test a wide variety of wave numbers. It depends whether you are interested in the grid-scale noise system, or whether you are interested in verifying that smooth resolved dynamics are correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:1845,Testability,test,test,1845,"ue to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could dive much deeper into that example and test a wide variety of wave numbers. It depends whether you are interested in the grid-scale noise system, or whether you are interested in verifying that smooth resolved dynamics are correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:1887,Testability,test,test,1887,"ue to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could dive much deeper into that example and test a wide variety of wave numbers. It depends whether you are interested in the grid-scale noise system, or whether you are interested in verifying that smooth resolved dynamics are correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:2037,Testability,test,test,2037,"ue to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could dive much deeper into that example and test a wide variety of wave numbers. It depends whether you are interested in the grid-scale noise system, or whether you are interested in verifying that smooth resolved dynamics are correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423:686,Usability,guid,guide,686,"In this case if we see convergence with decreasing time-step (spatial resolution isn't relevant for these dynamics, which are at the grid scale and therefore not physical) then I suppose that would be an indication the issue is due to a finite time step. It's important to recognize that the dynamics of the _discrete_ linear equations are different than the continuous. When we have a smooth solution, such that our spatial discretization should approximate some exact smooth solution, we can test that refining the grid and time step leads to convergence to an exact solution. Moreover, we can estimate the time-scale of the dynamics using the time-scales of the smooth dynamics as a guide. An example is a resolved buoyancy oscillation: it has a timescale of roughly 1/N. This example is dominated by small amplitude (eg linear) noise at the grid scale. Therefore my initial time scale estimate of 1/N may not hold. Instead, we'd have to look at the discrete eigenvalues of the system at the very higheset wavenumbers (ie the Nyquist number 2pi / dx). We could then calculate the time-step that would be required to resolve these (completely unphysical) dynamics. I'm not sure what a lower bound on such spurious discrete dynamics might be. It could be far smaller than any physical time scale, ie as small as 1e-16, or smaller? Perhaps the evolution of grid scale noise also has to do with spatial resolution, so that could be another knob to vary. So if we want to investigate this further, we should conduct a systematic study of the dynamics of this grid-scale noise system affected by buoyancy, decreasing the time-step to zero. Or we can convince ourselves that non-noisy dynamics _are_ accurate --- eg by analyzing a system like the one we use for our ""internal wave"" dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_internal_wave_dynamics.jl. that test verifies that a wave packet in our code propagates at the correct group speed, for example. But one could div",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444451423
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444487243:178,Energy Efficiency,energy,energy,178,I agree. I would be more alarmed if an initial condition that includes small scales but resolved (that is with 5-6 grid points per shortest wavelength) eg cosm(mx)cos(nz) showed energy increase.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1444487243
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445221865:109,Energy Efficiency,reduce,reduce,109,"@glwagner Thanks for the detailed analyses and good points about the noise being grid-scale. That may indeed reduce the necessary time step for stability to unphysical values. Also, just to be clear, I'm not saying that I think there's a bug in the code. I'm just saying that I, personally, wouldn't rule it out yet. I guess part of my reasoning is due to the fact that I arrived at this MWE because of unphysical oscillations like these emerging due to physical (and as far as I can tell well-resolved) instabilities in my simulations. In these simulations the instabilities propagated into the stably-stratified, quasi-quiescent regions of the flow, and amplified similarly to the ones that the MWE above reproduces. Of course the fact that these behaviors look alike to the naked eye doesn't prove they are indeed the same phenomenon and, like @glwagner suggested, the fact that we're starting with grid-scale noise here possibly matters. If that's okay I'll try to investigate this a little more with grid-resolved noise before we move/close the issue. If the behavior goes away when everything is well-resolved, then I'm happy to close the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445221865
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445221865:193,Usability,clear,clear,193,"@glwagner Thanks for the detailed analyses and good points about the noise being grid-scale. That may indeed reduce the necessary time step for stability to unphysical values. Also, just to be clear, I'm not saying that I think there's a bug in the code. I'm just saying that I, personally, wouldn't rule it out yet. I guess part of my reasoning is due to the fact that I arrived at this MWE because of unphysical oscillations like these emerging due to physical (and as far as I can tell well-resolved) instabilities in my simulations. In these simulations the instabilities propagated into the stably-stratified, quasi-quiescent regions of the flow, and amplified similarly to the ones that the MWE above reproduces. Of course the fact that these behaviors look alike to the naked eye doesn't prove they are indeed the same phenomenon and, like @glwagner suggested, the fact that we're starting with grid-scale noise here possibly matters. If that's okay I'll try to investigate this a little more with grid-resolved noise before we move/close the issue. If the behavior goes away when everything is well-resolved, then I'm happy to close the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445221865
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445270762:135,Deployability,integrat,integrated,135,"Also this doesn't blow up, right? I think with increasing energy, eventually nonlinearities and numerical diffusion would kick in. The integrated KE might exhibit oscillatory behavior on long time-scales. (The example in the OP only blows up because the `TimeStepWizard` increases the time step too much.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445270762
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445270762:58,Energy Efficiency,energy,energy,58,"Also this doesn't blow up, right? I think with increasing energy, eventually nonlinearities and numerical diffusion would kick in. The integrated KE might exhibit oscillatory behavior on long time-scales. (The example in the OP only blows up because the `TimeStepWizard` increases the time step too much.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445270762
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445270762:135,Integrability,integrat,integrated,135,"Also this doesn't blow up, right? I think with increasing energy, eventually nonlinearities and numerical diffusion would kick in. The integrated KE might exhibit oscillatory behavior on long time-scales. (The example in the OP only blows up because the `TimeStepWizard` increases the time step too much.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1445270762
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1448262472:484,Availability,avail,available,484,"I haven't looked at APE because it's harder to compute. Although maybe with the area and distance operators it wouldn't be too hard to calculate it via integral (Winters et al., 1995):. ![image](https://user-images.githubusercontent.com/13205162/221880181-55c6efb5-bef5-43c7-b105-2be6056ffd85.png). where $z*$ is the sorted $z$. Note that initially the APE is zero since there are no fluctuations on top of the linear stable stratification. So the initial KE is indeed all the energy available to the system.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1448262472
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1448262472:477,Energy Efficiency,energy,energy,477,"I haven't looked at APE because it's harder to compute. Although maybe with the area and distance operators it wouldn't be too hard to calculate it via integral (Winters et al., 1995):. ![image](https://user-images.githubusercontent.com/13205162/221880181-55c6efb5-bef5-43c7-b105-2be6056ffd85.png). where $z*$ is the sorted $z$. Note that initially the APE is zero since there are no fluctuations on top of the linear stable stratification. So the initial KE is indeed all the energy available to the system.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1448262472
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1450810246:46,Energy Efficiency,energy,energy,46,"> I think the initial big drop has to do with energy being quickly exchange between KE and APE in this case. So I think that big drop is expected given the initial small-scale noise we include in the IC. Perhaps but it may also be numerical diffusion. When the amplitude of the noise is increased, the drop is larger. When the amplitude of the initial noise is increased enough, the solution becomes smooth at long times and is stable. The relative amount of energy diffused is proportional to its amplitude because the numerical diffusivity is nonlinear (much like an LES diffusivity) in the amplitude of the solution.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1450810246
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1450810246:459,Energy Efficiency,energy,energy,459,"> I think the initial big drop has to do with energy being quickly exchange between KE and APE in this case. So I think that big drop is expected given the initial small-scale noise we include in the IC. Perhaps but it may also be numerical diffusion. When the amplitude of the noise is increased, the drop is larger. When the amplitude of the initial noise is increased enough, the solution becomes smooth at long times and is stable. The relative amount of energy diffused is proportional to its amplitude because the numerical diffusivity is nonlinear (much like an LES diffusivity) in the amplitude of the solution.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1450810246
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462387712:1158,Integrability,depend,depending,1158,"Okay so indeed I think this issue only happens due to poor resolution of the initial noise. I cooked up a MWE where I fixed the random seed, then used that to sprinkle 256 Gaussians (that are also horizontally periodic) throughout the domain. I did this because I wanted to have the ""same noise"", but change it from being under-resolved to well-resolved. I ran this for a few cases ranging from poorly resolved (1 to 2 grid-points per gaussian) to well-resolved (about 8 grid-points per gaussian). I'm plotting three of the animations I got in order or increasing resolution (2, 4, and 8 grid-points per gaussian):. https://user-images.githubusercontent.com/13205162/224089407-ee82f95f-1c71-4857-b69b-745ae20749f6.mp4. https://user-images.githubusercontent.com/13205162/224089438-a49d7c94-391c-4f5d-b4ac-fb658ea672c3.mp4. https://user-images.githubusercontent.com/13205162/224089523-5e485a2b-b7b4-4eb6-b793-e1123345eebc.mp4. We can clearly see that the odd behavior decreases and then finally goes away as we start resolving the initial fluctuations more and more. Some things caught my eye here though. Firstly, this is an example of the long-time solution depending on the initial conditions, which is really odd to me. Although I guess I shouldn't be so surprised, since this isn't physical turbulence, it's something else (and it's poorly resolved), but still I think it's interesting. Also as the time progresses, even in the most resolved simulation, some grid-scale noise starts to emerge (which probably has to do with the advection scheme?). However, this grid-scale noise, contrary to the _initial_ grid-scale noise, doesn't cause any trouble. I wonder why... In any case, @glwagner please feel free to convert this issue to a discussion and thanks for the help!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462387712
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462387712:932,Usability,clear,clearly,932,"Okay so indeed I think this issue only happens due to poor resolution of the initial noise. I cooked up a MWE where I fixed the random seed, then used that to sprinkle 256 Gaussians (that are also horizontally periodic) throughout the domain. I did this because I wanted to have the ""same noise"", but change it from being under-resolved to well-resolved. I ran this for a few cases ranging from poorly resolved (1 to 2 grid-points per gaussian) to well-resolved (about 8 grid-points per gaussian). I'm plotting three of the animations I got in order or increasing resolution (2, 4, and 8 grid-points per gaussian):. https://user-images.githubusercontent.com/13205162/224089407-ee82f95f-1c71-4857-b69b-745ae20749f6.mp4. https://user-images.githubusercontent.com/13205162/224089438-a49d7c94-391c-4f5d-b4ac-fb658ea672c3.mp4. https://user-images.githubusercontent.com/13205162/224089523-5e485a2b-b7b4-4eb6-b793-e1123345eebc.mp4. We can clearly see that the odd behavior decreases and then finally goes away as we start resolving the initial fluctuations more and more. Some things caught my eye here though. Firstly, this is an example of the long-time solution depending on the initial conditions, which is really odd to me. Although I guess I shouldn't be so surprised, since this isn't physical turbulence, it's something else (and it's poorly resolved), but still I think it's interesting. Also as the time progresses, even in the most resolved simulation, some grid-scale noise starts to emerge (which probably has to do with the advection scheme?). However, this grid-scale noise, contrary to the _initial_ grid-scale noise, doesn't cause any trouble. I wonder why... In any case, @glwagner please feel free to convert this issue to a discussion and thanks for the help!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462387712
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476:1625,Energy Efficiency,schedul,schedule,1625,"ans do we want sprinkled throughout the domain?; x₀ = grid.Lx * rand(N); z₀ = grid.Lz * rand(N) # Locations of the Gaussians. xₚ = x₀ .+ (grid.Lx .* [-2;;-1;;0;;1;;2]) # Make that noise periodic by ""infinite"" horizontal reflection; zₚ = reshape(repeat(z₀, 5), size(xₚ)) # Vertical direction isn't periodic, so we just need to repeat and reshape things . resolved_noise(x, y, z) = sum(@. 1e-6 * exp(-(x-xₚ)^2/σx^2 -(z-zₚ)^2/σz^2)). constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=resolved_noise, b=constant_stratification). u, v, w = model.velocities. simulation = Simulation(model, Δt=20.0, stop_iteration=1e4); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(100)). e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). using GLMakie; fig = Figure(resolution=(900, 450)). axw = Axis(fig[1, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[1, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[1, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[2, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). n = Observable(1). wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476:2095,Energy Efficiency,energy,energy,2095,"al reflection; zₚ = reshape(repeat(z₀, 5), size(xₚ)) # Vertical direction isn't periodic, so we just need to repeat and reshape things . resolved_noise(x, y, z) = sum(@. 1e-6 * exp(-(x-xₚ)^2/σx^2 -(z-zₚ)^2/σz^2)). constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=resolved_noise, b=constant_stratification). u, v, w = model.velocities. simulation = Simulation(model, Δt=20.0, stop_iteration=1e4); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(100)). e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). using GLMakie; fig = Figure(resolution=(900, 450)). axw = Axis(fig[1, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[1, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[1, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[2, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). n = Observable(1). wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476:2253,Energy Efficiency,energy,energy,2253,"al reflection; zₚ = reshape(repeat(z₀, 5), size(xₚ)) # Vertical direction isn't periodic, so we just need to repeat and reshape things . resolved_noise(x, y, z) = sum(@. 1e-6 * exp(-(x-xₚ)^2/σx^2 -(z-zₚ)^2/σz^2)). constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=resolved_noise, b=constant_stratification). u, v, w = model.velocities. simulation = Simulation(model, Δt=20.0, stop_iteration=1e4); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(100)). e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). using GLMakie; fig = Figure(resolution=(900, 450)). axw = Axis(fig[1, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[1, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[1, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[2, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). n = Observable(1). wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476:1531,Testability,test,test,1531,"cale of the noise; σz = .5grid.Δzᵃᵃᶜ # z length scale of the noise. N = 2^8 # How many Gaussians do we want sprinkled throughout the domain?; x₀ = grid.Lx * rand(N); z₀ = grid.Lz * rand(N) # Locations of the Gaussians. xₚ = x₀ .+ (grid.Lx .* [-2;;-1;;0;;1;;2]) # Make that noise periodic by ""infinite"" horizontal reflection; zₚ = reshape(repeat(z₀, 5), size(xₚ)) # Vertical direction isn't periodic, so we just need to repeat and reshape things . resolved_noise(x, y, z) = sum(@. 1e-6 * exp(-(x-xₚ)^2/σx^2 -(z-zₚ)^2/σz^2)). constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=resolved_noise, b=constant_stratification). u, v, w = model.velocities. simulation = Simulation(model, Δt=20.0, stop_iteration=1e4); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(100)). e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). using GLMakie; fig = Figure(resolution=(900, 450)). axw = Axis(fig[1, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[1, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[1, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[2, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). n = Observable(1). wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476
https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476:2759,Testability,test,test,2759,"al reflection; zₚ = reshape(repeat(z₀, 5), size(xₚ)) # Vertical direction isn't periodic, so we just need to repeat and reshape things . resolved_noise(x, y, z) = sum(@. 1e-6 * exp(-(x-xₚ)^2/σx^2 -(z-zₚ)^2/σz^2)). constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=resolved_noise, b=constant_stratification). u, v, w = model.velocities. simulation = Simulation(model, Δt=20.0, stop_iteration=1e4); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(100)). e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). using GLMakie; fig = Figure(resolution=(900, 450)). axw = Axis(fig[1, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[1, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[1, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[2, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). n = Observable(1). wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, bn, colorrange=(0, 1e-3), colormap=:thermal). t = @lift times[$n]; lines!(axE, times, Et[:]); vlines!(axE, t). display(fig). record(fig, ""test.mp4"", 1:Nt) do nn; @info ""Recording frame $nn of $Nt""; n[] = nn; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1462391476
https://github.com/CliMA/Oceananigans.jl/pull/2937#issuecomment-1442352158:39,Testability,test,test,39,"@simone-silvestri, the [GPU Regression test passes](https://buildkite.com/clima/oceananigans/builds/10213#01867f84-d9b6-454a-8d3e-d7062858ec81)! 🎉🪅🪅",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2937#issuecomment-1442352158
https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1439415048:58,Availability,checkpoint,checkpoint,58,This feature would be used to restart a simulation from a checkpoint with additional passive tracers? Is that correct?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1439415048
https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440328788:60,Availability,checkpoint,checkpoint,60,> This feature would be used to restart a simulation from a checkpoint with additional passive tracers? Is that correct?. That is correct. That's what I'm currently trying to do (and eventually @whitleyv too) and it's much easier if with we make this change with the Checkpointer.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440328788
https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440328788:267,Availability,Checkpoint,Checkpointer,267,> This feature would be used to restart a simulation from a checkpoint with additional passive tracers? Is that correct?. That is correct. That's what I'm currently trying to do (and eventually @whitleyv too) and it's much easier if with we make this change with the Checkpointer.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440328788
https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440485748:92,Availability,checkpoint,checkpoint,92,"Can we update the PR description to state this goal? ""This feature adds support for using a checkpoint file to initialize a model that contains additional passive tracers...""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440485748
https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440485748:7,Deployability,update,update,7,"Can we update the PR description to state this goal? ""This feature adds support for using a checkpoint file to initialize a model that contains additional passive tracers...""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440485748
https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440573098:94,Availability,checkpoint,checkpoint,94,"> Can we update the PR description to state this goal? ""This feature adds support for using a checkpoint file to initialize a model that contains additional passive tracers..."". Done!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440573098
https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440573098:9,Deployability,update,update,9,"> Can we update the PR description to state this goal? ""This feature adds support for using a checkpoint file to initialize a model that contains additional passive tracers..."". Done!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2938#issuecomment-1440573098
https://github.com/CliMA/Oceananigans.jl/pull/2941#issuecomment-1443856384:71,Modifiability,evolve,evolves,71,"The only distinction is that in the `VectorInvariantFormulation` (that evolves $u$ and $v$) you want to compute; $h^{-1} \nabla \nu h \nabla t$,; while in the `ConservativeFormulation` (that evolves $uh$ and $vh$) ; $\nabla \nu h \nabla t$",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2941#issuecomment-1443856384
https://github.com/CliMA/Oceananigans.jl/pull/2941#issuecomment-1443856384:191,Modifiability,evolve,evolves,191,"The only distinction is that in the `VectorInvariantFormulation` (that evolves $u$ and $v$) you want to compute; $h^{-1} \nabla \nu h \nabla t$,; while in the `ConservativeFormulation` (that evolves $uh$ and $vh$) ; $\nabla \nu h \nabla t$",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2941#issuecomment-1443856384
https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1443689339:77,Availability,error,error,77,It seems like we're still getting the `all(test_fields.v .≈ truth_fields.v)` error in the [shallow water regression tests](https://buildkite.com/clima/oceananigans/builds/10225#01868315-b904-4152-b885-9b64cbab7111). I'll restart it and see what happens. But we should probably keep an eye on that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1443689339
https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1443689339:116,Testability,test,tests,116,It seems like we're still getting the `all(test_fields.v .≈ truth_fields.v)` error in the [shallow water regression tests](https://buildkite.com/clima/oceananigans/builds/10225#01868315-b904-4152-b885-9b64cbab7111). I'll restart it and see what happens. But we should probably keep an eye on that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1443689339
https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1444033136:18,Availability,error,error,18,I restarted it an error was insisting... I reopened #2922. I'll make the timestep even smaller.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2944#issuecomment-1444033136
https://github.com/CliMA/Oceananigans.jl/pull/2946#issuecomment-1445161186:25,Availability,error,error,25,Maybe better to throw an error in the `PressureSolver` function?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2946#issuecomment-1445161186
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448146037:283,Energy Efficiency,reduce,reduced,283,"So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies **482** files?!. The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448146037
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448201010:353,Deployability,update,updates,353,"> So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?! The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. yeah most of it is updates in main",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448201010
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448201010:280,Energy Efficiency,reduce,reduced,280,"> So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?! The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. yeah most of it is updates in main",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448201010
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:376,Availability,error,error,376,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:453,Deployability,update,update,453,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:889,Deployability,update,update,889,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:756,Energy Efficiency,reduce,reduced,756,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:273,Integrability,depend,depending,273,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:334,Integrability,synchroniz,synchronization,334,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:856,Security,access,access,856,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:241,Testability,test,tests,241,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:1072,Testability,test,test,1072,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450686514:104,Deployability,update,update,104,@simone-silvestri I see you've rebased ```amdgpu``` to master but for some reason the PR's view doesn't update. On my side I'm only 97 commits ahead and 12 behind. Maybe this is a GitHub issue? I can maybe open the same PR again and link it here after closing this one.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450686514
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450706797:39,Deployability,update,updates,39,still it doesn't seem to have seen the updates in the amdgpu branch,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450706797
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450843362:29,Deployability,update,update,29,That will be great if we can update the PR to modify fewer files so that it is feasible to review.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450843362
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450848607:102,Deployability,update,update,102,"> @simone-silvestri I see you've rebased `amdgpu` to master but for some reason the PR's view doesn't update. On my side I'm only 97 commits ahead and 12 behind. Maybe this is a GitHub issue? I can maybe open the same PR again and link it here after closing this one. Opening a new PR, and then a second PR to merge this code into that branch, seems like a good solution. Alternatively, we can just open a PR directly to `main`. If possible, it'd be best to separate the support for distributed GPU into a separate PR from support for AMDGPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450848607
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450982937:205,Integrability,depend,dependent,205,"@navidcy thanks, I was able to bring the branch up to date to a more reasonable delta.; @glwagner I think there's no need to separate ROCm support and multi-GPU support, since multi-GPU support was mostly dependent on modifications in PencilFFTs.jl.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1450982937
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1451020491:269,Deployability,update,update,269,"> @navidcy thanks, I was able to bring the branch up to date to a more reasonable delta. @glwagner I think there's no need to separate ROCm support and multi-GPU support, since multi-GPU support was mostly dependent on modifications in PencilFFTs.jl. If the PencilFFTs update is small, that makes it a great candidate for a small independent PR. It's especially important here because there is potentially a conflicting PR: https://github.com/CliMA/Oceananigans.jl/pull/2538. Perhaps we can do the distributed FFT PR first if its easy, then continue working on AMD support? There are likely a fair number of users interested in multi GPU. Hopefully we can make the new PR compatible with https://github.com/CliMA/Oceananigans.jl/pull/2538.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1451020491
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1451020491:206,Integrability,depend,dependent,206,"> @navidcy thanks, I was able to bring the branch up to date to a more reasonable delta. @glwagner I think there's no need to separate ROCm support and multi-GPU support, since multi-GPU support was mostly dependent on modifications in PencilFFTs.jl. If the PencilFFTs update is small, that makes it a great candidate for a small independent PR. It's especially important here because there is potentially a conflicting PR: https://github.com/CliMA/Oceananigans.jl/pull/2538. Perhaps we can do the distributed FFT PR first if its easy, then continue working on AMD support? There are likely a fair number of users interested in multi GPU. Hopefully we can make the new PR compatible with https://github.com/CliMA/Oceananigans.jl/pull/2538.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1451020491
https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1466277982:193,Integrability,depend,dependencies,193,@matinraayai I quickly looked at your work on PencilFFTs and it looks awesome. I'd be happy to merge it in some form. My main reservation is that I'd rather not include CUDA and AMDGPU as hard dependencies. I guess this can be easily corrected using the new package extensions on Julia 1.9. Feel free to open a PR over at PencilFFTs and we can continue the discussion there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1466277982
https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865:25,Testability,test,testing,25,I also noticed we're not testing `closure = nothing` in `test_turbulence_closures.jl` (although there's some implicit testing since that is the default option). So I'd also like to add `nothing` to the list of tested closures https://github.com/CliMA/Oceananigans.jl/blob/6cbe8cf339b58170c51846160d832a431e42715c/test/dependencies_for_runtests.jl#L57-L64,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865
https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865:118,Testability,test,testing,118,I also noticed we're not testing `closure = nothing` in `test_turbulence_closures.jl` (although there's some implicit testing since that is the default option). So I'd also like to add `nothing` to the list of tested closures https://github.com/CliMA/Oceananigans.jl/blob/6cbe8cf339b58170c51846160d832a431e42715c/test/dependencies_for_runtests.jl#L57-L64,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865
https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865:210,Testability,test,tested,210,I also noticed we're not testing `closure = nothing` in `test_turbulence_closures.jl` (although there's some implicit testing since that is the default option). So I'd also like to add `nothing` to the list of tested closures https://github.com/CliMA/Oceananigans.jl/blob/6cbe8cf339b58170c51846160d832a431e42715c/test/dependencies_for_runtests.jl#L57-L64,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865
https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865:313,Testability,test,test,313,I also noticed we're not testing `closure = nothing` in `test_turbulence_closures.jl` (although there's some implicit testing since that is the default option). So I'd also like to add `nothing` to the list of tested closures https://github.com/CliMA/Oceananigans.jl/blob/6cbe8cf339b58170c51846160d832a431e42715c/test/dependencies_for_runtests.jl#L57-L64,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865
https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1450657876:1025,Usability,simpl,simple,1025,"> I don't really get why returning 0 is useful though. You say ""for writing general code from the user perspective"" but I don't quite understand that. What I mean is that it's makes it easier for a user to write something like:. ```julia; u_sgs_flux(model) = - viscosity(model.closure, model.diffusivity_fields) * ∂z(model.velocities.u); ```. and have it (correctly) return 0 when `closure=nothing`. I've been writing utilities of this kind for the past couple of months for a project which has simulations both without and without closure, and I've been using if-else statements to deal with that. It's not the worst thing, but having these extra two lines in Oceananigans would help me (and possibly other users) have cleaner code in these instances. Although admittedly I don't expect a big chunk of users to need that. The main reasons for me to propose this is that the behavior of `viscosity()` and `diffusivity()` will now be more consistent (i.e. they would work for all (?) closures we have so far), and it's only a simple two-line addition.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1450657876
https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1454777192:1146,Modifiability,extend,extend,1146,"> > I don't really get why returning 0 is useful though. You say ""for writing general code from the user perspective"" but I don't quite understand that.; > ; > What I mean is that it's makes it easier for a user to write something like:; > ; > ```julia; > u_sgs_flux(model) = - viscosity(model.closure, model.diffusivity_fields) * ∂z(model.velocities.u); > ```; > ; > and have it (correctly) return 0 when `closure=nothing`.; > ; > I've been writing utilities of this kind for the past couple of months for a project which has simulations both without and without closure, and I've been using if-else statements to deal with that. It's not the worst thing, but having these extra two lines in Oceananigans would help me (and possibly other users) have cleaner code in these instances.; > ; > Although admittedly I don't expect a big chunk of users to need that. The main reasons for me to propose this is that the behavior of `viscosity()` and `diffusivity()` will now be more consistent (i.e. they would work for all (?) closures we have so far), and it's only a simple two-line addition. In the future instead of using an if-statement, you can extend `viscosity` and `diffusivity` in your own code (temporarily, until a PR like this one is merged)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1454777192
https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1454777192:1064,Usability,simpl,simple,1064,"> > I don't really get why returning 0 is useful though. You say ""for writing general code from the user perspective"" but I don't quite understand that.; > ; > What I mean is that it's makes it easier for a user to write something like:; > ; > ```julia; > u_sgs_flux(model) = - viscosity(model.closure, model.diffusivity_fields) * ∂z(model.velocities.u); > ```; > ; > and have it (correctly) return 0 when `closure=nothing`.; > ; > I've been writing utilities of this kind for the past couple of months for a project which has simulations both without and without closure, and I've been using if-else statements to deal with that. It's not the worst thing, but having these extra two lines in Oceananigans would help me (and possibly other users) have cleaner code in these instances.; > ; > Although admittedly I don't expect a big chunk of users to need that. The main reasons for me to propose this is that the behavior of `viscosity()` and `diffusivity()` will now be more consistent (i.e. they would work for all (?) closures we have so far), and it's only a simple two-line addition. In the future instead of using an if-statement, you can extend `viscosity` and `diffusivity` in your own code (temporarily, until a PR like this one is merged)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1454777192
https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452252842:364,Performance,perform,performing,364,"> In particular, this PR introduces the async keyword argument to fill_halo_regions! that allows launching MPI operations without waiting for the communication to complete. Would `blocking=true/false` be a better word to describe how we are controlling `fill_halo_regions!`?. I think ""async"" isn't quite the right word. ""async"" describes the overall algorithm (eg performing some computation while the communication is taking place), but does not describe what is happening specifically within `fill_halo_regions`. It's possible to write `async=true` without overlapping communication and computation. https://github.com/CliMA/Oceananigans.jl/pull/2881 introduces the kwarg `blocking` for `mask_immersed_field!`, which means the same thing:. https://github.com/CliMA/Oceananigans.jl/blob/4a71c834cbc057fcc27061a1d22b4a7cc3eb38fe/src/ImmersedBoundaries/mask_immersed_field.jl#L13. so either way let's use one word.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452252842
https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616:292,Availability,avail,available,292,"I'll wait till it's ready to review in detail, but my main high-level comment is that we need to ensure that, at the end of a time-step, both the prognostic state (horizontal velocities and tracers) and auxiliary state (pressure, vertical velocity, eddy diffusivities) are all consistent and available for output at the current model time. If we intertwine communication with the computation of the auxiliary state and tendencies, then we should _define_ the tendencies as part of the auxiliary state. This will change the semantics and logic of the time stepping loop. But I think it at least as rational as our previous organization of events. The main change is that tendencies will now be computed one ""extra"" time in a simulation (at the very last time-step, the tendencies are not needed if no further time-steps will be taken). In the vast majority of cases this extra cost is negligible because simulations run for hundreds or hundreds of thousands of time-steps. There is the slightly possibility of pessimizing the edge case of a simulation that takes one time step, which may be useful for parameter estimation. For that purpose we may want to avoid computing the ""extra"" tendency. I'm thinking though that we should save that additional optimization until we need it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616
https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616:1249,Performance,optimiz,optimization,1249,"I'll wait till it's ready to review in detail, but my main high-level comment is that we need to ensure that, at the end of a time-step, both the prognostic state (horizontal velocities and tracers) and auxiliary state (pressure, vertical velocity, eddy diffusivities) are all consistent and available for output at the current model time. If we intertwine communication with the computation of the auxiliary state and tendencies, then we should _define_ the tendencies as part of the auxiliary state. This will change the semantics and logic of the time stepping loop. But I think it at least as rational as our previous organization of events. The main change is that tendencies will now be computed one ""extra"" time in a simulation (at the very last time-step, the tendencies are not needed if no further time-steps will be taken). In the vast majority of cases this extra cost is negligible because simulations run for hundreds or hundreds of thousands of time-steps. There is the slightly possibility of pessimizing the edge case of a simulation that takes one time step, which may be useful for parameter estimation. For that purpose we may want to avoid computing the ""extra"" tendency. I'm thinking though that we should save that additional optimization until we need it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616
https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616:1155,Safety,avoid,avoid,1155,"I'll wait till it's ready to review in detail, but my main high-level comment is that we need to ensure that, at the end of a time-step, both the prognostic state (horizontal velocities and tracers) and auxiliary state (pressure, vertical velocity, eddy diffusivities) are all consistent and available for output at the current model time. If we intertwine communication with the computation of the auxiliary state and tendencies, then we should _define_ the tendencies as part of the auxiliary state. This will change the semantics and logic of the time stepping loop. But I think it at least as rational as our previous organization of events. The main change is that tendencies will now be computed one ""extra"" time in a simulation (at the very last time-step, the tendencies are not needed if no further time-steps will be taken). In the vast majority of cases this extra cost is negligible because simulations run for hundreds or hundreds of thousands of time-steps. There is the slightly possibility of pessimizing the edge case of a simulation that takes one time step, which may be useful for parameter estimation. For that purpose we may want to avoid computing the ""extra"" tendency. I'm thinking though that we should save that additional optimization until we need it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616
https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616:537,Testability,log,logic,537,"I'll wait till it's ready to review in detail, but my main high-level comment is that we need to ensure that, at the end of a time-step, both the prognostic state (horizontal velocities and tracers) and auxiliary state (pressure, vertical velocity, eddy diffusivities) are all consistent and available for output at the current model time. If we intertwine communication with the computation of the auxiliary state and tendencies, then we should _define_ the tendencies as part of the auxiliary state. This will change the semantics and logic of the time stepping loop. But I think it at least as rational as our previous organization of events. The main change is that tendencies will now be computed one ""extra"" time in a simulation (at the very last time-step, the tendencies are not needed if no further time-steps will be taken). In the vast majority of cases this extra cost is negligible because simulations run for hundreds or hundreds of thousands of time-steps. There is the slightly possibility of pessimizing the edge case of a simulation that takes one time step, which may be useful for parameter estimation. For that purpose we may want to avoid computing the ""extra"" tendency. I'm thinking though that we should save that additional optimization until we need it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1452351616
https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1453642566:265,Safety,avoid,avoid,265,"PS a minor tweak that would help with the issues above would be to add a kwarg to `update_state!` like. ```julia; function update_state!(model; compute_tendencies=true); ```. Then under some circumstances (ie in `set!` or for the last time-step potentially) we can avoid computing the tendencies if we want. PS PS should we use ""compute"" rather than ""calculate"" ? We use both words to mean the same thing which is silly...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1453642566
https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1513642998:221,Deployability,update,update,221,"I have another branch for the full Gordon Bell work, but it's probably better that I split it up in different PRs, so the splitting of communication and computation will be done here. (This PR is a bit outdated so I will update it)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2953#issuecomment-1513642998
https://github.com/CliMA/Oceananigans.jl/issues/2954#issuecomment-1452778143:1038,Availability,ERROR,ERROR,1038,"/4814f95eb9d7b57f1db8dc6e793bf1c2c5e80a5a/src/Models/ShallowWaterModels/shallow_water_model.jl#L38-L54. The constructor below assumes that clock's parameter is Number. But if we use a clock with `DateTime` then the shallow water model cannot be constructed. ```Julia; julia> using Oceananigans; [ Info: Oceananigans will use 6 threads. julia> grid = RectilinearGrid(size=(4, 8), extent=(1000, 1000), topology=(Periodic, Periodic, Flat));. julia> gravitational_acceleration = 9.81;. julia> ShallowWaterModel(; grid, gravitational_acceleration); ShallowWaterModel{typename(CPU), Float64}(time = 0 seconds, iteration = 0); ├── grid: 4×8×1 RectilinearGrid{Float64, Periodic, Periodic, Flat} on CPU with 3×3×0 halo; ├── tracers: (); └── coriolis: Nothing. julia> using Dates. julia> clock = Clock(time=DateTime(2021, 1, 1)); Clock{DateTime}: time = 2021-01-01T00:00:00, iteration = 0, stage = 1. julia> ShallowWaterModel(; grid, gravitational_acceleration, clock); ERROR: MethodError: no method matching ShallowWaterModel(::RectilinearGrid{Float64, Periodic, Periodic, Flat, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, CPU}, ::CPU, ::Clock{DateTime}, ::Float64, ::NamedTuple{(:momentum, :mass), Tuple{UpwindBiased{3, Float64, Nothing, Nothing, Nothing, UpwindBiased{2, Float64, Nothing, Nothing, Nothing, UpwindBiased{1, Float64, Nothing, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}, Centered{2, Float64, Nothing, Nothing, Nothing, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}}}, WENO{3, Float64, Nothing, Nothing, Nothing, true, Nothing, WENO{2, Float64, Nothing, Not",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2954#issuecomment-1452778143
https://github.com/CliMA/Oceananigans.jl/issues/2954#issuecomment-1452910338:103,Integrability,interface,interface,103,`gravitational_acceleration` will always be a Number... We might have to have a derived `g'` for every interface.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2954#issuecomment-1452910338
https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452909016:88,Availability,error,error,88,"I tried the Shallow-water-Bickley-jet case and it doesn't work; it throws the following error:. ```; run!(simulation); [ Info: Initializing simulation...; ERROR: MethodError: no method matching isless(::Float64, ::DateTime); Closest candidates are:; isless(::T, ::T) where T<:Union{Float16, Float32, Float64} at float.jl:424; isless(::Real, ::Static.StaticInteger{Y}) where Y at ~/.julia/packages/Static/Ldb7F/src/Static.jl:456; isless(::AbstractFloat, ::AbstractFloat) at operators.jl:184; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452909016
https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452909016:155,Availability,ERROR,ERROR,155,"I tried the Shallow-water-Bickley-jet case and it doesn't work; it throws the following error:. ```; run!(simulation); [ Info: Initializing simulation...; ERROR: MethodError: no method matching isless(::Float64, ::DateTime); Closest candidates are:; isless(::T, ::T) where T<:Union{Float16, Float32, Float64} at float.jl:424; isless(::Real, ::Static.StaticInteger{Y}) where Y at ~/.julia/packages/Static/Ldb7F/src/Static.jl:456; isless(::AbstractFloat, ::AbstractFloat) at operators.jl:184; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452909016
https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452949101:284,Availability,error,error,284,"Good idea! Here is the code I used: [https://clima.github.io/OceananigansDocumentation/stable/generated/shallow_water_Bickley_jet/](https://clima.github.io/OceananigansDocumentation/stable/generated/shallow_water_Bickley_jet/). I just copied the entire thing, and I realised that the error is mostly because of the way stop_time is defined. It is a number, and I think the code is unable to compare date time and a number. ` simulation = Simulation(model, Δt = 1e-2, stop_time = 150)`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452949101
https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452984065:74,Testability,test,test,74,I think the DateTime clock is tricky. Tricky to set the Δt... There is no test for this btw.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1452984065
https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1453388047:203,Modifiability,evolve,evolve,203,> I suggest we remove the parameter for `gravitational_acceleration`.; > ; > @francispoulin any objection to that?. Please don't remove the parameter. It appears in the model equations and we need it to evolve the momentum equations.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1453388047
https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1453564182:209,Modifiability,evolve,evolve,209,"> > I suggest we remove the parameter for `gravitational_acceleration`.; > > @francispoulin any objection to that?; > ; > Please don't remove the parameter. It appears in the model equations and we need it to evolve the momentum equations. I only meant removing the explicit type declaration of the parameter. Sorry, should have been clearer. :); But we decided not to. Thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1453564182
https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1453564182:334,Usability,clear,clearer,334,"> > I suggest we remove the parameter for `gravitational_acceleration`.; > > @francispoulin any objection to that?; > ; > Please don't remove the parameter. It appears in the model equations and we need it to evolve the momentum equations. I only meant removing the explicit type declaration of the parameter. Sorry, should have been clearer. :); But we decided not to. Thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2955#issuecomment-1453564182
https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480416031:41,Testability,test,tests,41,Action would be either we delete it from tests or make the tests to call it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480416031
https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480416031:59,Testability,test,tests,59,Action would be either we delete it from tests or make the tests to call it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480416031
https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480439518:22,Testability,test,tests,22,Let's delete from the tests until we have use for it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480439518
https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1616187716:28,Testability,test,tests,28,Locally on my machine these tests pass. On tartarus they pass as well. I'll open a PR and add this file back into the CI. If we see impassable problems we'll delete it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1616187716
https://github.com/CliMA/Oceananigans.jl/pull/2957#issuecomment-1456412180:39,Deployability,release,release,39,"@simone-silvestri, shall I bump up the release? ; I'm not sure what the bug affects...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2957#issuecomment-1456412180
https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1456769440:787,Availability,error,errors,787,"> I'm up to add such a feature but to combat disinformation, we must note that it is possible to run without `const`ants:; > ; > ```julia; > using Oceananigans; > ; > grid = RectilinearGrid(GPU(), size=(4, 4, 4), extent=(1, 1, 1)); > ; > Base.@kwdef struct MonochromaticStokesShear; > Us :: Float64 = 0.05; > wave_vertical_scale :: Float64 = 5.0; > end; > ; > @inline (mss::MonochromaticStokesShear)(z, t) = mss.Us * exp(z / mss.wave_vertical_scale) / mss.wave_vertical_scale; > ; > model = NonhydrostaticModel(; grid, stokes_drift=UniformStokesDrift(∂z_uˢ=MonochromaticStokesShear())); > ; > time_step!(model, 10); > ```. Interesting, I didn't know one could use `@kwdef` to make this work so thanks for correcting me. I tried running it with a `NamedTuple` and it gave me `getindex()` errors so I assumed `const` was the only way.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1456769440
https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1456822250:65,Availability,error,errors,65,> I tried running it with a NamedTuple and it gave me getindex() errors. What do you mean?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1456822250
https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458492186:111,Modifiability,variab,variables-that-need-to-be-used-in-GPU-computations-need-to-be-defined-as-constants-or-passed-as-parameters,111,"So [this section of the docs](https://clima.github.io/OceananigansDocumentation/stable/simulation_tips/#Global-variables-that-need-to-be-used-in-GPU-computations-need-to-be-defined-as-constants-or-passed-as-parameters) is misleading (or maybe just plain wrong), no?. We should probably rewrite that with an example using a callable. I think the MWE here would suffice.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458492186
https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458492186:286,Modifiability,rewrite,rewrite,286,"So [this section of the docs](https://clima.github.io/OceananigansDocumentation/stable/simulation_tips/#Global-variables-that-need-to-be-used-in-GPU-computations-need-to-be-defined-as-constants-or-passed-as-parameters) is misleading (or maybe just plain wrong), no?. We should probably rewrite that with an example using a callable. I think the MWE here would suffice.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458492186
https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458703878:22,Modifiability,variab,variables,22,"It's true that global variables have to be defined as `const`, but it's also true that global variables are never ""required"" (they just may be more convenient than defining a callable struct)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458703878
https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458703878:94,Modifiability,variab,variables,94,"It's true that global variables have to be defined as `const`, but it's also true that global variables are never ""required"" (they just may be more convenient than defining a callable struct)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458703878
https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458718824:76,Deployability,deploy,deploy,76,"The difficulty is that there's no end to useful tricks one might be able to deploy if they get a little more proficient with Julia. I'm learning new things all the time too. I'd rather put this kind of stuff in the wiki rather than putting stuff in the docs that's not really Oceananigans-specific (these things fall more in to the category ""general Julia knowledge applicable to Oceananigans""). In fact I thought we were moving towards that but it does seem like there's still some overlap between that simulation tips section and the wiki now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458718824
https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458718824:136,Usability,learn,learning,136,"The difficulty is that there's no end to useful tricks one might be able to deploy if they get a little more proficient with Julia. I'm learning new things all the time too. I'd rather put this kind of stuff in the wiki rather than putting stuff in the docs that's not really Oceananigans-specific (these things fall more in to the category ""general Julia knowledge applicable to Oceananigans""). In fact I thought we were moving towards that but it does seem like there's still some overlap between that simulation tips section and the wiki now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2960#issuecomment-1458718824
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460567603:20,Availability,error,errors,20,"How do we deal with errors of this kind in the doctests?:. ```;   | │;   | │ diff =;   | │ ┌ Warning: The behavior of `gravity_unit_vector` changed in version 0.80.0.;   | │ │ Prior to this version, `gravity_unit_vector` indicated the direction _opposite_ to gravity.;   | │ │ After version 0.80.0, `gravity_unit_vector` indicates the direction of the gravitional acceleration;   | │ └ @ Oceananigans.BuoyancyModels ~/repos/Oceananigans.jl/src/BuoyancyModels/buoyancy.jl:44;   | │ ~/builds/tartarus-13/clima/oceananigans/src/BuoyancyModels/buoyancy.jl:48; ...; ```. i.e. when the warning message is the same but it's thrown in a different machine to the path to the warning-generation line is different. I remember there was a relatively simple way to deal with this, but I can't find it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460567603
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460567603:588,Integrability,message,message,588,"How do we deal with errors of this kind in the doctests?:. ```;   | │;   | │ diff =;   | │ ┌ Warning: The behavior of `gravity_unit_vector` changed in version 0.80.0.;   | │ │ Prior to this version, `gravity_unit_vector` indicated the direction _opposite_ to gravity.;   | │ │ After version 0.80.0, `gravity_unit_vector` indicates the direction of the gravitional acceleration;   | │ └ @ Oceananigans.BuoyancyModels ~/repos/Oceananigans.jl/src/BuoyancyModels/buoyancy.jl:44;   | │ ~/builds/tartarus-13/clima/oceananigans/src/BuoyancyModels/buoyancy.jl:48; ...; ```. i.e. when the warning message is the same but it's thrown in a different machine to the path to the warning-generation line is different. I remember there was a relatively simple way to deal with this, but I can't find it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460567603
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460567603:738,Usability,simpl,simple,738,"How do we deal with errors of this kind in the doctests?:. ```;   | │;   | │ diff =;   | │ ┌ Warning: The behavior of `gravity_unit_vector` changed in version 0.80.0.;   | │ │ Prior to this version, `gravity_unit_vector` indicated the direction _opposite_ to gravity.;   | │ │ After version 0.80.0, `gravity_unit_vector` indicates the direction of the gravitional acceleration;   | │ └ @ Oceananigans.BuoyancyModels ~/repos/Oceananigans.jl/src/BuoyancyModels/buoyancy.jl:44;   | │ ~/builds/tartarus-13/clima/oceananigans/src/BuoyancyModels/buoyancy.jl:48; ...; ```. i.e. when the warning message is the same but it's thrown in a different machine to the path to the warning-generation line is different. I remember there was a relatively simple way to deal with this, but I can't find it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460567603
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460574200:22,Availability,error,errors,22,"> How do we deal with errors of this kind in the doctests?:; > ; > ```; >   | │; >   | │ diff =; >   | │ ┌ Warning: The behavior of `gravity_unit_vector` changed in version 0.80.0.; >   | │ │ Prior to this version, `gravity_unit_vector` indicated the direction _opposite_ to gravity.; >   | │ │ After version 0.80.0, `gravity_unit_vector` indicates the direction of the gravitional acceleration; >   | │ └ @ Oceananigans.BuoyancyModels ~/repos/Oceananigans.jl/src/BuoyancyModels/buoyancy.jl:44; >   | │ ~/builds/tartarus-13/clima/oceananigans/src/BuoyancyModels/buoyancy.jl:48; > ...; > ```; > ; > i.e. when the warning message is the same but it's thrown in a different machine to the path to the warning-generation line is different.; > ; > I remember there was a relatively simple way to deal with this, but I can't find it. Damn... I remember the issue... Something with filter doctests. I can try to sort it out. Ignore it for now :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460574200
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460574200:620,Integrability,message,message,620,"> How do we deal with errors of this kind in the doctests?:; > ; > ```; >   | │; >   | │ diff =; >   | │ ┌ Warning: The behavior of `gravity_unit_vector` changed in version 0.80.0.; >   | │ │ Prior to this version, `gravity_unit_vector` indicated the direction _opposite_ to gravity.; >   | │ │ After version 0.80.0, `gravity_unit_vector` indicates the direction of the gravitional acceleration; >   | │ └ @ Oceananigans.BuoyancyModels ~/repos/Oceananigans.jl/src/BuoyancyModels/buoyancy.jl:44; >   | │ ~/builds/tartarus-13/clima/oceananigans/src/BuoyancyModels/buoyancy.jl:48; > ...; > ```; > ; > i.e. when the warning message is the same but it's thrown in a different machine to the path to the warning-generation line is different.; > ; > I remember there was a relatively simple way to deal with this, but I can't find it. Damn... I remember the issue... Something with filter doctests. I can try to sort it out. Ignore it for now :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460574200
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460574200:777,Usability,simpl,simple,777,"> How do we deal with errors of this kind in the doctests?:; > ; > ```; >   | │; >   | │ diff =; >   | │ ┌ Warning: The behavior of `gravity_unit_vector` changed in version 0.80.0.; >   | │ │ Prior to this version, `gravity_unit_vector` indicated the direction _opposite_ to gravity.; >   | │ │ After version 0.80.0, `gravity_unit_vector` indicates the direction of the gravitional acceleration; >   | │ └ @ Oceananigans.BuoyancyModels ~/repos/Oceananigans.jl/src/BuoyancyModels/buoyancy.jl:44; >   | │ ~/builds/tartarus-13/clima/oceananigans/src/BuoyancyModels/buoyancy.jl:48; > ...; > ```; > ; > i.e. when the warning message is the same but it's thrown in a different machine to the path to the warning-generation line is different.; > ; > I remember there was a relatively simple way to deal with this, but I can't find it. Damn... I remember the issue... Something with filter doctests. I can try to sort it out. Ignore it for now :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460574200
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460612239:8,Integrability,message,message,8,Is that message going to display _every_ time a model is created?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460612239
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460733936:10,Integrability,message,message,10,> Is that message going to display _every_ time a model is created?. No. Only when a model is created with `gravity_unit_vector != NegativeZDirection()`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1460733936
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474291217:133,Deployability,release,release,133,"We can add the doctest later, with the filter or without. Adding the doctest is not a breaking change. But this PR is and we want to release v0.80",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474291217
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474384986:28,Testability,test,test,28,@tomchor I'll merge this if test pass -- ok?. btw docs take tooo long to build... like 4hrs?!! I've noticed this lately. We should look into this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474384986
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474972098:273,Testability,test,test,273,"> I'm really confused with why is stuck now. We drop the doctests so warning or info what would be the problem there...?; > ; > I'm wondering whether our changes provoke long compilation times?. Yeah I'm confused to. I haven't been able to compile these locally so I can't test it locally, but I just changed the `@warn` instances to `@info` and maybe that'll do it. I don't see how the changes introduced here could spur such long compilation times though. Doctests have run for more than a day!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474972098
https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1475113508:4,Testability,test,tests,4,the tests don't even pass locally... even with the warning -> info... even if I convert them to examples; at this point I am worn out... perhaps I'll return to it later in the week. we might register v0.80.0 and whenever this merges we bump up another version? @glwagner?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1475113508
https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460696721:56,Deployability,release,release,56,Looks good to me. It's breaking change so bump up minor release..,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460696721
https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460740439:58,Deployability,release,release,58,"> Looks good to me. It's breaking change so bump up minor release.. At the moment we have 3 PRs that are breaking releases: this one, https://github.com/CliMA/Oceananigans.jl/pull/2963, and https://github.com/CliMA/Oceananigans.jl/pull/2842. If it looks like all of them are going to be merged, can we coordinate and tag/register v0.80.0 only after all these are merged?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460740439
https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460740439:114,Deployability,release,releases,114,"> Looks good to me. It's breaking change so bump up minor release.. At the moment we have 3 PRs that are breaking releases: this one, https://github.com/CliMA/Oceananigans.jl/pull/2963, and https://github.com/CliMA/Oceananigans.jl/pull/2842. If it looks like all of them are going to be merged, can we coordinate and tag/register v0.80.0 only after all these are merged?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1460740439
https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1461215465:5,Testability,test,tests,5,some tests didn't make it through,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1461215465
https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1469342633:16,Deployability,release,release,16,No need to bump release since we didn’t register v0.80.0 yet,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2964#issuecomment-1469342633
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034:14,Testability,test,test,14,Check out the test for file splitting with `JLD2OutputWriter`:. https://github.com/CliMA/Oceananigans.jl/blob/2cd91ab4f42e528981422171d6ab2f323a1ce044/test/test_jld2_output_writer.jl#L42. We'll want a practically identical test for a `max_filesize` feature with `NetCDFOutputWriter`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034:151,Testability,test,test,151,Check out the test for file splitting with `JLD2OutputWriter`:. https://github.com/CliMA/Oceananigans.jl/blob/2cd91ab4f42e528981422171d6ab2f323a1ce044/test/test_jld2_output_writer.jl#L42. We'll want a practically identical test for a `max_filesize` feature with `NetCDFOutputWriter`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034:223,Testability,test,test,223,Check out the test for file splitting with `JLD2OutputWriter`:. https://github.com/CliMA/Oceananigans.jl/blob/2cd91ab4f42e528981422171d6ab2f323a1ce044/test/test_jld2_output_writer.jl#L42. We'll want a practically identical test for a `max_filesize` feature with `NetCDFOutputWriter`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1994081895:172,Testability,test,test,172,"Hello, I'm interested in this feature. I've managed to implement the same feature @glwagner suggested of `max_filesize` within the `NetCDFOutputWriter`, in addition to its test. I'm currently doing the testing of the changes, and if it works, I will submit a PR. Currently the code is in my fork of Oceananigans (https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_split)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1994081895
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1994081895:202,Testability,test,testing,202,"Hello, I'm interested in this feature. I've managed to implement the same feature @glwagner suggested of `max_filesize` within the `NetCDFOutputWriter`, in addition to its test. I'm currently doing the testing of the changes, and if it works, I will submit a PR. Currently the code is in my fork of Oceananigans (https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_split)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1994081895
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781:1126,Energy Efficiency,schedul,schedule,1126,"> Since I want to fully understand the way Julia works, I added also the feature of splitting files based on time.; > ; > However, this feature will not work well when computing averages `AveragedTimeInterval`, since what I coded uses the difference between the times store in the `NCDatasets` to define if the difference between the first and last time stored are equal or larger to the user defined `TimeInterval()`, thus requiring to split the file.; > ; > https://github.com/josuemtzmo/Oceananigans.jl/blob/99b69720d0743fe7af6118bc3352cc7139d84408/src/OutputWriters/netcdf_output_writer.jl#L489-L505; > ; > Do you have any suggestion on how to approach this? or how do you envision splitting files based on time?; > ; > I will not merge the changes to the other PR, since I think this time splitting a bit more thought. The code is currently at: https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_t_split. Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`? . I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer. Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. This isn't really a Julia-specific issue, it's more of a code design issue I think...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781:1395,Energy Efficiency,schedul,schedules,1395,"> Since I want to fully understand the way Julia works, I added also the feature of splitting files based on time.; > ; > However, this feature will not work well when computing averages `AveragedTimeInterval`, since what I coded uses the difference between the times store in the `NCDatasets` to define if the difference between the first and last time stored are equal or larger to the user defined `TimeInterval()`, thus requiring to split the file.; > ; > https://github.com/josuemtzmo/Oceananigans.jl/blob/99b69720d0743fe7af6118bc3352cc7139d84408/src/OutputWriters/netcdf_output_writer.jl#L489-L505; > ; > Do you have any suggestion on how to approach this? or how do you envision splitting files based on time?; > ; > I will not merge the changes to the other PR, since I think this time splitting a bit more thought. The code is currently at: https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_t_split. Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`? . I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer. Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. This isn't really a Julia-specific issue, it's more of a code design issue I think...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781:1444,Energy Efficiency,schedul,schedules,1444,"> Since I want to fully understand the way Julia works, I added also the feature of splitting files based on time.; > ; > However, this feature will not work well when computing averages `AveragedTimeInterval`, since what I coded uses the difference between the times store in the `NCDatasets` to define if the difference between the first and last time stored are equal or larger to the user defined `TimeInterval()`, thus requiring to split the file.; > ; > https://github.com/josuemtzmo/Oceananigans.jl/blob/99b69720d0743fe7af6118bc3352cc7139d84408/src/OutputWriters/netcdf_output_writer.jl#L489-L505; > ; > Do you have any suggestion on how to approach this? or how do you envision splitting files based on time?; > ; > I will not merge the changes to the other PR, since I think this time splitting a bit more thought. The code is currently at: https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_t_split. Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`? . I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer. Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. This isn't really a Julia-specific issue, it's more of a code design issue I think...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781:1619,Energy Efficiency,schedul,schedules,1619,"> Since I want to fully understand the way Julia works, I added also the feature of splitting files based on time.; > ; > However, this feature will not work well when computing averages `AveragedTimeInterval`, since what I coded uses the difference between the times store in the `NCDatasets` to define if the difference between the first and last time stored are equal or larger to the user defined `TimeInterval()`, thus requiring to split the file.; > ; > https://github.com/josuemtzmo/Oceananigans.jl/blob/99b69720d0743fe7af6118bc3352cc7139d84408/src/OutputWriters/netcdf_output_writer.jl#L489-L505; > ; > Do you have any suggestion on how to approach this? or how do you envision splitting files based on time?; > ; > I will not merge the changes to the other PR, since I think this time splitting a bit more thought. The code is currently at: https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_t_split. Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`? . I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer. Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. This isn't really a Julia-specific issue, it's more of a code design issue I think...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781:1639,Energy Efficiency,schedul,schedule,1639,"> Since I want to fully understand the way Julia works, I added also the feature of splitting files based on time.; > ; > However, this feature will not work well when computing averages `AveragedTimeInterval`, since what I coded uses the difference between the times store in the `NCDatasets` to define if the difference between the first and last time stored are equal or larger to the user defined `TimeInterval()`, thus requiring to split the file.; > ; > https://github.com/josuemtzmo/Oceananigans.jl/blob/99b69720d0743fe7af6118bc3352cc7139d84408/src/OutputWriters/netcdf_output_writer.jl#L489-L505; > ; > Do you have any suggestion on how to approach this? or how do you envision splitting files based on time?; > ; > I will not merge the changes to the other PR, since I think this time splitting a bit more thought. The code is currently at: https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_t_split. Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`? . I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer. Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. This isn't really a Julia-specific issue, it's more of a code design issue I think...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997777781
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:462,Energy Efficiency,schedul,scheduler,462,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:647,Energy Efficiency,schedul,schedule,647,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:1215,Energy Efficiency,schedul,schedules,1215,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:1264,Energy Efficiency,schedul,schedules,1264,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:1446,Energy Efficiency,schedul,schedules,1446,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:1466,Energy Efficiency,schedul,schedule,1466,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:1648,Energy Efficiency,schedul,schedules,1648,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:589,Testability,test,tested,589,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1318,Deployability,update,updated,1318," get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, fil",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:3,Energy Efficiency,schedul,schedule,3,"A ""schedule"" is a function or callable object with a method. ```julia; schedule(model); ```. that returns true or false based on a criterion. `true` means ""do something"". The cleanest way to get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:71,Energy Efficiency,schedul,schedule,71,"A ""schedule"" is a function or callable object with a method. ```julia; schedule(model); ```. that returns true or false based on a criterion. `true` means ""do something"". The cleanest way to get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:348,Energy Efficiency,schedul,schedule,348,"A ""schedule"" is a function or callable object with a method. ```julia; schedule(model); ```. that returns true or false based on a criterion. `true` means ""do something"". The cleanest way to get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:792,Energy Efficiency,schedul,schedule,792,"A ""schedule"" is a function or callable object with a method. ```julia; schedule(model); ```. that returns true or false based on a criterion. `true` means ""do something"". The cleanest way to get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:811,Energy Efficiency,schedul,schedules,811,"A ""schedule"" is a function or callable object with a method. ```julia; schedule(model); ```. that returns true or false based on a criterion. `true` means ""do something"". The cleanest way to get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1131,Energy Efficiency,schedul,schedules,1131," get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, fil",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1299,Energy Efficiency,schedul,schedule,1299," get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, fil",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1372,Energy Efficiency,schedul,schedules,1372,"ore generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, filename) ; update_schedule!(schedule, filepath); ```. Make sense?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1618,Energy Efficiency,schedul,schedule,1618,"ore generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, filename) ; update_schedule!(schedule, filepath); ```. Make sense?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1662,Energy Efficiency,schedul,schedule,1662,"ore generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, filename) ; update_schedule!(schedule, filepath); ```. Make sense?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1700,Energy Efficiency,schedul,schedule,1700,"ore generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, filename) ; update_schedule!(schedule, filepath); ```. Make sense?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1766,Energy Efficiency,schedul,schedule,1766,"ore generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, filename) ; update_schedule!(schedule, filepath); ```. Make sense?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:2216,Energy Efficiency,schedul,schedule,2216,"ore generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, filename) ; update_schedule!(schedule, filepath); ```. Make sense?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:265,Integrability,interface,interface,265,"A ""schedule"" is a function or callable object with a method. ```julia; schedule(model); ```. that returns true or false based on a criterion. `true` means ""do something"". The cleanest way to get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1086,Integrability,interface,interface,1086," get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, fil",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1518,Integrability,interface,interface,1518,"ore generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, filename) ; update_schedule!(schedule, filepath); ```. Make sense?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:214,Modifiability,refactor,refactor,214,"A ""schedule"" is a function or callable object with a method. ```julia; schedule(model); ```. that returns true or false based on a criterion. `true` means ""do something"". The cleanest way to get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793:1159,Usability,user experience,user experience,1159," get this feature is to refactor the output writers to have a more generic interface for splitting. If we have a property called `file_splitting` that _is_ a schedule, then we can write. ```julia; NetCDFOutputWriter(model, outputs; file_splitting = TimeInterval(30days), ...); ```. Then the decision about whether to start a new file will change from. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L275. to. ```julia; writer.file_splitting(model) && start_next_file(model, writer) ; ```. Next, you will have to add a new schedule in `Utils/schedules.jl` that can split based on filesize:. ```julia; mutable struct FileSizeLargerThan <: AbstractSchedule; max_filesize :: Float64; path :: String; end. (fslt::FileSizeLargerThan)(model) = filesize(fslt.path) >= fslt.max_filesize; ```. Finally, you need to add a user interface for initializing and modifying the schedules to smooth out the user experience (for example, we don't want users to have to specify the file path more than once, and the file path that is checked by the schedule has to be updated). This will have to take two parts. In `Utils/schedules.jl`, a constructor:. ```julia; FileSizeLargerThan(max_filesize) = FileSizeLargerThan(max_filesize, """"); ```. Then in output writers, an interface to be used in both the model constructor and `write_output!`:. ```julia; update_schedule!(schedule, path) = nothing; update_schedule!(schedule::FileSizeLargerThan, path) = schedule.path = path; ```. This function `update_schedule!(writer.schedule, path)` then replaces this line. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L276. and also needs to be added in the output writer constructor so that. https://github.com/CliMA/Oceananigans.jl/blob/9f3f8e6d1469e570b0778f328ab864e879785ffd/src/OutputWriters/jld2_output_writer.jl#L176. becomes. ```julia; filepath = joinpath(dir, fil",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000029793
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000031454:19,Energy Efficiency,sustainab,sustainable,19,This is a lot more sustainable than adding new properties to every output writer every time we want to support splitting a file by a different criterion. It's a decent change to the user interface. I can help if you like.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000031454
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000031454:187,Integrability,interface,interface,187,This is a lot more sustainable than adding new properties to every output writer every time we want to support splitting a file by a different criterion. It's a decent change to the user interface. I can help if you like.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000031454
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000038293:49,Energy Efficiency,schedul,schedule,49,"Yes, that will be great. I will dive in into the schedule over the next few days!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000038293
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000127066:38,Integrability,interface,interface,38,"Ok, I'll open a PR that refactors the interface for file splitting.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000127066
https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000127066:24,Modifiability,refactor,refactors,24,"Ok, I'll open a PR that refactors the interface for file splitting.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-2000127066
https://github.com/CliMA/Oceananigans.jl/pull/2968#issuecomment-1480276183:259,Testability,test,tests,259,"> It's just that ""horizontally isotropic"" is not the same thing as ""isotropic"". What is misleading?. sorry, nvmd, I'm explaning myself poorly. Nothing is misleading anymore since I removed the word ""isotropic"" in the last commit. We're good to merge whenever tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2968#issuecomment-1480276183
https://github.com/CliMA/Oceananigans.jl/issues/2969#issuecomment-1466331362:409,Integrability,wrap,wrapped,409,"yeah, that interpolation operator is defined as ; ```; @inline ℑxᶜᵃᵃ(i, j, k, grid::AG{FT}, u) where FT = @inbounds FT(0.5) * (u[i, j, k] + u[i+1, j, k]); ```. so it assumes that the field to be interpolated is located at `Faces`. It should not be used on Centered fields.; I do not think we need fallbacks, the operators are not part of the public API and I am not sure we want them to be as they have to be wrapped around kernels",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2969#issuecomment-1466331362
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910:162,Energy Efficiency,reduce,reduced,162,"Shall we extend the `ShallowWaterModel` type to incorporate single- and multi-layer configs? What other properties does a multilayer shallow water type need? The reduced gravities that correspond to each interface is an obvious one... any other?. The number of layers could be a parameter of the type so we can dispatch on it in various methods. E.g.,. ```julia; mutable struct ShallowWaterModel{N, G, A<:AbstractArchitecture, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} <: AbstractModel{TS}; number_of_layers :: Int # Number of fluid layers; grid :: G # Grid of physical points on which `Model` is solved; architecture :: A # Computer `Architecture` on which `Model` is run; clock :: Clock{T} # Tracks iteration number and simulation time of `Model`; gravitational_acceleration :: GR # Gravitational acceleration; reduced_gravitational_acceleration :: RG # Reduced gravitational acceleration between for fluid interfaces; advection :: V # Advection scheme for velocities, mass and tracers; velocities :: U # Velocities in the shallow water model; coriolis :: R # Set of parameters for the background rotation rate of `Model`; forcing :: F # Container for forcing functions defined by the user; closure :: E # Diffusive 'turbulence closure' for all model fields; bathymetry :: B # Bathymetry/Topography for the model; solution :: Q # Container for transports `uh`, `vh`, and height `h`; tracers :: C # Container for tracer fields; diffusivity_fields :: K # Container for turbulent diffusivities; timestepper :: TS # Object containing timestepper fields and parameters; formulation :: FR # Either conservative or vector-invariant. function ShallowWaterModel(number_of_layers, grid, all_other_things...); arch = architecture(grid); return new{number_of_layers, typeof(G), typeof(arch), the_rest_of_parameters...}(number_of_layers, grid, arch, all_other_things...); end; end. const SingleLayerShallowWaterModel{N, G, A, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} = ShallowWaterModel{1, G, A, T, GR, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910:860,Energy Efficiency,Reduce,Reduced,860,"Shall we extend the `ShallowWaterModel` type to incorporate single- and multi-layer configs? What other properties does a multilayer shallow water type need? The reduced gravities that correspond to each interface is an obvious one... any other?. The number of layers could be a parameter of the type so we can dispatch on it in various methods. E.g.,. ```julia; mutable struct ShallowWaterModel{N, G, A<:AbstractArchitecture, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} <: AbstractModel{TS}; number_of_layers :: Int # Number of fluid layers; grid :: G # Grid of physical points on which `Model` is solved; architecture :: A # Computer `Architecture` on which `Model` is run; clock :: Clock{T} # Tracks iteration number and simulation time of `Model`; gravitational_acceleration :: GR # Gravitational acceleration; reduced_gravitational_acceleration :: RG # Reduced gravitational acceleration between for fluid interfaces; advection :: V # Advection scheme for velocities, mass and tracers; velocities :: U # Velocities in the shallow water model; coriolis :: R # Set of parameters for the background rotation rate of `Model`; forcing :: F # Container for forcing functions defined by the user; closure :: E # Diffusive 'turbulence closure' for all model fields; bathymetry :: B # Bathymetry/Topography for the model; solution :: Q # Container for transports `uh`, `vh`, and height `h`; tracers :: C # Container for tracer fields; diffusivity_fields :: K # Container for turbulent diffusivities; timestepper :: TS # Object containing timestepper fields and parameters; formulation :: FR # Either conservative or vector-invariant. function ShallowWaterModel(number_of_layers, grid, all_other_things...); arch = architecture(grid); return new{number_of_layers, typeof(G), typeof(arch), the_rest_of_parameters...}(number_of_layers, grid, arch, all_other_things...); end; end. const SingleLayerShallowWaterModel{N, G, A, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} = ShallowWaterModel{1, G, A, T, GR, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910:204,Integrability,interface,interface,204,"Shall we extend the `ShallowWaterModel` type to incorporate single- and multi-layer configs? What other properties does a multilayer shallow water type need? The reduced gravities that correspond to each interface is an obvious one... any other?. The number of layers could be a parameter of the type so we can dispatch on it in various methods. E.g.,. ```julia; mutable struct ShallowWaterModel{N, G, A<:AbstractArchitecture, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} <: AbstractModel{TS}; number_of_layers :: Int # Number of fluid layers; grid :: G # Grid of physical points on which `Model` is solved; architecture :: A # Computer `Architecture` on which `Model` is run; clock :: Clock{T} # Tracks iteration number and simulation time of `Model`; gravitational_acceleration :: GR # Gravitational acceleration; reduced_gravitational_acceleration :: RG # Reduced gravitational acceleration between for fluid interfaces; advection :: V # Advection scheme for velocities, mass and tracers; velocities :: U # Velocities in the shallow water model; coriolis :: R # Set of parameters for the background rotation rate of `Model`; forcing :: F # Container for forcing functions defined by the user; closure :: E # Diffusive 'turbulence closure' for all model fields; bathymetry :: B # Bathymetry/Topography for the model; solution :: Q # Container for transports `uh`, `vh`, and height `h`; tracers :: C # Container for tracer fields; diffusivity_fields :: K # Container for turbulent diffusivities; timestepper :: TS # Object containing timestepper fields and parameters; formulation :: FR # Either conservative or vector-invariant. function ShallowWaterModel(number_of_layers, grid, all_other_things...); arch = architecture(grid); return new{number_of_layers, typeof(G), typeof(arch), the_rest_of_parameters...}(number_of_layers, grid, arch, all_other_things...); end; end. const SingleLayerShallowWaterModel{N, G, A, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} = ShallowWaterModel{1, G, A, T, GR, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910:913,Integrability,interface,interfaces,913,"Shall we extend the `ShallowWaterModel` type to incorporate single- and multi-layer configs? What other properties does a multilayer shallow water type need? The reduced gravities that correspond to each interface is an obvious one... any other?. The number of layers could be a parameter of the type so we can dispatch on it in various methods. E.g.,. ```julia; mutable struct ShallowWaterModel{N, G, A<:AbstractArchitecture, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} <: AbstractModel{TS}; number_of_layers :: Int # Number of fluid layers; grid :: G # Grid of physical points on which `Model` is solved; architecture :: A # Computer `Architecture` on which `Model` is run; clock :: Clock{T} # Tracks iteration number and simulation time of `Model`; gravitational_acceleration :: GR # Gravitational acceleration; reduced_gravitational_acceleration :: RG # Reduced gravitational acceleration between for fluid interfaces; advection :: V # Advection scheme for velocities, mass and tracers; velocities :: U # Velocities in the shallow water model; coriolis :: R # Set of parameters for the background rotation rate of `Model`; forcing :: F # Container for forcing functions defined by the user; closure :: E # Diffusive 'turbulence closure' for all model fields; bathymetry :: B # Bathymetry/Topography for the model; solution :: Q # Container for transports `uh`, `vh`, and height `h`; tracers :: C # Container for tracer fields; diffusivity_fields :: K # Container for turbulent diffusivities; timestepper :: TS # Object containing timestepper fields and parameters; formulation :: FR # Either conservative or vector-invariant. function ShallowWaterModel(number_of_layers, grid, all_other_things...); arch = architecture(grid); return new{number_of_layers, typeof(G), typeof(arch), the_rest_of_parameters...}(number_of_layers, grid, arch, all_other_things...); end; end. const SingleLayerShallowWaterModel{N, G, A, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} = ShallowWaterModel{1, G, A, T, GR, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910:9,Modifiability,extend,extend,9,"Shall we extend the `ShallowWaterModel` type to incorporate single- and multi-layer configs? What other properties does a multilayer shallow water type need? The reduced gravities that correspond to each interface is an obvious one... any other?. The number of layers could be a parameter of the type so we can dispatch on it in various methods. E.g.,. ```julia; mutable struct ShallowWaterModel{N, G, A<:AbstractArchitecture, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} <: AbstractModel{TS}; number_of_layers :: Int # Number of fluid layers; grid :: G # Grid of physical points on which `Model` is solved; architecture :: A # Computer `Architecture` on which `Model` is run; clock :: Clock{T} # Tracks iteration number and simulation time of `Model`; gravitational_acceleration :: GR # Gravitational acceleration; reduced_gravitational_acceleration :: RG # Reduced gravitational acceleration between for fluid interfaces; advection :: V # Advection scheme for velocities, mass and tracers; velocities :: U # Velocities in the shallow water model; coriolis :: R # Set of parameters for the background rotation rate of `Model`; forcing :: F # Container for forcing functions defined by the user; closure :: E # Diffusive 'turbulence closure' for all model fields; bathymetry :: B # Bathymetry/Topography for the model; solution :: Q # Container for transports `uh`, `vh`, and height `h`; tracers :: C # Container for tracer fields; diffusivity_fields :: K # Container for turbulent diffusivities; timestepper :: TS # Object containing timestepper fields and parameters; formulation :: FR # Either conservative or vector-invariant. function ShallowWaterModel(number_of_layers, grid, all_other_things...); arch = architecture(grid); return new{number_of_layers, typeof(G), typeof(arch), the_rest_of_parameters...}(number_of_layers, grid, arch, all_other_things...); end; end. const SingleLayerShallowWaterModel{N, G, A, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} = ShallowWaterModel{1, G, A, T, GR, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910:84,Modifiability,config,configs,84,"Shall we extend the `ShallowWaterModel` type to incorporate single- and multi-layer configs? What other properties does a multilayer shallow water type need? The reduced gravities that correspond to each interface is an obvious one... any other?. The number of layers could be a parameter of the type so we can dispatch on it in various methods. E.g.,. ```julia; mutable struct ShallowWaterModel{N, G, A<:AbstractArchitecture, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} <: AbstractModel{TS}; number_of_layers :: Int # Number of fluid layers; grid :: G # Grid of physical points on which `Model` is solved; architecture :: A # Computer `Architecture` on which `Model` is run; clock :: Clock{T} # Tracks iteration number and simulation time of `Model`; gravitational_acceleration :: GR # Gravitational acceleration; reduced_gravitational_acceleration :: RG # Reduced gravitational acceleration between for fluid interfaces; advection :: V # Advection scheme for velocities, mass and tracers; velocities :: U # Velocities in the shallow water model; coriolis :: R # Set of parameters for the background rotation rate of `Model`; forcing :: F # Container for forcing functions defined by the user; closure :: E # Diffusive 'turbulence closure' for all model fields; bathymetry :: B # Bathymetry/Topography for the model; solution :: Q # Container for transports `uh`, `vh`, and height `h`; tracers :: C # Container for tracer fields; diffusivity_fields :: K # Container for turbulent diffusivities; timestepper :: TS # Object containing timestepper fields and parameters; formulation :: FR # Either conservative or vector-invariant. function ShallowWaterModel(number_of_layers, grid, all_other_things...); arch = architecture(grid); return new{number_of_layers, typeof(G), typeof(arch), the_rest_of_parameters...}(number_of_layers, grid, arch, all_other_things...); end; end. const SingleLayerShallowWaterModel{N, G, A, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} = ShallowWaterModel{1, G, A, T, GR, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910:261,Modifiability,layers,layers,261,"Shall we extend the `ShallowWaterModel` type to incorporate single- and multi-layer configs? What other properties does a multilayer shallow water type need? The reduced gravities that correspond to each interface is an obvious one... any other?. The number of layers could be a parameter of the type so we can dispatch on it in various methods. E.g.,. ```julia; mutable struct ShallowWaterModel{N, G, A<:AbstractArchitecture, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} <: AbstractModel{TS}; number_of_layers :: Int # Number of fluid layers; grid :: G # Grid of physical points on which `Model` is solved; architecture :: A # Computer `Architecture` on which `Model` is run; clock :: Clock{T} # Tracks iteration number and simulation time of `Model`; gravitational_acceleration :: GR # Gravitational acceleration; reduced_gravitational_acceleration :: RG # Reduced gravitational acceleration between for fluid interfaces; advection :: V # Advection scheme for velocities, mass and tracers; velocities :: U # Velocities in the shallow water model; coriolis :: R # Set of parameters for the background rotation rate of `Model`; forcing :: F # Container for forcing functions defined by the user; closure :: E # Diffusive 'turbulence closure' for all model fields; bathymetry :: B # Bathymetry/Topography for the model; solution :: Q # Container for transports `uh`, `vh`, and height `h`; tracers :: C # Container for tracer fields; diffusivity_fields :: K # Container for turbulent diffusivities; timestepper :: TS # Object containing timestepper fields and parameters; formulation :: FR # Either conservative or vector-invariant. function ShallowWaterModel(number_of_layers, grid, all_other_things...); arch = architecture(grid); return new{number_of_layers, typeof(G), typeof(arch), the_rest_of_parameters...}(number_of_layers, grid, arch, all_other_things...); end; end. const SingleLayerShallowWaterModel{N, G, A, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} = ShallowWaterModel{1, G, A, T, GR, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910:537,Modifiability,layers,layers,537,"Shall we extend the `ShallowWaterModel` type to incorporate single- and multi-layer configs? What other properties does a multilayer shallow water type need? The reduced gravities that correspond to each interface is an obvious one... any other?. The number of layers could be a parameter of the type so we can dispatch on it in various methods. E.g.,. ```julia; mutable struct ShallowWaterModel{N, G, A<:AbstractArchitecture, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} <: AbstractModel{TS}; number_of_layers :: Int # Number of fluid layers; grid :: G # Grid of physical points on which `Model` is solved; architecture :: A # Computer `Architecture` on which `Model` is run; clock :: Clock{T} # Tracks iteration number and simulation time of `Model`; gravitational_acceleration :: GR # Gravitational acceleration; reduced_gravitational_acceleration :: RG # Reduced gravitational acceleration between for fluid interfaces; advection :: V # Advection scheme for velocities, mass and tracers; velocities :: U # Velocities in the shallow water model; coriolis :: R # Set of parameters for the background rotation rate of `Model`; forcing :: F # Container for forcing functions defined by the user; closure :: E # Diffusive 'turbulence closure' for all model fields; bathymetry :: B # Bathymetry/Topography for the model; solution :: Q # Container for transports `uh`, `vh`, and height `h`; tracers :: C # Container for tracer fields; diffusivity_fields :: K # Container for turbulent diffusivities; timestepper :: TS # Object containing timestepper fields and parameters; formulation :: FR # Either conservative or vector-invariant. function ShallowWaterModel(number_of_layers, grid, all_other_things...); arch = architecture(grid); return new{number_of_layers, typeof(G), typeof(arch), the_rest_of_parameters...}(number_of_layers, grid, arch, all_other_things...); end; end. const SingleLayerShallowWaterModel{N, G, A, T, GR, RG, V, U, R, F, E, B, Q, C, K, TS, FR} = ShallowWaterModel{1, G, A, T, GR, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469071910
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469180135:116,Availability,redundant,redundant,116,"I'm not familiar with the Oceananigans code writing practice, but it looks like the parameter `number_of_layers` is redundant as it is already present in `grid.Nz`. Is the parameter added in a case where the user inputs the number of layers explicitly?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469180135
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469180135:234,Modifiability,layers,layers,234,"I'm not familiar with the Oceananigans code writing practice, but it looks like the parameter `number_of_layers` is redundant as it is already present in `grid.Nz`. Is the parameter added in a case where the user inputs the number of layers explicitly?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469180135
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469180135:116,Safety,redund,redundant,116,"I'm not familiar with the Oceananigans code writing practice, but it looks like the parameter `number_of_layers` is redundant as it is already present in `grid.Nz`. Is the parameter added in a case where the user inputs the number of layers explicitly?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469180135
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127:721,Energy Efficiency,reduce,reduces,721,"It's just a suggestion... Perhaps it's not needed. But having it as a parameter of the type could be useful, even if the parameter is the same value as `grid.Nz` because if it's part of type you can write methods that do different things based on the number of layers your model has. E.g.,. ```Julia; function compute_this_and_that(model::ShallowWaterModel{1}); a = 1 # simple calculation for single-layer models; return a; end. function compute_this_and_that(model::ShallowWaterModel); number_of_layers = model.number_of_layers; a = sum(rand(number_of_layers)) # more complicated stuff only needed for multi-layer models; return a; end; ```. This way we don't use `if number_of_layers > 1; do this; else; do that` which reduces performance because the compiler has to compile all cases and check every time the value of layers and do this or the other....",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127:261,Modifiability,layers,layers,261,"It's just a suggestion... Perhaps it's not needed. But having it as a parameter of the type could be useful, even if the parameter is the same value as `grid.Nz` because if it's part of type you can write methods that do different things based on the number of layers your model has. E.g.,. ```Julia; function compute_this_and_that(model::ShallowWaterModel{1}); a = 1 # simple calculation for single-layer models; return a; end. function compute_this_and_that(model::ShallowWaterModel); number_of_layers = model.number_of_layers; a = sum(rand(number_of_layers)) # more complicated stuff only needed for multi-layer models; return a; end; ```. This way we don't use `if number_of_layers > 1; do this; else; do that` which reduces performance because the compiler has to compile all cases and check every time the value of layers and do this or the other....",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127:821,Modifiability,layers,layers,821,"It's just a suggestion... Perhaps it's not needed. But having it as a parameter of the type could be useful, even if the parameter is the same value as `grid.Nz` because if it's part of type you can write methods that do different things based on the number of layers your model has. E.g.,. ```Julia; function compute_this_and_that(model::ShallowWaterModel{1}); a = 1 # simple calculation for single-layer models; return a; end. function compute_this_and_that(model::ShallowWaterModel); number_of_layers = model.number_of_layers; a = sum(rand(number_of_layers)) # more complicated stuff only needed for multi-layer models; return a; end; ```. This way we don't use `if number_of_layers > 1; do this; else; do that` which reduces performance because the compiler has to compile all cases and check every time the value of layers and do this or the other....",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127:729,Performance,perform,performance,729,"It's just a suggestion... Perhaps it's not needed. But having it as a parameter of the type could be useful, even if the parameter is the same value as `grid.Nz` because if it's part of type you can write methods that do different things based on the number of layers your model has. E.g.,. ```Julia; function compute_this_and_that(model::ShallowWaterModel{1}); a = 1 # simple calculation for single-layer models; return a; end. function compute_this_and_that(model::ShallowWaterModel); number_of_layers = model.number_of_layers; a = sum(rand(number_of_layers)) # more complicated stuff only needed for multi-layer models; return a; end; ```. This way we don't use `if number_of_layers > 1; do this; else; do that` which reduces performance because the compiler has to compile all cases and check every time the value of layers and do this or the other....",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127:370,Usability,simpl,simple,370,"It's just a suggestion... Perhaps it's not needed. But having it as a parameter of the type could be useful, even if the parameter is the same value as `grid.Nz` because if it's part of type you can write methods that do different things based on the number of layers your model has. E.g.,. ```Julia; function compute_this_and_that(model::ShallowWaterModel{1}); a = 1 # simple calculation for single-layer models; return a; end. function compute_this_and_that(model::ShallowWaterModel); number_of_layers = model.number_of_layers; a = sum(rand(number_of_layers)) # more complicated stuff only needed for multi-layer models; return a; end; ```. This way we don't use `if number_of_layers > 1; do this; else; do that` which reduces performance because the compiler has to compile all cases and check every time the value of layers and do this or the other....",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1469188127
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471462772:231,Energy Efficiency,reduce,reduced,231,"Before proceeding further, I guess we should discuss a bit on whether we want a single parameter for gravitational acceleration (`effective_gravitational_acceleration`, which can encapsulate both gravitational acceleration `g` and reduced gravity `g'` terms) or two parameters (one for `g` and `g'` each), with Navid's code above an example of the latter. I am inclined towards the former as I feel it's cleaner (scientifically and for coding purposes), but happy to go either ways.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471462772
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937:233,Energy Efficiency,reduce,reduced,233,"> Before proceeding further, I guess we should discuss a bit on whether we want a single parameter for gravitational acceleration (`effective_gravitational_acceleration`, which can encapsulate both gravitational acceleration `g` and reduced gravity `g'` terms) or two parameters (one for `g` and `g'` each), with Navid's code above an example of the latter. I am inclined towards the former as I feel it's cleaner (scientifically and for coding purposes), but happy to go either ways. I didn't really think through my code above so don't pay too much attention to it. :); It was just a placeholder to demonstrate about parametric types. But I don't understand exactly what you suggest. `gravitational_acceleration` is a number, and it the same regardless of the number of layers you have. It's the acceleration that the top-layer surface feels (given that we use the approximation that `ρ_air ≪ ρ_fluid`. The reduced gravities `g'_{k+1/2} = g * (ρ_layer_k+1 - ρ_layer_k) / ρ_layer_k+1` are the gravitational accelerations each of the fluid interfaces feel. So `g'` is a Tuple of `k-1` numbers, where `k` is the number of layers, right? And this parameter is irrelevant for the SingleLayerModel. Were you suggesting to combine these in a single `k`-long tuple, e.g.,. ```julia; gravitational_acceleration .* (1, (ρ[k] - ρ[k-1]) / ρ[k-1], (ρ[k-1] - ρ[k-2]) / ρ[k-2], ..., (ρ[2] - ρ[1]) / ρ[1] ); ```; which will become a number for single layers?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937:909,Energy Efficiency,reduce,reduced,909,"> Before proceeding further, I guess we should discuss a bit on whether we want a single parameter for gravitational acceleration (`effective_gravitational_acceleration`, which can encapsulate both gravitational acceleration `g` and reduced gravity `g'` terms) or two parameters (one for `g` and `g'` each), with Navid's code above an example of the latter. I am inclined towards the former as I feel it's cleaner (scientifically and for coding purposes), but happy to go either ways. I didn't really think through my code above so don't pay too much attention to it. :); It was just a placeholder to demonstrate about parametric types. But I don't understand exactly what you suggest. `gravitational_acceleration` is a number, and it the same regardless of the number of layers you have. It's the acceleration that the top-layer surface feels (given that we use the approximation that `ρ_air ≪ ρ_fluid`. The reduced gravities `g'_{k+1/2} = g * (ρ_layer_k+1 - ρ_layer_k) / ρ_layer_k+1` are the gravitational accelerations each of the fluid interfaces feel. So `g'` is a Tuple of `k-1` numbers, where `k` is the number of layers, right? And this parameter is irrelevant for the SingleLayerModel. Were you suggesting to combine these in a single `k`-long tuple, e.g.,. ```julia; gravitational_acceleration .* (1, (ρ[k] - ρ[k-1]) / ρ[k-1], (ρ[k-1] - ρ[k-2]) / ρ[k-2], ..., (ρ[2] - ρ[1]) / ρ[1] ); ```; which will become a number for single layers?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937:1040,Integrability,interface,interfaces,1040,"> Before proceeding further, I guess we should discuss a bit on whether we want a single parameter for gravitational acceleration (`effective_gravitational_acceleration`, which can encapsulate both gravitational acceleration `g` and reduced gravity `g'` terms) or two parameters (one for `g` and `g'` each), with Navid's code above an example of the latter. I am inclined towards the former as I feel it's cleaner (scientifically and for coding purposes), but happy to go either ways. I didn't really think through my code above so don't pay too much attention to it. :); It was just a placeholder to demonstrate about parametric types. But I don't understand exactly what you suggest. `gravitational_acceleration` is a number, and it the same regardless of the number of layers you have. It's the acceleration that the top-layer surface feels (given that we use the approximation that `ρ_air ≪ ρ_fluid`. The reduced gravities `g'_{k+1/2} = g * (ρ_layer_k+1 - ρ_layer_k) / ρ_layer_k+1` are the gravitational accelerations each of the fluid interfaces feel. So `g'` is a Tuple of `k-1` numbers, where `k` is the number of layers, right? And this parameter is irrelevant for the SingleLayerModel. Were you suggesting to combine these in a single `k`-long tuple, e.g.,. ```julia; gravitational_acceleration .* (1, (ρ[k] - ρ[k-1]) / ρ[k-1], (ρ[k-1] - ρ[k-2]) / ρ[k-2], ..., (ρ[2] - ρ[1]) / ρ[1] ); ```; which will become a number for single layers?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937:772,Modifiability,layers,layers,772,"> Before proceeding further, I guess we should discuss a bit on whether we want a single parameter for gravitational acceleration (`effective_gravitational_acceleration`, which can encapsulate both gravitational acceleration `g` and reduced gravity `g'` terms) or two parameters (one for `g` and `g'` each), with Navid's code above an example of the latter. I am inclined towards the former as I feel it's cleaner (scientifically and for coding purposes), but happy to go either ways. I didn't really think through my code above so don't pay too much attention to it. :); It was just a placeholder to demonstrate about parametric types. But I don't understand exactly what you suggest. `gravitational_acceleration` is a number, and it the same regardless of the number of layers you have. It's the acceleration that the top-layer surface feels (given that we use the approximation that `ρ_air ≪ ρ_fluid`. The reduced gravities `g'_{k+1/2} = g * (ρ_layer_k+1 - ρ_layer_k) / ρ_layer_k+1` are the gravitational accelerations each of the fluid interfaces feel. So `g'` is a Tuple of `k-1` numbers, where `k` is the number of layers, right? And this parameter is irrelevant for the SingleLayerModel. Were you suggesting to combine these in a single `k`-long tuple, e.g.,. ```julia; gravitational_acceleration .* (1, (ρ[k] - ρ[k-1]) / ρ[k-1], (ρ[k-1] - ρ[k-2]) / ρ[k-2], ..., (ρ[2] - ρ[1]) / ρ[1] ); ```; which will become a number for single layers?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937:1121,Modifiability,layers,layers,1121,"> Before proceeding further, I guess we should discuss a bit on whether we want a single parameter for gravitational acceleration (`effective_gravitational_acceleration`, which can encapsulate both gravitational acceleration `g` and reduced gravity `g'` terms) or two parameters (one for `g` and `g'` each), with Navid's code above an example of the latter. I am inclined towards the former as I feel it's cleaner (scientifically and for coding purposes), but happy to go either ways. I didn't really think through my code above so don't pay too much attention to it. :); It was just a placeholder to demonstrate about parametric types. But I don't understand exactly what you suggest. `gravitational_acceleration` is a number, and it the same regardless of the number of layers you have. It's the acceleration that the top-layer surface feels (given that we use the approximation that `ρ_air ≪ ρ_fluid`. The reduced gravities `g'_{k+1/2} = g * (ρ_layer_k+1 - ρ_layer_k) / ρ_layer_k+1` are the gravitational accelerations each of the fluid interfaces feel. So `g'` is a Tuple of `k-1` numbers, where `k` is the number of layers, right? And this parameter is irrelevant for the SingleLayerModel. Were you suggesting to combine these in a single `k`-long tuple, e.g.,. ```julia; gravitational_acceleration .* (1, (ρ[k] - ρ[k-1]) / ρ[k-1], (ρ[k-1] - ρ[k-2]) / ρ[k-2], ..., (ρ[2] - ρ[1]) / ρ[1] ); ```; which will become a number for single layers?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937:1437,Modifiability,layers,layers,1437,"> Before proceeding further, I guess we should discuss a bit on whether we want a single parameter for gravitational acceleration (`effective_gravitational_acceleration`, which can encapsulate both gravitational acceleration `g` and reduced gravity `g'` terms) or two parameters (one for `g` and `g'` each), with Navid's code above an example of the latter. I am inclined towards the former as I feel it's cleaner (scientifically and for coding purposes), but happy to go either ways. I didn't really think through my code above so don't pay too much attention to it. :); It was just a placeholder to demonstrate about parametric types. But I don't understand exactly what you suggest. `gravitational_acceleration` is a number, and it the same regardless of the number of layers you have. It's the acceleration that the top-layer surface feels (given that we use the approximation that `ρ_air ≪ ρ_fluid`. The reduced gravities `g'_{k+1/2} = g * (ρ_layer_k+1 - ρ_layer_k) / ρ_layer_k+1` are the gravitational accelerations each of the fluid interfaces feel. So `g'` is a Tuple of `k-1` numbers, where `k` is the number of layers, right? And this parameter is irrelevant for the SingleLayerModel. Were you suggesting to combine these in a single `k`-long tuple, e.g.,. ```julia; gravitational_acceleration .* (1, (ρ[k] - ρ[k-1]) / ρ[k-1], (ρ[k-1] - ρ[k-2]) / ρ[k-2], ..., (ρ[2] - ρ[1]) / ρ[1] ); ```; which will become a number for single layers?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1471840937
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1472879794:260,Modifiability,layers,layers,260,"> Were you suggesting to combine these in a single `k`-long tuple, e.g.,; > ; > ```julia; > gravitational_acceleration .* (1, (ρ[k] - ρ[k-1]) / ρ[k-1], (ρ[k-1] - ρ[k-2]) / ρ[k-2], ..., (ρ[2] - ρ[1]) / ρ[1] ); > ```; > ; > which will become a number for single layers?. Yes, that's exactly what I was suggesting, since gravitational_acceleration could be understood as the value of g that each layer feels, so not sure why we need different parameters for both.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1472879794
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1472887372:328,Modifiability,layers,layers,328,"> > Were you suggesting to combine these in a single `k`-long tuple, e.g.,; > > ```julia; > > gravitational_acceleration .* (1, (ρ[k] - ρ[k-1]) / ρ[k-1], (ρ[k-1] - ρ[k-2]) / ρ[k-2], ..., (ρ[2] - ρ[1]) / ρ[1] ); > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > which will become a number for single layers?; > ; > Yes, that's exactly what I was suggesting, since gravitational_acceleration could be understood as the value of g that each layer feels, so not sure why we need different parameters for both. Ok! This type field will be pf different type for single and multilayer models then.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1472887372
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717:338,Energy Efficiency,reduce,reduced,338,"I think this is a a big step forward and happy to share my two cents worth. I agree that we should keep `gravitational_acceleration` the same as before. We will need to have a bunch of `g'`. Since we have a free surface, we assume that we have air above, then `g'` of the top layer is really just `g`. That's why I would suggest having n reduced gravities for n layers. We will need n interfaces and we could also store the n heights. Sometimes it's convenient to have one or the other. For efficiency we only need one, but for convenience we might want to have both. What are people's preferences?. The more layers we have, the thinner each layer tends to be. This means that it's more likely that layer depths can vanish. If this ever happens, then a numerical instability can happen. I remember discussing with @simone-silvestri using the positive preserving property of WENO to deal with this but I also remember that a preliminary test showed that it wasn't actually ensure to be positive. Sadly, I didn't follow up. Any idea if that was fixed?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717:385,Integrability,interface,interfaces,385,"I think this is a a big step forward and happy to share my two cents worth. I agree that we should keep `gravitational_acceleration` the same as before. We will need to have a bunch of `g'`. Since we have a free surface, we assume that we have air above, then `g'` of the top layer is really just `g`. That's why I would suggest having n reduced gravities for n layers. We will need n interfaces and we could also store the n heights. Sometimes it's convenient to have one or the other. For efficiency we only need one, but for convenience we might want to have both. What are people's preferences?. The more layers we have, the thinner each layer tends to be. This means that it's more likely that layer depths can vanish. If this ever happens, then a numerical instability can happen. I remember discussing with @simone-silvestri using the positive preserving property of WENO to deal with this but I also remember that a preliminary test showed that it wasn't actually ensure to be positive. Sadly, I didn't follow up. Any idea if that was fixed?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717:362,Modifiability,layers,layers,362,"I think this is a a big step forward and happy to share my two cents worth. I agree that we should keep `gravitational_acceleration` the same as before. We will need to have a bunch of `g'`. Since we have a free surface, we assume that we have air above, then `g'` of the top layer is really just `g`. That's why I would suggest having n reduced gravities for n layers. We will need n interfaces and we could also store the n heights. Sometimes it's convenient to have one or the other. For efficiency we only need one, but for convenience we might want to have both. What are people's preferences?. The more layers we have, the thinner each layer tends to be. This means that it's more likely that layer depths can vanish. If this ever happens, then a numerical instability can happen. I remember discussing with @simone-silvestri using the positive preserving property of WENO to deal with this but I also remember that a preliminary test showed that it wasn't actually ensure to be positive. Sadly, I didn't follow up. Any idea if that was fixed?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717:609,Modifiability,layers,layers,609,"I think this is a a big step forward and happy to share my two cents worth. I agree that we should keep `gravitational_acceleration` the same as before. We will need to have a bunch of `g'`. Since we have a free surface, we assume that we have air above, then `g'` of the top layer is really just `g`. That's why I would suggest having n reduced gravities for n layers. We will need n interfaces and we could also store the n heights. Sometimes it's convenient to have one or the other. For efficiency we only need one, but for convenience we might want to have both. What are people's preferences?. The more layers we have, the thinner each layer tends to be. This means that it's more likely that layer depths can vanish. If this ever happens, then a numerical instability can happen. I remember discussing with @simone-silvestri using the positive preserving property of WENO to deal with this but I also remember that a preliminary test showed that it wasn't actually ensure to be positive. Sadly, I didn't follow up. Any idea if that was fixed?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717:936,Testability,test,test,936,"I think this is a a big step forward and happy to share my two cents worth. I agree that we should keep `gravitational_acceleration` the same as before. We will need to have a bunch of `g'`. Since we have a free surface, we assume that we have air above, then `g'` of the top layer is really just `g`. That's why I would suggest having n reduced gravities for n layers. We will need n interfaces and we could also store the n heights. Sometimes it's convenient to have one or the other. For efficiency we only need one, but for convenience we might want to have both. What are people's preferences?. The more layers we have, the thinner each layer tends to be. This means that it's more likely that layer depths can vanish. If this ever happens, then a numerical instability can happen. I remember discussing with @simone-silvestri using the positive preserving property of WENO to deal with this but I also remember that a preliminary test showed that it wasn't actually ensure to be positive. Sadly, I didn't follow up. Any idea if that was fixed?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481952717
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481957629:201,Testability,test,tests,201,I think the WENO positivity preserving scheme we have is not actually positivity preserving because preserves 1D positivity. To have positivity preserving we need a 2D scheme (or at least to do proper tests/improvement on the scheme we have).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1481957629
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482001178:1210,Modifiability,layers,layers,1210,"How about this @dhruvbhagtani?. ```Julia; julia> struct SingleLayer end. julia> struct MultiLayer end. julia> struct ShallowWaterModel{N, T}; number_of_layers :: Int; parameter :: T; ; function ShallowWaterModel(number_of_layers, parameter); if number_of_layers == 1; return new{SingleLayer, typeof(parameter)}(number_of_layers, parameter); else number_of_layers > 1; return new{MultiLayer, typeof(parameter)}(number_of_layers, parameter); end; end; end. julia> const SingleLayerShallowWaterModel{T} = ShallowWaterModel{SingleLayer, T}; SingleLayerShallowWaterModel (alias for ShallowWaterModel{SingleLayer}). julia> model1 = ShallowWaterModel(1, 2.0); SingleLayerShallowWaterModel{Float64}(1, 2.0). julia> model2 = ShallowWaterModel(2, 2.3); ShallowWaterModel{MultiLayer, Float64}(2, 2.3). julia> typeof(model1) <: ShallowWaterModel; true. julia> typeof(model1) <: SingleLayerShallowWaterModel; true. julia> typeof(model2) <: ShallowWaterModel; true. julia> typeof(model2) <: SingleLayerShallowWaterModel; false. julia> do_something(::SingleLayerShallowWaterModel) = ""I'll do something for single layer""; do_something (generic function with 1 method). julia> do_something(x) = ""I'll do something for multiple layers""; do_something (generic function with 2 methods). julia> do_something(model1); ""I'll do something for single layer"". julia> do_something(model2); ""I'll do something for multiple layers""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482001178
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482001178:1395,Modifiability,layers,layers,1395,"How about this @dhruvbhagtani?. ```Julia; julia> struct SingleLayer end. julia> struct MultiLayer end. julia> struct ShallowWaterModel{N, T}; number_of_layers :: Int; parameter :: T; ; function ShallowWaterModel(number_of_layers, parameter); if number_of_layers == 1; return new{SingleLayer, typeof(parameter)}(number_of_layers, parameter); else number_of_layers > 1; return new{MultiLayer, typeof(parameter)}(number_of_layers, parameter); end; end; end. julia> const SingleLayerShallowWaterModel{T} = ShallowWaterModel{SingleLayer, T}; SingleLayerShallowWaterModel (alias for ShallowWaterModel{SingleLayer}). julia> model1 = ShallowWaterModel(1, 2.0); SingleLayerShallowWaterModel{Float64}(1, 2.0). julia> model2 = ShallowWaterModel(2, 2.3); ShallowWaterModel{MultiLayer, Float64}(2, 2.3). julia> typeof(model1) <: ShallowWaterModel; true. julia> typeof(model1) <: SingleLayerShallowWaterModel; true. julia> typeof(model2) <: ShallowWaterModel; true. julia> typeof(model2) <: SingleLayerShallowWaterModel; false. julia> do_something(::SingleLayerShallowWaterModel) = ""I'll do something for single layer""; do_something (generic function with 1 method). julia> do_something(x) = ""I'll do something for multiple layers""; do_something (generic function with 2 methods). julia> do_something(model1); ""I'll do something for single layer"". julia> do_something(model2); ""I'll do something for multiple layers""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482001178
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482690749:203,Testability,test,tests,203,"> I think the WENO positivity preserving scheme we have is not actually positivity preserving because preserves 1D positivity. To have positivity preserving we need a 2D scheme (or at least to do proper tests/improvement on the scheme we have). Thanks for the reply. . If there is a paper that shows how to do this I might want to give it a try in april, after I finish teaching. But if someone else wants to do it, you are welcome. I will point out that the first order upwinding is positive preserving. Not very accurate, but for testing it is fast and won't give rise to negative heights, which all other schemes can do.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482690749
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482690749:532,Testability,test,testing,532,"> I think the WENO positivity preserving scheme we have is not actually positivity preserving because preserves 1D positivity. To have positivity preserving we need a 2D scheme (or at least to do proper tests/improvement on the scheme we have). Thanks for the reply. . If there is a paper that shows how to do this I might want to give it a try in april, after I finish teaching. But if someone else wants to do it, you are welcome. I will point out that the first order upwinding is positive preserving. Not very accurate, but for testing it is fast and won't give rise to negative heights, which all other schemes can do.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482690749
https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1791223957:99,Usability,resume,resume,99,@dhruvbhagtani I'm closing this as it seems stale you (or anyone!) should feel free to re-open and resume whenever.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1791223957
https://github.com/CliMA/Oceananigans.jl/issues/2978#issuecomment-1470714440:286,Modifiability,extend,extended,286,"This will further crystallize the distinction between linear distances (x, y, z) and ""native coordinate systems"" (Cartesian for Rectilinear, geographic for LatitudeLongitude). We already have this partially implemented; ie `Δx` returns a linear distance. But the implementation has not extended to xnodes, ynodes, etc. Kind of a side note but it'd be nice to figure out a cleaner / more concise way to implement the `with_halos` feature. It's hard to read the code as it is now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2978#issuecomment-1470714440
https://github.com/CliMA/Oceananigans.jl/pull/2979#issuecomment-1482207594:18,Usability,resume,resume,18,"OK, now we should resume working on this ;)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2979#issuecomment-1482207594
https://github.com/CliMA/Oceananigans.jl/pull/2979#issuecomment-1491077886:121,Modifiability,refactor,refactor,121,"@simone-silvestri, in relation to why `cpu_face_constructors` require `with_halos=true`: note that before the grid_utils refactor `cpu_face_constructors` were using `cpu_face_constructors` were using `all_x/y/z_nodes` which is exactly equivalent to `x/y/znodes(; with_halos=true)`. ;). https://github.com/CliMA/Oceananigans.jl/blob/e7cb507b2645f04c6cdf52ee6f18c2c5b79f7bde/src/Grids/grid_utils.jl#L244-L246",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2979#issuecomment-1491077886
https://github.com/CliMA/Oceananigans.jl/issues/2981#issuecomment-1472741495:73,Modifiability,coupling,coupling,73,"We could also define this at the top level in `src/Oceananigans.jl`. For coupling, we will have to set these constants in the simulation constructor (hopefully we won't be changing source code)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2981#issuecomment-1472741495
https://github.com/CliMA/Oceananigans.jl/issues/2982#issuecomment-1480369451:270,Deployability,update,update,270,"This might not be a great idea for distributed models because. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/src/Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl#L62-L80. right?. As long as we don't update that often we'll be ok, but otherwise we will have to reallocate the free surface every time we change the time step (which is ok if we change infrequently, but otherwise not).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2982#issuecomment-1480369451
https://github.com/CliMA/Oceananigans.jl/issues/2983#issuecomment-1473127612:12,Availability,error,error,12,We get this error when building `HydrostaticFreeSurfaceModel` with a grid that has too few halo points.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2983#issuecomment-1473127612
https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475427126:103,Security,validat,validation,103,There is one that does a one-level near global ocean on a latitude-longitude grid. (in the near_global validation folder); I haven't tried this particular script before,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475427126
https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475428867:105,Security,validat,validation,105,> There is one that does a one-level near global ocean on a latitude-longitude grid. (in the near_global validation folder); > I haven't tried this particular script before. but that's not shallow water...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475428867
https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475429283:324,Security,validat,validation,324,"I think I actually never posted the result. It is wrong (the ocean is not barotropic) but it is sure mesmerizing. https://user-images.githubusercontent.com/33547697/226215545-c6f34133-6ce4-456c-8430-4f2ced3587eb.mp4. > > There is one that does a one-level near global ocean on a latitude-longitude grid. (in the near_global validation folder); > > I haven't tried this particular script before; > ; > but that's not shallow water... sorry, wrong folder:; https://github.com/CliMA/Oceananigans.jl/blob/main/validation/shallow_water_model/near_global_shallow_water_quarter_degree.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475429283
https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475429283:506,Security,validat,validation,506,"I think I actually never posted the result. It is wrong (the ocean is not barotropic) but it is sure mesmerizing. https://user-images.githubusercontent.com/33547697/226215545-c6f34133-6ce4-456c-8430-4f2ced3587eb.mp4. > > There is one that does a one-level near global ocean on a latitude-longitude grid. (in the near_global validation folder); > > I haven't tried this particular script before; > ; > but that's not shallow water... sorry, wrong folder:; https://github.com/CliMA/Oceananigans.jl/blob/main/validation/shallow_water_model/near_global_shallow_water_quarter_degree.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475429283
https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475449166:156,Security,validat,validation,156,"Ah, these experiments are the immersed Bickley jet but they use a one layer HydrostaticFreeSurfaceModel. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/bickley_jet/immersed_bickley_jet.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1475449166
https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1476028985:577,Energy Efficiency,meter,meters,577,"You changed the initial condition for h. Can you try using the old one? The SWM is quite sensitive to `h` ; this is because `h` is the depth minus the bathymetry, or better `H = h + hB` where `H` is the total height. ; So you have to initialize with `maximum(bathymetry) .- bathymetry)` (where we assume that `H = maximum(bathymetry)`).; To this specific example I have added 10 just to make sure that `h>0` everywhere (maybe a smaller value is also ok). Edit: what you see in the video above is the _total_ height `H = h + hB`, about 10km everywhere with a `ΔH` of roughly 40 meters, quite large for the ocean, but still this is all barotropic so we cannot expect realistic values",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2985#issuecomment-1476028985
https://github.com/CliMA/Oceananigans.jl/issues/2986#issuecomment-1475117843:59,Security,access,access,59,"`xnodes, ynodes, znodes` are exported so users should have access to them after saying `using Oceananigans`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2986#issuecomment-1475117843
https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1477896891:184,Testability,test,testing,184,"> apparently something's wrong -- docs are running for ~6hrs~ 8.5hrs and counting...... :(. Then I truly don't understand. The docs are building locally for me. The only thing I'm not testing locally are the examples. Could the culprit be there somehow?. @navidcy do you mind if I use buildkite for some experiments? e.g. trying to compile the docs without examples, etc?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1477896891
https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478525922:50,Testability,test,tested,50,"I just pushed the branch _exactly_ the way I just tested them here (i.e. with a bunch of things in `docs/make.jl` commented out). The docs were successfully built for me in about 30 min, so it'd be a red flag if it takes much longer than that to build it on buildkite.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478525922
https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478586287:312,Testability,test,tested,312,Docs built successfully with https://github.com/CliMA/Oceananigans.jl/pull/2990/commits/f2e22b8a65b1a5c6a1e01b95ff867d87eaf81609! Nice. Next commit (https://github.com/CliMA/Oceananigans.jl/pull/2990/commits/8572c242dde8dbe61c181b0b6cf72e92a4b9fca5) reintruduces the tilted bbl example and was also successfully tested locally.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478586287
https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1480634435:18,Testability,test,tests,18,I'll fix the unit tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1480634435
https://github.com/CliMA/Oceananigans.jl/pull/2991#issuecomment-1479467667:98,Testability,test,tests,98,now it's getting stuck on equality of two cuda subarrays... could you have a look at the GPU unit tests @glwagner?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2991#issuecomment-1479467667
https://github.com/CliMA/Oceananigans.jl/pull/2995#issuecomment-1480341742:11,Testability,test,tests,11,merge when tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2995#issuecomment-1480341742
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454093:34,Availability,down,down,34,I'm detecting also a massive slow down in model execution and out of control allocations on the CPU. Type inference failure? Unfortunate to find it this late after the PRs are merged.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454093
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454093:116,Availability,failure,failure,116,I'm detecting also a massive slow down in model execution and out of control allocations on the CPU. Type inference failure? Unfortunate to find it this late after the PRs are merged.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454093
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454093:4,Safety,detect,detecting,4,I'm detecting also a massive slow down in model execution and out of control allocations on the CPU. Type inference failure? Unfortunate to find it this late after the PRs are merged.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454093
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454534:57,Performance,perform,performance,57,@navidcy what's the last version before the catastrophic performance loss? I'll do a benchmark to compare with `main`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454534
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454534:85,Testability,benchmark,benchmark,85,@navidcy what's the last version before the catastrophic performance loss? I'll do a benchmark to compare with `main`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454534
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041:229,Availability,down,downgraded,229,"Kind of a random case, but here's some timings from a calibration problem I'm doing (I'm running 6 3D simulations, ranging from something like 33 to 117 time-steps, either size (6, 10, 32) or (6, 10, 64)). For these tests I just downgraded KernelAbstractions via Project.toml:. ## With `KernelAbstractions` 0.7.2 (also downgraded CUDAKernels). ```; 23.405205 seconds (25.27 M allocations: 2.610 GiB, 1.78% gc time, 99.80% compilation time); 5.019944 seconds (5.92 M allocations: 475.126 MiB, 0.86% gc time, 98.22% compilation time); 0.067385 seconds (107.25 k allocations: 72.628 MiB); 0.090308 seconds (107.25 k allocations: 72.628 MiB); 0.139109 seconds (217.20 k allocations: 147.487 MiB); 0.197798 seconds (217.20 k allocations: 147.487 MiB); ```. The two simulations are affected by compilation but things go fast after that. ## With `KernelAbstractions` 0.8.6. ```; 4.914645 seconds (28.10 M allocations: 6.039 GiB, 15.62% gc time, 51.22% compilation time); 5.011717 seconds (31.58 M allocations: 10.844 GiB, 19.87% gc time, 16.87% compilation time); 4.236418 seconds (27.41 M allocations: 11.073 GiB, 21.75% gc time); 8.501561 seconds (55.04 M allocations: 22.118 GiB, 22.03% gc time); 8.618707 seconds (56.01 M allocations: 22.627 GiB, 21.83% gc time); 17.081286 seconds (112.47 M allocations: 45.197 GiB, 21.73% gc time); ```. Smells like type inference failure to me. Some informal exploration shows that the tendency calculations dominate this problem (as they do many others) --- so it's a pretty basic issue I suspect.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041:319,Availability,down,downgraded,319,"Kind of a random case, but here's some timings from a calibration problem I'm doing (I'm running 6 3D simulations, ranging from something like 33 to 117 time-steps, either size (6, 10, 32) or (6, 10, 64)). For these tests I just downgraded KernelAbstractions via Project.toml:. ## With `KernelAbstractions` 0.7.2 (also downgraded CUDAKernels). ```; 23.405205 seconds (25.27 M allocations: 2.610 GiB, 1.78% gc time, 99.80% compilation time); 5.019944 seconds (5.92 M allocations: 475.126 MiB, 0.86% gc time, 98.22% compilation time); 0.067385 seconds (107.25 k allocations: 72.628 MiB); 0.090308 seconds (107.25 k allocations: 72.628 MiB); 0.139109 seconds (217.20 k allocations: 147.487 MiB); 0.197798 seconds (217.20 k allocations: 147.487 MiB); ```. The two simulations are affected by compilation but things go fast after that. ## With `KernelAbstractions` 0.8.6. ```; 4.914645 seconds (28.10 M allocations: 6.039 GiB, 15.62% gc time, 51.22% compilation time); 5.011717 seconds (31.58 M allocations: 10.844 GiB, 19.87% gc time, 16.87% compilation time); 4.236418 seconds (27.41 M allocations: 11.073 GiB, 21.75% gc time); 8.501561 seconds (55.04 M allocations: 22.118 GiB, 22.03% gc time); 8.618707 seconds (56.01 M allocations: 22.627 GiB, 21.83% gc time); 17.081286 seconds (112.47 M allocations: 45.197 GiB, 21.73% gc time); ```. Smells like type inference failure to me. Some informal exploration shows that the tendency calculations dominate this problem (as they do many others) --- so it's a pretty basic issue I suspect.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041:1363,Availability,failure,failure,1363,"Kind of a random case, but here's some timings from a calibration problem I'm doing (I'm running 6 3D simulations, ranging from something like 33 to 117 time-steps, either size (6, 10, 32) or (6, 10, 64)). For these tests I just downgraded KernelAbstractions via Project.toml:. ## With `KernelAbstractions` 0.7.2 (also downgraded CUDAKernels). ```; 23.405205 seconds (25.27 M allocations: 2.610 GiB, 1.78% gc time, 99.80% compilation time); 5.019944 seconds (5.92 M allocations: 475.126 MiB, 0.86% gc time, 98.22% compilation time); 0.067385 seconds (107.25 k allocations: 72.628 MiB); 0.090308 seconds (107.25 k allocations: 72.628 MiB); 0.139109 seconds (217.20 k allocations: 147.487 MiB); 0.197798 seconds (217.20 k allocations: 147.487 MiB); ```. The two simulations are affected by compilation but things go fast after that. ## With `KernelAbstractions` 0.8.6. ```; 4.914645 seconds (28.10 M allocations: 6.039 GiB, 15.62% gc time, 51.22% compilation time); 5.011717 seconds (31.58 M allocations: 10.844 GiB, 19.87% gc time, 16.87% compilation time); 4.236418 seconds (27.41 M allocations: 11.073 GiB, 21.75% gc time); 8.501561 seconds (55.04 M allocations: 22.118 GiB, 22.03% gc time); 8.618707 seconds (56.01 M allocations: 22.627 GiB, 21.83% gc time); 17.081286 seconds (112.47 M allocations: 45.197 GiB, 21.73% gc time); ```. Smells like type inference failure to me. Some informal exploration shows that the tendency calculations dominate this problem (as they do many others) --- so it's a pretty basic issue I suspect.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041:216,Testability,test,tests,216,"Kind of a random case, but here's some timings from a calibration problem I'm doing (I'm running 6 3D simulations, ranging from something like 33 to 117 time-steps, either size (6, 10, 32) or (6, 10, 64)). For these tests I just downgraded KernelAbstractions via Project.toml:. ## With `KernelAbstractions` 0.7.2 (also downgraded CUDAKernels). ```; 23.405205 seconds (25.27 M allocations: 2.610 GiB, 1.78% gc time, 99.80% compilation time); 5.019944 seconds (5.92 M allocations: 475.126 MiB, 0.86% gc time, 98.22% compilation time); 0.067385 seconds (107.25 k allocations: 72.628 MiB); 0.090308 seconds (107.25 k allocations: 72.628 MiB); 0.139109 seconds (217.20 k allocations: 147.487 MiB); 0.197798 seconds (217.20 k allocations: 147.487 MiB); ```. The two simulations are affected by compilation but things go fast after that. ## With `KernelAbstractions` 0.8.6. ```; 4.914645 seconds (28.10 M allocations: 6.039 GiB, 15.62% gc time, 51.22% compilation time); 5.011717 seconds (31.58 M allocations: 10.844 GiB, 19.87% gc time, 16.87% compilation time); 4.236418 seconds (27.41 M allocations: 11.073 GiB, 21.75% gc time); 8.501561 seconds (55.04 M allocations: 22.118 GiB, 22.03% gc time); 8.618707 seconds (56.01 M allocations: 22.627 GiB, 21.83% gc time); 17.081286 seconds (112.47 M allocations: 45.197 GiB, 21.73% gc time); ```. Smells like type inference failure to me. Some informal exploration shows that the tendency calculations dominate this problem (as they do many others) --- so it's a pretty basic issue I suspect.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480466041
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620:163,Energy Efficiency,adapt,adapt,163,"Something a little puzzling to me is that we clearly succeed at type inference when running on the GPU. Do we have a better chance of succeeding there because of `adapt`? We do make some critical simplifications via `adapt`, most notably. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/src/Fields/field.jl#L400",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620:217,Energy Efficiency,adapt,adapt,217,"Something a little puzzling to me is that we clearly succeed at type inference when running on the GPU. Do we have a better chance of succeeding there because of `adapt`? We do make some critical simplifications via `adapt`, most notably. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/src/Fields/field.jl#L400",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620:163,Modifiability,adapt,adapt,163,"Something a little puzzling to me is that we clearly succeed at type inference when running on the GPU. Do we have a better chance of succeeding there because of `adapt`? We do make some critical simplifications via `adapt`, most notably. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/src/Fields/field.jl#L400",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620:217,Modifiability,adapt,adapt,217,"Something a little puzzling to me is that we clearly succeed at type inference when running on the GPU. Do we have a better chance of succeeding there because of `adapt`? We do make some critical simplifications via `adapt`, most notably. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/src/Fields/field.jl#L400",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620:45,Usability,clear,clearly,45,"Something a little puzzling to me is that we clearly succeed at type inference when running on the GPU. Do we have a better chance of succeeding there because of `adapt`? We do make some critical simplifications via `adapt`, most notably. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/src/Fields/field.jl#L400",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620:196,Usability,simpl,simplifications,196,"Something a little puzzling to me is that we clearly succeed at type inference when running on the GPU. Do we have a better chance of succeeding there because of `adapt`? We do make some critical simplifications via `adapt`, most notably. https://github.com/CliMA/Oceananigans.jl/blob/f70d0949f7688df89a7f8a9e7d44177cde27091a/src/Fields/field.jl#L400",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480467620
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480594643:56,Availability,down,down,56,"Compilation actually speeds up, its run time that slows down. (The examples are probably running very very very very slow.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480594643
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480595140:127,Availability,down,down,127,"So the runtime is 50-100x slower. But because there's other stuff in the docs (and compilation time matters to, the total slow down for the docs build is just 2x).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480595140
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481266449:45,Testability,benchmark,benchmarks,45,I haven't done any profiling --- just simple benchmarks. (Short example coming soon),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481266449
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481266449:38,Usability,simpl,simple,38,I haven't done any profiling --- just simple benchmarks. (Short example coming soon),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481266449
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842:917,Performance,perform,performance,917,"Ok here's something simple:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Here's what I've done:. * Run this on fresh clone of `main`. This returns. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 20.460 s (144483404 allocations: 94.43 GiB); ```. * Restrict compat on KernelAbstractions to 0.7.2 and CUDAKernels to 0.3.3. This returns:. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 2.202 s (118604 allocations: 52.20 MiB); ```. I'm running on a single core, Mac M1. Here the performance loss is just 10x so I'll change the somewhat dramatic title of this issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842:65,Testability,Benchmark,BenchmarkTools,65,"Ok here's something simple:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Here's what I've done:. * Run this on fresh clone of `main`. This returns. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 20.460 s (144483404 allocations: 94.43 GiB); ```. * Restrict compat on KernelAbstractions to 0.7.2 and CUDAKernels to 0.3.3. This returns:. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 2.202 s (118604 allocations: 52.20 MiB); ```. I'm running on a single core, Mac M1. Here the performance loss is just 10x so I'll change the somewhat dramatic title of this issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842:20,Usability,simpl,simple,20,"Ok here's something simple:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Here's what I've done:. * Run this on fresh clone of `main`. This returns. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 20.460 s (144483404 allocations: 94.43 GiB); ```. * Restrict compat on KernelAbstractions to 0.7.2 and CUDAKernels to 0.3.3. This returns:. ```julia; julia> include(""../simple_benchmark.jl""); [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; 2.202 s (118604 allocations: 52.20 MiB); ```. I'm running on a single core, Mac M1. Here the performance loss is just 10x so I'll change the somewhat dramatic title of this issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481304842
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481310062:106,Availability,down,down,106,"With `advection = CenteredSecondOrder()`, the differences are more dramatic (maybe explains the 100x slow down I saw with a simple setup):. ```julia; 17.859 s (144483404 allocations: 94.43 GiB) # KA 0.8; 294.401 ms (118604 allocations: 52.20 MiB) # KA 0.7; ```. If we look just at `calculate_tendencies!` via. ```julia; using Oceananigans; using Oceananigans.TimeSteppers: calculate_tendencies!; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; #time_step!(model, Δt); calculate_tendencies!(model, []); end; end. @btime lots_of_steps!(model, 0.01); ```. results are (`advection = WENO()`). ```julia; 5.268 s (23061000 allocations: 11.73 GiB) # KA 0.8; 1.989 s (14600 allocations: 13.03 MiB) # KA 0.7; ```. and `advection = CenteredSecondOrder()`. ```julia; 2.846 s (23061000 allocations: 11.73 GiB) # KA 0.8; 105.867 ms (14600 allocations: 13.03 MiB) # KA 0.7; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481310062
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481310062:402,Testability,Benchmark,BenchmarkTools,402,"With `advection = CenteredSecondOrder()`, the differences are more dramatic (maybe explains the 100x slow down I saw with a simple setup):. ```julia; 17.859 s (144483404 allocations: 94.43 GiB) # KA 0.8; 294.401 ms (118604 allocations: 52.20 MiB) # KA 0.7; ```. If we look just at `calculate_tendencies!` via. ```julia; using Oceananigans; using Oceananigans.TimeSteppers: calculate_tendencies!; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; #time_step!(model, Δt); calculate_tendencies!(model, []); end; end. @btime lots_of_steps!(model, 0.01); ```. results are (`advection = WENO()`). ```julia; 5.268 s (23061000 allocations: 11.73 GiB) # KA 0.8; 1.989 s (14600 allocations: 13.03 MiB) # KA 0.7; ```. and `advection = CenteredSecondOrder()`. ```julia; 2.846 s (23061000 allocations: 11.73 GiB) # KA 0.8; 105.867 ms (14600 allocations: 13.03 MiB) # KA 0.7; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481310062
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481310062:124,Usability,simpl,simple,124,"With `advection = CenteredSecondOrder()`, the differences are more dramatic (maybe explains the 100x slow down I saw with a simple setup):. ```julia; 17.859 s (144483404 allocations: 94.43 GiB) # KA 0.8; 294.401 ms (118604 allocations: 52.20 MiB) # KA 0.7; ```. If we look just at `calculate_tendencies!` via. ```julia; using Oceananigans; using Oceananigans.TimeSteppers: calculate_tendencies!; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); model = NonhydrostaticModel(; grid, advection=WENO()). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; #time_step!(model, Δt); calculate_tendencies!(model, []); end; end. @btime lots_of_steps!(model, 0.01); ```. results are (`advection = WENO()`). ```julia; 5.268 s (23061000 allocations: 11.73 GiB) # KA 0.8; 1.989 s (14600 allocations: 13.03 MiB) # KA 0.7; ```. and `advection = CenteredSecondOrder()`. ```julia; 2.846 s (23061000 allocations: 11.73 GiB) # KA 0.8; 105.867 ms (14600 allocations: 13.03 MiB) # KA 0.7; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481310062
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405:19,Safety,safe,safe,19,"Simple kernels are safe (in fact, faster). ```julia; using Oceananigans; using Oceananigans.Architectures: device; using Oceananigans.Utils: launch!; using Oceananigans.Operators: ∇²ᶜᶜᶜ. using KernelAbstractions: @kernel, @index; using BenchmarkTools. @kernel function _diffuse!(c, Δt); i, j, k = @index(Global, NTuple); @inbounds c[i, j, k] += Δt * ∇²ᶜᶜᶜ(i, j, k, grid, c); end. function diffuse!(c, Δt); grid = c.grid; arch = grid.architecture; ev = launch!(arch, grid, :xyz, _diffuse!, c, Δt); wait(device(arch), ev); return nothing; end. function lots_of_steps!(c, Δt, steps=100); for _ = 1:steps; diffuse!(c, Δt); end; end. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); c = CenterField(grid); @btime lots_of_steps!(c, 0.01); ```. yields. ```julia; 447.763 ms (9832300 allocations: 975.37 MiB) # KA 0.8; 499.522 ms (9832300 allocations: 1.81 GiB) # KA 0.7; ```. adding `fill_halo_regions!` doesn't change much either",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405:236,Testability,Benchmark,BenchmarkTools,236,"Simple kernels are safe (in fact, faster). ```julia; using Oceananigans; using Oceananigans.Architectures: device; using Oceananigans.Utils: launch!; using Oceananigans.Operators: ∇²ᶜᶜᶜ. using KernelAbstractions: @kernel, @index; using BenchmarkTools. @kernel function _diffuse!(c, Δt); i, j, k = @index(Global, NTuple); @inbounds c[i, j, k] += Δt * ∇²ᶜᶜᶜ(i, j, k, grid, c); end. function diffuse!(c, Δt); grid = c.grid; arch = grid.architecture; ev = launch!(arch, grid, :xyz, _diffuse!, c, Δt); wait(device(arch), ev); return nothing; end. function lots_of_steps!(c, Δt, steps=100); for _ = 1:steps; diffuse!(c, Δt); end; end. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); c = CenterField(grid); @btime lots_of_steps!(c, 0.01); ```. yields. ```julia; 447.763 ms (9832300 allocations: 975.37 MiB) # KA 0.8; 499.522 ms (9832300 allocations: 1.81 GiB) # KA 0.7; ```. adding `fill_halo_regions!` doesn't change much either",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405:0,Usability,Simpl,Simple,0,"Simple kernels are safe (in fact, faster). ```julia; using Oceananigans; using Oceananigans.Architectures: device; using Oceananigans.Utils: launch!; using Oceananigans.Operators: ∇²ᶜᶜᶜ. using KernelAbstractions: @kernel, @index; using BenchmarkTools. @kernel function _diffuse!(c, Δt); i, j, k = @index(Global, NTuple); @inbounds c[i, j, k] += Δt * ∇²ᶜᶜᶜ(i, j, k, grid, c); end. function diffuse!(c, Δt); grid = c.grid; arch = grid.architecture; ev = launch!(arch, grid, :xyz, _diffuse!, c, Δt); wait(device(arch), ev); return nothing; end. function lots_of_steps!(c, Δt, steps=100); for _ = 1:steps; diffuse!(c, Δt); end; end. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); c = CenterField(grid); @btime lots_of_steps!(c, 0.01); ```. yields. ```julia; 447.763 ms (9832300 allocations: 975.37 MiB) # KA 0.8; 499.522 ms (9832300 allocations: 1.81 GiB) # KA 0.7; ```. adding `fill_halo_regions!` doesn't change much either",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481333405
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481372033:114,Energy Efficiency,reduce,reduced,114,"I found something. It's hard to provide code since I hacked apart the code base for this. I'll try to describe. I reduced `calculate_tendencies!` to just calculating the `u` tendency. I then wrote two methods:. ```julia; u_velocity_tendency(i, j, k, grid) = zero(grid); ```. and. ```julia; @inline function u_velocity_tendency(i, j, k, grid,; advection,; coriolis,; stokes_drift,; closure,; u_immersed_bc,; buoyancy,; background_fields,; velocities,; tracers,; auxiliary_fields,; diffusivities,; forcings,; hydrostatic_pressure,; clock). return zero(grid); end; ```. Even those these functions have identical output, applying `launch!` to the ""long argument list"" version is 300x slower. So the problem is in `launch!` somewhere?. Maybe splatting is the issue since we write. ```julia; """""" Calculate the right-hand-side of the u-velocity equation. """"""; @kernel function calculate_Gu!(Gu, args...); i, j, k = @index(Global, NTuple); @inbounds Gu[i, j, k] = u_velocity_tendency(i, j, k, args...); end; ```. ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481372033
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481406866:283,Testability,Benchmark,BenchmarkTools,283,"ok... maybe this is a minimal. ```julia; using Oceananigans; using Oceananigans.Architectures: device; using Oceananigans.BoundaryConditions: fill_halo_regions!; using Oceananigans.Utils: launch!; using Oceananigans.Operators: ∇²ᶜᶜᶜ. using KernelAbstractions: @kernel, @index; using BenchmarkTools. @inline laplacian(i, j, k, grid, c, args...) = ∇²ᶜᶜᶜ(i, j, k, grid, c). @kernel function _diffuse!(c, Δt, args...); i, j, k = @index(Global, NTuple); @inbounds c[i, j, k] += Δt * laplacian(i, j, k, grid, c, args...); end. function diffuse!(c, Δt); grid = c.grid. Nargs = 2 # this is the key. args = Tuple(grid for i = 1:Nargs); arch = grid.architecture; fill_halo_regions!(c); ev = launch!(arch, grid, :xyz, _diffuse!, c, Δt, args...); wait(device(arch), ev); return nothing; end. function lots_of_steps!(c, Δt, steps=100); for _ = 1:steps; diffuse!(c, Δt); end; end. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1)); c = CenterField(grid); @btime lots_of_steps!(c, 0.01); ```. Ok, so with _nothing difference except KA version_, this is what we find:. | Nargs | KA 0.8 | KA 0.72 | ; | -- | ----------- | ----------- |; | 1 | 479.273 ms (9847200 allocations: 977.66 MiB) | 686.707 ms (11485600 allocations: 2.57 GiB) |; | 2 | 1.281 s (14801200 allocations: 4.75 GiB) | 840.756 ms (13124400 allocations: 3.32 GiB) |; | 3 | 1.399 s (16447200 allocations: 5.52 GiB) | 981.717 ms (14764000 allocations: 4.08 GiB) |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481406866
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481459239:330,Availability,error,errors,330,So the likely answer here is that CPU execution is no longer running through my custom Cassette infrastructure that inlined everything even on the CPU. So you are hitting the normal case of Julia deciding that it isn't worth inclining complicated functions. The benefits of not using Cassette are that backtracked are useful (for errors and profiling) and that compile time is much improved. There is a long-term fix that one could explore... I don't currently have time for this but it might make an interesting UROP project. Use a custom host compiler via GPUCompiler/LLVM.jl/AbstractInterpreter and maybe OpaqueClosurer to mimick the compilation of the GPU code.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481459239
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481464331:195,Integrability,depend,depending,195,"In some way this comes back to the fundamental question of: What is the point of KernelAbstractions CPU support. I originally intended it only for making debugging easier... But folks seem to be depending on it as a performance solution... I think it is feasible to get there, but it would require quite a bit of time and effort",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481464331
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481464331:216,Performance,perform,performance,216,"In some way this comes back to the fundamental question of: What is the point of KernelAbstractions CPU support. I originally intended it only for making debugging easier... But folks seem to be depending on it as a performance solution... I think it is feasible to get there, but it would require quite a bit of time and effort",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481464331
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481472066:55,Performance,perform,performance,55,"Ok, so if we shouldn't be using KernelAbstractions for performance on CPU, then I think this means we should write our own CPU infrastructure stuff and rely on KA only for GPU? Is that what you recommend?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481472066
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481565094:94,Performance,perform,performance,94,"> Is that what you recommend?. That wouldn't solve your problem here. KA gives you reasonable performance on the CPU, but since KA 0.8 it is execution story on the CPU much closer to the rest of Julia and it doesn't play special tricks.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481565094
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882:575,Deployability,rolling,rolling,575,"Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?. Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882:18,Performance,perform,performance,18,"Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?. Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882:213,Performance,perform,performance,213,"Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?. Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882:302,Performance,perform,performance,302,"Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?. Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882:384,Performance,perform,performance,384,"Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?. Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882:292,Safety,avoid,avoid,292,"Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?. Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1481707882
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037:785,Availability,down,downgraded,785,"Re-posting from #3026... that PR solved performance problems with `NonhydrostaticModel`, but `HydrostaticFreeSurfaceModel` is still 2x slower roughly than when using KA 0.7.2. Here's a simple benchmark:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```; 10.220 s (85845109 allocations: 37.94 GiB) # main; 6.284 s (66184308 allocations: 16.31 GiB) # main with KA downgraded to 0.7.2; ```. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037:40,Performance,perform,performance,40,"Re-posting from #3026... that PR solved performance problems with `NonhydrostaticModel`, but `HydrostaticFreeSurfaceModel` is still 2x slower roughly than when using KA 0.7.2. Here's a simple benchmark:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```; 10.220 s (85845109 allocations: 37.94 GiB) # main; 6.284 s (66184308 allocations: 16.31 GiB) # main with KA downgraded to 0.7.2; ```. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037:192,Testability,benchmark,benchmark,192,"Re-posting from #3026... that PR solved performance problems with `NonhydrostaticModel`, but `HydrostaticFreeSurfaceModel` is still 2x slower roughly than when using KA 0.7.2. Here's a simple benchmark:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```; 10.220 s (85845109 allocations: 37.94 GiB) # main; 6.284 s (66184308 allocations: 16.31 GiB) # main with KA downgraded to 0.7.2; ```. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037:240,Testability,Benchmark,BenchmarkTools,240,"Re-posting from #3026... that PR solved performance problems with `NonhydrostaticModel`, but `HydrostaticFreeSurfaceModel` is still 2x slower roughly than when using KA 0.7.2. Here's a simple benchmark:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```; 10.220 s (85845109 allocations: 37.94 GiB) # main; 6.284 s (66184308 allocations: 16.31 GiB) # main with KA downgraded to 0.7.2; ```. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037:185,Usability,simpl,simple,185,"Re-posting from #3026... that PR solved performance problems with `NonhydrostaticModel`, but `HydrostaticFreeSurfaceModel` is still 2x slower roughly than when using KA 0.7.2. Here's a simple benchmark:. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```; 10.220 s (85845109 allocations: 37.94 GiB) # main; 6.284 s (66184308 allocations: 16.31 GiB) # main with KA downgraded to 0.7.2; ```. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198037
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:583,Deployability,rolling,rolling,583,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:20,Performance,perform,performance,20,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:215,Performance,perform,performance,215,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:310,Performance,perform,performance,310,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:392,Performance,perform,performance,392,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:300,Safety,avoid,avoid,300,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:796,Usability,clear,clear,796,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741:814,Usability,learn,learned,814,"> Since we need the performance provided by KA 0.7, and we need to use KA 0.8+ on GPU, does that mean that we should invest in developing our own CPU infrastructure (replicating what KA 0.7 offered) to achieve that performance?; > ; > Another possibility is that we re-write much of the code base to avoid the performance pitfalls we are currently facing in order to get back to the level of performance we have with current code + KA 0.7. I believe the issue is basically an interaction between some of the abstractions / indirection we have developed and the compiler, so possibly rolling back that abstraction / indirection will bring us back to where we were previously. To follow up with @vchuravy, it seems that rewriting just _some_ of the code was sufficient, so we are (probably) in the clear! The lesson learned is that we cannot slurp / splat `@kernel` function arguments, because it prevents the kernel code from being inlined.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482198741
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482209528:116,Availability,down,downgraded,116,I get:; ```; 12.372 s (119521270 allocations: 70.48 GiB) # main; 8.320 s (66686606 allocations: 16.40 GiB) # main w downgraded KA 0.7.3 & CudaKernels 0.3.3; ```. 50% slowdown and _much_ more allocations (if that matters),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482209528
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482707191:52,Testability,test,testing,52,Does it change with different solvers? I'll do some testing today to try to snoop out the issue,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482707191
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1485231926:386,Energy Efficiency,energy,energy,386,"The issues with the `HydrostaticFreeSurfaceModel` are the tendency kernels. The difference with the non-hydrostatic model is that we do not know a priori which RHS function to call (for example CATKE has an `:e` tracer that requires a different RHS function and the same goes with a 1 equation parameterization of mesoscales that evolves an additional tracer equation for the mesoscale energy `:K`). Our solution now is to infer the RHS function and pass it as an argument to the kernel. Apparently, this prevents compilation. I ll come up with a solution today",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1485231926
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1485231926:294,Modifiability,parameteriz,parameterization,294,"The issues with the `HydrostaticFreeSurfaceModel` are the tendency kernels. The difference with the non-hydrostatic model is that we do not know a priori which RHS function to call (for example CATKE has an `:e` tracer that requires a different RHS function and the same goes with a 1 equation parameterization of mesoscales that evolves an additional tracer equation for the mesoscale energy `:K`). Our solution now is to infer the RHS function and pass it as an argument to the kernel. Apparently, this prevents compilation. I ll come up with a solution today",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1485231926
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1485231926:330,Modifiability,evolve,evolves,330,"The issues with the `HydrostaticFreeSurfaceModel` are the tendency kernels. The difference with the non-hydrostatic model is that we do not know a priori which RHS function to call (for example CATKE has an `:e` tracer that requires a different RHS function and the same goes with a 1 equation parameterization of mesoscales that evolves an additional tracer equation for the mesoscale energy `:K`). Our solution now is to infer the RHS function and pass it as an argument to the kernel. Apparently, this prevents compilation. I ll come up with a solution today",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1485231926
https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1485410927:55,Performance,perform,performance,55,"Also, the implicit vertical solver seems to affect the performance. I would have to guess that it is because we are passing functions as arguments to the kernel.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1485410927
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480334115:376,Integrability,interface,interface,376,"This has implications in terms of code performance, if we have `set!(field)` somewhere in the code it will trigger automatically a `fill_halo_regions!` which we might not want as we are very careful to where we call `fill_halo_regions!`. There are two options then:; (1) remove all instances of `set!` in the internals and make sure to never use it; (2) implement a different interface that can be user-facing which triggers set! and fill_halo_regions! together. I would vote for (2)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480334115
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480334115:39,Performance,perform,performance,39,"This has implications in terms of code performance, if we have `set!(field)` somewhere in the code it will trigger automatically a `fill_halo_regions!` which we might not want as we are very careful to where we call `fill_halo_regions!`. There are two options then:; (1) remove all instances of `set!` in the internals and make sure to never use it; (2) implement a different interface that can be user-facing which triggers set! and fill_halo_regions! together. I would vote for (2)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480334115
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:2175,Availability,mask,mask,2175,"eField) = cubed_sphere_set!(u, v); ./Distributed/distributed_grids.jl: set!(bottom_field, cpu_bottom); ./Fields/set!.jl:function set!(Φ::NamedTuple; kwargs...); ./Fields/set!.jl: set!(ϕ, value); ./Fields/set!.jl: set!(u::Field, v); ./Fields/set!.jl:function set!(u::Field, v); ./Fields/set!.jl: _set!(u::Field, v); ./Fields/set!.jl:function _set!(u::Field, v); ./Fields/set!.jl:function _set!(u::Field, f::Function); ./Fields/set!.jl: set!(u_cpu, f_field); ./Fields/set!.jl: set!(u, u_cpu); ./Fields/set!.jl: set!(u, f_field); ./Fields/set!.jl:function _set!(u::Field, f::Union{Array, CuArray, OffsetArray}); ./Fields/set!.jl:function _set!(u::Field, v::Field); ./Fields/field_reductions.jl:set!(c, (x, y, z) -> x + y + z); ./Fields/Fields.jl:export set!, compute!, @compute, regrid!; ./Fields/Fields.jl:include(""set!.jl""); ./ImmersedBoundaries/grid_fitted_immersed_boundaries.jl: set!(bottom_field, ib.bottom_height); ./ImmersedBoundaries/grid_fitted_immersed_boundaries.jl: set!(mask_field, ib.mask); ./ImmersedBoundaries/active_cells_map.jl: set!(active_cells_field, is_immersed_operation); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:import Oceananigans.Fields: set!; ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:using Oceananigans.Fields: _set!; ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl: set!(model; kwargs...); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:`set!(ϕ::AbstractField, data)` function exists.; ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:set!(model, u=u₀, v=v₀, T=T₀); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:function set!(model::NonhydrostaticModel; enforce_incompressibility=true, kwargs...); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl: _set!(ϕ, value); ./Models/ShallowWaterModels/set_shallow_water_model.jl:using Oceananigans.Fields: _set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:import Oceananigans.Fields: set!; ./Models/ShallowWaterModels/set_shallow_water",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:6144,Availability,checkpoint,checkpointer,6144,"ti_region_field.jl:set!(mrf::MultiRegionField, v) = apply_regionally!(set!, mrf, v); ./MultiRegion/multi_region_field.jl:set!(mrf::MultiRegionField, f::Function) = apply_regionally!(set!, mrf, f); ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl:set!(model, ::Nothing) = nothing; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ./Simulations/run.jl: # Reset! the model time-stepper, evaluate all diagnostics, and write all output at first iteration; ./Simulations/run.jl: reset!(sim.model.timestepper); ./Simulations/simulation.jl:import Oceananigans.TimeSteppers: reset!; ./Simulations/simulation.jl: reset!(sim); ./Simulations/simulation.jl:function reset!(sim::Simulation); ./Simulations/simulation.jl: reset!(sim.model.timestepper); ./TimeSteppers/quasi_adams_bashforth_2.jl:function reset!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:6210,Availability,checkpoint,checkpointer,6210,"ly!(set!, mrf, v); ./MultiRegion/multi_region_field.jl:set!(mrf::MultiRegionField, f::Function) = apply_regionally!(set!, mrf, f); ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl:set!(model, ::Nothing) = nothing; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ./Simulations/run.jl: # Reset! the model time-stepper, evaluate all diagnostics, and write all output at first iteration; ./Simulations/run.jl: reset!(sim.model.timestepper); ./Simulations/simulation.jl:import Oceananigans.TimeSteppers: reset!; ./Simulations/simulation.jl: reset!(sim); ./Simulations/simulation.jl:function reset!(sim::Simulation); ./Simulations/simulation.jl: reset!(sim.model.timestepper); ./TimeSteppers/quasi_adams_bashforth_2.jl:function reset!(timestepper::QuasiAdamsBashforth2TimeStepper); ./TimeSteppers/Tim",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:6241,Availability,checkpoint,checkpointer,6241,"lti_region_field.jl:set!(mrf::MultiRegionField, f::Function) = apply_regionally!(set!, mrf, f); ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl:set!(model, ::Nothing) = nothing; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ./Simulations/run.jl: # Reset! the model time-stepper, evaluate all diagnostics, and write all output at first iteration; ./Simulations/run.jl: reset!(sim.model.timestepper); ./Simulations/simulation.jl:import Oceananigans.TimeSteppers: reset!; ./Simulations/simulation.jl: reset!(sim); ./Simulations/simulation.jl:function reset!(sim::Simulation); ./Simulations/simulation.jl: reset!(sim.model.timestepper); ./TimeSteppers/quasi_adams_bashforth_2.jl:function reset!(timestepper::QuasiAdamsBashforth2TimeStepper); ./TimeSteppers/TimeSteppers.jl:reset!(timestepper) = n",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:6281,Availability,checkpoint,checkpointer,6281,"egionField, f::Function) = apply_regionally!(set!, mrf, f); ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl:set!(model, ::Nothing) = nothing; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ./Simulations/run.jl: # Reset! the model time-stepper, evaluate all diagnostics, and write all output at first iteration; ./Simulations/run.jl: reset!(sim.model.timestepper); ./Simulations/simulation.jl:import Oceananigans.TimeSteppers: reset!; ./Simulations/simulation.jl: reset!(sim); ./Simulations/simulation.jl:function reset!(sim::Simulation); ./Simulations/simulation.jl: reset!(sim.model.timestepper); ./TimeSteppers/quasi_adams_bashforth_2.jl:function reset!(timestepper::QuasiAdamsBashforth2TimeStepper); ./TimeSteppers/TimeSteppers.jl:reset!(timestepper) = nothing; (base) gregorywagner:src/ (",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:6347,Availability,checkpoint,checkpointer,6347,"nanigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl:set!(model, ::Nothing) = nothing; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ./Simulations/run.jl: # Reset! the model time-stepper, evaluate all diagnostics, and write all output at first iteration; ./Simulations/run.jl: reset!(sim.model.timestepper); ./Simulations/simulation.jl:import Oceananigans.TimeSteppers: reset!; ./Simulations/simulation.jl: reset!(sim); ./Simulations/simulation.jl:function reset!(sim::Simulation); ./Simulations/simulation.jl: reset!(sim.model.timestepper); ./TimeSteppers/quasi_adams_bashforth_2.jl:function reset!(timestepper::QuasiAdamsBashforth2TimeStepper); ./TimeSteppers/TimeSteppers.jl:reset!(timestepper) = nothing; (base) gregorywagner:src/ (glw/set-fill-halos) $ grep -r ' set!' ./* [16:33:55]; ./AbstractOp",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:6419,Availability,checkpoint,checkpointer,6419,"rs/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl:set!(model, ::Nothing) = nothing; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ./Simulations/run.jl: # Reset! the model time-stepper, evaluate all diagnostics, and write all output at first iteration; ./Simulations/run.jl: reset!(sim.model.timestepper); ./Simulations/simulation.jl:import Oceananigans.TimeSteppers: reset!; ./Simulations/simulation.jl: reset!(sim); ./Simulations/simulation.jl:function reset!(sim::Simulation); ./Simulations/simulation.jl: reset!(sim.model.timestepper); ./TimeSteppers/quasi_adams_bashforth_2.jl:function reset!(timestepper::QuasiAdamsBashforth2TimeStepper); ./TimeSteppers/TimeSteppers.jl:reset!(timestepper) = nothing; (base) gregorywagner:src/ (glw/set-fill-halos) $ grep -r ' set!' ./* [16:33:55]; ./AbstractOperations/conditional_operations.jl:import Oceananigans.Fields: condition",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:8540,Availability,mask,mask,8540,"ndition!(c::ConditionalOperation) = set!(c.operand, c); ./AbstractOperations/conditional_operations.jl: set!(f, c); ./CubedSpheres/cubed_sphere_faces.jl:import Oceananigans.Fields: AbstractField, FunctionField, Field, FieldBoundaryBuffers, minimum, maximum, mean, location, set!; ./CubedSpheres/cubed_sphere_faces.jl:##### set!; ./CubedSpheres/cubed_sphere_faces.jl: set!(get_face(u, face), get_face(v, face)); ./Distributed/distributed_grids.jl: set!(bottom_field, cpu_bottom); ./Fields/set!.jl:function set!(Φ::NamedTuple; kwargs...); ./Fields/set!.jl: set!(ϕ, value); ./Fields/set!.jl: set!(u::Field, v); ./Fields/set!.jl:function set!(u::Field, v); ./Fields/set!.jl: set!(u_cpu, f_field); ./Fields/set!.jl: set!(u, u_cpu); ./Fields/set!.jl: set!(u, f_field); ./Fields/Fields.jl:export set!, compute!, @compute, regrid!; ./ImmersedBoundaries/grid_fitted_immersed_boundaries.jl: set!(bottom_field, ib.bottom_height); ./ImmersedBoundaries/grid_fitted_immersed_boundaries.jl: set!(mask_field, ib.mask); ./ImmersedBoundaries/active_cells_map.jl: set!(active_cells_field, is_immersed_operation); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:import Oceananigans.Fields: set!; ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl: set!(model; kwargs...); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:function set!(model::NonhydrostaticModel; enforce_incompressibility=true, kwargs...); ./Models/ShallowWaterModels/set_shallow_water_model.jl:import Oceananigans.Fields: set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:function set!(model::ShallowWaterModel; kwargs...); ./Models/ShallowWaterModels/shallow_water_model.jl: set!(bathymetry_field, bathymetry); ./Models/HydrostaticFreeSurfaceModels/matrix_implicit_free_surface_solver.jl: set!(η, reshape(storage, solver.problem_size...)); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface_kernels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceMo",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:10967,Availability,checkpoint,checkpointer,10967,"rnels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./MultiRegion/multi_region_field.jl:import Oceananigans.Fields: set!, compute!, compute_at!, validate_field_data, validate_boundary_conditions; ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ````",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:11033,Availability,checkpoint,checkpointer,11033,"rnels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./MultiRegion/multi_region_field.jl:import Oceananigans.Fields: set!, compute!, compute_at!, validate_field_data, validate_boundary_conditions; ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ````",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:11064,Availability,checkpoint,checkpointer,11064,"rnels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./MultiRegion/multi_region_field.jl:import Oceananigans.Fields: set!, compute!, compute_at!, validate_field_data, validate_boundary_conditions; ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ````",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:11104,Availability,checkpoint,checkpointer,11104,"rnels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./MultiRegion/multi_region_field.jl:import Oceananigans.Fields: set!, compute!, compute_at!, validate_field_data, validate_boundary_conditions; ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ````",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:11176,Availability,checkpoint,checkpointer,11176,"rnels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./MultiRegion/multi_region_field.jl:import Oceananigans.Fields: set!, compute!, compute_at!, validate_field_data, validate_boundary_conditions; ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ./OutputReaders/field_time_series.jl:function set!(fts::FieldTimeSeries, fields_vector::AbstractVector{<:AbstractField}); ./OutputWriters/windowed_time_average.jl:import Oceananigans.Fields: location, indices, set!; ./OutputWriters/windowed_time_average.jl:set!(u::Field, wta::WindowedTimeAverage) = set!(u, wta.result); ./OutputWriters/checkpointer.jl:import Oceananigans.Fields: set!; ./OutputWriters/checkpointer.jl:##### set! for checkpointer filepaths; ./OutputWriters/checkpointer.jl: set!(model, filepath::AbstractString); ./OutputWriters/checkpointer.jl:function set!(model, filepath::AbstractString); ./Simulations/run.jl:using Oceananigans.Fields: set!; ./Simulations/run.jl:import Oceananigans.OutputWriters: checkpoint_path, set!; ./Simulations/run.jl: set!(sim.model, checkpoint_file_path); ````",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:3985,Deployability,Integrat,Integrate,3985,"ananigans.Fields: _set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:import Oceananigans.Fields: set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:function set!(model::ShallowWaterModel; kwargs...); ./Models/ShallowWaterModels/set_shallow_water_model.jl: _set!(ϕ, value); ./Models/ShallowWaterModels/shallow_water_model.jl: set!(bathymetry_field, bathymetry); ./Models/HydrostaticFreeSurfaceModels/matrix_implicit_free_surface_solver.jl: set!(η, reshape(storage, solver.problem_size...)); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface.jl:import Oceananigans.TimeSteppers: reset!; ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface.jl:function reset!(sefs::SplitExplicitFreeSurface); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface_kernels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:using Oceananigans.Fields: _set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:`set!(ϕ::AbstractField, data)` function exists.; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:set!(model, u=u₀, v=v₀, T=T₀); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: @apply_regionally _set!(ϕ, value); ./Models/Models.jl:import Oceananigans.TimeSteppers: reset!; ./Models/Models.jl:function reset!(model::AbstractModel); ./MultiRegion/multi_region_field.jl:im",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:9595,Deployability,Integrat,Integrate,9595,"ation); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:import Oceananigans.Fields: set!; ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl: set!(model; kwargs...); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:function set!(model::NonhydrostaticModel; enforce_incompressibility=true, kwargs...); ./Models/ShallowWaterModels/set_shallow_water_model.jl:import Oceananigans.Fields: set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:function set!(model::ShallowWaterModel; kwargs...); ./Models/ShallowWaterModels/shallow_water_model.jl: set!(bathymetry_field, bathymetry); ./Models/HydrostaticFreeSurfaceModels/matrix_implicit_free_surface_solver.jl: set!(η, reshape(storage, solver.problem_size...)); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface_kernels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./MultiRegion/multi_region_field.jl:import Oceananigans.Fields: set!, compute!, compute_at!, validate_field_data, validate_boundary_conditions; ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:3985,Integrability,Integrat,Integrate,3985,"ananigans.Fields: _set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:import Oceananigans.Fields: set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:function set!(model::ShallowWaterModel; kwargs...); ./Models/ShallowWaterModels/set_shallow_water_model.jl: _set!(ϕ, value); ./Models/ShallowWaterModels/shallow_water_model.jl: set!(bathymetry_field, bathymetry); ./Models/HydrostaticFreeSurfaceModels/matrix_implicit_free_surface_solver.jl: set!(η, reshape(storage, solver.problem_size...)); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface.jl:import Oceananigans.TimeSteppers: reset!; ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface.jl:function reset!(sefs::SplitExplicitFreeSurface); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface_kernels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:using Oceananigans.Fields: _set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:`set!(ϕ::AbstractField, data)` function exists.; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:set!(model, u=u₀, v=v₀, T=T₀); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: @apply_regionally _set!(ϕ, value); ./Models/Models.jl:import Oceananigans.TimeSteppers: reset!; ./Models/Models.jl:function reset!(model::AbstractModel); ./MultiRegion/multi_region_field.jl:im",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021:9595,Integrability,Integrat,Integrate,9595,"ation); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:import Oceananigans.Fields: set!; ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl: set!(model; kwargs...); ./Models/NonhydrostaticModels/set_nonhydrostatic_model.jl:function set!(model::NonhydrostaticModel; enforce_incompressibility=true, kwargs...); ./Models/ShallowWaterModels/set_shallow_water_model.jl:import Oceananigans.Fields: set!; ./Models/ShallowWaterModels/set_shallow_water_model.jl:function set!(model::ShallowWaterModel; kwargs...); ./Models/ShallowWaterModels/shallow_water_model.jl: set!(bathymetry_field, bathymetry); ./Models/HydrostaticFreeSurfaceModels/matrix_implicit_free_surface_solver.jl: set!(η, reshape(storage, solver.problem_size...)); ./Models/HydrostaticFreeSurfaceModels/split_explicit_free_surface_kernels.jl: @apply_regionally set!(free_surface.η, free_surface.state.η̅); ./Models/HydrostaticFreeSurfaceModels/distributed_split_explicit_free_surface.jl:""""""Integrate z at locations `location` and set! `height`` with the result""""""; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:import Oceananigans.Fields: set!; ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl: set!(model; kwargs...); ./Models/HydrostaticFreeSurfaceModels/set_hydrostatic_free_surface_model.jl:function set!(model::HydrostaticFreeSurfaceModel; kwargs...); ./MultiRegion/multi_region_field.jl:import Oceananigans.Fields: set!, compute!, compute_at!, validate_field_data, validate_boundary_conditions; ./Oceananigans.jl: interior, set!, compute!, regrid!, location,; ./OutputReaders/field_time_series.jl:import Oceananigans.Fields: Field, set!, interior, indices; ./OutputReaders/field_time_series.jl: set!(time_series, path, name); ./OutputReaders/field_time_series.jl:##### set!; ./OutputReaders/field_time_series.jl:function set!(time_series::InMemoryFieldTimeSeries, path::String, name::String); ./OutputReaders/field_time_series.jl: set!(time_series[n], field_n); ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3010#issuecomment-1480344021
https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799:162,Energy Efficiency,schedul,schedules,162,"Looking at this PR, I think we should make a few structural changes:; * Move `AbstractSchedule` to `Simulations`. This is where it belongs? (not `Utils`); * Make schedules a function of `Simulation`, not `model`. I don't think users really care --- it's just more logical I think this way. It's about homogenizing the Simulation/AbstractModel interface I guess.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799
https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799:343,Integrability,interface,interface,343,"Looking at this PR, I think we should make a few structural changes:; * Move `AbstractSchedule` to `Simulations`. This is where it belongs? (not `Utils`); * Make schedules a function of `Simulation`, not `model`. I don't think users really care --- it's just more logical I think this way. It's about homogenizing the Simulation/AbstractModel interface I guess.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799
https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799:264,Testability,log,logical,264,"Looking at this PR, I think we should make a few structural changes:; * Move `AbstractSchedule` to `Simulations`. This is where it belongs? (not `Utils`); * Make schedules a function of `Simulation`, not `model`. I don't think users really care --- it's just more logical I think this way. It's about homogenizing the Simulation/AbstractModel interface I guess.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3015#issuecomment-1482862799
https://github.com/CliMA/Oceananigans.jl/pull/3016#issuecomment-1483311126:203,Modifiability,variab,variable,203,"New parameters for `RiBasedVerticalDiffusivity` in this PR as well @simone-silvestri . https://user-images.githubusercontent.com/15271942/227622141-c682b9d5-8848-4f3d-9734-aa258463b2f3.mp4. Note the TKE variable has no dynamics, just a passive tracer for ri-based.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3016#issuecomment-1483311126
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:16,Availability,error,error,16,"here's the full error stack trace. ```Julia; using Oceananigans. grid = RectilinearGrid(GPU(), size=(4, 4, 4), extent = (1, 1, 1)). @inline forc_u(x, y, z, t, u) = x. model = NonhydrostaticModel(; grid, forcing = (; u=Forcing(forc_u, field_dependencies = :u)),; auxiliary_fields = (; a=0)); @show model.forcing model.auxiliary_fields; time_step!(model, 1). ERROR: InvalidIRError: compiling kernel #gpu_calculate_Gu!(KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 4)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:357,Availability,ERROR,ERROR,357,"here's the full error stack trace. ```Julia; using Oceananigans. grid = RectilinearGrid(GPU(), size=(4, 4, 4), extent = (1, 1, 1)). @inline forc_u(x, y, z, t, u) = x. model = NonhydrostaticModel(; grid, forcing = (; u=Forcing(forc_u, field_dependencies = :u)),; auxiliary_fields = (; a=0)); @show model.forcing model.auxiliary_fields; time_step!(model, 1). ERROR: InvalidIRError: compiling kernel #gpu_calculate_Gu!(KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 4)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:2044,Deployability,Continuous,ContinuousForcing,2044,"at64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}) resulted in invalid LLVM IR; Reason: unsupported call to an unknown function (call to jl_f_getfield); Stacktrace:; [1] getindex; @ ./namedtuple.jl:136; [2] field_arguments; @ ~/OC.jl/src/Utils/user_function_arguments.jl:1; [3] user_function_arguments; @ ~/OC.jl/src/Utils/user_function_arguments.jl:21; [4] ContinuousForcing; @ ~/OC.jl/src/Forcings/continuous_forcing.jl:118; [5] u_velocity_tendency; @ ~/OC.jl/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:64; [6] macro expansion; @ ~/OC.jl/src/Models/NonhydrostaticModels/calculate_nonhydrostatic_tendencies.jl:134; [7] gpu_calculate_Gu!; @ ~/.julia/packages/KernelAbstractions/C8flJ/src/macros.j",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:2730,Deployability,Continuous,ContinuousForcing,2730,"UDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}) resulted in invalid LLVM IR; Reason: unsupported call to an unknown function (call to jl_f_getfield); Stacktrace:; [1] getindex; @ ./namedtuple.jl:136; [2] field_arguments; @ ~/OC.jl/src/Utils/user_function_arguments.jl:1; [3] user_function_arguments; @ ~/OC.jl/src/Utils/user_function_arguments.jl:21; [4] ContinuousForcing; @ ~/OC.jl/src/Forcings/continuous_forcing.jl:118; [5] u_velocity_tendency; @ ~/OC.jl/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:64; [6] macro expansion; @ ~/OC.jl/src/Models/NonhydrostaticModels/calculate_nonhydrostatic_tendencies.jl:134; [7] gpu_calculate_Gu!; @ ~/.julia/packages/KernelAbstractions/C8flJ/src/macros.jl:81; [8] gpu_calculate_Gu!; @ ./none:0; Hint: catch this exception as `err` and call `code_typed(err; interactive = true)` to introspect the erronous code with Cthulhu.jl; Stacktrace:; [1] check_ir(job::GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), Tuple{KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 4)}, Kerne",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:5112,Deployability,Continuous,ContinuousForcing,5112,"at64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}}, args::LLVM.Module); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/validation.jl:141; [2] macro expansion; @ ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:418 [inlined]; [3] macro expansion; @ ~/.julia/packages/TimerOutputs/LHjFw/src/TimerOutput.jl:253 [inlined]; [4] macro expansion; @ ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:416 [inlined]; [5] emit_asm(job::GPUCompiler.CompilerJob, ir::LLVM.Module; strip::Bool, validate::Bool, format::LLVM.API.LLVMCodeGenFileType); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/utils.jl:83; [6] cufunction_compile(job::GPUCompiler.CompilerJob, ctx::LLVM.Context); @ CUDA ~/.julia/packages/CUDA/BbliS/src/comp",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:8120,Deployability,Continuous,ContinuousForcing,8120,"at64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}}}); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:76; [9] cufunction_compile(job::GPUCompiler.CompilerJob); @ CUDA ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:347; [10] cached_compilation(cache::Dict{UInt64, Any}, job::GPUCompiler.CompilerJob, compiler::typeof(CUDA.cufunction_compile), linker::typeof(CUDA.cufunction_link)); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/cache.jl:90; [11] cufunction(f::typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), tt::Type{Tuple{KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:10652,Deployability,Continuous,ContinuousForcing,10652,"at64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}; name::Nothing, always_inline::Bool, kwargs::Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:maxthreads,), Tuple{Int64}}}); @ CUDA ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:300; [12] macro expansion; @ ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:102 [inlined]; [13] (::KernelAbstractions.Kernel{CUDAKernels.CUDADevice{false, true}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!)})(::Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.Offset",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:25529,Deployability,Continuous,ContinuousForcing,25529,"TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Oceananigans.Solvers.FFTBasedPoissonSolver{RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, NamedTuple{(:λx, :λy, :λz), Tuple{CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}}, CUDA.CuArray{ComplexF64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Compl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:41018,Deployability,Continuous,ContinuousForcing,41018,"TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Oceananigans.Solvers.FFTBasedPoissonSolver{RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, NamedTuple{(:λx, :λy, :λz), Tuple{CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}}, CUDA.CuArray{ComplexF64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Compl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:55937,Deployability,Continuous,ContinuousForcing,55937,"TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Tuple{Symbol}, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, Centered{1, Float64, Nothing, Nothing, Nothing, Nothing}, Oceananigans.Solvers.FFTBasedPoissonSolver{RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, NamedTuple{(:λx, :λy, :λz), Tuple{CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}}, CUDA.CuArray{ComplexF64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Compl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:12822,Integrability,depend,dependencies,12822,"ecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, ::Vararg{Any}; ndrange::Nothing, dependencies::CUDAKernels.CudaEvent, workgroupsize::Nothing, progress::Function); @ CUDAKernels ~/.julia/packages/CUDAKernels/3IKLV/src/CUDAKernels.jl:283; [14] launch!(::GPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, ::Symbol, ::typeof(Oceananigans.Models.NonhydrostaticModels.calculate_Gu!), ::Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Of",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:14775,Integrability,depend,dependencies,14775,"e.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, ::Vararg{Any}; dependencies::CUDAKernels.CudaEvent, include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Oceananigans.Utils ~/OC.jl/src/Utils/kernel_launching.jl:103; [15] calculate_interior_tendency_contributions!(model::NonhydrostaticModel{Oceananigans.TimeSteppers.QuasiAdamsBashforth2TimeStepper{Float64, NamedTuple{(:u, :v, :w), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, Tuple{Colon, Colon, Col",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:29871,Integrability,depend,dependencies,29871,"ComplexF64, CUDA.CUFFT.cCuFFTPlan{ComplexF64, 1, true, 3}, Float64}, Oceananigans.Solvers.Backward, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, GPU}, Int64, Bounded, Int64, NamedTuple{(:forward, :backward), Tuple{CUDA.CuArray{ComplexF64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{ComplexF64, 3, CUDA.Mem.DeviceBuffer}}}, Nothing}}}}}, Nothing, NamedTuple{(:velocities, :tracers), Tuple{NamedTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, Nothing, Nothing, Nothing, NamedTuple{(:a,), Tuple{Int64}}}; dependencies::CUDAKernels.CudaEvent); @ Oceananigans.Models.NonhydrostaticModels ~/OC.jl/src/Models/NonhydrostaticModels/calculate_nonhydrostatic_tendencies.jl:88; [16] calculate_interior_tendency_contributions!; @ ~/OC.jl/src/Models/NonhydrostaticModels/calculate_nonhydrostatic_tendencies.jl:46 [inlined]; [17] calculate_tendencies!; @ ~/OC.jl/src/Models/NonhydrostaticModels/calculate_nonhydrostatic_tendencies.jl:27 [inlined]; [18] #apply_regionally!#46; @ ~/OC.jl/src/Utils/multi_region_transformation.jl:118 [inlined]; [19] apply_regionally!; @ ~/OC.jl/src/Utils/multi_region_transformation.jl:115 [inlined]; [20] macro expansion; @ ~/OC.jl/src/Utils/multi_region_transformation.jl:197 [inlined]; [21] time_step!(model::NonhydrostaticModel{Oceananigans.TimeSteppers.QuasiAdamsBashforth2TimeStepper{Float64, NamedTuple{(:u, :v, :w), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:8717,Performance,cache,cache,8717,"Tuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}}}); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:76; [9] cufunction_compile(job::GPUCompiler.CompilerJob); @ CUDA ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:347; [10] cached_compilation(cache::Dict{UInt64, Any}, job::GPUCompiler.CompilerJob, compiler::typeof(CUDA.cufunction_compile), linker::typeof(CUDA.cufunction_link)); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/cache.jl:90; [11] cufunction(f::typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), tt::Type{Tuple{KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 4)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.Tw",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:8909,Performance,cache,cache,8909,"eviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}}}); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:76; [9] cufunction_compile(job::GPUCompiler.CompilerJob); @ CUDA ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:347; [10] cached_compilation(cache::Dict{UInt64, Any}, job::GPUCompiler.CompilerJob, compiler::typeof(CUDA.cufunction_compile), linker::typeof(CUDA.cufunction_link)); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/cache.jl:90; [11] cufunction(f::typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), tt::Type{Tuple{KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 4)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Nothing}, Cen",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:5568,Security,validat,validation,5568,"medTuple{(:u, :v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(), Tuple{}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}}, args::LLVM.Module); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/validation.jl:141; [2] macro expansion; @ ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:418 [inlined]; [3] macro expansion; @ ~/.julia/packages/TimerOutputs/LHjFw/src/TimerOutput.jl:253 [inlined]; [4] macro expansion; @ ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:416 [inlined]; [5] emit_asm(job::GPUCompiler.CompilerJob, ir::LLVM.Module; strip::Bool, validate::Bool, format::LLVM.API.LLVMCodeGenFileType); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/utils.jl:83; [6] cufunction_compile(job::GPUCompiler.CompilerJob, ctx::LLVM.Context); @ CUDA ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:355; [7] #228; @ ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:348 [inlined]; [8] JuliaContext(f::CUDA.var""#228#229""{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), Tuple{KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIterat",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353:5930,Security,validat,validate,5930,"ray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(), Tuple{}}, NamedTuple{(:a,), Tuple{Int64}}, Nothing, NamedTuple{(:u, :v, :w, :a), Tuple{Oceananigans.Forcings.ContinuousForcing{Face, Center, Center, Nothing, typeof(forc_u), Nothing, Tuple{Int64}, Tuple{typeof(Oceananigans.Operators.identity4)}}, typeof(Oceananigans.Forcings.zeroforcing), typeof(Oceananigans.Forcings.zeroforcing), Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}}}}, args::LLVM.Module); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/validation.jl:141; [2] macro expansion; @ ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:418 [inlined]; [3] macro expansion; @ ~/.julia/packages/TimerOutputs/LHjFw/src/TimerOutput.jl:253 [inlined]; [4] macro expansion; @ ~/.julia/packages/GPUCompiler/kb6yJ/src/driver.jl:416 [inlined]; [5] emit_asm(job::GPUCompiler.CompilerJob, ir::LLVM.Module; strip::Bool, validate::Bool, format::LLVM.API.LLVMCodeGenFileType); @ GPUCompiler ~/.julia/packages/GPUCompiler/kb6yJ/src/utils.jl:83; [6] cufunction_compile(job::GPUCompiler.CompilerJob, ctx::LLVM.Context); @ CUDA ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:355; [7] #228; @ ~/.julia/packages/CUDA/BbliS/src/compiler/execution.jl:348 [inlined]; [8] JuliaContext(f::CUDA.var""#228#229""{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Oceananigans.Models.NonhydrostaticModels.gpu_calculate_Gu!), Tuple{KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(4, 4, 4)}, KernelAbstractions.NDIteration.DynamicCheck, Nothing, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 4)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, RectilinearGrid{Float64, Periodic, Periodic,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1481807353
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696:14,Deployability,integrat,integrate,14,"I'm trying to integrate a scalar in time (the scalar itself being a volume-integrated `Field`). Pretty much what's being done here: https://github.com/tomchor/Oceanostics.jl/blob/main/test/test_budgets.jl. I can probably come up with a way to do it without auxiliary fields. I just assumed `auxiliary_fields` could also be scalars since fields is written as ""fields"" in the docs, rather than ""`Fields`"". (Although I'm not sure what you mean by a ""parameter"").",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696:75,Deployability,integrat,integrated,75,"I'm trying to integrate a scalar in time (the scalar itself being a volume-integrated `Field`). Pretty much what's being done here: https://github.com/tomchor/Oceanostics.jl/blob/main/test/test_budgets.jl. I can probably come up with a way to do it without auxiliary fields. I just assumed `auxiliary_fields` could also be scalars since fields is written as ""fields"" in the docs, rather than ""`Fields`"". (Although I'm not sure what you mean by a ""parameter"").",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696:14,Integrability,integrat,integrate,14,"I'm trying to integrate a scalar in time (the scalar itself being a volume-integrated `Field`). Pretty much what's being done here: https://github.com/tomchor/Oceanostics.jl/blob/main/test/test_budgets.jl. I can probably come up with a way to do it without auxiliary fields. I just assumed `auxiliary_fields` could also be scalars since fields is written as ""fields"" in the docs, rather than ""`Fields`"". (Although I'm not sure what you mean by a ""parameter"").",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696:75,Integrability,integrat,integrated,75,"I'm trying to integrate a scalar in time (the scalar itself being a volume-integrated `Field`). Pretty much what's being done here: https://github.com/tomchor/Oceanostics.jl/blob/main/test/test_budgets.jl. I can probably come up with a way to do it without auxiliary fields. I just assumed `auxiliary_fields` could also be scalars since fields is written as ""fields"" in the docs, rather than ""`Fields`"". (Although I'm not sure what you mean by a ""parameter"").",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696:184,Testability,test,test,184,"I'm trying to integrate a scalar in time (the scalar itself being a volume-integrated `Field`). Pretty much what's being done here: https://github.com/tomchor/Oceanostics.jl/blob/main/test/test_budgets.jl. I can probably come up with a way to do it without auxiliary fields. I just assumed `auxiliary_fields` could also be scalars since fields is written as ""fields"" in the docs, rather than ""`Fields`"". (Although I'm not sure what you mean by a ""parameter"").",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482889696
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482922692:119,Availability,error,error,119,`auxiliary_fields` are fields that are meant to be used in forcing functions. That's related to why you're getting the error --- `Forcing.field_dependencies` can include auxiliary fields. A callback is a good way to integrate something and will not change your tendency kernel functions.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482922692
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482922692:216,Deployability,integrat,integrate,216,`auxiliary_fields` are fields that are meant to be used in forcing functions. That's related to why you're getting the error --- `Forcing.field_dependencies` can include auxiliary fields. A callback is a good way to integrate something and will not change your tendency kernel functions.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482922692
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482922692:216,Integrability,integrat,integrate,216,`auxiliary_fields` are fields that are meant to be used in forcing functions. That's related to why you're getting the error --- `Forcing.field_dependencies` can include auxiliary fields. A callback is a good way to integrate something and will not change your tendency kernel functions.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482922692
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482933583:216,Deployability,integrat,integrate,216,"Just to be clear, the auxiliary field I'm using in my example has nothing to do with the forcing. The forcing is needed for physical reasons and I was using the auxiliary field (together with a callback) as a way to integrate something in time for a budget. Since that worked for CPU I assumed it was supposed to work for GPUs as well. But since that's not the case and scalars aren't supported, I'll close this issue. Thanks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482933583
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482933583:216,Integrability,integrat,integrate,216,"Just to be clear, the auxiliary field I'm using in my example has nothing to do with the forcing. The forcing is needed for physical reasons and I was using the auxiliary field (together with a callback) as a way to integrate something in time for a budget. Since that worked for CPU I assumed it was supposed to work for GPUs as well. But since that's not the case and scalars aren't supported, I'll close this issue. Thanks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482933583
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482933583:11,Usability,clear,clear,11,"Just to be clear, the auxiliary field I'm using in my example has nothing to do with the forcing. The forcing is needed for physical reasons and I was using the auxiliary field (together with a callback) as a way to integrate something in time for a budget. Since that worked for CPU I assumed it was supposed to work for GPUs as well. But since that's not the case and scalars aren't supported, I'll close this issue. Thanks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482933583
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609:202,Deployability,integrat,integration,202,"To be sure, I didn't know that it would fail with scalars on the GPU and I don't really know why that happens... !. Note that you can also simply output a scalar to file every time-step and do the time-integration offline. JLD2 is lightning fast so you probably won't pay for that. That's actually the simplest method, and as a bonus you get the time history.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609:202,Integrability,integrat,integration,202,"To be sure, I didn't know that it would fail with scalars on the GPU and I don't really know why that happens... !. Note that you can also simply output a scalar to file every time-step and do the time-integration offline. JLD2 is lightning fast so you probably won't pay for that. That's actually the simplest method, and as a bonus you get the time history.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609:139,Usability,simpl,simply,139,"To be sure, I didn't know that it would fail with scalars on the GPU and I don't really know why that happens... !. Note that you can also simply output a scalar to file every time-step and do the time-integration offline. JLD2 is lightning fast so you probably won't pay for that. That's actually the simplest method, and as a bonus you get the time history.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609:302,Usability,simpl,simplest,302,"To be sure, I didn't know that it would fail with scalars on the GPU and I don't really know why that happens... !. Note that you can also simply output a scalar to file every time-step and do the time-integration offline. JLD2 is lightning fast so you probably won't pay for that. That's actually the simplest method, and as a bonus you get the time history.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1482943609
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1483381766:218,Deployability,integrat,integrate,218,"> Just to be clear, the auxiliary field I'm using in my example has nothing to do with the forcing. The forcing is needed for physical reasons and I was using the auxiliary field (together with a callback) as a way to integrate something in time for a budget.; > ; > Since that worked for CPU I assumed it was supposed to work for GPUs as well. But since that's not the case and scalars aren't supported, I'll close this issue. I see. Did you try `Oceananigans.Fields.ConstantField`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1483381766
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1483381766:218,Integrability,integrat,integrate,218,"> Just to be clear, the auxiliary field I'm using in my example has nothing to do with the forcing. The forcing is needed for physical reasons and I was using the auxiliary field (together with a callback) as a way to integrate something in time for a budget.; > ; > Since that worked for CPU I assumed it was supposed to work for GPUs as well. But since that's not the case and scalars aren't supported, I'll close this issue. I see. Did you try `Oceananigans.Fields.ConstantField`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1483381766
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1483381766:13,Usability,clear,clear,13,"> Just to be clear, the auxiliary field I'm using in my example has nothing to do with the forcing. The forcing is needed for physical reasons and I was using the auxiliary field (together with a callback) as a way to integrate something in time for a budget.; > ; > Since that worked for CPU I assumed it was supposed to work for GPUs as well. But since that's not the case and scalars aren't supported, I'll close this issue. I see. Did you try `Oceananigans.Fields.ConstantField`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1483381766
https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1485437711:130,Safety,avoid,avoid,130,> I think for accumulation of a scalar you should use `val = Ref(0.0)` then `val[] += dt * d_val`. Thanks! Yeah it makes sense to avoid globals. I went with this suggestion,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3025#issuecomment-1485437711
https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482072176:40,Testability,test,test,40,@simone-silvestri is this done? shall I test it on my laptop?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482072176
https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482078115:38,Testability,test,tests,38,Sure give it a try. We can merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482078115
https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482092225:81,Testability,test,testing,81,"they seem to be finishing (~ 3hrs maybe). We should definitely separate the docs testing for when the PR is ready to merge, 3 hrs is a very long time for little returns",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482092225
https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085:637,Availability,down,downgraded,637,"Here's a simple hydrostatic model benchmark. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```julia; 10.220 s (85845109 allocations: 37.94 GiB) # this PR; 6.284 s (66184308 allocations: 16.31 GiB) # this PR with KA downgraded to 0.7.2; ```. So we are close but not there yet. What about solvers ... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085
https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085:34,Testability,benchmark,benchmark,34,"Here's a simple hydrostatic model benchmark. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```julia; 10.220 s (85845109 allocations: 37.94 GiB) # this PR; 6.284 s (66184308 allocations: 16.31 GiB) # this PR with KA downgraded to 0.7.2; ```. So we are close but not there yet. What about solvers ... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085
https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085:81,Testability,Benchmark,BenchmarkTools,81,"Here's a simple hydrostatic model benchmark. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```julia; 10.220 s (85845109 allocations: 37.94 GiB) # this PR; 6.284 s (66184308 allocations: 16.31 GiB) # this PR with KA downgraded to 0.7.2; ```. So we are close but not there yet. What about solvers ... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085
https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085:9,Usability,simpl,simple,9,"Here's a simple hydrostatic model benchmark. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```julia; 10.220 s (85845109 allocations: 37.94 GiB) # this PR; 6.284 s (66184308 allocations: 16.31 GiB) # this PR with KA downgraded to 0.7.2; ```. So we are close but not there yet. What about solvers ... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085
https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482192734:7,Usability,undo,undo,7,We can undo the merging by `git reset --hard ae12376d1e31128e2e17e6b9447e75d37510e550`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482192734
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482929337:14,Testability,test,test,14,I will try to test on GPU now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482929337
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482931094:278,Deployability,integrat,integrated,278,Another place I think we need to change is particle advection:; https://github.com/CliMA/Oceananigans.jl/blob/f3113c492f309846f026e0ac150dc8480f96e0f2/src/LagrangianParticleTracking/update_particle_properties.jl#L157-L161. Because currently background velocity fields don't get integrated which I think is wrong? At least in the case I was using them for I had to add the background velocities manually.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482931094
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482931094:278,Integrability,integrat,integrated,278,Another place I think we need to change is particle advection:; https://github.com/CliMA/Oceananigans.jl/blob/f3113c492f309846f026e0ac150dc8480f96e0f2/src/LagrangianParticleTracking/update_particle_properties.jl#L157-L161. Because currently background velocity fields don't get integrated which I think is wrong? At least in the case I was using them for I had to add the background velocities manually.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482931094
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482935693:292,Deployability,integrat,integrated,292,> Another place I think we need to change is particle advection:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/f3113c492f309846f026e0ac150dc8480f96e0f2/src/LagrangianParticleTracking/update_particle_properties.jl#L157-L161; > ; > Because currently background velocity fields don't get integrated which I think is wrong? At least in the case I was using them for I had to add the background velocities manually. Totally agree particles should be advected with prognostic + background,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482935693
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482935693:292,Integrability,integrat,integrated,292,> Another place I think we need to change is particle advection:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/f3113c492f309846f026e0ac150dc8480f96e0f2/src/LagrangianParticleTracking/update_particle_properties.jl#L157-L161; > ; > Because currently background velocity fields don't get integrated which I think is wrong? At least in the case I was using them for I had to add the background velocities manually. Totally agree particles should be advected with prognostic + background,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1482935693
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1485576383:39,Testability,test,tests,39,"I tried running some of the regression tests locally and they also fail, I can't see why this would cause different results given that the tests don't have background velocity fields?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1485576383
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1485576383:139,Testability,test,tests,139,"I tried running some of the regression tests locally and they also fail, I can't see why this would cause different results given that the tests don't have background velocity fields?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1485576383
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044:13,Testability,test,test,13,"I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test. I haven't tried the test on GPU either so suspect it may fail.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044:114,Testability,test,test,114,"I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test. I haven't tried the test on GPU either so suspect it may fail.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044:140,Testability,test,test,140,"I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test. I haven't tried the test on GPU either so suspect it may fail.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1487701044
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1490850779:452,Availability,error,error,452,"~~Is there a way around the order of `includ`ing files so that this works? If not, it probably isn't necessary to force that the `particles` slot in models is taken by a `Nothing` or `LagrangianParticles` as it is now? So we could get rid of the particles dependency in models and change the order to `include` particles after models?~~. ~~The only thing I can think of is that if a user passes something other than particles it might give a confusing error.~~. ~~I think I found a use case for removing the typing of the particles slot and overloading the update functions too but I can't remember what it was now.~~. This won't work because particles need to already be defined for the timesteppers. My other solution would be to define a function `total_velocities` that is defined somewhere early on, and then define new methods for each model?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1490850779
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1490850779:557,Deployability,update,update,557,"~~Is there a way around the order of `includ`ing files so that this works? If not, it probably isn't necessary to force that the `particles` slot in models is taken by a `Nothing` or `LagrangianParticles` as it is now? So we could get rid of the particles dependency in models and change the order to `include` particles after models?~~. ~~The only thing I can think of is that if a user passes something other than particles it might give a confusing error.~~. ~~I think I found a use case for removing the typing of the particles slot and overloading the update functions too but I can't remember what it was now.~~. This won't work because particles need to already be defined for the timesteppers. My other solution would be to define a function `total_velocities` that is defined somewhere early on, and then define new methods for each model?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1490850779
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1490850779:256,Integrability,depend,dependency,256,"~~Is there a way around the order of `includ`ing files so that this works? If not, it probably isn't necessary to force that the `particles` slot in models is taken by a `Nothing` or `LagrangianParticles` as it is now? So we could get rid of the particles dependency in models and change the order to `include` particles after models?~~. ~~The only thing I can think of is that if a user passes something other than particles it might give a confusing error.~~. ~~I think I found a use case for removing the typing of the particles slot and overloading the update functions too but I can't remember what it was now.~~. This won't work because particles need to already be defined for the timesteppers. My other solution would be to define a function `total_velocities` that is defined somewhere early on, and then define new methods for each model?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1490850779
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980:202,Security,validat,validation,202,"> I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test.; > ; > I haven't tried the test on GPU either so suspect it may fail. I think a validation case would be appropriate. Ideally we would run some kind of convergence test but we don't have capacity for that now I think. The validation case could go here: https://github.com/CliMA/Oceananigans.jl/tree/main/validation/advection",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980:344,Security,validat,validation,344,"> I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test.; > ; > I haven't tried the test on GPU either so suspect it may fail. I think a validation case would be appropriate. Ideally we would run some kind of convergence test but we don't have capacity for that now I think. The validation case could go here: https://github.com/CliMA/Oceananigans.jl/tree/main/validation/advection",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980:426,Security,validat,validation,426,"> I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test.; > ; > I haven't tried the test on GPU either so suspect it may fail. I think a validation case would be appropriate. Ideally we would run some kind of convergence test but we don't have capacity for that now I think. The validation case could go here: https://github.com/CliMA/Oceananigans.jl/tree/main/validation/advection",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980:15,Testability,test,test,15,"> I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test.; > ; > I haven't tried the test on GPU either so suspect it may fail. I think a validation case would be appropriate. Ideally we would run some kind of convergence test but we don't have capacity for that now I think. The validation case could go here: https://github.com/CliMA/Oceananigans.jl/tree/main/validation/advection",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980:116,Testability,test,test,116,"> I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test.; > ; > I haven't tried the test on GPU either so suspect it may fail. I think a validation case would be appropriate. Ideally we would run some kind of convergence test but we don't have capacity for that now I think. The validation case could go here: https://github.com/CliMA/Oceananigans.jl/tree/main/validation/advection",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980:149,Testability,test,test,149,"> I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test.; > ; > I haven't tried the test on GPU either so suspect it may fail. I think a validation case would be appropriate. Ideally we would run some kind of convergence test but we don't have capacity for that now I think. The validation case could go here: https://github.com/CliMA/Oceananigans.jl/tree/main/validation/advection",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980:286,Testability,test,test,286,"> I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test.; > ; > I haven't tried the test on GPU either so suspect it may fail. I think a validation case would be appropriate. Ideally we would run some kind of convergence test but we don't have capacity for that now I think. The validation case could go here: https://github.com/CliMA/Oceananigans.jl/tree/main/validation/advection",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493406171:457,Availability,error,error,457,"> ~Is there a way around the order of `includ`ing files so that this works? If not, it probably isn't necessary to force that the `particles` slot in models is taken by a `Nothing` or `LagrangianParticles` as it is now? So we could get rid of the particles dependency in models and change the order to `include` particles after models?~; > ; > ~The only thing I can think of is that if a user passes something other than particles it might give a confusing error.~; > ; > ~I think I found a use case for removing the typing of the particles slot and overloading the update functions too but I can't remember what it was now.~; > ; > This won't work because particles need to already be defined for the timesteppers. My other solution would be to define a function `total_velocities` that is defined somewhere early on, and then define new methods for each model?. What is the problem you are trying to solve?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493406171
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493406171:566,Deployability,update,update,566,"> ~Is there a way around the order of `includ`ing files so that this works? If not, it probably isn't necessary to force that the `particles` slot in models is taken by a `Nothing` or `LagrangianParticles` as it is now? So we could get rid of the particles dependency in models and change the order to `include` particles after models?~; > ; > ~The only thing I can think of is that if a user passes something other than particles it might give a confusing error.~; > ; > ~I think I found a use case for removing the typing of the particles slot and overloading the update functions too but I can't remember what it was now.~; > ; > This won't work because particles need to already be defined for the timesteppers. My other solution would be to define a function `total_velocities` that is defined somewhere early on, and then define new methods for each model?. What is the problem you are trying to solve?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493406171
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493406171:257,Integrability,depend,dependency,257,"> ~Is there a way around the order of `includ`ing files so that this works? If not, it probably isn't necessary to force that the `particles` slot in models is taken by a `Nothing` or `LagrangianParticles` as it is now? So we could get rid of the particles dependency in models and change the order to `include` particles after models?~; > ; > ~The only thing I can think of is that if a user passes something other than particles it might give a confusing error.~; > ; > ~I think I found a use case for removing the typing of the particles slot and overloading the update functions too but I can't remember what it was now.~; > ; > This won't work because particles need to already be defined for the timesteppers. My other solution would be to define a function `total_velocities` that is defined somewhere early on, and then define new methods for each model?. What is the problem you are trying to solve?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493406171
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496451340:42,Testability,test,tests,42,Is there currently a problem with the GPU tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496451340
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496611001:44,Testability,test,tests,44,> Is there currently a problem with the GPU tests?. I think yes.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496611001
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1511478427:33,Testability,test,tests,33,Should I have a go at fixing the tests @glwagner?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1511478427
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1513798221:35,Testability,test,tests,35,> Should I have a go at fixing the tests @glwagner?. I say go for it!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1513798221
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514579545:23,Availability,error,errors,23,Is there a way to make errors in kernels get thrown properly given the changes in #2924? Right now if something fails within a kernel no error is thrown (at least how it is being used in the particle tracking in main).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514579545
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514579545:137,Availability,error,error,137,Is there a way to make errors in kernels get thrown properly given the changes in #2924? Right now if something fails within a kernel no error is thrown (at least how it is being used in the particle tracking in main).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514579545
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514588771:118,Availability,error,error,118,"`KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514588771
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514588771:19,Integrability,synchroniz,synchronize,19,"`KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514588771
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017:120,Availability,error,error,120,"> `KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown. Thank you. I was about to comment this:; > Another thing with the new kernels. I believe I've now got the particle advection kernels working, but unless some event causes a delay, for example printing some informaiton out, the `advect_lagrangian_particles!` event does not finish before the test tries to test that its been correctly done which causes it to fail. . >If I change it so that `advect_lagrangian_particles!` returns `advect_particles_kernel!(...`, and wrap `advect_particles_kernel!` in wait (i.e. `wait(advect_lagrangian_particles!(particles, model, Δt))`) then it does run correctly. . >This seems like a bigger issue with how kernel events are working? If other events aren't being finished in order this might cause other issues?. But the new alternative should be to call `KernelAbstraction.synchronize(device(arch))` instead then?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017:21,Integrability,synchroniz,synchronize,21,"> `KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown. Thank you. I was about to comment this:; > Another thing with the new kernels. I believe I've now got the particle advection kernels working, but unless some event causes a delay, for example printing some informaiton out, the `advect_lagrangian_particles!` event does not finish before the test tries to test that its been correctly done which causes it to fail. . >If I change it so that `advect_lagrangian_particles!` returns `advect_particles_kernel!(...`, and wrap `advect_particles_kernel!` in wait (i.e. `wait(advect_lagrangian_particles!(particles, model, Δt))`) then it does run correctly. . >This seems like a bigger issue with how kernel events are working? If other events aren't being finished in order this might cause other issues?. But the new alternative should be to call `KernelAbstraction.synchronize(device(arch))` instead then?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017:608,Integrability,wrap,wrap,608,"> `KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown. Thank you. I was about to comment this:; > Another thing with the new kernels. I believe I've now got the particle advection kernels working, but unless some event causes a delay, for example printing some informaiton out, the `advect_lagrangian_particles!` event does not finish before the test tries to test that its been correctly done which causes it to fail. . >If I change it so that `advect_lagrangian_particles!` returns `advect_particles_kernel!(...`, and wrap `advect_particles_kernel!` in wait (i.e. `wait(advect_lagrangian_particles!(particles, model, Δt))`) then it does run correctly. . >This seems like a bigger issue with how kernel events are working? If other events aren't being finished in order this might cause other issues?. But the new alternative should be to call `KernelAbstraction.synchronize(device(arch))` instead then?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017:952,Integrability,synchroniz,synchronize,952,"> `KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown. Thank you. I was about to comment this:; > Another thing with the new kernels. I believe I've now got the particle advection kernels working, but unless some event causes a delay, for example printing some informaiton out, the `advect_lagrangian_particles!` event does not finish before the test tries to test that its been correctly done which causes it to fail. . >If I change it so that `advect_lagrangian_particles!` returns `advect_particles_kernel!(...`, and wrap `advect_particles_kernel!` in wait (i.e. `wait(advect_lagrangian_particles!(particles, model, Δt))`) then it does run correctly. . >This seems like a bigger issue with how kernel events are working? If other events aren't being finished in order this might cause other issues?. But the new alternative should be to call `KernelAbstraction.synchronize(device(arch))` instead then?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017:434,Testability,test,test,434,"> `KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown. Thank you. I was about to comment this:; > Another thing with the new kernels. I believe I've now got the particle advection kernels working, but unless some event causes a delay, for example printing some informaiton out, the `advect_lagrangian_particles!` event does not finish before the test tries to test that its been correctly done which causes it to fail. . >If I change it so that `advect_lagrangian_particles!` returns `advect_particles_kernel!(...`, and wrap `advect_particles_kernel!` in wait (i.e. `wait(advect_lagrangian_particles!(particles, model, Δt))`) then it does run correctly. . >This seems like a bigger issue with how kernel events are working? If other events aren't being finished in order this might cause other issues?. But the new alternative should be to call `KernelAbstraction.synchronize(device(arch))` instead then?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017:448,Testability,test,test,448,"> `KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown. Thank you. I was about to comment this:; > Another thing with the new kernels. I believe I've now got the particle advection kernels working, but unless some event causes a delay, for example printing some informaiton out, the `advect_lagrangian_particles!` event does not finish before the test tries to test that its been correctly done which causes it to fail. . >If I change it so that `advect_lagrangian_particles!` returns `advect_particles_kernel!(...`, and wrap `advect_particles_kernel!` in wait (i.e. `wait(advect_lagrangian_particles!(particles, model, Δt))`) then it does run correctly. . >This seems like a bigger issue with how kernel events are working? If other events aren't being finished in order this might cause other issues?. But the new alternative should be to call `KernelAbstraction.synchronize(device(arch))` instead then?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269:31,Integrability,synchroniz,synchronized,31,"I thought everything should be synchronized correctly actually. . If you are running on the GPU, the kernels run on a single stream at the moment (we still have to implement asynchronicity), so if you want to synchronize with the CPU you have to call `synchronize(device(arch))`, but that should happen automatically if you have a memory copy from device to host or vice-versa. . On the CPU, the launch is synchronized ; see KernelAbstraction.jl:; (this is the kernel launch wrapped in `@sync`; ``` ; @sync for tid in 1:Nthreads; Threads.@spawn __thread_run(tid, len, rem, obj, ndrange, iterspace, args, dynamic); end; ```; and, therefore `synchronize` does not do much; ```; synchronize(::CPU) = nothing; ```. where do you see this problem? Are you trying to look at GPU quantities from the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269:209,Integrability,synchroniz,synchronize,209,"I thought everything should be synchronized correctly actually. . If you are running on the GPU, the kernels run on a single stream at the moment (we still have to implement asynchronicity), so if you want to synchronize with the CPU you have to call `synchronize(device(arch))`, but that should happen automatically if you have a memory copy from device to host or vice-versa. . On the CPU, the launch is synchronized ; see KernelAbstraction.jl:; (this is the kernel launch wrapped in `@sync`; ``` ; @sync for tid in 1:Nthreads; Threads.@spawn __thread_run(tid, len, rem, obj, ndrange, iterspace, args, dynamic); end; ```; and, therefore `synchronize` does not do much; ```; synchronize(::CPU) = nothing; ```. where do you see this problem? Are you trying to look at GPU quantities from the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269:252,Integrability,synchroniz,synchronize,252,"I thought everything should be synchronized correctly actually. . If you are running on the GPU, the kernels run on a single stream at the moment (we still have to implement asynchronicity), so if you want to synchronize with the CPU you have to call `synchronize(device(arch))`, but that should happen automatically if you have a memory copy from device to host or vice-versa. . On the CPU, the launch is synchronized ; see KernelAbstraction.jl:; (this is the kernel launch wrapped in `@sync`; ``` ; @sync for tid in 1:Nthreads; Threads.@spawn __thread_run(tid, len, rem, obj, ndrange, iterspace, args, dynamic); end; ```; and, therefore `synchronize` does not do much; ```; synchronize(::CPU) = nothing; ```. where do you see this problem? Are you trying to look at GPU quantities from the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269:406,Integrability,synchroniz,synchronized,406,"I thought everything should be synchronized correctly actually. . If you are running on the GPU, the kernels run on a single stream at the moment (we still have to implement asynchronicity), so if you want to synchronize with the CPU you have to call `synchronize(device(arch))`, but that should happen automatically if you have a memory copy from device to host or vice-versa. . On the CPU, the launch is synchronized ; see KernelAbstraction.jl:; (this is the kernel launch wrapped in `@sync`; ``` ; @sync for tid in 1:Nthreads; Threads.@spawn __thread_run(tid, len, rem, obj, ndrange, iterspace, args, dynamic); end; ```; and, therefore `synchronize` does not do much; ```; synchronize(::CPU) = nothing; ```. where do you see this problem? Are you trying to look at GPU quantities from the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269:475,Integrability,wrap,wrapped,475,"I thought everything should be synchronized correctly actually. . If you are running on the GPU, the kernels run on a single stream at the moment (we still have to implement asynchronicity), so if you want to synchronize with the CPU you have to call `synchronize(device(arch))`, but that should happen automatically if you have a memory copy from device to host or vice-versa. . On the CPU, the launch is synchronized ; see KernelAbstraction.jl:; (this is the kernel launch wrapped in `@sync`; ``` ; @sync for tid in 1:Nthreads; Threads.@spawn __thread_run(tid, len, rem, obj, ndrange, iterspace, args, dynamic); end; ```; and, therefore `synchronize` does not do much; ```; synchronize(::CPU) = nothing; ```. where do you see this problem? Are you trying to look at GPU quantities from the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269:640,Integrability,synchroniz,synchronize,640,"I thought everything should be synchronized correctly actually. . If you are running on the GPU, the kernels run on a single stream at the moment (we still have to implement asynchronicity), so if you want to synchronize with the CPU you have to call `synchronize(device(arch))`, but that should happen automatically if you have a memory copy from device to host or vice-versa. . On the CPU, the launch is synchronized ; see KernelAbstraction.jl:; (this is the kernel launch wrapped in `@sync`; ``` ; @sync for tid in 1:Nthreads; Threads.@spawn __thread_run(tid, len, rem, obj, ndrange, iterspace, args, dynamic); end; ```; and, therefore `synchronize` does not do much; ```; synchronize(::CPU) = nothing; ```. where do you see this problem? Are you trying to look at GPU quantities from the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269:676,Integrability,synchroniz,synchronize,676,"I thought everything should be synchronized correctly actually. . If you are running on the GPU, the kernels run on a single stream at the moment (we still have to implement asynchronicity), so if you want to synchronize with the CPU you have to call `synchronize(device(arch))`, but that should happen automatically if you have a memory copy from device to host or vice-versa. . On the CPU, the launch is synchronized ; see KernelAbstraction.jl:; (this is the kernel launch wrapped in `@sync`; ``` ; @sync for tid in 1:Nthreads; Threads.@spawn __thread_run(tid, len, rem, obj, ndrange, iterspace, args, dynamic); end; ```; and, therefore `synchronize` does not do much; ```; synchronize(::CPU) = nothing; ```. where do you see this problem? Are you trying to look at GPU quantities from the CPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514616269
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514622516:48,Integrability,synchroniz,synchronization,48,"Ah ok I see, you still have to merge main. Then synchronization problems will be fixed",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514622516
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514627611:215,Testability,test,test,215,This was after merging main. If I don't include:; https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl#L131. The test for boundary restitution fails here:; https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/test/test_lagrangian_particle_tracking.jl#L90-L95. All just single threaded on CPU.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514627611
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514627611:345,Testability,test,test,345,This was after merging main. If I don't include:; https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl#L131. The test for boundary restitution fails here:; https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/test/test_lagrangian_particle_tracking.jl#L90-L95. All just single threaded on CPU.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514627611
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514637231:29,Integrability,synchroniz,synchronize,29,"Ok, let me take a look. That synchronize should not be necessary. Also this seems weird as . https://github.com/JuliaGPU/KernelAbstractions.jl/blob/5a30f7332e5190247742fa671a01724ae2ef254a/src/cpu.jl#L4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514637231
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514719890:23,Availability,error,error,23,"I cannot reproduce the error on Tartarus. if I remove. https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl#L131. `include(""test/test_lagrangian_particle_tracking.jl"")` passes. Can you try removing that line and we look at the buildkite error? Maybe it has resolved itself",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514719890
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514719890:339,Availability,error,error,339,"I cannot reproduce the error on Tartarus. if I remove. https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl#L131. `include(""test/test_lagrangian_particle_tracking.jl"")` passes. Can you try removing that line and we look at the buildkite error? Maybe it has resolved itself",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514719890
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514719890:226,Testability,test,test,226,"I cannot reproduce the error on Tartarus. if I remove. https://github.com/CliMA/Oceananigans.jl/blob/1db753ebeee2691205b7c0e6a03bba1ef9db4554/src/Models/LagrangianParticleTracking/LagrangianParticleTracking.jl#L131. `include(""test/test_lagrangian_particle_tracking.jl"")` passes. Can you try removing that line and we look at the buildkite error? Maybe it has resolved itself",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514719890
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1515044071:32,Testability,test,test,32,Not sure why the poisson solver test failed again but only on CPU,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1515044071
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1529918588:4,Testability,test,test,4,"The test passes locally so hopefully will work on this go, otherwise I think this is ready?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1529918588
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1532088152:116,Deployability,release,release,116,I see that this PR moved LangangianParticles module inside Models. This is breaking change and we should bump minor release.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1532088152
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1532748737:118,Deployability,release,release,118,> I see that this PR moved LangangianParticles module inside Models. This is breaking change and we should bump minor release. Do I just need to change the version number in `Project.toml`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1532748737
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1533796569:119,Security,validat,validation,119,"Is there any syntax change need to be made in . https://github.com/CliMA/Oceananigans.jl/blob/jsw/different-velocities/validation/lagrangian_particles/particles_in_convection.jl. I'm actually thinking now that if the name of the module didn't change, moving the module from `LagrangianParticleTracking` to `Models.LagrangianParticleTracking` might not imply any syntax change _given_ that the module name is exported. @glwagner?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1533796569
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1533815468:126,Security,validat,validation,126,"> Is there any syntax change need to be made in; > ; > https://github.com/CliMA/Oceananigans.jl/blob/jsw/different-velocities/validation/lagrangian_particles/particles_in_convection.jl; > ; > I'm actually thinking now that if the name of the module didn't change, moving the module from `LagrangianParticleTracking` to `Models.LagrangianParticleTracking` might not imply any syntax change _given_ that the module name is exported.; > ; > @glwagner?. Does it run?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1533815468
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1533877371:126,Security,validat,validation,126,"> > Is there any syntax change need to be made in; > > https://github.com/CliMA/Oceananigans.jl/blob/jsw/different-velocities/validation/lagrangian_particles/particles_in_convection.jl; > > I'm actually thinking now that if the name of the module didn't change, moving the module from `LagrangianParticleTracking` to `Models.LagrangianParticleTracking` might not imply any syntax change _given_ that the module name is exported.; > > @glwagner?; > ; > Does it run?. I see. The brute force approach. I'll try!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1533877371
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147:367,Security,validat,validating,367,"Just a few final details regarding the tests. Also the name ""update_lagrangian_particles!"" keeps confusing me, its hard to remember the difference between ""updating particles"" and ""updating particle properties"". Maybe `step_lagrangian_particles!` is a better name for that function (which is defined by `TimeSteppers`). There's also some stray stuff in the tests and validating that I'd rather get cleaned up before mergin, since it'll have to be cleaned up by ""someone"" sooner or later.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147:39,Testability,test,tests,39,"Just a few final details regarding the tests. Also the name ""update_lagrangian_particles!"" keeps confusing me, its hard to remember the difference between ""updating particles"" and ""updating particle properties"". Maybe `step_lagrangian_particles!` is a better name for that function (which is defined by `TimeSteppers`). There's also some stray stuff in the tests and validating that I'd rather get cleaned up before mergin, since it'll have to be cleaned up by ""someone"" sooner or later.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147:357,Testability,test,tests,357,"Just a few final details regarding the tests. Also the name ""update_lagrangian_particles!"" keeps confusing me, its hard to remember the difference between ""updating particles"" and ""updating particle properties"". Maybe `step_lagrangian_particles!` is a better name for that function (which is defined by `TimeSteppers`). There's also some stray stuff in the tests and validating that I'd rather get cleaned up before mergin, since it'll have to be cleaned up by ""someone"" sooner or later.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1568530147
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570636076:77,Deployability,configurat,configurations,77,Maybe it did need some of the overwrite existing because it writes different configurations to the same file. Update: passes locally if I add them back,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570636076
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570636076:110,Deployability,Update,Update,110,Maybe it did need some of the overwrite existing because it writes different configurations to the same file. Update: passes locally if I add them back,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570636076
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570636076:77,Modifiability,config,configurations,77,Maybe it did need some of the overwrite existing because it writes different configurations to the same file. Update: passes locally if I add them back,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570636076
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570923051:79,Deployability,configurat,configurations,79,> Maybe it did need some of the overwrite existing because it writes different configurations to the same file; > ; > Update: passes locally if I add them back. hmm ok that's ok. Could also just manually delete the existing files which might save future pain / confusion,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570923051
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570923051:118,Deployability,Update,Update,118,> Maybe it did need some of the overwrite existing because it writes different configurations to the same file; > ; > Update: passes locally if I add them back. hmm ok that's ok. Could also just manually delete the existing files which might save future pain / confusion,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570923051
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570923051:79,Modifiability,config,configurations,79,> Maybe it did need some of the overwrite existing because it writes different configurations to the same file; > ; > Update: passes locally if I add them back. hmm ok that's ok. Could also just manually delete the existing files which might save future pain / confusion,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1570923051
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1573678082:22,Testability,test,tests,22,Can I merge after the tests pass? And should I bump the version number?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1573678082
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1576845262:27,Testability,test,test,27,I'm struggling to fix this test failing and am not sure why its not passing the combined velocities correctly,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1576845262
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578487553:46,Testability,test,test,46,Please could someone try rerunning the failed test since it shouldn't have changed?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578487553
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578837795:48,Testability,test,test,48,> Please could someone try rerunning the failed test since it shouldn't have changed?. It seems it passed already,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578837795
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1579323172:50,Testability,test,test,50,"> > Please could someone try rerunning the failed test since it shouldn't have changed?; > ; > It seems it passed already. I think someone else must have restarted it, thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1579323172
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1590505343:144,Security,validat,validation,144,Great job guys. @jagoosw have you been able to run this (https://github.com/CliMA/Oceananigans.jl/blob/19dac0b8f6b621057e250ecf0510b3c4c91915e9/validation/lagrangian_particles/particles_in_convection.jl#L30) on GPU?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1590505343
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1590920430:333,Energy Efficiency,adapt,adapt,333,> Great job guys. @jagoosw have you been able to run this (https://github.com/CliMA/Oceananigans.jl/blob/19dac0b8f6b621057e250ecf0510b3c4c91915e9/validation/lagrangian_particles/particles_in_convection.jl#L30) on GPU?; > ; > . I haven't run that case on GPU but would have thought it will run if you change the grid architecture and adapt the initial particle positions (which is described in the simulation tips part of the docs). I can have a look later to see if I can run it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1590920430
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1590920430:333,Modifiability,adapt,adapt,333,> Great job guys. @jagoosw have you been able to run this (https://github.com/CliMA/Oceananigans.jl/blob/19dac0b8f6b621057e250ecf0510b3c4c91915e9/validation/lagrangian_particles/particles_in_convection.jl#L30) on GPU?; > ; > . I haven't run that case on GPU but would have thought it will run if you change the grid architecture and adapt the initial particle positions (which is described in the simulation tips part of the docs). I can have a look later to see if I can run it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1590920430
https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1590920430:146,Security,validat,validation,146,> Great job guys. @jagoosw have you been able to run this (https://github.com/CliMA/Oceananigans.jl/blob/19dac0b8f6b621057e250ecf0510b3c4c91915e9/validation/lagrangian_particles/particles_in_convection.jl#L30) on GPU?; > ; > . I haven't run that case on GPU but would have thought it will run if you change the grid architecture and adapt the initial particle positions (which is described in the simulation tips part of the docs). I can have a look later to see if I can run it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1590920430
https://github.com/CliMA/Oceananigans.jl/pull/3028#issuecomment-1485138938:3,Energy Efficiency,reduce,reduced,3,"We reduced the number of time steps and the size of the time step, effectively decreasing the simulation time. The leading theory is that non-linearities in the simulation were preventing bitwise reproducibility, so reducing the extent of the simulation did the job",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3028#issuecomment-1485138938
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1485908257:108,Testability,test,tests,108,"To see a larger difference you have to use a vertically implicit closure. ; Anyways, I ll also do some more tests",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1485908257
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486141613:111,Testability,test,tests,111,"> To see a larger difference you have to use a vertically implicit closure.; > Anyways, I ll also do some more tests. But you reported results with the BCI example, right? Or you used a different solver?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486141613
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486143133:72,Energy Efficiency,reduce,reduced,72,"I used `validation/mesoscale_turbulence/baroclinic_adjustment.jl` but I reduced the grid size. The big problem of main is the implicit solver, so if you don't use it you see only the difference given by the tracer tendencies, which is smaller. The results above, however, are obtained using exactly the same code you posted (on a mac M1 with one thread though, you use 6, so maybe that is the root cause of the difference)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486143133
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486143133:8,Security,validat,validation,8,"I used `validation/mesoscale_turbulence/baroclinic_adjustment.jl` but I reduced the grid size. The big problem of main is the implicit solver, so if you don't use it you see only the difference given by the tracer tendencies, which is smaller. The results above, however, are obtained using exactly the same code you posted (on a mac M1 with one thread though, you use 6, so maybe that is the root cause of the difference)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486143133
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486160028:74,Energy Efficiency,reduce,reduced,74,"> I used `validation/mesoscale_turbulence/baroclinic_adjustment.jl` but I reduced the grid size. The big problem of main is the implicit solver, so if you don't use it you see only the difference given by the tracer tendencies, which is smaller. The results above, however, are obtained using exactly the same code you posted (on a mac M1 with one thread though, you use 6, so maybe that is the root cause of the difference). with one thread. ### on `main`; ```Julia; julia> include(""/Users/navid/Desktop/bench_BCI.jl""); [ Info: Running the simulation...; [ Info: Initializing simulation...; [00.00%] i: 0, t: 0 seconds, wall time: 7.775 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 5.500 minutes; [ Info: ... simulation initialization complete (3.851 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (18.536 seconds).; [01.17%] i: 100, t: 11.193 hours, wall time: 1.978 minutes, max(u): (6.965e-01, 3.325e-01, 3.423e-03) m/s, next Δt: 8.858 minutes; [03.04%] i: 200, t: 1.217 days, wall time: 1.597 minutes, max(u): (5.961e-01, 3.542e-01, 2.452e-03) m/s, next Δt: 14.266 minutes; [06.04%] i: 300, t: 2.415 days, wall time: 1.589 minutes, max(u): (5.953e-01, 2.532e-01, 1.842e-03) m/s, next Δt: 20 minutes; [09.51%] i: 400, t: 3.804 days, wall time: 1.582 minutes, max(u): (5.110e-01, 2.416e-01, 1.716e-03) m/s, next Δt: 20 minutes; ```. ### on v0.79.2 (with KernelAbstractions v0.7.2, CUDAKernels v0.3.3); ```Julia; julia> include(""/Users/navid/Desktop/bench_BCI.jl""); [ Info: Running the simulation...; [ Info: Initializing simulation...; [00.00%] i: 0, t: 0 seconds, wall time: 5.919 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 5.500 minutes; [ Info: ... simulation initialization complete (1.889 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (35.835 seconds).; [01.17%] i: 100, t: 11.193 hours, wall time: 1.815 minutes, max(u): (6.956e-01, 3.317e-01, 3.438e-03) m/s, next ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486160028
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486160028:10,Security,validat,validation,10,"> I used `validation/mesoscale_turbulence/baroclinic_adjustment.jl` but I reduced the grid size. The big problem of main is the implicit solver, so if you don't use it you see only the difference given by the tracer tendencies, which is smaller. The results above, however, are obtained using exactly the same code you posted (on a mac M1 with one thread though, you use 6, so maybe that is the root cause of the difference). with one thread. ### on `main`; ```Julia; julia> include(""/Users/navid/Desktop/bench_BCI.jl""); [ Info: Running the simulation...; [ Info: Initializing simulation...; [00.00%] i: 0, t: 0 seconds, wall time: 7.775 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 5.500 minutes; [ Info: ... simulation initialization complete (3.851 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (18.536 seconds).; [01.17%] i: 100, t: 11.193 hours, wall time: 1.978 minutes, max(u): (6.965e-01, 3.325e-01, 3.423e-03) m/s, next Δt: 8.858 minutes; [03.04%] i: 200, t: 1.217 days, wall time: 1.597 minutes, max(u): (5.961e-01, 3.542e-01, 2.452e-03) m/s, next Δt: 14.266 minutes; [06.04%] i: 300, t: 2.415 days, wall time: 1.589 minutes, max(u): (5.953e-01, 2.532e-01, 1.842e-03) m/s, next Δt: 20 minutes; [09.51%] i: 400, t: 3.804 days, wall time: 1.582 minutes, max(u): (5.110e-01, 2.416e-01, 1.716e-03) m/s, next Δt: 20 minutes; ```. ### on v0.79.2 (with KernelAbstractions v0.7.2, CUDAKernels v0.3.3); ```Julia; julia> include(""/Users/navid/Desktop/bench_BCI.jl""); [ Info: Running the simulation...; [ Info: Initializing simulation...; [00.00%] i: 0, t: 0 seconds, wall time: 5.919 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 5.500 minutes; [ Info: ... simulation initialization complete (1.889 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (35.835 seconds).; [01.17%] i: 100, t: 11.193 hours, wall time: 1.815 minutes, max(u): (6.956e-01, 3.317e-01, 3.438e-03) m/s, next ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486160028
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486161704:32,Security,validat,validations,32,"But it's the same solver in the validations script also, right? The FFT solver...; Is there any other difference?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486161704
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486713707:34,Security,validat,validations,34,"> But it's the same solver in the validations script also, right? The FFT solver... Is there any other difference?. not the implicit free surface solver, the vertical tridiagonal solver that solves for implicit diffusion of tracer and momentum in the vertical",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486713707
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486715558:175,Performance,perform,performance,175,"> @simone-silvestri will the changes here impact CATKE on [CliMA/ClimaOcean.jl#17](https://github.com/CliMA/ClimaOcean.jl/pull/17) ?. not on the GPU, this PR affects only CPU performance",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486715558
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1487536293:183,Performance,perform,performance,183,"> > @simone-silvestri will the changes here impact CATKE on [CliMA/ClimaOcean.jl#17](https://github.com/CliMA/ClimaOcean.jl/pull/17) ?; > ; > not on the GPU, this PR affects only CPU performance. sorry, I was not clear... I was asking whether any syntax for adding parametrization with additional tracers changed. (But I think, no, right?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1487536293
https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1487536293:213,Usability,clear,clear,213,"> > @simone-silvestri will the changes here impact CATKE on [CliMA/ClimaOcean.jl#17](https://github.com/CliMA/ClimaOcean.jl/pull/17) ?; > ; > not on the GPU, this PR affects only CPU performance. sorry, I was not clear... I was asking whether any syntax for adding parametrization with additional tracers changed. (But I think, no, right?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1487536293
https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980:55,Deployability,update,updated,55,"> It may be that several other dependencies need to be updated. Yep, a few others updated when I ran . ```julia; (Oceananigans) pkg> update SeawaterPolynomials; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980
https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980:82,Deployability,update,updated,82,"> It may be that several other dependencies need to be updated. Yep, a few others updated when I ran . ```julia; (Oceananigans) pkg> update SeawaterPolynomials; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980
https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980:133,Deployability,update,update,133,"> It may be that several other dependencies need to be updated. Yep, a few others updated when I ran . ```julia; (Oceananigans) pkg> update SeawaterPolynomials; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980
https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980:31,Integrability,depend,dependencies,31,"> It may be that several other dependencies need to be updated. Yep, a few others updated when I ran . ```julia; (Oceananigans) pkg> update SeawaterPolynomials; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488008980
https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488032275:170,Deployability,update,updates,170,"So some of the doctests fail. You can see, e.g., here; https://buildkite.com/clima/oceananigans/builds/10843#01872c04-2d2f-4dbb-94b3-925c0252a815; Seems like some of the updates introduced some more methods for `cos` :); So if you change that 26 --> 30 it should work.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1488032275
https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1498450464:59,Testability,test,tests,59,"(@jbisits, we have some issues with the CI. But as soon as tests pass I'll merge this.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3035#issuecomment-1498450464
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708:249,Deployability,continuous,continuous,249,"OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. Usually systems with imposed mean flow _do not_ have an energy integral. This is a side-effect of the system not being energetically closed since something is continuously putting energy in to keep that mean flow fixed. E.g., Phillips 2-layer baroclinic instability where an imposed mean flow is kept fixed then kinetic energy grows... I'm not sure if this imposed mean buoyancy does this in this example, but here's an example in which the imposed mean flow does not guarantee that kinetic energy will decay:. Take periodic boundary conditions in x and y and 2D flow $\boldsymbol{u}(\boldsymbol{x}, t) = (u(x, y, t), v(x, y, t))$. Then,. $$; \begin{gather}; \partial_t u + u\partial_x u + v\partial_y u = ν \nabla^2 u \\; \partial_t v + u\partial_x v + v\partial_y v = ν \nabla^2 v\\; \partial_x u + \partial_y v = 0; \end{gather}; $$. implies that . $$; \begin{align}; \frac{\mathrm{d}}{\mathrm{d}t} \int \frac1{2} (u^2+v^2) \mathrm{d}^2\boldsymbol{x} &= \int (u \partial_t u + v \partial_t v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int (u^2 \partial_x u + u v \partial_y u + u v \partial_x v + v^2 \partial_y v) \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int [u \partial_x ( u^2+v^2)/2 + v \partial_y ( u^2+v^2)/2 ] \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \underbrace{\int \boldsymbol{\nabla \cdot} \left[ \boldsymbol{u} \ \frac1{2}( u^2+v^2) \right] \mathrm{d}^2\boldsymbol{x}}_{=0 \text{ from boundary conditions}} - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \\; &= - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \mathrm{d}^2\b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708:501,Deployability,continuous,continuously,501,"OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. Usually systems with imposed mean flow _do not_ have an energy integral. This is a side-effect of the system not being energetically closed since something is continuously putting energy in to keep that mean flow fixed. E.g., Phillips 2-layer baroclinic instability where an imposed mean flow is kept fixed then kinetic energy grows... I'm not sure if this imposed mean buoyancy does this in this example, but here's an example in which the imposed mean flow does not guarantee that kinetic energy will decay:. Take periodic boundary conditions in x and y and 2D flow $\boldsymbol{u}(\boldsymbol{x}, t) = (u(x, y, t), v(x, y, t))$. Then,. $$; \begin{gather}; \partial_t u + u\partial_x u + v\partial_y u = ν \nabla^2 u \\; \partial_t v + u\partial_x v + v\partial_y v = ν \nabla^2 v\\; \partial_x u + \partial_y v = 0; \end{gather}; $$. implies that . $$; \begin{align}; \frac{\mathrm{d}}{\mathrm{d}t} \int \frac1{2} (u^2+v^2) \mathrm{d}^2\boldsymbol{x} &= \int (u \partial_t u + v \partial_t v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int (u^2 \partial_x u + u v \partial_y u + u v \partial_x v + v^2 \partial_y v) \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int [u \partial_x ( u^2+v^2)/2 + v \partial_y ( u^2+v^2)/2 ] \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \underbrace{\int \boldsymbol{\nabla \cdot} \left[ \boldsymbol{u} \ \frac1{2}( u^2+v^2) \right] \mathrm{d}^2\boldsymbol{x}}_{=0 \text{ from boundary conditions}} - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \\; &= - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \mathrm{d}^2\b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708:150,Energy Efficiency,energy,energy,150,"OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. Usually systems with imposed mean flow _do not_ have an energy integral. This is a side-effect of the system not being energetically closed since something is continuously putting energy in to keep that mean flow fixed. E.g., Phillips 2-layer baroclinic instability where an imposed mean flow is kept fixed then kinetic energy grows... I'm not sure if this imposed mean buoyancy does this in this example, but here's an example in which the imposed mean flow does not guarantee that kinetic energy will decay:. Take periodic boundary conditions in x and y and 2D flow $\boldsymbol{u}(\boldsymbol{x}, t) = (u(x, y, t), v(x, y, t))$. Then,. $$; \begin{gather}; \partial_t u + u\partial_x u + v\partial_y u = ν \nabla^2 u \\; \partial_t v + u\partial_x v + v\partial_y v = ν \nabla^2 v\\; \partial_x u + \partial_y v = 0; \end{gather}; $$. implies that . $$; \begin{align}; \frac{\mathrm{d}}{\mathrm{d}t} \int \frac1{2} (u^2+v^2) \mathrm{d}^2\boldsymbol{x} &= \int (u \partial_t u + v \partial_t v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int (u^2 \partial_x u + u v \partial_y u + u v \partial_x v + v^2 \partial_y v) \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int [u \partial_x ( u^2+v^2)/2 + v \partial_y ( u^2+v^2)/2 ] \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \underbrace{\int \boldsymbol{\nabla \cdot} \left[ \boldsymbol{u} \ \frac1{2}( u^2+v^2) \right] \mathrm{d}^2\boldsymbol{x}}_{=0 \text{ from boundary conditions}} - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \\; &= - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \mathrm{d}^2\b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708:398,Energy Efficiency,energy,energy,398,"OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. Usually systems with imposed mean flow _do not_ have an energy integral. This is a side-effect of the system not being energetically closed since something is continuously putting energy in to keep that mean flow fixed. E.g., Phillips 2-layer baroclinic instability where an imposed mean flow is kept fixed then kinetic energy grows... I'm not sure if this imposed mean buoyancy does this in this example, but here's an example in which the imposed mean flow does not guarantee that kinetic energy will decay:. Take periodic boundary conditions in x and y and 2D flow $\boldsymbol{u}(\boldsymbol{x}, t) = (u(x, y, t), v(x, y, t))$. Then,. $$; \begin{gather}; \partial_t u + u\partial_x u + v\partial_y u = ν \nabla^2 u \\; \partial_t v + u\partial_x v + v\partial_y v = ν \nabla^2 v\\; \partial_x u + \partial_y v = 0; \end{gather}; $$. implies that . $$; \begin{align}; \frac{\mathrm{d}}{\mathrm{d}t} \int \frac1{2} (u^2+v^2) \mathrm{d}^2\boldsymbol{x} &= \int (u \partial_t u + v \partial_t v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int (u^2 \partial_x u + u v \partial_y u + u v \partial_x v + v^2 \partial_y v) \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int [u \partial_x ( u^2+v^2)/2 + v \partial_y ( u^2+v^2)/2 ] \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \underbrace{\int \boldsymbol{\nabla \cdot} \left[ \boldsymbol{u} \ \frac1{2}( u^2+v^2) \right] \mathrm{d}^2\boldsymbol{x}}_{=0 \text{ from boundary conditions}} - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \\; &= - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \mathrm{d}^2\b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708:522,Energy Efficiency,energy,energy,522,"OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. Usually systems with imposed mean flow _do not_ have an energy integral. This is a side-effect of the system not being energetically closed since something is continuously putting energy in to keep that mean flow fixed. E.g., Phillips 2-layer baroclinic instability where an imposed mean flow is kept fixed then kinetic energy grows... I'm not sure if this imposed mean buoyancy does this in this example, but here's an example in which the imposed mean flow does not guarantee that kinetic energy will decay:. Take periodic boundary conditions in x and y and 2D flow $\boldsymbol{u}(\boldsymbol{x}, t) = (u(x, y, t), v(x, y, t))$. Then,. $$; \begin{gather}; \partial_t u + u\partial_x u + v\partial_y u = ν \nabla^2 u \\; \partial_t v + u\partial_x v + v\partial_y v = ν \nabla^2 v\\; \partial_x u + \partial_y v = 0; \end{gather}; $$. implies that . $$; \begin{align}; \frac{\mathrm{d}}{\mathrm{d}t} \int \frac1{2} (u^2+v^2) \mathrm{d}^2\boldsymbol{x} &= \int (u \partial_t u + v \partial_t v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int (u^2 \partial_x u + u v \partial_y u + u v \partial_x v + v^2 \partial_y v) \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int [u \partial_x ( u^2+v^2)/2 + v \partial_y ( u^2+v^2)/2 ] \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \underbrace{\int \boldsymbol{\nabla \cdot} \left[ \boldsymbol{u} \ \frac1{2}( u^2+v^2) \right] \mathrm{d}^2\boldsymbol{x}}_{=0 \text{ from boundary conditions}} - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \\; &= - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \mathrm{d}^2\b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708:662,Energy Efficiency,energy,energy,662,"OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. Usually systems with imposed mean flow _do not_ have an energy integral. This is a side-effect of the system not being energetically closed since something is continuously putting energy in to keep that mean flow fixed. E.g., Phillips 2-layer baroclinic instability where an imposed mean flow is kept fixed then kinetic energy grows... I'm not sure if this imposed mean buoyancy does this in this example, but here's an example in which the imposed mean flow does not guarantee that kinetic energy will decay:. Take periodic boundary conditions in x and y and 2D flow $\boldsymbol{u}(\boldsymbol{x}, t) = (u(x, y, t), v(x, y, t))$. Then,. $$; \begin{gather}; \partial_t u + u\partial_x u + v\partial_y u = ν \nabla^2 u \\; \partial_t v + u\partial_x v + v\partial_y v = ν \nabla^2 v\\; \partial_x u + \partial_y v = 0; \end{gather}; $$. implies that . $$; \begin{align}; \frac{\mathrm{d}}{\mathrm{d}t} \int \frac1{2} (u^2+v^2) \mathrm{d}^2\boldsymbol{x} &= \int (u \partial_t u + v \partial_t v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int (u^2 \partial_x u + u v \partial_y u + u v \partial_x v + v^2 \partial_y v) \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int [u \partial_x ( u^2+v^2)/2 + v \partial_y ( u^2+v^2)/2 ] \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \underbrace{\int \boldsymbol{\nabla \cdot} \left[ \boldsymbol{u} \ \frac1{2}( u^2+v^2) \right] \mathrm{d}^2\boldsymbol{x}}_{=0 \text{ from boundary conditions}} - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \\; &= - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \mathrm{d}^2\b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708:833,Energy Efficiency,energy,energy,833,"OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. Usually systems with imposed mean flow _do not_ have an energy integral. This is a side-effect of the system not being energetically closed since something is continuously putting energy in to keep that mean flow fixed. E.g., Phillips 2-layer baroclinic instability where an imposed mean flow is kept fixed then kinetic energy grows... I'm not sure if this imposed mean buoyancy does this in this example, but here's an example in which the imposed mean flow does not guarantee that kinetic energy will decay:. Take periodic boundary conditions in x and y and 2D flow $\boldsymbol{u}(\boldsymbol{x}, t) = (u(x, y, t), v(x, y, t))$. Then,. $$; \begin{gather}; \partial_t u + u\partial_x u + v\partial_y u = ν \nabla^2 u \\; \partial_t v + u\partial_x v + v\partial_y v = ν \nabla^2 v\\; \partial_x u + \partial_y v = 0; \end{gather}; $$. implies that . $$; \begin{align}; \frac{\mathrm{d}}{\mathrm{d}t} \int \frac1{2} (u^2+v^2) \mathrm{d}^2\boldsymbol{x} &= \int (u \partial_t u + v \partial_t v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int (u^2 \partial_x u + u v \partial_y u + u v \partial_x v + v^2 \partial_y v) \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \int [u \partial_x ( u^2+v^2)/2 + v \partial_y ( u^2+v^2)/2 ] \mathrm{d}^2\boldsymbol{x} + ν \int (u \nabla^2 u + v \nabla^2 v) \mathrm{d}^2\boldsymbol{x} \\; &= - \underbrace{\int \boldsymbol{\nabla \cdot} \left[ \boldsymbol{u} \ \frac1{2}( u^2+v^2) \right] \mathrm{d}^2\boldsymbol{x}}_{=0 \text{ from boundary conditions}} - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \\; &= - ν \int | \boldsymbol{\nabla} \boldsymbol{u}|^2 \mathrm{d}^2\b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1487989708
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:362,Deployability,continuous,continuous,362,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:263,Energy Efficiency,energy,energy,263,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:557,Energy Efficiency,energy,energy,557,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:667,Energy Efficiency,energy,energy,667,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:748,Energy Efficiency,energy,energy,748,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:1497,Energy Efficiency,energy,energy,1497,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:740,Integrability,inject,injects,740,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:910,Modifiability,config,configurable,910,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882:740,Security,inject,injects,740,"> OK, perhaps I'm a bit oblivious to physics of tilted gravity etc. Are is the tilted gravity crucially important for this to occur?. Apparently yes. This doesn't happen when the buoyancy acceleration is aligned with the model's z-coordinate. > Also, is there an energy integral associated with these dynamics when there is a fixed imposed buoyancy? Even in the continuous case, before we go to discrete world, is there guarantee that E should decrease?. That's a good point and as far as I can tell this system should have a a finite, non-increasing total energy since the background buoyancy is stable. So the background buoyancy shouldn't be introducing any extra energy reservoirs (unlike, for example, an Eady set-up, which constantly injects energy into the system by imposing a horizontal buoyancy gradient). My understanding of this comes mainly from [Umlauf et al (2015)](https://journals.ametsoc.org/configurable/content/journals$002fphoc$002f45$002f12$002fjpo-d-15-0041.1.xml?t:ac=journals%24002fphoc%24002f45%24002f12%24002fjpo-d-15-0041.1.xml). Their equation (24) applied to the set-up above (i.e. without any boundary stresses and without applying a Reynolds decomposition) reads. ```math; \frac{d}{dt}\int_V \left[ \frac{u_i u_i}{2} + \frac{b^2}{2N^2} \right] dV = ; - \int_V \left[ ; \kappa \frac{\partial_j b \partial_j b}{N^2} ; + \nu {\partial_j u_i \partial_j u_i}; \right] dV \le 0; ```. Also it's worth noting that even in a `(Bounded, Flat, Bounded)` domain I still get an energy buildup, although in this case the KE stops growing after a while:. https://user-images.githubusercontent.com/13205162/228590310-51b59910-2550-48c9-93a7-f22d70c2474e.mp4. I say that because this may be a more familiar set-up and because sometimes a tilted, periodic domain might introduce some unexpected effects.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1488852882
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1490474866:474,Modifiability,layers,layers,474,"> Just to clarify a point here. The background field here does not participate in the hydrostatic pressure, it only adds an advective term to the tracer equation which reads ∇⋅(uB). So in practice, you are solving; > ; > ∂tu+(u⋅∇)u=−∇p+g^b+Di(u) ∂tb+∇⋅(ub)+∇⋅(uB)=Di(b)+Di(B) where Di is the implicit diffusion coming from 5th order upwind. Yup, and just to clarify the physics behind this set-up, it is necessary when simulating things like doubly-periodic tilted boundary layers in a stratified environment (such as our [tilted bottom example](https://clima.github.io/OceananigansDocumentation/stable/generated/tilted_bottom_boundary_layer/)). @simone-silvestri not to sidetrack from the issue but isn't $\mathcal D_i(B)$ ignored in the evolution equation? I got that impression from reading the docs [here](https://clima.github.io/OceananigansDocumentation/stable/model_setup/background_fields/) and [here](https://clima.github.io/OceananigansDocumentation/stable/physics/nonhydrostatic_model/).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1490474866
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1516888622:359,Testability,test,test,359,"@simone-silvestri I was able to try this simulation using the same advection scheme for all velocities and fields using the branch in https://github.com/CliMA/Oceananigans.jl/pull/3027. More precisely I resolved the same simulation with only one call to `div_Uc` using `SumOfArrays(velocities)` and `SumOfArrays(tracers)`, which I think is the correct way to test this, and the results were the same. Furthermore, I also ran this without doing hydrostatic pressure separation using [this branch](https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2) and the results were pretty disastrous:. https://user-images.githubusercontent.com/13205162/233477175-159e2c66-63dc-44aa-80a8-142c06d04443.mp4. That said, I think in this last animation the noise emerges from the top and propagates to the bottom, while in all my other attempts the noise always appears to emerge at the bottom and propagate upwards. I wonder if that's a clue as to what's happening.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1516888622
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517138575:224,Deployability,continuous,continuously,224,"that looks very weird! But it is structured in some sense, it looks like the initial condition has some inbalances that generate noise which gets cleaned up by numerical diffusion. Interesting also that buoyancy extrema are continuously increasing in magnitude. If this is not happening with z-directed gravity, it might really be that there is some bug/incorrectness in the buoyancy model. A way to test this would be to recreate the same setup with z-directed gravity and use an immersed boundary to represent the tilt. If that case behaves as expected we know where to focus.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517138575
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517138575:400,Testability,test,test,400,"that looks very weird! But it is structured in some sense, it looks like the initial condition has some inbalances that generate noise which gets cleaned up by numerical diffusion. Interesting also that buoyancy extrema are continuously increasing in magnitude. If this is not happening with z-directed gravity, it might really be that there is some bug/incorrectness in the buoyancy model. A way to test this would be to recreate the same setup with z-directed gravity and use an immersed boundary to represent the tilt. If that case behaves as expected we know where to focus.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517138575
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517933687:498,Energy Efficiency,energy,energy,498,"> Have you tried adding background diffusion? We found in another issue that nearly linear dynamics can be noisy even with upwinding (when the velocities are small, the diffusion added by upwinded advection can be negligible). Laplacian or hyperdiffusion may help control noise. Yes I did. The issue still persists with all advection schemes I've tried so far and with any ""reasonable"" value of molecular diffusion. I say reasonable because if I keep cranking up the diffusivity, at some point the energy accumulation will stop, but so will most of the interesting dynamics that one might be interested in. As an example, here's how the simulation looks like with `ScalarDiffusivity(ν=1e-4, κ=1e-4)` and `θ_rad = 0.15`:. https://user-images.githubusercontent.com/13205162/233661938-73c71f1c-2a9e-4013-ab3d-e23a29e0d5b6.mp4. I only get a decrease in energy over time if I use a viscosity/diffusivity of around 1e-3, which I consider to be pretty high.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517933687
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517933687:849,Energy Efficiency,energy,energy,849,"> Have you tried adding background diffusion? We found in another issue that nearly linear dynamics can be noisy even with upwinding (when the velocities are small, the diffusion added by upwinded advection can be negligible). Laplacian or hyperdiffusion may help control noise. Yes I did. The issue still persists with all advection schemes I've tried so far and with any ""reasonable"" value of molecular diffusion. I say reasonable because if I keep cranking up the diffusivity, at some point the energy accumulation will stop, but so will most of the interesting dynamics that one might be interested in. As an example, here's how the simulation looks like with `ScalarDiffusivity(ν=1e-4, κ=1e-4)` and `θ_rad = 0.15`:. https://user-images.githubusercontent.com/13205162/233661938-73c71f1c-2a9e-4013-ab3d-e23a29e0d5b6.mp4. I only get a decrease in energy over time if I use a viscosity/diffusivity of around 1e-3, which I consider to be pretty high.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517933687
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385:226,Deployability,continuous,continuously,226,"> that looks very weird! But it is structured in some sense, it looks like the initial condition has some inbalances that generate noise which gets cleaned up by numerical diffusion. Interesting also that buoyancy extrema are continuously increasing in magnitude. If this is not happening with z-directed gravity, it might really be that there is some bug/incorrectness in the buoyancy model. A way to test this would be to recreate the same setup with z-directed gravity and use an immersed boundary to represent the tilt. If that case behaves as expected we know where to focus. @simone-silvestri I'm not sure if that'd be an apples-to-apples comparison. We'd be comparing a domain with smooth tilted boundaries (using the rotated buoyancy) against a domain with jagged tilted boundaries (using our grid-fitted IB). So I'm not sure what we could learn there (please lmk if I'm missing something here). That said, I think it's worth the shot so I might try to implement that soon and see what happens.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385:402,Testability,test,test,402,"> that looks very weird! But it is structured in some sense, it looks like the initial condition has some inbalances that generate noise which gets cleaned up by numerical diffusion. Interesting also that buoyancy extrema are continuously increasing in magnitude. If this is not happening with z-directed gravity, it might really be that there is some bug/incorrectness in the buoyancy model. A way to test this would be to recreate the same setup with z-directed gravity and use an immersed boundary to represent the tilt. If that case behaves as expected we know where to focus. @simone-silvestri I'm not sure if that'd be an apples-to-apples comparison. We'd be comparing a domain with smooth tilted boundaries (using the rotated buoyancy) against a domain with jagged tilted boundaries (using our grid-fitted IB). So I'm not sure what we could learn there (please lmk if I'm missing something here). That said, I think it's worth the shot so I might try to implement that soon and see what happens.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385:848,Usability,learn,learn,848,"> that looks very weird! But it is structured in some sense, it looks like the initial condition has some inbalances that generate noise which gets cleaned up by numerical diffusion. Interesting also that buoyancy extrema are continuously increasing in magnitude. If this is not happening with z-directed gravity, it might really be that there is some bug/incorrectness in the buoyancy model. A way to test this would be to recreate the same setup with z-directed gravity and use an immersed boundary to represent the tilt. If that case behaves as expected we know where to focus. @simone-silvestri I'm not sure if that'd be an apples-to-apples comparison. We'd be comparing a domain with smooth tilted boundaries (using the rotated buoyancy) against a domain with jagged tilted boundaries (using our grid-fitted IB). So I'm not sure what we could learn there (please lmk if I'm missing something here). That said, I think it's worth the shot so I might try to implement that soon and see what happens.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517952596:155,Energy Efficiency,energy,energy,155,"It would for sure introduce noise because of the jagged bottom, maybe try cranking up a bit the resolution to have less bathymetry imprinting. But, if the energy does not increase we found our culprit.; Anyways, I don't think it's an advection scheme problem. It might be something more fundamental about this setup or about tilted gravity per se.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517952596
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517987325:154,Usability,clear,clear,154,"> Yes I did. The issue still persists with all advection schemes I've tried so far and with any ""reasonable"" value of molecular diffusion. Maybe I wasn't clear, the point is that if the dynamics are linear or small-amplitude then advection doesn't play a role; it wouldn't matter what advection scheme you use. The term is small. Does hyperviscosity / hyperdiffusion allow stable simulations with non-trivial dynamics?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517987325
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1518004444:163,Usability,clear,clear,163,"> > Yes I did. The issue still persists with all advection schemes I've tried so far and with any ""reasonable"" value of molecular diffusion.; > ; > Maybe I wasn't clear, the point is that if the dynamics are linear or small-amplitude then advection doesn't play a role; it wouldn't matter what advection scheme you use. The term is small. I see. Agreed. > Does hyperviscosity / hyperdiffusion allow stable simulations with non-trivial dynamics?. I haven't tried it. Possibly. But the simulations I'm using this set-up for are LES. Assuming adding hyperviscosity does do what you're suggesting, I'm not sure how ""correct"" it is to use that along with a large-eddy simulation closure. (I think here are arguments to be made for both sides.). That said, it's worth the shot. Although tbh I have no idea what a reasonable value for hyperviscosity is since I've never used it :joy: . What would be a fair value to include in this MWE?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1518004444
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1518010193:1151,Energy Efficiency,adapt,adaptive-order,1151,"Hyperviscosity _is_ an LES closure. It's not just a great one because it requires tuning (ie you have to select the hyperviscosity, and the hyperviscosity doesn't change). You can use a scaling argument to find the hyperviscosity:. $$ \nu_4 = \Delta^4 / \tau $$. where $\Delta$ is a length scale (typically the grid spacing) and $\tau$ is the time-scale over which you'd like to damp grid scale motions. The longer the better. Perhaps you can estimate a time-scale in terms of the buoyancy frequency (eg to damp grid scale buoyancy oscillations) --- like $\tau = C / N$ where $N$ is the buoyancy frequency and $C$ is a constant (perhaps not O(1)). $C = 10$ could be a good starting point. If you need more dissipation then decrease $C$, if you need less increase $C$. Its not ""less correct"" than an LES closure. (Both are closures, not exact.) As for all LES or macroscale computational science in general the goal is to find solutions with statistics of interest that are indepednent of resolution. Note that upwinding can be thought of as adding hyperdissipation which scales with the velocity (similar to traditional LES closures in fact). WENO is adaptive-order hyperdissipation, from biharmonic on up. Personally I suspect that WENO produces more physical solutions than ""traditional"" LES closures.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1518010193
https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1518010193:1151,Modifiability,adapt,adaptive-order,1151,"Hyperviscosity _is_ an LES closure. It's not just a great one because it requires tuning (ie you have to select the hyperviscosity, and the hyperviscosity doesn't change). You can use a scaling argument to find the hyperviscosity:. $$ \nu_4 = \Delta^4 / \tau $$. where $\Delta$ is a length scale (typically the grid spacing) and $\tau$ is the time-scale over which you'd like to damp grid scale motions. The longer the better. Perhaps you can estimate a time-scale in terms of the buoyancy frequency (eg to damp grid scale buoyancy oscillations) --- like $\tau = C / N$ where $N$ is the buoyancy frequency and $C$ is a constant (perhaps not O(1)). $C = 10$ could be a good starting point. If you need more dissipation then decrease $C$, if you need less increase $C$. Its not ""less correct"" than an LES closure. (Both are closures, not exact.) As for all LES or macroscale computational science in general the goal is to find solutions with statistics of interest that are indepednent of resolution. Note that upwinding can be thought of as adding hyperdissipation which scales with the velocity (similar to traditional LES closures in fact). WENO is adaptive-order hyperdissipation, from biharmonic on up. Personally I suspect that WENO produces more physical solutions than ""traditional"" LES closures.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1518010193
https://github.com/CliMA/Oceananigans.jl/pull/3037#issuecomment-1489468511:476,Integrability,depend,depending,476,"Ok, I was a bit unsure which CFL definition is the best, so I checked the 2D stability and I got a slightly better proof. ; Let's start with the discretized version of the 2D advection equation (forward euler and 2nd order centered finite volume on a staggered regular cartesian grid) ; $$\frac{c^{n+1} - c^n}{\Delta t} = u \left( \frac{c^n_i - c^n_{i-1}}{\Delta x}\right) + v \left( \frac{c^n_j - c^n_{j-1}}{\Delta y}\right)$$ ; Let's assume that c is a two-dimensional wave depending on an x wavenumber $\kappa$, a y wavenumber $\mathcal{l}$, and a time-dependent amplification factor $\xi(t)$, then; $c^n_{ij} = \xi^n \exp{(- \Im \kappa \cdot i \Delta x - \Im \mathcal{l} \cdot j \Delta y)}$. (because of overlap with the x-index $i$, I defined $\Im$ as the imaginary number $\Im = \sqrt{-1}$); Substituting this definition of $c$ and dividing through by $c^n_{ij}$ we get; $$\frac{\xi^{n+1} / \xi^n - 1}{\Delta t} = u \left(\frac{1 - \exp{(- \Im \kappa \Delta x)}}{\Delta x}\right) + v \left(\frac{1 - \exp{(- \Im \mathcal{l} \Delta y)}}{\\Delta y}\right)$$; we can make use of $\exp{\Im \theta} = \cos{\theta} + \Im \sin{\theta}$ and rewrite a bit:; $$\frac{\xi^{n+1}}{\xi^n} = 1 + \Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} + \Im \sin{\kappa\Delta x}\right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} + \Im \sin{\mathcal{l} \Delta y} \right) \right]$$; Now, to ensure stability, the real part of $\xi^{n+1} / \xi^n$ should be bounded, so we have to ensure that; $$\left| \Re \left( \frac{\xi^{n+1}}{\xi^n} \right) \right| < 1$$; This yields; $$-2 < \Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} \right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} \right) \right] < 0$$; The right inequality does not limit $\Delta t$, but the left does:; $$\Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} \right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} \right) \right] < 2$$; T",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3037#issuecomment-1489468511
https://github.com/CliMA/Oceananigans.jl/pull/3037#issuecomment-1489468511:556,Integrability,depend,dependent,556,"Ok, I was a bit unsure which CFL definition is the best, so I checked the 2D stability and I got a slightly better proof. ; Let's start with the discretized version of the 2D advection equation (forward euler and 2nd order centered finite volume on a staggered regular cartesian grid) ; $$\frac{c^{n+1} - c^n}{\Delta t} = u \left( \frac{c^n_i - c^n_{i-1}}{\Delta x}\right) + v \left( \frac{c^n_j - c^n_{j-1}}{\Delta y}\right)$$ ; Let's assume that c is a two-dimensional wave depending on an x wavenumber $\kappa$, a y wavenumber $\mathcal{l}$, and a time-dependent amplification factor $\xi(t)$, then; $c^n_{ij} = \xi^n \exp{(- \Im \kappa \cdot i \Delta x - \Im \mathcal{l} \cdot j \Delta y)}$. (because of overlap with the x-index $i$, I defined $\Im$ as the imaginary number $\Im = \sqrt{-1}$); Substituting this definition of $c$ and dividing through by $c^n_{ij}$ we get; $$\frac{\xi^{n+1} / \xi^n - 1}{\Delta t} = u \left(\frac{1 - \exp{(- \Im \kappa \Delta x)}}{\Delta x}\right) + v \left(\frac{1 - \exp{(- \Im \mathcal{l} \Delta y)}}{\\Delta y}\right)$$; we can make use of $\exp{\Im \theta} = \cos{\theta} + \Im \sin{\theta}$ and rewrite a bit:; $$\frac{\xi^{n+1}}{\xi^n} = 1 + \Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} + \Im \sin{\kappa\Delta x}\right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} + \Im \sin{\mathcal{l} \Delta y} \right) \right]$$; Now, to ensure stability, the real part of $\xi^{n+1} / \xi^n$ should be bounded, so we have to ensure that; $$\left| \Re \left( \frac{\xi^{n+1}}{\xi^n} \right) \right| < 1$$; This yields; $$-2 < \Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} \right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} \right) \right] < 0$$; The right inequality does not limit $\Delta t$, but the left does:; $$\Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} \right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} \right) \right] < 2$$; T",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3037#issuecomment-1489468511
https://github.com/CliMA/Oceananigans.jl/pull/3037#issuecomment-1489468511:1139,Modifiability,rewrite,rewrite,1139," c is a two-dimensional wave depending on an x wavenumber $\kappa$, a y wavenumber $\mathcal{l}$, and a time-dependent amplification factor $\xi(t)$, then; $c^n_{ij} = \xi^n \exp{(- \Im \kappa \cdot i \Delta x - \Im \mathcal{l} \cdot j \Delta y)}$. (because of overlap with the x-index $i$, I defined $\Im$ as the imaginary number $\Im = \sqrt{-1}$); Substituting this definition of $c$ and dividing through by $c^n_{ij}$ we get; $$\frac{\xi^{n+1} / \xi^n - 1}{\Delta t} = u \left(\frac{1 - \exp{(- \Im \kappa \Delta x)}}{\Delta x}\right) + v \left(\frac{1 - \exp{(- \Im \mathcal{l} \Delta y)}}{\\Delta y}\right)$$; we can make use of $\exp{\Im \theta} = \cos{\theta} + \Im \sin{\theta}$ and rewrite a bit:; $$\frac{\xi^{n+1}}{\xi^n} = 1 + \Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} + \Im \sin{\kappa\Delta x}\right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} + \Im \sin{\mathcal{l} \Delta y} \right) \right]$$; Now, to ensure stability, the real part of $\xi^{n+1} / \xi^n$ should be bounded, so we have to ensure that; $$\left| \Re \left( \frac{\xi^{n+1}}{\xi^n} \right) \right| < 1$$; This yields; $$-2 < \Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} \right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} \right) \right] < 0$$; The right inequality does not limit $\Delta t$, but the left does:; $$\Delta t \cdot \left[ \frac{u}{\Delta x} \left( 1 - \cos{\kappa \Delta x} \right) + \frac{v}{\Delta y} \left( 1 - \cos{\mathcal{l} \Delta y} \right) \right] < 2$$; The worst-case scenario occurs when both cosines evaluate to -1, to hit this condition it is enough to have grid-scale noise, which has the maximum expressible wavenumber of $\kappa = \pi / \Delta x$. In this case we have; $$\Delta t \cdot \left( \frac{u}{\Delta x} + \frac{v}{\Delta y} \right)< 1$$; Since the direction is arbitrary you can substitute $u$ and $v$ with their absolute values and you get; $$\Delta t < \left( \frac{|u|}{\Delta x} + ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3037#issuecomment-1489468511
https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-1492734079:75,Testability,test,tests,75,I made an attempt in #2701 to put the `allowscalar` in the places that the tests required them and remove the general allowscalar statement that @simone-silvestri points out above. But I couldn't finish the attempt... I was getting so many tests failing and I admit I got worn out in the end and stopped that effort......,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-1492734079
https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-1492734079:240,Testability,test,tests,240,I made an attempt in #2701 to put the `allowscalar` in the places that the tests required them and remove the general allowscalar statement that @simone-silvestri points out above. But I couldn't finish the attempt... I was getting so many tests failing and I admit I got worn out in the end and stopped that effort......,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-1492734079
https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-2036478119:74,Testability,test,tests,74,"bumping this up. I'd like to remove the generic `CUDA.allowscalar()` from tests!. cc @glwagner, @simone-silvestri, @siddharthabishnu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3039#issuecomment-2036478119
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:53,Availability,error,error,53,"Actually I'll reopen this since I'm still getting an error, albeit a different one:. ```; julia> grid; 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [4.35026e-15, 894.427) regularly spaced with Δx=20.3279; ├── Periodic y ∈ [-8.74514e-15, 178.885) regularly spaced with Δy=22.3607; └── Bounded z ∈ [-178.885, 178.885] variably spaced with min(Δz)=4.76685, max(Δz)=21.2525. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CuStream, CuFunction, CuDim3, CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CuDeviceArray{Float64, 4, 1}, ::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuDeviceVector{Float64, 1}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Of",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:460,Availability,ERROR,ERROR,460,"Actually I'll reopen this since I'm still getting an error, albeit a different one:. ```; julia> grid; 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [4.35026e-15, 894.427) regularly spaced with Δx=20.3279; ├── Periodic y ∈ [-8.74514e-15, 178.885) regularly spaced with Δy=22.3607; └── Bounded z ∈ [-178.885, 178.885] variably spaced with min(Δz)=4.76685, max(Δz)=21.2525. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CuStream, CuFunction, CuDim3, CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CuDeviceArray{Float64, 4, 1}, ::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuDeviceVector{Float64, 1}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Of",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:472,Availability,error,error,472,"Actually I'll reopen this since I'm still getting an error, albeit a different one:. ```; julia> grid; 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [4.35026e-15, 894.427) regularly spaced with Δx=20.3279; ├── Periodic y ∈ [-8.74514e-15, 178.885) regularly spaced with Δy=22.3607; └── Bounded z ∈ [-178.885, 178.885] variably spaced with min(Δz)=4.76685, max(Δz)=21.2525. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CuStream, CuFunction, CuDim3, CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CuDeviceArray{Float64, 4, 1}, ::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuDeviceVector{Float64, 1}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Of",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:687,Availability,error,error,687,"Actually I'll reopen this since I'm still getting an error, albeit a different one:. ```; julia> grid; 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [4.35026e-15, 894.427) regularly spaced with Δx=20.3279; ├── Periodic y ∈ [-8.74514e-15, 178.885) regularly spaced with Δy=22.3607; └── Bounded z ∈ [-178.885, 178.885] variably spaced with min(Δz)=4.76685, max(Δz)=21.2525. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CuStream, CuFunction, CuDim3, CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CuDeviceArray{Float64, 4, 1}, ::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuDeviceVector{Float64, 1}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Of",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:781,Availability,error,error,781,"Actually I'll reopen this since I'm still getting an error, albeit a different one:. ```; julia> grid; 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [4.35026e-15, 894.427) regularly spaced with Δx=20.3279; ├── Periodic y ∈ [-8.74514e-15, 178.885) regularly spaced with Δy=22.3607; └── Bounded z ∈ [-178.885, 178.885] variably spaced with min(Δz)=4.76685, max(Δz)=21.2525. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CuStream, CuFunction, CuDim3, CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CuDeviceArray{Float64, 4, 1}, ::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuDeviceVector{Float64, 1}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Of",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:10421,Availability,mask,mask,10421,".Mem.DeviceBuffer}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, a::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Float64, typeof(Oceananigans.Grids.zspacing), Tuple{Center, Center, Center}}; condition::Nothing, mask::Float64, kwargs::Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Bool}}}); @ Oceananigans.Fields /glade/work/tomasc/.julia/packages/Oceananigans/KTw3g/src/Fields/field.jl:619; [24] minimum(f::Function, c::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Float64, typeof(Oceananigans.Grids.zspacing), Tuple{Center, Center, Center}}; condition::Nothing, mask::Float64, dims::Function); @ Oceananigans.Fields /glade/work/tomasc/.julia/packages/Oceananigans/KTw3g/src/Field",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:11287,Availability,mask,mask,11287,"{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Float64, typeof(Oceananigans.Grids.zspacing), Tuple{Center, Center, Center}}; condition::Nothing, mask::Float64, kwargs::Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Bool}}}); @ Oceananigans.Fields /glade/work/tomasc/.julia/packages/Oceananigans/KTw3g/src/Fields/field.jl:619; [24] minimum(f::Function, c::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Float64, typeof(Oceananigans.Grids.zspacing), Tuple{Center, Center, Center}}; condition::Nothing, mask::Float64, dims::Function); @ Oceananigans.Fields /glade/work/tomasc/.julia/packages/Oceananigans/KTw3g/src/Fields/field.jl:649; [25] minimum; @ /glade/work/tomasc/.julia/packages/Oceananigans/KTw3g/src/Fields/field.jl:638 [inlined]; [26] #minimum#45; @ /glade/work/tomasc/.julia/packages/Oceananigans/KTw3g/src/Fields/field.jl:658 [inlined]; [27] minimum(c::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Float64, typeof(Oceananigans.Grids.zspacing), Tuple{Center, Center, Center}}); @ Oceananiga",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:8839,Energy Efficiency,reduce,reducedim,8839,"}}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/src/mapreduce.jl:169; [21] mapreducedim!(f::Function, op::Function, R::SubArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}, A::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Float64, typeof(Oceananigans.Grids.zspacing), Tuple{Center, Center, Center}}); @ GPUArrays /glade/work/tomasc/.julia/packages/GPUArrays/7TiO1/src/host/mapreduce.jl:10; [22] #minimum!#808; @ ./reducedim.jl:1018 [inlined]; [23] minimum!(f::Function, r::Field{Nothing, Nothing, Nothing, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, GPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}}, Float64, FieldBoundaryConditions{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, a::KernelFunctionOperation{Center, Center, Center, Rectilinear",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457:374,Modifiability,variab,variably,374,"Actually I'll reopen this since I'm still getting an error, albeit a different one:. ```; julia> grid; 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [4.35026e-15, 894.427) regularly spaced with Δx=20.3279; ├── Periodic y ∈ [-8.74514e-15, 178.885) regularly spaced with Δy=22.3607; └── Bounded z ∈ [-178.885, 178.885] variably spaced with min(Δz)=4.76685, max(Δz)=21.2525. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CuStream, CuFunction, CuDim3, CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CuDeviceArray{Float64, 4, 1}, ::KernelFunctionOperation{Center, Center, Center, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, OffsetArrays.OffsetVector{Float64, CuDeviceVector{Float64, 1}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Of",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490569457
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313:852,Availability,ERROR,ERROR,852,"It appears to be related to the size of the grid:. ```julia; julia> grid = RectilinearGrid(GPU(), size=(8, 8, 8), x=(0,1), y=(0,1), z=0:8); 8×8×8 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.125; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [0.0, 8.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); 1.0. julia> grid = RectilinearGrid(GPU(), size=(16, 16, 16), x=(0,1), y=(0,1), z=0:16); 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CUDA.CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CUDA.CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CUDA.CuStream, CUDA.CuFunction, CUDA.CuDim3, CUDA.CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::Cartesian",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313:864,Availability,error,error,864,"It appears to be related to the size of the grid:. ```julia; julia> grid = RectilinearGrid(GPU(), size=(8, 8, 8), x=(0,1), y=(0,1), z=0:8); 8×8×8 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.125; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [0.0, 8.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); 1.0. julia> grid = RectilinearGrid(GPU(), size=(16, 16, 16), x=(0,1), y=(0,1), z=0:16); 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CUDA.CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CUDA.CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CUDA.CuStream, CUDA.CuFunction, CUDA.CuDim3, CUDA.CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::Cartesian",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313:1079,Availability,error,error,1079,"lia> grid = RectilinearGrid(GPU(), size=(8, 8, 8), x=(0,1), y=(0,1), z=0:8); 8×8×8 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.125; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [0.0, 8.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); 1.0. julia> grid = RectilinearGrid(GPU(), size=(16, 16, 16), x=(0,1), y=(0,1), z=0:16); 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CUDA.CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CUDA.CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CUDA.CuStream, CUDA.CuFunction, CUDA.CuDim3, CUDA.CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.On",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313:1173,Availability,error,error,1173,"Grid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.125; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [0.0, 8.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); 1.0. julia> grid = RectilinearGrid(GPU(), size=(16, 16, 16), x=(0,1), y=(0,1), z=0:16); 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CUDA.CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CUDA.CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CUDA.CuStream, CUDA.CuFunction, CUDA.CuDim3, CUDA.CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::CUDA.CuDeviceArray{Float64, 4, 1}, ::KernelFunctionOperation{Center, Center, C",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313:371,Modifiability,variab,variably,371,"It appears to be related to the size of the grid:. ```julia; julia> grid = RectilinearGrid(GPU(), size=(8, 8, 8), x=(0,1), y=(0,1), z=0:8); 8×8×8 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.125; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [0.0, 8.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); 1.0. julia> grid = RectilinearGrid(GPU(), size=(16, 16, 16), x=(0,1), y=(0,1), z=0:16); 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CUDA.CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CUDA.CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CUDA.CuStream, CUDA.CuFunction, CUDA.CuDim3, CUDA.CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::Cartesian",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313:774,Modifiability,variab,variably,774,"It appears to be related to the size of the grid:. ```julia; julia> grid = RectilinearGrid(GPU(), size=(8, 8, 8), x=(0,1), y=(0,1), z=0:8); 8×8×8 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.125; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [0.0, 8.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); 1.0. julia> grid = RectilinearGrid(GPU(), size=(16, 16, 16), x=(0,1), y=(0,1), z=0:16); 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); ERROR: CUDA error: too many resources requested for launch (code 701, ERROR_LAUNCH_OUT_OF_RESOURCES); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:89; [2] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/error.jl:97 [inlined]; [3] cuLaunchKernel(f::CUDA.CuFunction, gridDimX::UInt32, gridDimY::UInt32, gridDimZ::UInt32, blockDimX::UInt32, blockDimY::UInt32, blockDimZ::UInt32, sharedMemBytes::Int64, hStream::CUDA.CuStream, kernelParams::Vector{Ptr{Nothing}}, extra::Ptr{Nothing}); @ CUDA /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/utils/call.jl:26; [4] #39; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:69 [inlined]; [5] macro expansion; @ /glade/work/tomasc/.julia/packages/CUDA/BbliS/lib/cudadrv/execution.jl:33 [inlined]; [6] macro expansion; @ ./none:0 [inlined]; [7] pack_arguments(::CUDA.var""#39#40""{Bool, Int64, CUDA.CuStream, CUDA.CuFunction, CUDA.CuDim3, CUDA.CuDim3}, ::CUDA.KernelState, ::CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, ::Cartesian",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490603313
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490607038:527,Modifiability,variab,variably,527,"Also this works:. ```julia; julia> import Base: minimum. julia> using OffsetArrays. julia> minimum(a::SubArray{<:Any, <:Any, <:OffsetArrays.OffsetVector}) = minimum(parent(parent(a))); minimum (generic function with 21 methods). julia> minimum(zspacings(grid, Center())); 1.0. julia> grid; 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0; ```. so it might have something to do with the `KernelFunctionOperation` that's used here?: https://github.com/CliMA/Oceananigans.jl/blob/bcc34f07b3f949ea6fb34c7814f4b856d24924c2/src/Grids/grid_utils.jl#L407-L413",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1490607038
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1498623545:389,Modifiability,variab,variably,389,"Can't reproduce the problem. On tartarus with Julia v1.8:. ```Julia; julia> grid = RectilinearGrid(GPU(), size=(16, 16, 16), x=(0,1), y=(0,1), z=0:16); 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0. julia> minimum_zspacing(grid); 1.0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1498623545
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1498624276:38,Availability,error,error,38,Was it some random one-off stochastic error?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1498624276
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499163705:40,Availability,error,error,40,"> Was it some random one-off stochastic error?. Turns out this happens on a Quadro GP100 GPU, but not on a Tesla V100. I'm using Julia 1.8.3 on NCAR's Casper server using the (current as of this message) main branch. Not sure what to do about this. Does it have to do with the Compute Capability? @navidcy which GPUs does tartarus have again?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499163705
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499163705:195,Integrability,message,message,195,"> Was it some random one-off stochastic error?. Turns out this happens on a Quadro GP100 GPU, but not on a Tesla V100. I'm using Julia 1.8.3 on NCAR's Casper server using the (current as of this message) main branch. Not sure what to do about this. Does it have to do with the Compute Capability? @navidcy which GPUs does tartarus have again?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499163705
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499438276:1272,Energy Efficiency,reduce,reduced,1272,"> Also this works:; > ; > ```julia; > julia> import Base: minimum; > ; > julia> using OffsetArrays; > ; > julia> minimum(a::SubArray{<:Any, <:Any, <:OffsetArrays.OffsetVector}) = minimum(parent(parent(a))); > minimum (generic function with 21 methods); > ; > julia> minimum(zspacings(grid, Center())); > 1.0; > ; > julia> grid; > 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; > ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; > ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; > └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0; > ```; > ; > so it might have something to do with the `KernelFunctionOperation` that's used here?:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/bcc34f07b3f949ea6fb34c7814f4b856d24924c2/src/Grids/grid_utils.jl#L407-L413. We use the `KernelFunctionOperation` because this generalizes to any grid, including immersed boundary grids that may modify the spacings of the underlying grid (for example with `PartialCellBottom`). It's possible to implement shortcuts like calculating a minimum directly over a `view`, but I'd hesitate to put this in the source code. Maybe we can make some improvements to `KernelFunctionOperation` that allow it to be reduced more easily. That would benefit everyone.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499438276
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499438276:573,Modifiability,variab,variably,573,"> Also this works:; > ; > ```julia; > julia> import Base: minimum; > ; > julia> using OffsetArrays; > ; > julia> minimum(a::SubArray{<:Any, <:Any, <:OffsetArrays.OffsetVector}) = minimum(parent(parent(a))); > minimum (generic function with 21 methods); > ; > julia> minimum(zspacings(grid, Center())); > 1.0; > ; > julia> grid; > 16×16×16 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; > ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0625; > ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.0625; > └── Bounded z ∈ [0.0, 16.0] variably spaced with min(Δz)=1.0, max(Δz)=1.0; > ```; > ; > so it might have something to do with the `KernelFunctionOperation` that's used here?:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/bcc34f07b3f949ea6fb34c7814f4b856d24924c2/src/Grids/grid_utils.jl#L407-L413. We use the `KernelFunctionOperation` because this generalizes to any grid, including immersed boundary grids that may modify the spacings of the underlying grid (for example with `PartialCellBottom`). It's possible to implement shortcuts like calculating a minimum directly over a `view`, but I'd hesitate to put this in the source code. Maybe we can make some improvements to `KernelFunctionOperation` that allow it to be reduced more easily. That would benefit everyone.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499438276
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499465819:432,Energy Efficiency,reduce,reduced,432,"> We use the `KernelFunctionOperation` because this generalizes to any grid, including immersed boundary grids that may modify the spacings of the underlying grid (for example with `PartialCellBottom`).; > ; > It's possible to implement shortcuts like calculating a minimum directly over a `view`, but I'd hesitate to put this in the source code. Maybe we can make some improvements to `KernelFunctionOperation` that allow it to be reduced more easily. That would benefit everyone. Agreed. I was just posting that as it narrows don the problem a bit more. That said, I don't really know how to further investigate/tackle this issue since my GPU knowledge is limited. @glwagner do you have any suggestions that I can try?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499465819
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499790195:217,Availability,error,error,217,I don't have any immediate ideas. We'd have to take a deep dive I think. I think we'd have to apply an understanding of the Julia compiler and how code gets onto the GPU than just GPU specific knowledge. I think this error has been seen before in other contexts out on the internet so searching there might be a good place to start to start gainin more knowledge,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1499790195
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1516511442:50,Deployability,update,updates,50,"Just leaving this for the record, the KA and CUDA updates didn't fix this unfortunately...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-1516511442
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299083371:84,Availability,error,errors,84,"@tomchor Are you still encountering this issue?. I was able to run your MWE with no errors on small and large grids in three different environments with Julia 1.10.4, CUDA.jl v5.4.3, and Oceananigans.jl v0.91.8:; * Linux + A100 (compute capability 8.0); * Windows + RTX 3080 (compute capability 8.6); * Windows + GTX 1050 (compute capability 6.1). I was gonna test on some compute capability 3.0 Quadro GPUs but they're too old for CUDA.jl lol. For comparison, Tartarus has Titan V GPUs (compute capability 7.0) and your Quadro GP100 is compute capability 6.0. So if it's solely tied to compute capability then it could just be an issue with <=6.0?. I found this list of CUDA compute capabilities useful: https://developer.nvidia.com/cuda-gpus. ---. MWE:. ```julia; julia> using Oceananigans. julia> grid = RectilinearGrid(GPU(), size=(44, 8, 52), extent=(1, 1, 1)); 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0227273; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=0.0192308. julia> minimum_zspacing(grid); 0.019230769230769232. julia> minimum_xspacing(grid); 0.022727272727272728. julia> minimum_yspacing(grid); 0.125; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299083371
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299083371:360,Testability,test,test,360,"@tomchor Are you still encountering this issue?. I was able to run your MWE with no errors on small and large grids in three different environments with Julia 1.10.4, CUDA.jl v5.4.3, and Oceananigans.jl v0.91.8:; * Linux + A100 (compute capability 8.0); * Windows + RTX 3080 (compute capability 8.6); * Windows + GTX 1050 (compute capability 6.1). I was gonna test on some compute capability 3.0 Quadro GPUs but they're too old for CUDA.jl lol. For comparison, Tartarus has Titan V GPUs (compute capability 7.0) and your Quadro GP100 is compute capability 6.0. So if it's solely tied to compute capability then it could just be an issue with <=6.0?. I found this list of CUDA compute capabilities useful: https://developer.nvidia.com/cuda-gpus. ---. MWE:. ```julia; julia> using Oceananigans. julia> grid = RectilinearGrid(GPU(), size=(44, 8, 52), extent=(1, 1, 1)); 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0227273; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=0.0192308. julia> minimum_zspacing(grid); 0.019230769230769232. julia> minimum_xspacing(grid); 0.022727272727272728. julia> minimum_yspacing(grid); 0.125; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299083371
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299214723:74,Availability,error,error,74,"I haven't had time to investigate further, but I haven't gotten a similar error in a long time, so I'm assuming some update fixed this. Since it sounds like you didn't find anything, I think I'll close this now. Thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299214723
https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299214723:117,Deployability,update,update,117,"I haven't had time to investigate further, but I haven't gotten a similar error in a long time, so I'm assuming some update fixed this. Since it sounds like you didn't find anything, I think I'll close this now. Thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299214723
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1498500356:80,Performance,bottleneck,bottleneck,80,"This seems like a way forward, but I would wait for #2924 (that seems to be our bottleneck) to pass before changing CI",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1498500356
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1605360655:22,Testability,test,tests,22,@vchuravy if/when the tests pass merge!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1605360655
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1605398137:50,Availability,error,error,50,Something's wrong; all jobs seem to have the same error (those which failed and those which passed)?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1605398137
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616067399:77,Availability,error,error,77,"@vchuravy could you have a look here? this seems to run (that is it does not error), but e.g., were there any tests actually tested in https://buildkite.com/clima/oceananigans/builds/11987#018912fd-4e55-4160-87ce-0e7195b271aa ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616067399
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616067399:110,Testability,test,tests,110,"@vchuravy could you have a look here? this seems to run (that is it does not error), but e.g., were there any tests actually tested in https://buildkite.com/clima/oceananigans/builds/11987#018912fd-4e55-4160-87ce-0e7195b271aa ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616067399
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616067399:125,Testability,test,tested,125,"@vchuravy could you have a look here? this seems to run (that is it does not error), but e.g., were there any tests actually tested in https://buildkite.com/clima/oceananigans/builds/11987#018912fd-4e55-4160-87ce-0e7195b271aa ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616067399
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616673693:70,Safety,detect,detection,70,"Yeah adding the Unicode symbols broke the test, since the tests group detection doesn't recognize them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616673693
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616673693:42,Testability,test,test,42,"Yeah adding the Unicode symbols broke the test, since the tests group detection doesn't recognize them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616673693
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616673693:58,Testability,test,tests,58,"Yeah adding the Unicode symbols broke the test, since the tests group detection doesn't recognize them",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616673693
https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1627604232:63,Availability,error,error,63,@vchuravy how about now? still there is some weird TOML parser error...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1627604232
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492610370:123,Deployability,release,release,123,"This is a breaking change for some scripts that load, e.g., Earth's gravity from the `BuoyancyModels` module. Let's aim to release a new version when both this PR and #2979 are merged.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492610370
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492610370:48,Performance,load,load,48,"This is a breaking change for some scripts that load, e.g., Earth's gravity from the `BuoyancyModels` module. Let's aim to release a new version when both this PR and #2979 are merged.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492610370
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492618180:156,Performance,load,loaded,156,"But I'm not sure which part are you referring as ""good idea or not"". The fact that they belong to a different module? Perhaps we could have these constants loaded/exported with Oceananigans main module. Is this what you are thinking? That would work also!. What I think is _not_ good is having, e.g., every module redefining constants. E.g., `R_Earth` is currently defined in two places. Say we change one definition thinking it will affect everything but it won't. Also I found it quite cumbersome in scripts when I wanted to load these constants I had to load one from `Grids` and one from `Coriolis` and one from `BuoyancyModels`.... That's a bit counterintuitive from a user's perspective.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492618180
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492618180:527,Performance,load,load,527,"But I'm not sure which part are you referring as ""good idea or not"". The fact that they belong to a different module? Perhaps we could have these constants loaded/exported with Oceananigans main module. Is this what you are thinking? That would work also!. What I think is _not_ good is having, e.g., every module redefining constants. E.g., `R_Earth` is currently defined in two places. Say we change one definition thinking it will affect everything but it won't. Also I found it quite cumbersome in scripts when I wanted to load these constants I had to load one from `Grids` and one from `Coriolis` and one from `BuoyancyModels`.... That's a bit counterintuitive from a user's perspective.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492618180
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492618180:557,Performance,load,load,557,"But I'm not sure which part are you referring as ""good idea or not"". The fact that they belong to a different module? Perhaps we could have these constants loaded/exported with Oceananigans main module. Is this what you are thinking? That would work also!. What I think is _not_ good is having, e.g., every module redefining constants. E.g., `R_Earth` is currently defined in two places. Say we change one definition thinking it will affect everything but it won't. Also I found it quite cumbersome in scripts when I wanted to load these constants I had to load one from `Grids` and one from `Coriolis` and one from `BuoyancyModels`.... That's a bit counterintuitive from a user's perspective.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492618180
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492624226:63,Performance,load,load,63,> Also I found it quite cumbersome in scripts when I wanted to load these constants I had to load one from `Grids` and one from `Coriolis` and one from `BuoyancyModels`.... That's a bit counterintuitive from a user's perspective. Shouldn't you be defining and setting constants in the scripts if you are doing that?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492624226
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492624226:93,Performance,load,load,93,> Also I found it quite cumbersome in scripts when I wanted to load these constants I had to load one from `Grids` and one from `Coriolis` and one from `BuoyancyModels`.... That's a bit counterintuitive from a user's perspective. Shouldn't you be defining and setting constants in the scripts if you are doing that?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492624226
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492630341:55,Integrability,interface,interface,55,"I guess there are two questions here; one regards user interface and the other regards how we determine defaults internally. It's worth pointing out from the outset that we may have too many defaults right now; we should try to tackle that. On user interfaces, we haven't converged on a way to set parameters like ""radius of the Earth"" and ""gravitational acceleration"". One philosophy could be to never use defaults. Unfortunately that is not very friendly / convenient, but on the upside it would help users ensure that these constants are always consistent. I guess we have to decide on an approach for the user interface first; then the internal code will follow.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492630341
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492630341:249,Integrability,interface,interfaces,249,"I guess there are two questions here; one regards user interface and the other regards how we determine defaults internally. It's worth pointing out from the outset that we may have too many defaults right now; we should try to tackle that. On user interfaces, we haven't converged on a way to set parameters like ""radius of the Earth"" and ""gravitational acceleration"". One philosophy could be to never use defaults. Unfortunately that is not very friendly / convenient, but on the upside it would help users ensure that these constants are always consistent. I guess we have to decide on an approach for the user interface first; then the internal code will follow.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492630341
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492630341:614,Integrability,interface,interface,614,"I guess there are two questions here; one regards user interface and the other regards how we determine defaults internally. It's worth pointing out from the outset that we may have too many defaults right now; we should try to tackle that. On user interfaces, we haven't converged on a way to set parameters like ""radius of the Earth"" and ""gravitational acceleration"". One philosophy could be to never use defaults. Unfortunately that is not very friendly / convenient, but on the upside it would help users ensure that these constants are always consistent. I guess we have to decide on an approach for the user interface first; then the internal code will follow.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492630341
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492631291:326,Safety,avoid,avoid,326,"> Somehow, though, we can't have every module redefining `R_Earth` and using it as default, right?. I think you're right that if we are going to have a default value for this, then it should only be defined once. But if we are going to go ahead with a ""master module"" approach, then we need to implement tests. What we should avoid is people trying to change constants in the master module as a way of setting parameters. This is going to take time and effort to resolve. We should discuss in an issue, not a PR, I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492631291
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492631291:304,Testability,test,tests,304,"> Somehow, though, we can't have every module redefining `R_Earth` and using it as default, right?. I think you're right that if we are going to have a default value for this, then it should only be defined once. But if we are going to go ahead with a ""master module"" approach, then we need to implement tests. What we should avoid is people trying to change constants in the master module as a way of setting parameters. This is going to take time and effort to resolve. We should discuss in an issue, not a PR, I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492631291
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492632033:192,Integrability,depend,depending,192,"OK, I'll close this for now then and leave the issue open to remind us to heal the duplicate `R_Earth` that appear in Oceananigans... I like the approach that users should set their constants depending on whatever choices they like. E.g., simulating an ocean in Europe or a fish tank on the top of Everest.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492632033
https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492632295:201,Integrability,depend,depending,201,"> OK, I'll close this for now then and leave the issue open to remind us to heal the duplicate `R_Earth` that appear in Oceananigans...; > ; > I like the approach that users should set their constants depending on whatever choices they like. E.g., simulating an ocean in Europe or a fish tank on the top of Everest. Can you just get rid of the constant called ""R_Earth""?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492632295
https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100:341,Modifiability,layers,layers,341,"I think we should delete the regression test and put a warning in the model constructor ""The ShallowWaterModel has not been validated"". It's a shame we've put so much time into the regression test as it is. I think the model likely has a few bugs to be ironed out. I'm also not convinced that we have all the numerical methods (ie vanishing layers, positive preserving advection) that would be needed to advertise the model as ""production-ready""). One could argue that the regression test is misleading in that it gives the false impression that the model is in a state that shouldn't change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100
https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100:124,Security,validat,validated,124,"I think we should delete the regression test and put a warning in the model constructor ""The ShallowWaterModel has not been validated"". It's a shame we've put so much time into the regression test as it is. I think the model likely has a few bugs to be ironed out. I'm also not convinced that we have all the numerical methods (ie vanishing layers, positive preserving advection) that would be needed to advertise the model as ""production-ready""). One could argue that the regression test is misleading in that it gives the false impression that the model is in a state that shouldn't change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100
https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100:40,Testability,test,test,40,"I think we should delete the regression test and put a warning in the model constructor ""The ShallowWaterModel has not been validated"". It's a shame we've put so much time into the regression test as it is. I think the model likely has a few bugs to be ironed out. I'm also not convinced that we have all the numerical methods (ie vanishing layers, positive preserving advection) that would be needed to advertise the model as ""production-ready""). One could argue that the regression test is misleading in that it gives the false impression that the model is in a state that shouldn't change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100
https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100:192,Testability,test,test,192,"I think we should delete the regression test and put a warning in the model constructor ""The ShallowWaterModel has not been validated"". It's a shame we've put so much time into the regression test as it is. I think the model likely has a few bugs to be ironed out. I'm also not convinced that we have all the numerical methods (ie vanishing layers, positive preserving advection) that would be needed to advertise the model as ""production-ready""). One could argue that the regression test is misleading in that it gives the false impression that the model is in a state that shouldn't change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100
https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100:484,Testability,test,test,484,"I think we should delete the regression test and put a warning in the model constructor ""The ShallowWaterModel has not been validated"". It's a shame we've put so much time into the regression test as it is. I think the model likely has a few bugs to be ironed out. I'm also not convinced that we have all the numerical methods (ie vanishing layers, positive preserving advection) that would be needed to advertise the model as ""production-ready""). One could argue that the regression test is misleading in that it gives the false impression that the model is in a state that shouldn't change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3049#issuecomment-1496736100
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1496743311:73,Testability,test,tests,73,"I am happy to review this but a question first. I thought the regression tests were passing, as of a week or so again. I presume something happened so that they don't run anymore? Could you point me to where the problem is so I can better follow the conversation?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1496743311
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1497500478:21,Availability,error,errors,21,There seem to be two errors. The one with the cpu needs to instantiate. . ```; /bin/bash: line 2: 1539202 Bus error (core dumped) /storage5/buildkite-agent/julia-1.8.5/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.instantiate(; verbose=true)'; --;   | 🚨 Error: The command exited with status 135;   | user command error: exit status 135. ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1497500478
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1497500478:110,Availability,error,error,110,There seem to be two errors. The one with the cpu needs to instantiate. . ```; /bin/bash: line 2: 1539202 Bus error (core dumped) /storage5/buildkite-agent/julia-1.8.5/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.instantiate(; verbose=true)'; --;   | 🚨 Error: The command exited with status 135;   | user command error: exit status 135. ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1497500478
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1497500478:263,Availability,Error,Error,263,There seem to be two errors. The one with the cpu needs to instantiate. . ```; /bin/bash: line 2: 1539202 Bus error (core dumped) /storage5/buildkite-agent/julia-1.8.5/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.instantiate(; verbose=true)'; --;   | 🚨 Error: The command exited with status 135;   | user command error: exit status 135. ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1497500478
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1497500478:323,Availability,error,error,323,There seem to be two errors. The one with the cpu needs to instantiate. . ```; /bin/bash: line 2: 1539202 Bus error (core dumped) /storage5/buildkite-agent/julia-1.8.5/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.instantiate(; verbose=true)'; --;   | 🚨 Error: The command exited with status 135;   | user command error: exit status 135. ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1497500478
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654:138,Security,validat,validation,138,"It's ready @navidcy . @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently. We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor. Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654:269,Security,validat,validation,269,"It's ready @navidcy . @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently. We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor. Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654:280,Testability,test,tests,280,"It's ready @navidcy . @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently. We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor. Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654:459,Testability,test,test,459,"It's ready @navidcy . @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently. We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor. Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654:549,Testability,test,test,549,"It's ready @navidcy . @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently. We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor. Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654:561,Testability,test,test,561,"It's ready @navidcy . @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently. We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor. Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498070654
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1293,Safety,avoid,avoiding,1293,"he problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the issue about the pressure gradient term with bathymetry but happy to get into it sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:152,Security,validat,validation,152,"> It's ready @navidcy; > ; > @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:283,Security,validat,validation,283,"> It's ready @navidcy; > ; > @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1862,Security,validat,validate,1862,"he problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the issue about the pressure gradient term with bathymetry but happy to get into it sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:294,Testability,test,tests,294,"> It's ready @navidcy; > ; > @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:473,Testability,test,test,473,"> It's ready @navidcy; > ; > @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:563,Testability,test,test,563,"> It's ready @navidcy; > ; > @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:575,Testability,test,test,575,"> It's ready @navidcy; > ; > @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1012,Testability,test,test,1012,"> It's ready @navidcy; > ; > @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1178,Testability,test,tests,1178,"he problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the issue about the pressure gradient term with bathymetry but happy to get into it sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1225,Testability,test,tests,1225,"he problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the issue about the pressure gradient term with bathymetry but happy to get into it sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1262,Testability,test,test,1262,"he problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the issue about the pressure gradient term with bathymetry but happy to get into it sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1839,Testability,test,test,1839,"he problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the issue about the pressure gradient term with bathymetry but happy to get into it sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:1832,Usability,simpl,simple,1832,"he problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the issue about the pressure gradient term with bathymetry but happy to get into it sometime.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498162680:292,Testability,test,tests,292,"> Btw, as a side-note, I wanted to revisit those global SWE simulations. I had the feeling that the bathymetry was flipped (and possibly that's why some currents were moving the other way!). Glad you mentioned it as we never figured out why. Definitely something to revisit after some simple tests. If we start off with a topographic Rossby wave it will be very easy to know whether things are flipped.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498162680
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498162680:285,Usability,simpl,simple,285,"> Btw, as a side-note, I wanted to revisit those global SWE simulations. I had the feeling that the bathymetry was flipped (and possibly that's why some currents were moving the other way!). Glad you mentioned it as we never figured out why. Definitely something to revisit after some simple tests. If we start off with a topographic Rossby wave it will be very easy to know whether things are flipped.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498162680
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1808221910:461,Performance,tune,tune,461,"This week I plan to revisit this and hopefully figure out how to make the `ShallowWaterModel` stable and not experimental. Lots of nice work was started on the multi-layer version and I hope that we can continue to work towards that after we get the fluxes and the regression tests. I just wanted to confirm that people are still supportive of this before I dive in too deep. If yes, @simone-silvestri , would you have time to meet for 1 hour next week to fine tune things?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1808221910
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1808221910:276,Testability,test,tests,276,"This week I plan to revisit this and hopefully figure out how to make the `ShallowWaterModel` stable and not experimental. Lots of nice work was started on the multi-layer version and I hope that we can continue to work towards that after we get the fluxes and the regression tests. I just wanted to confirm that people are still supportive of this before I dive in too deep. If yes, @simone-silvestri , would you have time to meet for 1 hour next week to fine tune things?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1808221910
https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1808253713:76,Integrability,message,message,76,"Thanks @simone-silvestri for the quick reply! I'll work on it this work and message you on slack so we can find a time that is convenient for you for us to chat, and hopefully get this moving again.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1808253713
https://github.com/CliMA/Oceananigans.jl/pull/3052#issuecomment-1498341815:12,Security,validat,validation,12,What about `validation/elliptic_solvers`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3052#issuecomment-1498341815
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499729815:49,Testability,test,tests,49,Good idea!. @navidcy did you manually cancel the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499729815
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499780575:21,Testability,test,test,21,I don't think we can test right now since we ran out of buildkite minutes. We have to wait until April 10.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499780575
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499814290:57,Testability,test,tests,57,"> Good idea!; > ; > @navidcy did you manually cancel the tests?. I did, because it was futile as @glwagner mentioned.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499814290
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1502665036:51,Testability,test,tests,51,@glwagner can you review? should we make more grid tests run on GPU?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1502665036
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1503682098:14,Testability,test,tests,14,Are there any tests for `xnodes` with stretched grids?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1503682098
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1504016593:16,Testability,test,tests,16,> Are there any tests for `xnodes` with stretched grids?. There seem to be no tests for `x/y/z/λ/φnodes` whatsoever. Shall we add?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1504016593
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1504016593:78,Testability,test,tests,78,> Are there any tests for `xnodes` with stretched grids?. There seem to be no tests for `x/y/z/λ/φnodes` whatsoever. Shall we add?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1504016593
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605682631:18,Testability,test,tests,18,"> > Are there any tests for `xnodes` with stretched grids?; > ; > There seem to be no tests for `x/y/z/λ/φnodes` whatsoever. Shall we add?. I think at this point there are tests for x/y/znodes? If not, it's a good idea to add a couple. In any case this PR is already an improvement, so I approved it. @navidcy I'll leave it up to you if you wanna merge as is.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605682631
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605682631:86,Testability,test,tests,86,"> > Are there any tests for `xnodes` with stretched grids?; > ; > There seem to be no tests for `x/y/z/λ/φnodes` whatsoever. Shall we add?. I think at this point there are tests for x/y/znodes? If not, it's a good idea to add a couple. In any case this PR is already an improvement, so I approved it. @navidcy I'll leave it up to you if you wanna merge as is.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605682631
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605682631:172,Testability,test,tests,172,"> > Are there any tests for `xnodes` with stretched grids?; > ; > There seem to be no tests for `x/y/z/λ/φnodes` whatsoever. Shall we add?. I think at this point there are tests for x/y/znodes? If not, it's a good idea to add a couple. In any case this PR is already an improvement, so I approved it. @navidcy I'll leave it up to you if you wanna merge as is.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605682631
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605785678:824,Modifiability,variab,variably,824,"I added some more but they definitely don't cover _all_ cases. Either I forgot or I am missing the point of `x/y/z/λ/φspacing` methods (the ones that give you a particular spacing). Like where would those be useful?. Btw, a periodic grid with faces at [0, 1, 11, 101] implying centers at [0.5, 6, 56] has the following spacings. It took me a while to confirm that the first spacing for Faces is actually correct. ```julia; julia> grid = RectilinearGrid(size=3, topology=(Periodic, Flat, Flat), x=[0, 1, 11, 101]); F = vcat(F₋, interiorF, F₊) = [-101.0, -100.0, -90.0, 0.0, 1.0, 11.0, 101.0, 102.0, 112.0, 202.0]; C = [(F[i + 1] + F[i]) / 2 for i = 1:TC] = [-100.5, -95.0, -45.0, 0.5, 6.0, 56.0, 101.5, 107.0, 157.0]; 3×1×1 RectilinearGrid{Float64, Periodic, Flat, Flat} on CPU with 3×0×0 halo; ├── Periodic x ∈ [0.0, 101.0) variably spaced with min(Δx)=1.0, max(Δx)=90.0; ├── Flat y; └── Flat z. julia> xspacings(grid, Center()); 3-element view(OffsetArray(::Vector{Float64}, -2:5), 1:3) with eltype Float64:; 1.0; 10.0; 90.0. julia> xspacings(grid, Face()); 3-element view(OffsetArray(::Vector{Float64}, -3:6), 1:3) with eltype Float64:; 45.5; 5.5; 50.0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605785678
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1615844030:27,Modifiability,variab,variably,27,"OK, I added some tests for variably spaced grids as well. @glwagner, what do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1615844030
https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1615844030:17,Testability,test,tests,17,"OK, I added some tests for variably spaced grids as well. @glwagner, what do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1615844030
https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-1501051989:23,Availability,error,error,23,Sounds like a roundoff error. I've noticed similar problems.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-1501051989
https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152040373:947,Energy Efficiency,schedul,schedule,947,"> Can you copy paste the minimal code here? Hopefully it's sort (otherwise its' not minimal). ```julia; using Oceananigans, Printf. Nt = 200		# number of time saves; T = 8e5*π/7		# simulation stop time (s); Δt = 16/15		# timestep (s); filename = ""MWE_data""	# save name of data file; architecture = CPU()	# GPU() or CPU(). grid = RectilinearGrid(architecture, size = (), topology=(Flat, Flat, Flat)). model = NonhydrostaticModel(; grid, advection = CenteredFourthOrder(), timestepper = :RungeKutta3). simulation = Simulation(model, Δt=Δt, stop_time=T). progress_message(sim) = @printf(""Iteration: %03d, time: %s, Δt: %s, wall time: %s\n"",; 	iteration(sim), prettytime(sim), prettytime(sim.Δt), prettytime(sim.run_wall_time)). add_callback!(simulation, progress_message, IterationInterval(1000)). fields = Dict(""u"" => model.velocities.u);. simulation.output_writers[:field_writer] = NetCDFOutputWriter(model, fields, ; 	filename = filename * "".nc"", schedule = TimeInterval(T/Nt), overwrite_existing = true). run!(simulation); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152040373
https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152068920:78,Energy Efficiency,schedul,schedules,78,"Nice, thank you! I don't think it's necessary to use an output writer because schedules work the same for output and callbacks. Here's another possible MWE:. ```julia; using Oceananigans. Ns = 200 # number of time saves; T = 8e5*π/7 # simulation stop time (s); Δt = 16/15 # timestep (s). grid = RectilinearGrid(size = (), topology=(Flat, Flat, Flat)); model = NonhydrostaticModel(; grid); simulation = Simulation(model; Δt, stop_time=T). captured_times = []; capture_time(sim) = push!(captured_times, time(sim)); add_callback!(simulation, capture_time, TimeInterval(T/Ns)). run!(simulation). @show captured_times; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152068920
https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152355200:45,Testability,test,test,45,> How about #3616 @mncrowe ?. As in I should test on glw/time-interval-fix branch?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152355200
https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152621162:53,Testability,test,test,53,"> > How about #3616 @mncrowe ?; > ; > As in I should test on glw/time-interval-fix branch?. Done, to conclude:. My MWE replicates the issue on 'main' but your fix on 'glw/time-interval-fix' works. Your MWE does not replicate the issue for me on either branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152621162
https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152648999:790,Availability,error,error,790,"Ok, updated MWE:. ```julia; using Oceananigans. FT = Float64; Ns = 200 # number of time saves; T = 8e5*π/7 # simulation stop time (s); Δt = 16/15 # timestep (s). grid = RectilinearGrid(FT, size = (), topology=(Flat, Flat, Flat)); model = NonhydrostaticModel(; grid, timestepper=:RungeKutta3); simulation = Simulation(model; Δt, stop_time=T). captured_times = []; capture_time(sim) = push!(captured_times, time(sim)); callback = Callback(capture_time, TimeInterval(T/Ns)); add_callback!(simulation, callback). run!(simulation). @show time(simulation) iteration(simulation); @show length(captured_times); @show time(simulation) == T; ```. I added an `FT` parameter since @tomchor remarked that this issue happens more often with `Float32` (which makes sense if we attribute this to roudn off error)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152648999
https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152648999:4,Deployability,update,updated,4,"Ok, updated MWE:. ```julia; using Oceananigans. FT = Float64; Ns = 200 # number of time saves; T = 8e5*π/7 # simulation stop time (s); Δt = 16/15 # timestep (s). grid = RectilinearGrid(FT, size = (), topology=(Flat, Flat, Flat)); model = NonhydrostaticModel(; grid, timestepper=:RungeKutta3); simulation = Simulation(model; Δt, stop_time=T). captured_times = []; capture_time(sim) = push!(captured_times, time(sim)); callback = Callback(capture_time, TimeInterval(T/Ns)); add_callback!(simulation, callback). run!(simulation). @show time(simulation) iteration(simulation); @show length(captured_times); @show time(simulation) == T; ```. I added an `FT` parameter since @tomchor remarked that this issue happens more often with `Float32` (which makes sense if we attribute this to roudn off error)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152648999
https://github.com/CliMA/Oceananigans.jl/pull/3057#issuecomment-1502347491:1003,Usability,clear,clear,1003,"> we could actually keep a general version maybe by just; > ; > ```; > for dir in (:x, :y, :z) ; > diffusive_flux = Symbol(:diffusive_flux_, dir) ; > viscous_flux_u = Symbol(:viscous_flux_u, dir) ; > viscous_flux_v = Symbol(:viscous_flux_v, dir) ; > viscous_flux_w = Symbol(:viscous_flux_w, dir) ; > @eval begin ; > @inline $diffusive_flux(i, j, k, grid, clo::AbstractTurbulenceClosure, args...) = zero(grid) ; > @inline $viscous_flux_u(i, j, k, grid, clo::AbstractTurbulenceClosure, args...) = zero(grid) ; > @inline $viscous_flux_v(i, j, k, grid, clo::AbstractTurbulenceClosure, args...) = zero(grid) ; > @inline $viscous_flux_w(i, j, k, grid, clo::AbstractTurbulenceClosure, args...) = zero(grid) ; > end ; > end ; > ```; > ; > (and maybe move this to `closure_kernel_operators.jl`) So that we can have the best of both scenarios. But anyways I am fine with both. this makes sense to me. Maybe put it at the top-level in `TurbulenceClosures.jl` where `AbstractTurbulenceClosure` is defined (makes it clear what one gets from dispatching on `AbstractTurbulenceClosure`)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3057#issuecomment-1502347491
https://github.com/CliMA/Oceananigans.jl/pull/3060#issuecomment-1504687297:5,Testability,test,tests,5,some tests require attention :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3060#issuecomment-1504687297
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1526887412:51,Usability,simpl,simple,51,Let’s discuss the user API here though it’s pretty simple,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1526887412
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527564310:23,Availability,mask,mask,23,"I like the concept of `mask`, what about `immersed_mask_value=0`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527564310
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527950210:156,Availability,mask,mask,156,"I think that's a good one. So we have:. * `immersed_value = 0`; * `immersed_mask_value = 0`; * `mask_immersed = 0`; * `fill_immersed = 0`. Would even just `mask = 0` be sufficient? I've also been annoyed about ""mask_immersed_field"" and wondered whether simply `mask!(field)` would be clear and a little cleaner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527950210
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527950210:261,Availability,mask,mask,261,"I think that's a good one. So we have:. * `immersed_value = 0`; * `immersed_mask_value = 0`; * `mask_immersed = 0`; * `fill_immersed = 0`. Would even just `mask = 0` be sufficient? I've also been annoyed about ""mask_immersed_field"" and wondered whether simply `mask!(field)` would be clear and a little cleaner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527950210
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527950210:253,Usability,simpl,simply,253,"I think that's a good one. So we have:. * `immersed_value = 0`; * `immersed_mask_value = 0`; * `mask_immersed = 0`; * `fill_immersed = 0`. Would even just `mask = 0` be sufficient? I've also been annoyed about ""mask_immersed_field"" and wondered whether simply `mask!(field)` would be clear and a little cleaner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527950210
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527950210:284,Usability,clear,clear,284,"I think that's a good one. So we have:. * `immersed_value = 0`; * `immersed_mask_value = 0`; * `mask_immersed = 0`; * `fill_immersed = 0`. Would even just `mask = 0` be sufficient? I've also been annoyed about ""mask_immersed_field"" and wondered whether simply `mask!(field)` would be clear and a little cleaner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1527950210
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528003302:19,Availability,mask,mask,19,I vote for simply `mask = default_value` and `mask!(field)`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528003302
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528003302:46,Availability,mask,mask,46,I vote for simply `mask = default_value` and `mask!(field)`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528003302
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528003302:11,Usability,simpl,simply,11,I vote for simply `mask = default_value` and `mask!(field)`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528003302
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528069200:121,Availability,mask,masking,121,"I think it's important to have the word `immersed` somewhere in the flag name otherwise it might not be clear that we're masking. I vote for `immersed _mask_value` flag. It's kinda verbose, but imo 100% clear.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528069200
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528069200:104,Usability,clear,clear,104,"I think it's important to have the word `immersed` somewhere in the flag name otherwise it might not be clear that we're masking. I vote for `immersed _mask_value` flag. It's kinda verbose, but imo 100% clear.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528069200
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528069200:203,Usability,clear,clear,203,"I think it's important to have the word `immersed` somewhere in the flag name otherwise it might not be clear that we're masking. I vote for `immersed _mask_value` flag. It's kinda verbose, but imo 100% clear.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528069200
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528236585:189,Availability,redundant,redundant,189,"I like it! The concept a function name that is something like `take_action_on(argument)` is typical, eg the function `fill!(array, value)` rather than `fill_value!(array, value)` (which is redundant for the reader). I liek the readability of `mask_immersed = 0`, as in ""mask immersed [grid cells with] = value"".",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528236585
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528236585:270,Availability,mask,mask,270,"I like it! The concept a function name that is something like `take_action_on(argument)` is typical, eg the function `fill!(array, value)` rather than `fill_value!(array, value)` (which is redundant for the reader). I liek the readability of `mask_immersed = 0`, as in ""mask immersed [grid cells with] = value"".",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528236585
https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528236585:189,Safety,redund,redundant,189,"I like it! The concept a function name that is something like `take_action_on(argument)` is typical, eg the function `fill!(array, value)` rather than `fill_value!(array, value)` (which is redundant for the reader). I liek the readability of `mask_immersed = 0`, as in ""mask immersed [grid cells with] = value"".",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3061#issuecomment-1528236585
https://github.com/CliMA/Oceananigans.jl/issues/3064#issuecomment-1506411904:0,Usability,Simpl,Simple,0,"Simple example why this doesn't make sense: `immersed_peripheral_node` is. https://github.com/CliMA/Oceananigans.jl/blob/72e2197e640ddf308fd40aa4658e7686e596bccd/src/ImmersedBoundaries/ImmersedBoundaries.jl#L217-L218. So, for example, if the entire bottom of a grid is immersed, then it will be _included_ in the reduction --- because those nodes _are_ on the periphery of the underlying grid, so. ```julia; !peripheral_node(i, j, k, ibg.underlying_grid, LX, LY, LZ); ```. is `false`. Including the bottom row of cells in the reduction makes no sense because these nodes are far beneath the immersed boundary. As a quick fix we could add another condition that also ignores `inactive_node`. But I'd also like to understand why we don't simply ignore all peripheral_nodes...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3064#issuecomment-1506411904
https://github.com/CliMA/Oceananigans.jl/issues/3064#issuecomment-1506411904:736,Usability,simpl,simply,736,"Simple example why this doesn't make sense: `immersed_peripheral_node` is. https://github.com/CliMA/Oceananigans.jl/blob/72e2197e640ddf308fd40aa4658e7686e596bccd/src/ImmersedBoundaries/ImmersedBoundaries.jl#L217-L218. So, for example, if the entire bottom of a grid is immersed, then it will be _included_ in the reduction --- because those nodes _are_ on the periphery of the underlying grid, so. ```julia; !peripheral_node(i, j, k, ibg.underlying_grid, LX, LY, LZ); ```. is `false`. Including the bottom row of cells in the reduction makes no sense because these nodes are far beneath the immersed boundary. As a quick fix we could add another condition that also ignores `inactive_node`. But I'd also like to understand why we don't simply ignore all peripheral_nodes...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3064#issuecomment-1506411904
https://github.com/CliMA/Oceananigans.jl/pull/3074#issuecomment-1516299701:85,Performance,perform,performance,85,"I just want to point out that this involves an extra memory fetch so it might affect performance, probably very negligibly and maybe the compiler is smart enough to elide the extra node call, but it is an extra operation nonetheless.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3074#issuecomment-1516299701
https://github.com/CliMA/Oceananigans.jl/pull/3074#issuecomment-1516999602:114,Usability,simpl,simply,114,"Since `[2]` is resolved at compile time and `2` is known I believe this can get compiled away, ie the result will simply be evaluating the second component of tuple",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3074#issuecomment-1516999602
https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985:298,Availability,down,down,298,The tests have sped up a lot (presumably because compile time is so much better with KA 0.9). This means that the docs build is a much bigger bottleneck. I think we're at 2h48m:. https://buildkite.com/clima/oceananigans/builds/11123#01879a9c-fde8-4691-a3f5-29ef6060e288. so we will see what we get down to.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985
https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985:142,Performance,bottleneck,bottleneck,142,The tests have sped up a lot (presumably because compile time is so much better with KA 0.9). This means that the docs build is a much bigger bottleneck. I think we're at 2h48m:. https://buildkite.com/clima/oceananigans/builds/11123#01879a9c-fde8-4691-a3f5-29ef6060e288. so we will see what we get down to.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985
https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985:4,Testability,test,tests,4,The tests have sped up a lot (presumably because compile time is so much better with KA 0.9). This means that the docs build is a much bigger bottleneck. I think we're at 2h48m:. https://buildkite.com/clima/oceananigans/builds/11123#01879a9c-fde8-4691-a3f5-29ef6060e288. so we will see what we get down to.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3075#issuecomment-1515556985
https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915:559,Deployability,release,release,559,"Adding a Manifest + Project toml files in each validation scripts directory is a good idea!; However, if we do it while we are working on them in a PR, then the Manifest comes with an Oceananigans dependency that points to the branch, e.g.,. https://github.com/CliMA/Oceananigans.jl/blob/1c2a6f8752b6425bf30d856f8ba0aa681c0ab818/validation/stokes_drift/Manifest.toml#L1202. and the branch gets deleted after the PR is merged. . So what one would need to do is to make another PR with a Manifest pointing to the specific commit on `main` or to the next tagged release? Sounds like too much work to be sustainable...?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915
https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915:600,Energy Efficiency,sustainab,sustainable,600,"Adding a Manifest + Project toml files in each validation scripts directory is a good idea!; However, if we do it while we are working on them in a PR, then the Manifest comes with an Oceananigans dependency that points to the branch, e.g.,. https://github.com/CliMA/Oceananigans.jl/blob/1c2a6f8752b6425bf30d856f8ba0aa681c0ab818/validation/stokes_drift/Manifest.toml#L1202. and the branch gets deleted after the PR is merged. . So what one would need to do is to make another PR with a Manifest pointing to the specific commit on `main` or to the next tagged release? Sounds like too much work to be sustainable...?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915
https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915:197,Integrability,depend,dependency,197,"Adding a Manifest + Project toml files in each validation scripts directory is a good idea!; However, if we do it while we are working on them in a PR, then the Manifest comes with an Oceananigans dependency that points to the branch, e.g.,. https://github.com/CliMA/Oceananigans.jl/blob/1c2a6f8752b6425bf30d856f8ba0aa681c0ab818/validation/stokes_drift/Manifest.toml#L1202. and the branch gets deleted after the PR is merged. . So what one would need to do is to make another PR with a Manifest pointing to the specific commit on `main` or to the next tagged release? Sounds like too much work to be sustainable...?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915
https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915:47,Security,validat,validation,47,"Adding a Manifest + Project toml files in each validation scripts directory is a good idea!; However, if we do it while we are working on them in a PR, then the Manifest comes with an Oceananigans dependency that points to the branch, e.g.,. https://github.com/CliMA/Oceananigans.jl/blob/1c2a6f8752b6425bf30d856f8ba0aa681c0ab818/validation/stokes_drift/Manifest.toml#L1202. and the branch gets deleted after the PR is merged. . So what one would need to do is to make another PR with a Manifest pointing to the specific commit on `main` or to the next tagged release? Sounds like too much work to be sustainable...?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915
https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915:329,Security,validat,validation,329,"Adding a Manifest + Project toml files in each validation scripts directory is a good idea!; However, if we do it while we are working on them in a PR, then the Manifest comes with an Oceananigans dependency that points to the branch, e.g.,. https://github.com/CliMA/Oceananigans.jl/blob/1c2a6f8752b6425bf30d856f8ba0aa681c0ab818/validation/stokes_drift/Manifest.toml#L1202. and the branch gets deleted after the PR is merged. . So what one would need to do is to make another PR with a Manifest pointing to the specific commit on `main` or to the next tagged release? Sounds like too much work to be sustainable...?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1891870915
https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1895904765:58,Security,validat,validation,58,"Do we want to have a goal of 100% reproducibility for the validation cases? I think their main purpose is expository, ie to show advanced usage of the code. Exact reproducibility isn't the highest priority for that purpose --- is it?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3076#issuecomment-1895904765
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518031264:165,Energy Efficiency,energy,energy,165,"Apparently something breaks in this bugfix. Forgetting about the tilted buoyancy stuff for a while, even when the buoyancy isn't tilted this results in accumulating energy. In the simulation below I'm just using `buoyancy = BuoyancyTracer()` and aligning the stratification accordingly:. https://user-images.githubusercontent.com/13205162/233681167-b3d21670-ddd4-47fe-92e6-5227fb2cf344.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518031264
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518043988:17,Testability,test,testing,17,"Nice, thanks for testing that. I found the second bug (which was created by the bugfix). I think it should work now. This could allow us to eliminate the hydrostatic pressure from the nonhydrostatic model and thereby save allocating one field. @simone-silvestri . Apparently all our prior tests were flawed because of this bug. We still need the hydrostatic pressure integral in the hydrostatic model.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518043988
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518043988:289,Testability,test,tests,289,"Nice, thanks for testing that. I found the second bug (which was created by the bugfix). I think it should work now. This could allow us to eliminate the hydrostatic pressure from the nonhydrostatic model and thereby save allocating one field. @simone-silvestri . Apparently all our prior tests were flawed because of this bug. We still need the hydrostatic pressure integral in the hydrostatic model.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518043988
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518046150:19,Testability,test,testing,19,"> Nice, thanks for testing that. I found the second bug (which was created by the bugfix). I think it should work now.; > ; > This could allow us to eliminate the hydrostatic pressure from the nonhydrostatic model and thereby save allocating one field. @simone-silvestri . Apparently all our prior tests were flawed because of this bug. We still need the hydrostatic pressure integral in the hydrostatic model. Ha, you beat me to the punchline. But yes, agreed!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518046150
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518046150:298,Testability,test,tests,298,"> Nice, thanks for testing that. I found the second bug (which was created by the bugfix). I think it should work now.; > ; > This could allow us to eliminate the hydrostatic pressure from the nonhydrostatic model and thereby save allocating one field. @simone-silvestri . Apparently all our prior tests were flawed because of this bug. We still need the hydrostatic pressure integral in the hydrostatic model. Ha, you beat me to the punchline. But yes, agreed!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518046150
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518046160:328,Performance,perform,performing,328,"> So it appears that there are two competing bug here, which kinda cancel out in the case where gravity aligned with the vertical direction. I also think that back in #1910 when we saw some weird effects when not separating the pressure, this might have been it. No, I don't think so. We reconstructed correctly previously when performing the hydrostatic pressure integral. The only bug was for tilted gravity, or not using the pressure integral.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518046160
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721:919,Testability,test,tests,919,"As the diff shows, this PR reconstructs buoyancy at the location it's needed. For example, `x_dot_g_b` must reconstruct the buoyancy perturbation, which is located at tracer locations `ccc`, at the location `fcc`. . Similarly, `z_dot_g_b` should be reconstructed at `ccf` (the location of vertical velocity). Note that we _also_ do this reconstructed when computing the hydrostatic pressure integral, therefore:. $$ p_h = \int^0_z \bar b^z \text{ } dz $$. where $\overline{()}^z$ indicates a reconstruction in $z$. Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. The first commit on this PR changed the reconstruction for `z_dot_g_b` so it returns at `ccf`. However, making this change also requires ""undoing"" the reconstruction in the hyrostatic pressure integral, which previously assumed that `z_dot_g_b` returned at `ccc`. With both changes, the regression tests should pass _and_ tilted gravity should be fixed. Hope that clears things up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721:759,Usability,undo,undoing,759,"As the diff shows, this PR reconstructs buoyancy at the location it's needed. For example, `x_dot_g_b` must reconstruct the buoyancy perturbation, which is located at tracer locations `ccc`, at the location `fcc`. . Similarly, `z_dot_g_b` should be reconstructed at `ccf` (the location of vertical velocity). Note that we _also_ do this reconstructed when computing the hydrostatic pressure integral, therefore:. $$ p_h = \int^0_z \bar b^z \text{ } dz $$. where $\overline{()}^z$ indicates a reconstruction in $z$. Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. The first commit on this PR changed the reconstruction for `z_dot_g_b` so it returns at `ccf`. However, making this change also requires ""undoing"" the reconstruction in the hyrostatic pressure integral, which previously assumed that `z_dot_g_b` returned at `ccc`. With both changes, the regression tests should pass _and_ tilted gravity should be fixed. Hope that clears things up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721:985,Usability,clear,clears,985,"As the diff shows, this PR reconstructs buoyancy at the location it's needed. For example, `x_dot_g_b` must reconstruct the buoyancy perturbation, which is located at tracer locations `ccc`, at the location `fcc`. . Similarly, `z_dot_g_b` should be reconstructed at `ccf` (the location of vertical velocity). Note that we _also_ do this reconstructed when computing the hydrostatic pressure integral, therefore:. $$ p_h = \int^0_z \bar b^z \text{ } dz $$. where $\overline{()}^z$ indicates a reconstruction in $z$. Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. The first commit on this PR changed the reconstruction for `z_dot_g_b` so it returns at `ccf`. However, making this change also requires ""undoing"" the reconstruction in the hyrostatic pressure integral, which previously assumed that `z_dot_g_b` returned at `ccc`. With both changes, the regression tests should pass _and_ tilted gravity should be fixed. Hope that clears things up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054:1180,Availability,down,down,1180,"at tracer locations `ccc`, at the location `fcc`.; > ; > Similarly, `z_dot_g_b` should be reconstructed at `ccf` (the location of vertical velocity). Note that we _also_ do this reconstructed when computing the hydrostatic pressure integral, therefore:; > ; > ph=∫z0b¯z dz; > ; > where ()―z indicates a reconstruction in z.; > ; > Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. I think this is the only part that I'm confused about. Why was not interpolating `z_dot_g_b` okay?. I ran some tests to investigate this and found some interesting things. As a background: when we originally tried to nuke the pressure separation, I noticed that some wave noise was being created. Unfortunately the videos of that PR were lost in time so I can't show them to you, but here is the relevant comment: https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-995840271. The worst offender was the internal wave example, where the wave packet seemed to break down pretty quickly without a hydrostatic pressure separation. So I just ran the same example using the `main` branch and branch https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 (which now has this bugfix in and it doesn't separate the pressure). I ran it for 10 times longer and here are the videos of both (respectively):. https://user-images.githubusercontent.com/13205162/233692840-edd9780b-dbc4-4958-843d-9895ac85c32f.mp4. https://user-images.githubusercontent.com/13205162/233692959-841c2a2c-2a8a-40e2-9448-fa2943a67502.mp4. They look exactly the same to me. So whatever was causing the added wave noise in https://github.com/CliMA/Oceananigans.jl/pull/1910 when we removed the hydrostatic pressure (whether it was the things you changed in this PR or not), it's not causing the noise anymore. I haven't tested the other docs examples but this was the worse offender, so I'm confident they'll look good too. With this is mind, I'll open a draft PR with https://github.c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054:714,Testability,test,tests,714,"> As the diff shows, this PR reconstructs buoyancy at the location it's needed. For example, `x_dot_g_b` must reconstruct the buoyancy perturbation, which is located at tracer locations `ccc`, at the location `fcc`.; > ; > Similarly, `z_dot_g_b` should be reconstructed at `ccf` (the location of vertical velocity). Note that we _also_ do this reconstructed when computing the hydrostatic pressure integral, therefore:; > ; > ph=∫z0b¯z dz; > ; > where ()―z indicates a reconstruction in z.; > ; > Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. I think this is the only part that I'm confused about. Why was not interpolating `z_dot_g_b` okay?. I ran some tests to investigate this and found some interesting things. As a background: when we originally tried to nuke the pressure separation, I noticed that some wave noise was being created. Unfortunately the videos of that PR were lost in time so I can't show them to you, but here is the relevant comment: https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-995840271. The worst offender was the internal wave example, where the wave packet seemed to break down pretty quickly without a hydrostatic pressure separation. So I just ran the same example using the `main` branch and branch https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 (which now has this bugfix in and it doesn't separate the pressure). I ran it for 10 times longer and here are the videos of both (respectively):. https://user-images.githubusercontent.com/13205162/233692840-edd9780b-dbc4-4958-843d-9895ac85c32f.mp4. https://user-images.githubusercontent.com/13205162/233692959-841c2a2c-2a8a-40e2-9448-fa2943a67502.mp4. They look exactly the same to me. So whatever was causing the added wave noise in https://github.com/CliMA/Oceananigans.jl/pull/1910 when we removed the hydrostatic pressure (whether it was the things you changed in this PR or not), it's not causing the noise anymore. I haven't",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054:2002,Testability,test,tested,2002,"ed when computing the hydrostatic pressure integral, therefore:; > ; > ph=∫z0b¯z dz; > ; > where ()―z indicates a reconstruction in z.; > ; > Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. I think this is the only part that I'm confused about. Why was not interpolating `z_dot_g_b` okay?. I ran some tests to investigate this and found some interesting things. As a background: when we originally tried to nuke the pressure separation, I noticed that some wave noise was being created. Unfortunately the videos of that PR were lost in time so I can't show them to you, but here is the relevant comment: https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-995840271. The worst offender was the internal wave example, where the wave packet seemed to break down pretty quickly without a hydrostatic pressure separation. So I just ran the same example using the `main` branch and branch https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 (which now has this bugfix in and it doesn't separate the pressure). I ran it for 10 times longer and here are the videos of both (respectively):. https://user-images.githubusercontent.com/13205162/233692840-edd9780b-dbc4-4958-843d-9895ac85c32f.mp4. https://user-images.githubusercontent.com/13205162/233692959-841c2a2c-2a8a-40e2-9448-fa2943a67502.mp4. They look exactly the same to me. So whatever was causing the added wave noise in https://github.com/CliMA/Oceananigans.jl/pull/1910 when we removed the hydrostatic pressure (whether it was the things you changed in this PR or not), it's not causing the noise anymore. I haven't tested the other docs examples but this was the worse offender, so I'm confident they'll look good too. With this is mind, I'll open a draft PR with https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 to see what happens to the tests. I think if the dynamics look the same we could reopen the discussion about removing the hydrostatic pressure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054:2239,Testability,test,tests,2239,"ed when computing the hydrostatic pressure integral, therefore:; > ; > ph=∫z0b¯z dz; > ; > where ()―z indicates a reconstruction in z.; > ; > Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. I think this is the only part that I'm confused about. Why was not interpolating `z_dot_g_b` okay?. I ran some tests to investigate this and found some interesting things. As a background: when we originally tried to nuke the pressure separation, I noticed that some wave noise was being created. Unfortunately the videos of that PR were lost in time so I can't show them to you, but here is the relevant comment: https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-995840271. The worst offender was the internal wave example, where the wave packet seemed to break down pretty quickly without a hydrostatic pressure separation. So I just ran the same example using the `main` branch and branch https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 (which now has this bugfix in and it doesn't separate the pressure). I ran it for 10 times longer and here are the videos of both (respectively):. https://user-images.githubusercontent.com/13205162/233692840-edd9780b-dbc4-4958-843d-9895ac85c32f.mp4. https://user-images.githubusercontent.com/13205162/233692959-841c2a2c-2a8a-40e2-9448-fa2943a67502.mp4. They look exactly the same to me. So whatever was causing the added wave noise in https://github.com/CliMA/Oceananigans.jl/pull/1910 when we removed the hydrostatic pressure (whether it was the things you changed in this PR or not), it's not causing the noise anymore. I haven't tested the other docs examples but this was the worse offender, so I'm confident they'll look good too. With this is mind, I'll open a draft PR with https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 to see what happens to the tests. I think if the dynamics look the same we could reopen the discussion about removing the hydrostatic pressure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281:653,Deployability,update,update,653,"Another benefit of removing the hydrostatic pressure is that we can improve the documentation and user interface too. For example, the hydrostatic pressure in the hydrostatic model is stored in something like. ```; model.pressure.pHY; ```. since for the nonhydrostatic model its. ```; model.pressures.pNHS; model.pressures.pHY; ```. With just one pressure field we should simply write `model.pressure` for both cases. It's a significant refactor to remove hydrostatic pressure --- I don't think we want to do the hacky thing that we did to set up that PR that just keeps the same structures but sets pressure to `nothing`, we want to do it properly and update the docs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281:103,Integrability,interface,interface,103,"Another benefit of removing the hydrostatic pressure is that we can improve the documentation and user interface too. For example, the hydrostatic pressure in the hydrostatic model is stored in something like. ```; model.pressure.pHY; ```. since for the nonhydrostatic model its. ```; model.pressures.pNHS; model.pressures.pHY; ```. With just one pressure field we should simply write `model.pressure` for both cases. It's a significant refactor to remove hydrostatic pressure --- I don't think we want to do the hacky thing that we did to set up that PR that just keeps the same structures but sets pressure to `nothing`, we want to do it properly and update the docs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281:437,Modifiability,refactor,refactor,437,"Another benefit of removing the hydrostatic pressure is that we can improve the documentation and user interface too. For example, the hydrostatic pressure in the hydrostatic model is stored in something like. ```; model.pressure.pHY; ```. since for the nonhydrostatic model its. ```; model.pressures.pNHS; model.pressures.pHY; ```. With just one pressure field we should simply write `model.pressure` for both cases. It's a significant refactor to remove hydrostatic pressure --- I don't think we want to do the hacky thing that we did to set up that PR that just keeps the same structures but sets pressure to `nothing`, we want to do it properly and update the docs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281:372,Usability,simpl,simply,372,"Another benefit of removing the hydrostatic pressure is that we can improve the documentation and user interface too. For example, the hydrostatic pressure in the hydrostatic model is stored in something like. ```; model.pressure.pHY; ```. since for the nonhydrostatic model its. ```; model.pressures.pNHS; model.pressures.pHY; ```. With just one pressure field we should simply write `model.pressure` for both cases. It's a significant refactor to remove hydrostatic pressure --- I don't think we want to do the hacky thing that we did to set up that PR that just keeps the same structures but sets pressure to `nothing`, we want to do it properly and update the docs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518172281
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518198862:237,Deployability,update,update,237,"> It's a significant refactor to remove hydrostatic pressure --- I don't think we want to do the hacky thing that we did to set up that PR that just keeps the same structures but sets pressure to `nothing`, we want to do it properly and update the docs. Agreed. https://github.com/CliMA/Oceananigans.jl/pull/3080 is for now just a start to see if anything significant breaks. So far everything looks OK there",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518198862
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518198862:21,Modifiability,refactor,refactor,21,"> It's a significant refactor to remove hydrostatic pressure --- I don't think we want to do the hacky thing that we did to set up that PR that just keeps the same structures but sets pressure to `nothing`, we want to do it properly and update the docs. Agreed. https://github.com/CliMA/Oceananigans.jl/pull/3080 is for now just a start to see if anything significant breaks. So far everything looks OK there",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518198862
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518199728:26,Deployability,patch,patch,26,@glwagner can we bump the patch version and register a new release when you think this is ready?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518199728
https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518199728:59,Deployability,release,release,59,@glwagner can we bump the patch version and register a new release when you think this is ready?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518199728
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:237,Availability,failure,failures,237,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:545,Availability,error,errors,545,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:594,Availability,error,errors,594,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:231,Testability,test,tests,231,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:314,Testability,Test,Test,314,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:391,Testability,test,test,391,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:1134,Testability,test,test,1134,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:671,Usability,simpl,simplify,671,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:1153,Usability,simpl,simpler,1153,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1520495458:38,Modifiability,refactor,refactoring,38,"annoying that the tests need a little refactoring too, but maybe its all for the best.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1520495458
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1520495458:18,Testability,test,tests,18,"annoying that the tests need a little refactoring too, but maybe its all for the best.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1520495458
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1546065518:193,Testability,test,tests,193,With this last commit both the hydrostatic and nonhydrostatic models are working locally for me and they only have a `model.pressure` field; no more `NamedTuple`s of pressure. But let's see if tests are passing. The `PressureField` functions (formerly `PressureFields`) should probably be moved from `field_tuples.jl` since they don't return tuples anymore. Any suggestion as to where they might be moved?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1546065518
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035:298,Testability,test,tests,298,"I think code-wise, this is pretty much ready (save some occasional polishing like [here](https://github.com/CliMA/Oceananigans.jl/pull/3080#discussion_r1192737129)). `pHY` and `pNHS` are no more, and both both hydrostatic and nonhydrostaic models, the pressure is simply `model.pressure`. The only tests that are failing and some regression tests, whose data will have to be re-done, and a scalar-index issue on GPUs. I think the only major change that's left is the documentation. @glwagner, in the past you preferred to make big changes to the docs yourself. Do you wanna remove the pressure separation part from the docs and push it here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035:341,Testability,test,tests,341,"I think code-wise, this is pretty much ready (save some occasional polishing like [here](https://github.com/CliMA/Oceananigans.jl/pull/3080#discussion_r1192737129)). `pHY` and `pNHS` are no more, and both both hydrostatic and nonhydrostaic models, the pressure is simply `model.pressure`. The only tests that are failing and some regression tests, whose data will have to be re-done, and a scalar-index issue on GPUs. I think the only major change that's left is the documentation. @glwagner, in the past you preferred to make big changes to the docs yourself. Do you wanna remove the pressure separation part from the docs and push it here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035:264,Usability,simpl,simply,264,"I think code-wise, this is pretty much ready (save some occasional polishing like [here](https://github.com/CliMA/Oceananigans.jl/pull/3080#discussion_r1192737129)). `pHY` and `pNHS` are no more, and both both hydrostatic and nonhydrostaic models, the pressure is simply `model.pressure`. The only tests that are failing and some regression tests, whose data will have to be re-done, and a scalar-index issue on GPUs. I think the only major change that's left is the documentation. @glwagner, in the past you preferred to make big changes to the docs yourself. Do you wanna remove the pressure separation part from the docs and push it here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1550241035
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557700256:41,Testability,test,tests,41,What is the difference in the regression tests between `main` and this PR?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557700256
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557714636:43,Testability,test,tests,43,> What is the difference in the regression tests between `main` and this PR?. afaik nothing. I think the change in the pressure algorithm causes very small differences in the solution which are enough to make the regression tests fail.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557714636
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557714636:224,Testability,test,tests,224,> What is the difference in the regression tests between `main` and this PR?. afaik nothing. I think the change in the pressure algorithm causes very small differences in the solution which are enough to make the regression tests fail.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557714636
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827:89,Testability,test,tests,89,"> What are the differences?. I haven't plotted/analyzed the solutions for the regression tests carefully yet (tbh I'm not familiar yet with how the regression tests work and how the data is stored), but I have carefully compared my own simulations and a couple of the examples using `main` and this branch. The only differences I see are the usual turbulence IC ""issue"" where small disturbances in the flow amplify and lead to a different solution (pointwise speaking) but with the same statistics, qualitative behavior, etc. Given my unfamiliarity with the regression tests I'm not sure how to proceed solving the tests. So I'd appreciate some guidance here on how to move forward to get all the tests passing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827:159,Testability,test,tests,159,"> What are the differences?. I haven't plotted/analyzed the solutions for the regression tests carefully yet (tbh I'm not familiar yet with how the regression tests work and how the data is stored), but I have carefully compared my own simulations and a couple of the examples using `main` and this branch. The only differences I see are the usual turbulence IC ""issue"" where small disturbances in the flow amplify and lead to a different solution (pointwise speaking) but with the same statistics, qualitative behavior, etc. Given my unfamiliarity with the regression tests I'm not sure how to proceed solving the tests. So I'd appreciate some guidance here on how to move forward to get all the tests passing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827:569,Testability,test,tests,569,"> What are the differences?. I haven't plotted/analyzed the solutions for the regression tests carefully yet (tbh I'm not familiar yet with how the regression tests work and how the data is stored), but I have carefully compared my own simulations and a couple of the examples using `main` and this branch. The only differences I see are the usual turbulence IC ""issue"" where small disturbances in the flow amplify and lead to a different solution (pointwise speaking) but with the same statistics, qualitative behavior, etc. Given my unfamiliarity with the regression tests I'm not sure how to proceed solving the tests. So I'd appreciate some guidance here on how to move forward to get all the tests passing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827:615,Testability,test,tests,615,"> What are the differences?. I haven't plotted/analyzed the solutions for the regression tests carefully yet (tbh I'm not familiar yet with how the regression tests work and how the data is stored), but I have carefully compared my own simulations and a couple of the examples using `main` and this branch. The only differences I see are the usual turbulence IC ""issue"" where small disturbances in the flow amplify and lead to a different solution (pointwise speaking) but with the same statistics, qualitative behavior, etc. Given my unfamiliarity with the regression tests I'm not sure how to proceed solving the tests. So I'd appreciate some guidance here on how to move forward to get all the tests passing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827:697,Testability,test,tests,697,"> What are the differences?. I haven't plotted/analyzed the solutions for the regression tests carefully yet (tbh I'm not familiar yet with how the regression tests work and how the data is stored), but I have carefully compared my own simulations and a couple of the examples using `main` and this branch. The only differences I see are the usual turbulence IC ""issue"" where small disturbances in the flow amplify and lead to a different solution (pointwise speaking) but with the same statistics, qualitative behavior, etc. Given my unfamiliarity with the regression tests I'm not sure how to proceed solving the tests. So I'd appreciate some guidance here on how to move forward to get all the tests passing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827:645,Usability,guid,guidance,645,"> What are the differences?. I haven't plotted/analyzed the solutions for the regression tests carefully yet (tbh I'm not familiar yet with how the regression tests work and how the data is stored), but I have carefully compared my own simulations and a couple of the examples using `main` and this branch. The only differences I see are the usual turbulence IC ""issue"" where small disturbances in the flow amplify and lead to a different solution (pointwise speaking) but with the same statistics, qualitative behavior, etc. Given my unfamiliarity with the regression tests I'm not sure how to proceed solving the tests. So I'd appreciate some guidance here on how to move forward to get all the tests passing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559613874:21,Testability,test,tests,21,"Don't the regression tests output text indicating how many grid points are different, and what the maximum differences are?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559613874
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:2676,Availability,error,errors,2676,"/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small and most points are a match. As far as I can tell, for other regression simulations only `w` fails and the results seem to be the same both on the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:23,Testability,test,tests,23,"> Don't the regression tests output text indicating how many grid points are different, and what the maximum differences are?. Yes! Sorry, is that what you were asking? I apologize, I thought you were asking about what is causing or what is the nature of the differences. Here's a snippet from the thermal bubble test, which is the worst offender, as an example:. ```julia; | [2023/05/22 15:07:12.173] INFO Δu: min=-1.559869e-13, max=+1.317666e-13, mean=+7.650904e-22, absmean=+2.393027e-14, std=+3.376841e-14 (3926/4096 matching grid points);   | [2023/05/22 15:07:12.174] INFO Δv: min=-1.339960e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:313,Testability,test,test,313,"> Don't the regression tests output text indicating how many grid points are different, and what the maximum differences are?. Yes! Sorry, is that what you were asking? I apologize, I thought you were asking about what is causing or what is the nature of the differences. Here's a snippet from the thermal bubble test, which is the worst offender, as an example:. ```julia; | [2023/05/22 15:07:12.173] INFO Δu: min=-1.559869e-13, max=+1.317666e-13, mean=+7.650904e-22, absmean=+2.393027e-14, std=+3.376841e-14 (3926/4096 matching grid points);   | [2023/05/22 15:07:12.174] INFO Δv: min=-1.339960e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1287,Testability,Test,Test,1287,"mal bubble test, which is the worst offender, as an example:. ```julia; | [2023/05/22 15:07:12.173] INFO Δu: min=-1.559869e-13, max=+1.317666e-13, mean=+7.650904e-22, absmean=+2.393027e-14, std=+3.376841e-14 (3926/4096 matching grid points);   | [2023/05/22 15:07:12.174] INFO Δv: min=-1.339960e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1364,Testability,test,test,1364,"mal bubble test, which is the worst offender, as an example:. ```julia; | [2023/05/22 15:07:12.173] INFO Δu: min=-1.559869e-13, max=+1.317666e-13, mean=+7.650904e-22, absmean=+2.393027e-14, std=+3.376841e-14 (3926/4096 matching grid points);   | [2023/05/22 15:07:12.174] INFO Δv: min=-1.339960e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1590,Testability,Test,Test,1590,"e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1599,Testability,Test,Test,1599,"e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1746,Testability,test,test,1746," grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small an",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1861,Testability,Test,Test,1861,"/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small and most points are a match. As far as I can tell, for other regression simulations only `w` fails and the results seem to be the same both on the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:1938,Testability,test,test,1938,"/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small and most points are a match. As far as I can tell, for other regression simulations only `w` fails and the results seem to be the same both on the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:2164,Testability,Test,Test,2164,"/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small and most points are a match. As far as I can tell, for other regression simulations only `w` fails and the results seem to be the same both on the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:2173,Testability,Test,Test,2173,"/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small and most points are a match. As far as I can tell, for other regression simulations only `w` fails and the results seem to be the same both on the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:2320,Testability,test,test,2320,"/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small and most points are a match. As far as I can tell, for other regression simulations only `w` fails and the results seem to be the same both on the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:2435,Testability,Test,Test,2435,"/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small and most points are a match. As far as I can tell, for other regression simulations only `w` fails and the results seem to be the same both on the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:2512,Testability,test,test,2512,"/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Expression: all(test_fields.v .≈ correct_fields.v);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:78;   | Expression: all(test_fields.w .≈ correct_fields.w); ```. You can see that u, v, and w fail, but the errors are really small and most points are a match. As far as I can tell, for other regression simulations only `w` fails and the results seem to be the same both on the CPU and GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582732172:165,Performance,perform,performance,165,@xkykai do you think you could run some immersed boundary tests with this branch to make sure this change doesn’t affect your work? I think we’re interested in both performance and making sure the solution is high quality.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582732172
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582732172:58,Testability,test,tests,58,@xkykai do you think you could run some immersed boundary tests with this branch to make sure this change doesn’t affect your work? I think we’re interested in both performance and making sure the solution is high quality.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582732172
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582859937:167,Performance,perform,performance,167,"> @xkykai do you think you could run some immersed boundary tests with this branch to make sure this change doesn’t affect your work? I think we’re interested in both performance and making sure the solution is high quality. Do you mean using the immersed pressure solver in this branch, and comparing the solution this produces with the one before this change?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582859937
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582859937:60,Testability,test,tests,60,"> @xkykai do you think you could run some immersed boundary tests with this branch to make sure this change doesn’t affect your work? I think we’re interested in both performance and making sure the solution is high quality. Do you mean using the immersed pressure solver in this branch, and comparing the solution this produces with the one before this change?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582859937
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582964095:109,Testability,test,test,109,> > and a scalar-index issue on GPUs.; > ; > What's the scalar indexing issue?. It's already fixed. It was a test that was failing because we were comparing point-wise values. If I find the exact lines I'll post them here.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582964095
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708:811,Testability,test,tested,811,"In order to build confidence and move forward with this PR, here's a comparison between the same simulations on `main` and on this branch. I'm using a channel set-up (`Bounded, Periodic, Bounded` topology ) to simulate a front with Smagorinsky closure, using only a surface buoyancy flux as forcing. . Here's how it looks on the main branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/47b7ffe1-5e59-4459-977d-db9ce2ee3644. The artifacts at the bottom are due to the fact that I'm using a stretched grid that gets pretty coarse as you move away from the surface. And here is the same simulation, but run on this branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/2fd8c124-4dd6-42c6-bef9-5c16bd55dd4e. which looks pretty much the same. In addition, every averaged quantity that I've tested looks almost exactly the same between both branches. Here's $w'b'$ as an example:. ![image](https://github.com/CliMA/Oceananigans.jl/assets/13205162/152676d6-b099-4323-88a6-b065c4abcc5f). Also I should mention that I've been using this branch for a few weeks, and so far I haven't noticed anything different from the main or suspicious in any way. @glwagner with this comparison (and the many others I've run for my own research), plus the regression tests being off just by approximately `eps()`, plus all the examples in docs looking the same, I personally feel pretty confident that this branch is working as intended. Please let me know if there's any other tests that need to be done before we move forward here!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708:1269,Testability,test,tests,1269,"In order to build confidence and move forward with this PR, here's a comparison between the same simulations on `main` and on this branch. I'm using a channel set-up (`Bounded, Periodic, Bounded` topology ) to simulate a front with Smagorinsky closure, using only a surface buoyancy flux as forcing. . Here's how it looks on the main branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/47b7ffe1-5e59-4459-977d-db9ce2ee3644. The artifacts at the bottom are due to the fact that I'm using a stretched grid that gets pretty coarse as you move away from the surface. And here is the same simulation, but run on this branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/2fd8c124-4dd6-42c6-bef9-5c16bd55dd4e. which looks pretty much the same. In addition, every averaged quantity that I've tested looks almost exactly the same between both branches. Here's $w'b'$ as an example:. ![image](https://github.com/CliMA/Oceananigans.jl/assets/13205162/152676d6-b099-4323-88a6-b065c4abcc5f). Also I should mention that I've been using this branch for a few weeks, and so far I haven't noticed anything different from the main or suspicious in any way. @glwagner with this comparison (and the many others I've run for my own research), plus the regression tests being off just by approximately `eps()`, plus all the examples in docs looking the same, I personally feel pretty confident that this branch is working as intended. Please let me know if there's any other tests that need to be done before we move forward here!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708:1480,Testability,test,tests,1480,"In order to build confidence and move forward with this PR, here's a comparison between the same simulations on `main` and on this branch. I'm using a channel set-up (`Bounded, Periodic, Bounded` topology ) to simulate a front with Smagorinsky closure, using only a surface buoyancy flux as forcing. . Here's how it looks on the main branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/47b7ffe1-5e59-4459-977d-db9ce2ee3644. The artifacts at the bottom are due to the fact that I'm using a stretched grid that gets pretty coarse as you move away from the surface. And here is the same simulation, but run on this branch:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/2fd8c124-4dd6-42c6-bef9-5c16bd55dd4e. which looks pretty much the same. In addition, every averaged quantity that I've tested looks almost exactly the same between both branches. Here's $w'b'$ as an example:. ![image](https://github.com/CliMA/Oceananigans.jl/assets/13205162/152676d6-b099-4323-88a6-b065c4abcc5f). Also I should mention that I've been using this branch for a few weeks, and so far I haven't noticed anything different from the main or suspicious in any way. @glwagner with this comparison (and the many others I've run for my own research), plus the regression tests being off just by approximately `eps()`, plus all the examples in docs looking the same, I personally feel pretty confident that this branch is working as intended. Please let me know if there's any other tests that need to be done before we move forward here!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1586355708
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1616803081:361,Availability,avail,available,361,"> @tomchor the description of this issue is a little vague. The dynamics weren't ""weird"" --- the problem was a bug in reconstructing buoyancy in the momentum equations, right? It'd be nice to add a little more explicit description of the original issue. I think there is a PR that fixed the bug that we can point to as well. The issue is that the videos aren't available anymore and, apart from the internal wave packet example, I don't really remember what was happening well enough to be able describe it objectively. That said, I did my best to make the description more clear and linked the PR that solved the bug.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1616803081
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1616803081:574,Usability,clear,clear,574,"> @tomchor the description of this issue is a little vague. The dynamics weren't ""weird"" --- the problem was a bug in reconstructing buoyancy in the momentum equations, right? It'd be nice to add a little more explicit description of the original issue. I think there is a PR that fixed the bug that we can point to as well. The issue is that the videos aren't available anymore and, apart from the internal wave packet example, I don't really remember what was happening well enough to be able describe it objectively. That said, I did my best to make the description more clear and linked the PR that solved the bug.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1616803081
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1621989632:370,Availability,avail,available,370,"> > @tomchor the description of this issue is a little vague. The dynamics weren't ""weird"" --- the problem was a bug in reconstructing buoyancy in the momentum equations, right? It'd be nice to add a little more explicit description of the original issue. I think there is a PR that fixed the bug that we can point to as well.; > ; > The issue is that the videos aren't available anymore and, apart from the internal wave packet example, I don't really remember what was happening well enough to be able describe it objectively.; > ; > That said, I did my best to make the description more clear and linked the PR that solved the bug. The issue was that buoyancy was not reconstructed properly in the vertical. (There was also a problem with reconstructing buoyancy in the horizontal, but this only affects tilted domains.) So there was a bug and the discretization was incorrect.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1621989632
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1621989632:590,Usability,clear,clear,590,"> > @tomchor the description of this issue is a little vague. The dynamics weren't ""weird"" --- the problem was a bug in reconstructing buoyancy in the momentum equations, right? It'd be nice to add a little more explicit description of the original issue. I think there is a PR that fixed the bug that we can point to as well.; > ; > The issue is that the videos aren't available anymore and, apart from the internal wave packet example, I don't really remember what was happening well enough to be able describe it objectively.; > ; > That said, I did my best to make the description more clear and linked the PR that solved the bug. The issue was that buoyancy was not reconstructed properly in the vertical. (There was also a problem with reconstructing buoyancy in the horizontal, but this only affects tilted domains.) So there was a bug and the discretization was incorrect.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1621989632
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622028780:11,Deployability,update,updated,11,@tomchor I updated the PR description. Feel free to edit it further.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622028780
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622165197:482,Deployability,update,updated,482,"> The issue was that buoyancy was not reconstructed properly in the vertical. (There was also a problem with reconstructing buoyancy in the horizontal, but this only affects tilted domains.) So there was a bug and the discretization was incorrect. I'm aware of that. My point was more that I don't quite remember how the issue was manifested in the dynamics (the recognition of which was what prompted us to abandon https://github.com/CliMA/Oceananigans.jl/pull/1910). > @tomchor I updated the PR description. Feel free to edit it further. Thanks, that's a great detailed description. I only added one item to the advantages: simpler code and user interface.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622165197
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622165197:648,Integrability,interface,interface,648,"> The issue was that buoyancy was not reconstructed properly in the vertical. (There was also a problem with reconstructing buoyancy in the horizontal, but this only affects tilted domains.) So there was a bug and the discretization was incorrect. I'm aware of that. My point was more that I don't quite remember how the issue was manifested in the dynamics (the recognition of which was what prompted us to abandon https://github.com/CliMA/Oceananigans.jl/pull/1910). > @tomchor I updated the PR description. Feel free to edit it further. Thanks, that's a great detailed description. I only added one item to the advantages: simpler code and user interface.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622165197
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622165197:626,Usability,simpl,simpler,626,"> The issue was that buoyancy was not reconstructed properly in the vertical. (There was also a problem with reconstructing buoyancy in the horizontal, but this only affects tilted domains.) So there was a bug and the discretization was incorrect. I'm aware of that. My point was more that I don't quite remember how the issue was manifested in the dynamics (the recognition of which was what prompted us to abandon https://github.com/CliMA/Oceananigans.jl/pull/1910). > @tomchor I updated the PR description. Feel free to edit it further. Thanks, that's a great detailed description. I only added one item to the advantages: simpler code and user interface.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622165197
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622336006:280,Usability,simpl,simpler,280,> What do you mean by cleaner code? You mean `update_state!`? We need all of these functions still for the hydrostatic model so I don't think on the whole there's much of a change to the source code. I'm referring to the fact that dealing with just one pressure makes for cleaner/simpler code in general. But feel free to remove that statement if you don't agree.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1622336006
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682026102:973,Availability,error,error,973,"> I'll leave this here for the record. I'm currently experiencing the first significant dynamical difference I've seen so far between the model with and without the pressure separation.; > ; > In a simulation where I'm studying flow past an obstacle (therefore with immersed boundaries) the simulation runs fine on this branch, but (everything else being the same) doesn't finish running on `main`. On `main` the velocities keep increasing, leading to a progressive decrease in Δt to satisfy CFL condition, but the velocities keep increasing despite that, with smaller and smaller Δts. (I believe that's called a slow blow-up?); > ; > So this is a case where the simulation _fails_ on `main`, but is successful in this branch.; > ; > The simulation is far too complex to post here, but I'll try to come up with a MWE that reproduces it. Interesting that is with immersed boundaries. The pressure solver isn't correct in that case so I'm not sure how to interpret that. The error should be smaller on `main` (because it's only the correction to the hydrostatic anomaly that is wrong on `main`). The main uncertainty is how this PR will interact with #3188. We could explore using the new immersed pressure solver on this branch to test that out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682026102
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682026102:1230,Testability,test,test,1230,"> I'll leave this here for the record. I'm currently experiencing the first significant dynamical difference I've seen so far between the model with and without the pressure separation.; > ; > In a simulation where I'm studying flow past an obstacle (therefore with immersed boundaries) the simulation runs fine on this branch, but (everything else being the same) doesn't finish running on `main`. On `main` the velocities keep increasing, leading to a progressive decrease in Δt to satisfy CFL condition, but the velocities keep increasing despite that, with smaller and smaller Δts. (I believe that's called a slow blow-up?); > ; > So this is a case where the simulation _fails_ on `main`, but is successful in this branch.; > ; > The simulation is far too complex to post here, but I'll try to come up with a MWE that reproduces it. Interesting that is with immersed boundaries. The pressure solver isn't correct in that case so I'm not sure how to interpret that. The error should be smaller on `main` (because it's only the correction to the hydrostatic anomaly that is wrong on `main`). The main uncertainty is how this PR will interact with #3188. We could explore using the new immersed pressure solver on this branch to test that out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682026102
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682424275:138,Testability,test,test,138,"> The main uncertainty is how this PR will interact with #3188. We could explore using the new immersed pressure solver on this branch to test that out. Is that branch working? i.e. do I just have to merge both branches and run? If so, I can do that and report back.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682424275
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088345383:803,Testability,test,tests,803,"> @tomchor I think we should revisit this and get it merged. It doesn't seem like the immersed Poisson solver is progressing right now, so I don't think it makes sense to keep this on hold for it --- especially because features like triply periodic simulations require this change. Happy to help resolve merge conflicts or opening a new PR whichever makes more sense. I'm leaning towards opening another PR and making the non-separation optional. The rationale is that even though the immersed Poisson solver isn't progressing right now (and I agree we shouldn't wait for it), when it does progress it may turn out that it works better with the original (i.e. hydrostatic pressure separation) algorithm. Plus if we keep the current Poisson solver as default, then we don't need to re-run the regression tests. What do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088345383
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088540295:209,Safety,avoid,avoid,209,"I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior... I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm. Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088540295
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088540295:381,Testability,test,tests,381,"I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior... I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm. Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088540295
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088574534:211,Safety,avoid,avoid,211,"> I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior...; > ; > I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm. Agreed. > Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do). Thanks, but I unfortunately won't have time to dedicate to this for at least a few weeks. So please feel free to start the PR!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088574534
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088574534:383,Testability,test,tests,383,"> I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior...; > ; > I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm. Agreed. > Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do). Thanks, but I unfortunately won't have time to dedicate to this for at least a few weeks. So please feel free to start the PR!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088574534
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088592499:213,Safety,avoid,avoid,213,"> > I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior...; > > I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm.; > ; > Agreed.; > ; > > Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do).; > ; > Thanks, but I unfortunately won't have time to dedicate to this for at least a few weeks. So please feel free to start the PR!. Great. I think the PR is nearly finished over at #3574. Give it a look over when you have time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088592499
https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088592499:385,Testability,test,tests,385,"> > I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior...; > > I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm.; > ; > Agreed.; > ; > > Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do).; > ; > Thanks, but I unfortunately won't have time to dedicate to this for at least a few weeks. So please feel free to start the PR!. Great. I think the PR is nearly finished over at #3574. Give it a look over when you have time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088592499
https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1550535207:569,Availability,checkpoint,checkpoints,569,"As an update, I have pushed a commit consisting of a working version of the double gyre example, where Δz is replaced by zspacings and znodes, the plots are improved with additional attributes, and visualization is performed on the CPU even if the code runs on the GPU. I still need to incorporate some of the suggested modifications listed above. I am uploading the plots and animation here. In today's meeting with Navid and Simone, we looked at switching to the lat-lon grid and more. In the upcoming commits, I will run for longer time on a lat-lon grid, introduce checkpoints for restarting the simulation, and add a topography. . [double_gyre_grid_spacing.pdf](https://github.com/CliMA/Oceananigans.jl/files/11493173/double_gyre_grid_spacing.pdf). [double_gyre_circulation.pdf](https://github.com/CliMA/Oceananigans.jl/files/11493174/double_gyre_circulation.pdf). https://github.com/CliMA/Oceananigans.jl/assets/12926768/cf148a0c-58c8-4ba2-b649-cb40418d0665",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1550535207
https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1550535207:6,Deployability,update,update,6,"As an update, I have pushed a commit consisting of a working version of the double gyre example, where Δz is replaced by zspacings and znodes, the plots are improved with additional attributes, and visualization is performed on the CPU even if the code runs on the GPU. I still need to incorporate some of the suggested modifications listed above. I am uploading the plots and animation here. In today's meeting with Navid and Simone, we looked at switching to the lat-lon grid and more. In the upcoming commits, I will run for longer time on a lat-lon grid, introduce checkpoints for restarting the simulation, and add a topography. . [double_gyre_grid_spacing.pdf](https://github.com/CliMA/Oceananigans.jl/files/11493173/double_gyre_grid_spacing.pdf). [double_gyre_circulation.pdf](https://github.com/CliMA/Oceananigans.jl/files/11493174/double_gyre_circulation.pdf). https://github.com/CliMA/Oceananigans.jl/assets/12926768/cf148a0c-58c8-4ba2-b649-cb40418d0665",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1550535207
https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1550535207:215,Performance,perform,performed,215,"As an update, I have pushed a commit consisting of a working version of the double gyre example, where Δz is replaced by zspacings and znodes, the plots are improved with additional attributes, and visualization is performed on the CPU even if the code runs on the GPU. I still need to incorporate some of the suggested modifications listed above. I am uploading the plots and animation here. In today's meeting with Navid and Simone, we looked at switching to the lat-lon grid and more. In the upcoming commits, I will run for longer time on a lat-lon grid, introduce checkpoints for restarting the simulation, and add a topography. . [double_gyre_grid_spacing.pdf](https://github.com/CliMA/Oceananigans.jl/files/11493173/double_gyre_grid_spacing.pdf). [double_gyre_circulation.pdf](https://github.com/CliMA/Oceananigans.jl/files/11493174/double_gyre_circulation.pdf). https://github.com/CliMA/Oceananigans.jl/assets/12926768/cf148a0c-58c8-4ba2-b649-cb40418d0665",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1550535207
https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1572565458:175,Security,hash,hashes,175,"@navidcy, based on your comment [here](https://github.com/CliMA/Oceananigans.jl/pull/3087/commits/43723b6661ffeba0f7caf9320c8e3fb32c943f98), I have put the spaces between the hashes to restore the literation style of the examples.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-1572565458
https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-2135395047:72,Deployability,integrat,integrate,72,"Thanks @navidcy for the reply. This is helpful. This means that when we integrate the zonal momentum equation over a volume (as part of deriving the finite volume method), we get the vertical integral in the `z` derivative and hence why we get the flux at the top minus the flux at the bottom. These should be averages over each horizontal cell and we also divide by a length scale. I presume that's why the MITgcm divides by the depth of the top cell. Interesting that they seem to use a body force but it should result in the same dynamics I suppose.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-2135395047
https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-2135395047:72,Integrability,integrat,integrate,72,"Thanks @navidcy for the reply. This is helpful. This means that when we integrate the zonal momentum equation over a volume (as part of deriving the finite volume method), we get the vertical integral in the `z` derivative and hence why we get the flux at the top minus the flux at the bottom. These should be averages over each horizontal cell and we also divide by a length scale. I presume that's why the MITgcm divides by the depth of the top cell. Interesting that they seem to use a body force but it should result in the same dynamics I suppose.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3087#issuecomment-2135395047
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528811970:2692,Modifiability,extend,extendhigh,2692," push!(Rit, deepcopy(interior(Ri, 1, 1, :))); push!(bt, deepcopy(interior(b, 1, 1, :))); push!(ut, deepcopy(interior(u, 1, 1, :))); push!(et, deepcopy(interior(e, 1, 1, :))); push!(κct, deepcopy(interior(κc, 1, 1, :))); push!(κut, deepcopy(interior(κu, 1, 1, :))). return nothing; end. t = 0:10minutes:simulation.stop_time; Nt = length(t). simulation.callbacks[:dc] = Callback(collect_data, SpecifiedTimes(t)). run!(simulation). fig = Figure(resolution=(800, 600)). axR0 = Axis(fig[1, 1], xlabel=""Ri⁻¹"", ylabel=""z (m)""); axe0 = Axis(fig[2, 1], xlabel=""e"", ylabel=""z (m)"", xticks=[1e-6, 2e-5]); axκ0 = Axis(fig[3, 1], xlabel=""κ"", ylabel=""z (m)"", xticks=[0.0, 2e-3, 4e-3]). axR = Axis(fig[1, 2], xlabel=""Time (hr)"", ylabel=""z (m)"", xaxisposition=:top); axe = Axis(fig[2, 2], ylabel=""z (m)""); axκ = Axis(fig[3, 2], xlabel=""Time (hr)"", ylabel=""z (m)""). hidexdecorations!(axe). hidespines!(axR0, :r, :t); hidespines!(axe0, :r, :t); hidespines!(axκ0, :r, :t). Prt = map((κu, κc) -> κu ./ κc, κut, κct). bzt = hcat(bt...)'; Rzt = hcat(Rit...)'; ezt = hcat(et...)'; κzt = hcat(κct...)'; Pzt = hcat(Prt...)'. zc = znodes(grid, Center()); zf = znodes(grid, Face()). for n = (7, 49, 24*4+1); @show tn = t[n] / hour; label = @sprintf(""t = %d hr"", tn); lines!(axR0, 1 ./ Rit[n], zf; label); ln = lines!(axe0, et[n], zc); lines!(axκ0, κct[n], zf, color = ln.color.val, label=""κᶜ""); lines!(axκ0, κut[n], zf, linestyle=:dash, color=ln.color.val, label=""κᵘ""); end. Legend(fig[2, 0], axR0); Legend(fig[3, 0], axκ0, merge=true). vlines!(axR0, 4, color=(:gray, 0.5), linewidth=4). cr = contourf!(axR, t ./ hour, zf, 1 ./ Rzt, levels = 0:10, colormap=:viridis)#, extendhigh=true, extendlow=true); Colorbar(fig[1, 3], cr, label=""Ri⁻¹""). cr = contourf!(axe, t ./ hour, zc, ezt, levels=10, colormap=:heat); Colorbar(fig[2, 3], cr, label=""E (m² s⁻²)""). cr = contourf!(axκ, t ./ hour, zf, κzt, levels=10, colormap=:solar); Colorbar(fig[3, 3], cr, label=""κᶜ (m² s⁻¹)""). colsize!(fig.layout, 1, Relative(0.2)). display(fig); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528811970
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528811970:2709,Modifiability,extend,extendlow,2709," push!(Rit, deepcopy(interior(Ri, 1, 1, :))); push!(bt, deepcopy(interior(b, 1, 1, :))); push!(ut, deepcopy(interior(u, 1, 1, :))); push!(et, deepcopy(interior(e, 1, 1, :))); push!(κct, deepcopy(interior(κc, 1, 1, :))); push!(κut, deepcopy(interior(κu, 1, 1, :))). return nothing; end. t = 0:10minutes:simulation.stop_time; Nt = length(t). simulation.callbacks[:dc] = Callback(collect_data, SpecifiedTimes(t)). run!(simulation). fig = Figure(resolution=(800, 600)). axR0 = Axis(fig[1, 1], xlabel=""Ri⁻¹"", ylabel=""z (m)""); axe0 = Axis(fig[2, 1], xlabel=""e"", ylabel=""z (m)"", xticks=[1e-6, 2e-5]); axκ0 = Axis(fig[3, 1], xlabel=""κ"", ylabel=""z (m)"", xticks=[0.0, 2e-3, 4e-3]). axR = Axis(fig[1, 2], xlabel=""Time (hr)"", ylabel=""z (m)"", xaxisposition=:top); axe = Axis(fig[2, 2], ylabel=""z (m)""); axκ = Axis(fig[3, 2], xlabel=""Time (hr)"", ylabel=""z (m)""). hidexdecorations!(axe). hidespines!(axR0, :r, :t); hidespines!(axe0, :r, :t); hidespines!(axκ0, :r, :t). Prt = map((κu, κc) -> κu ./ κc, κut, κct). bzt = hcat(bt...)'; Rzt = hcat(Rit...)'; ezt = hcat(et...)'; κzt = hcat(κct...)'; Pzt = hcat(Prt...)'. zc = znodes(grid, Center()); zf = znodes(grid, Face()). for n = (7, 49, 24*4+1); @show tn = t[n] / hour; label = @sprintf(""t = %d hr"", tn); lines!(axR0, 1 ./ Rit[n], zf; label); ln = lines!(axe0, et[n], zc); lines!(axκ0, κct[n], zf, color = ln.color.val, label=""κᶜ""); lines!(axκ0, κut[n], zf, linestyle=:dash, color=ln.color.val, label=""κᵘ""); end. Legend(fig[2, 0], axR0); Legend(fig[3, 0], axκ0, merge=true). vlines!(axR0, 4, color=(:gray, 0.5), linewidth=4). cr = contourf!(axR, t ./ hour, zf, 1 ./ Rzt, levels = 0:10, colormap=:viridis)#, extendhigh=true, extendlow=true); Colorbar(fig[1, 3], cr, label=""Ri⁻¹""). cr = contourf!(axe, t ./ hour, zc, ezt, levels=10, colormap=:heat); Colorbar(fig[2, 3], cr, label=""E (m² s⁻²)""). cr = contourf!(axκ, t ./ hour, zf, κzt, levels=10, colormap=:solar); Colorbar(fig[3, 3], cr, label=""κᶜ (m² s⁻¹)""). colsize!(fig.layout, 1, Relative(0.2)). display(fig); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528811970
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528888588:0,Usability,Undo,Undoing,0,"Undoing the change in the vertically implicit diffusion solver, and then fixing hte CATKE bug leads to:. ![image](https://user-images.githubusercontent.com/15271942/235327064-1425dd5a-a831-47df-94da-369f7ad40557.png). This is the diffusion of a shear layer with Ri=0.1 on a stretched vertical grid. The grid is symmetric around z=0 (which helps isolate the fact that the issue was not with the tridiagonal solver, but with CATKE).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528888588
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528889163:14,Testability,test,tests,14,How about the tests that fail? Wanna work together to get them done?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528889163
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528897995:0,Deployability,patch,patch,0,patch release please,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528897995
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528897995:6,Deployability,release,release,6,patch release please,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528897995
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528952167:16,Testability,test,tests,16,"> How about the tests that fail? Wanna work together to get them done?. yes, that's unfortunate, let's!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528952167
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528953866:96,Deployability,install,installed,96,perhaps test fail because there is no manifest and different KA/CUDA/whatnot versions are being installed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528953866
https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528953866:8,Testability,test,test,8,perhaps test fail because there is no manifest and different KA/CUDA/whatnot versions are being installed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528953866
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528873049:107,Energy Efficiency,reduce,reduced,107,"It looks a lot better! Although, I still see near-grid-scale wave motions in the right movie (but they are reduced versus the left / original, right?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528873049
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528886485:1,Deployability,patch,patch,1,~patch release ;)~. actually we haven't yet released v0.81.1 so let's wait for this to be merged to do so!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528886485
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528886485:7,Deployability,release,release,7,~patch release ;)~. actually we haven't yet released v0.81.1 so let's wait for this to be merged to do so!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528886485
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528886485:44,Deployability,release,released,44,~patch release ;)~. actually we haven't yet released v0.81.1 so let's wait for this to be merged to do so!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528886485
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528951908:224,Usability,simpl,simply,224,Note that the divergence is calculated by dividing by area:. https://github.com/CliMA/Oceananigans.jl/blob/98bcdde7ae679583ea88474ec0909469abccfc90/src/Operators/divergence_operators.jl#L35-L37. So this change could be more simply explained as reconstructing `δx(Δy * u) + δy(Δx * v)` (it may be silly to divide by A then multiply by A).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1528951908
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529041690:85,Energy Efficiency,energy,energy,85,"Well, might be that the reconstruction is incorrect because it adds spurious kinetic energy. (It does not consider the spherical geometry). If you look at the kinetic energy of the above simulation that is exactly what happens; (sorry now the two cases are inverted). https://user-images.githubusercontent.com/33547697/235359276-11713879-4470-4267-a459-eae5db49e033.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529041690
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529041690:167,Energy Efficiency,energy,energy,167,"Well, might be that the reconstruction is incorrect because it adds spurious kinetic energy. (It does not consider the spherical geometry). If you look at the kinetic energy of the above simulation that is exactly what happens; (sorry now the two cases are inverted). https://user-images.githubusercontent.com/33547697/235359276-11713879-4470-4267-a459-eae5db49e033.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529041690
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529051454:389,Availability,error,error,389,"But the change here doesn't affect whether the approximation converges with spatial resolution (ie it is correct). It's just that, in the presence of numerical _error_, the change has different properties. I think its helpful to take ""bug"" to mean something that produces incorrect results, not low quality results. For example, certain ways of writing arithmetic lead to larger round-off error than others. This doesn't mean the ""worse"" ways are a ""bug"". It's just that their error properties can be improved. If we take this definition further, then `CenteredSecondOrder` has a ""bug"", because it produces a lot of oscillatory errors. Is that the definition of ""bug"" we want?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529051454
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529051454:477,Availability,error,error,477,"But the change here doesn't affect whether the approximation converges with spatial resolution (ie it is correct). It's just that, in the presence of numerical _error_, the change has different properties. I think its helpful to take ""bug"" to mean something that produces incorrect results, not low quality results. For example, certain ways of writing arithmetic lead to larger round-off error than others. This doesn't mean the ""worse"" ways are a ""bug"". It's just that their error properties can be improved. If we take this definition further, then `CenteredSecondOrder` has a ""bug"", because it produces a lot of oscillatory errors. Is that the definition of ""bug"" we want?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529051454
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529051454:628,Availability,error,errors,628,"But the change here doesn't affect whether the approximation converges with spatial resolution (ie it is correct). It's just that, in the presence of numerical _error_, the change has different properties. I think its helpful to take ""bug"" to mean something that produces incorrect results, not low quality results. For example, certain ways of writing arithmetic lead to larger round-off error than others. This doesn't mean the ""worse"" ways are a ""bug"". It's just that their error properties can be improved. If we take this definition further, then `CenteredSecondOrder` has a ""bug"", because it produces a lot of oscillatory errors. Is that the definition of ""bug"" we want?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529051454
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452:535,Testability,test,test,535,"Does it make sense to try to reconstruct vorticity in the same way? Ie have we tried reconstructing the circulation `Γᶠᶠᶜ`, which is related to vorticity through. https://github.com/CliMA/Oceananigans.jl/blob/98bcdde7ae679583ea88474ec0909469abccfc90/src/Operators/vorticity_operators.jl#L9. and then computing vorticity by dividing by `Azᶠᶜᶜ` and `Azᶜᶠᶜ`?. It makes a lot of sense to me that `δx(Δy * u) + δy(Δx * v)` is smoother than `δx(Δy * u) + δy(Δx * v) / Azᶜᶜᶜ` when the grid is strongly stretched. Maybe we should come up with test cases that have even more extreme stretching? It will be very very nice to have good properties on stretched grids for the cubed sphere.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529054646:1350,Integrability,Message,Message,1350,"this was the innovation that Alistair had when he was sorting out the; numerics of the cubed sphere out. One needs the vorticity at the corner. He; expressed it as a circulation integral snaking across three surfaces of the; cube, rather than differencing. I'm in full support. On Sun, Apr 30, 2023 at 11:25 AM Gregory L. Wagner ***@***.***>; wrote:. > Does it make sense to try to reconstruct vorticity in the same way? Ie; > have we tried reconstructing the circulation:; >; >; > https://github.com/CliMA/Oceananigans.jl/blob/98bcdde7ae679583ea88474ec0909469abccfc90/src/Operators/vorticity_operators.jl#L9; >; > and then computing vorticity by dividing by Azᶠᶜᶜ and Azᶜᶠᶜ?; >; > It makes a lot of sense to me that δx(Δy * u) + δy(Δx * v) is smoother; > than δx(Δy * u) + δy(Δx * v) / Azᶜᶜᶜ when the grid is strongly stretched.; >; > Maybe we should come up with test cases that have even more extreme; > stretching? It will be very very nice to have good properties on stretched; > grids for the cubed sphere.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKXUEQRBF7RYUYWS3KH4NGDXDZ75XANCNFSM6AAAAAAXQNM76E>; > .; > You are receiving this because you are subscribed to this thread.Message; > ID: ***@***.***>; >. -- ; ==========================================; Professor John Marshall; Earth, Atmospheric and Planetary Sciences, MIT; http://oceans.mit.edu/JohnMarshall/; ==========================================",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529054646
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529054646:865,Testability,test,test,865,"this was the innovation that Alistair had when he was sorting out the; numerics of the cubed sphere out. One needs the vorticity at the corner. He; expressed it as a circulation integral snaking across three surfaces of the; cube, rather than differencing. I'm in full support. On Sun, Apr 30, 2023 at 11:25 AM Gregory L. Wagner ***@***.***>; wrote:. > Does it make sense to try to reconstruct vorticity in the same way? Ie; > have we tried reconstructing the circulation:; >; >; > https://github.com/CliMA/Oceananigans.jl/blob/98bcdde7ae679583ea88474ec0909469abccfc90/src/Operators/vorticity_operators.jl#L9; >; > and then computing vorticity by dividing by Azᶠᶜᶜ and Azᶜᶠᶜ?; >; > It makes a lot of sense to me that δx(Δy * u) + δy(Δx * v) is smoother; > than δx(Δy * u) + δy(Δx * v) / Azᶜᶜᶜ when the grid is strongly stretched.; >; > Maybe we should come up with test cases that have even more extreme; > stretching? It will be very very nice to have good properties on stretched; > grids for the cubed sphere.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKXUEQRBF7RYUYWS3KH4NGDXDZ75XANCNFSM6AAAAAAXQNM76E>; > .; > You are receiving this because you are subscribed to this thread.Message; > ID: ***@***.***>; >. -- ; ==========================================; Professor John Marshall; Earth, Atmospheric and Planetary Sciences, MIT; http://oceans.mit.edu/JohnMarshall/; ==========================================",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529054646
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529079517:89,Energy Efficiency,energy,energy,89,"@simone-silvestri if we accept the explanation that these numerics are motivated by the ""energy conserving form"" of the vertical advection therm, then I think we can't ignore that areas should also be invoked here:. https://github.com/CliMA/Oceananigans.jl/blob/fad81b074cc914173d1760ae4769a24841e20a83/src/Advection/vector_invariant_advection.jl#L153-L154. otherwise this argument is not correct. These means that. https://github.com/CliMA/Oceananigans.jl/blob/fad81b074cc914173d1760ae4769a24841e20a83/src/Advection/upwind_biased_advective_fluxes.jl#L36-L43. would become. ```julia; @inline function advective_momentum_flux_Wu(i, j, k, grid, scheme::UpwindScheme, W, u) ; ; w̃ = _symmetric_interpolate_xᶠᵃᵃ(i, j, k, grid, scheme, Az_qᶜᶜᶠ, W) / Azᶠᶜᶜ(i, j, k, grid); uᴸ = _left_biased_interpolate_zᵃᵃᶠ(i, j, k, grid, scheme, u) ; uᴿ = _right_biased_interpolate_zᵃᵃᶠ(i, j, k, grid, scheme, u) ; ; return Azᶠᶜᶠ(i, j, k, grid) * upwind_biased_product(w̃, uᴸ, uᴿ) ; end ; ```. or something? Perhaps the division should occur outside the flux, unclear. More broadly it'd be nice to see the discrete math on these written more explicitly to understand in more detail the impact of the different discretizations.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529079517
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1577285777:326,Energy Efficiency,energy,energy,326,"For documentation purposes, I write here the three different unwinding treatment formulations:. #### `OnlySelfUpwinding`. - divergence flux: $u \left( \overline{[\delta_i U; D] + \delta_j V}^i \right)\frac{\boldsymbol{i}}{b_u} +v\left( \overline{ \delta_i U + [\delta_j V; D] }^j \right)\frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\overline{[\delta_i u^2; u]}^i + \delta_i \overline{v^2}^j \right)\frac{\boldsymbol{i}}{\Delta x_u} + \left(\delta_j \overline{u^2}^i + \overline{[\delta_j v^2; v]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### `CrossAndSelfUpwinding`. - divergence flux: $u \overline{[D; D]}^i \frac{\boldsymbol{i}}{b_u}+ v \overline{ [D; D] }^j\frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\overline{[\delta_i u^2; u]}^i + \delta_i \overline{v^2}^j\right) \frac{\boldsymbol{i}}{\Delta x_u} + \left(\delta_j \overline{u^2}^i + \overline{[\delta_j v^2; v]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### `VelocityUpwinding`. - divergence flux: $u \left( \delta_i \overline{[U; U]}^i + \overline{\delta_j V}^i \right)\frac{\boldsymbol{i}}{b_u}+ v\left( \overline{ \delta_i U} + \delta_j\overline{[V; V] }^j \right) \frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\delta_i \overline{[u^2; u^2]}^i + \delta_i \overline{v^2}^j\right)\frac{\boldsymbol{i}}{\Delta x_u}+ \left(\delta_j \overline{u^2}^i + \delta_j \overline{[v^2; v^2]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### For all three formulations; - vertical advection: $\delta_k \left(\overline{W}^i \overline{[u; u]}^k \right)\frac{\boldsymbol{i}}{b_u} + \delta_k \left( \overline{W}^j \overline{[v; v]}^k\right) \frac{\boldsymbol{j}}{b_v}$. where $D = \delta_i U + \delta_j V$, $U = Ax \cdot u$, $V = Ay \cdot v$, $W = Az \cdot w$ and $b = \Delta x \cdot \Delta y \cdot \Delta z$. $[u; v]$ refers to a WENO biased reconstruction of $u$ using $v$ as a smoothness measure. Upwinding is always performed with respect to the velocity corresponding to the reconstruction d",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1577285777
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1577285777:722,Energy Efficiency,energy,energy,722,"For documentation purposes, I write here the three different unwinding treatment formulations:. #### `OnlySelfUpwinding`. - divergence flux: $u \left( \overline{[\delta_i U; D] + \delta_j V}^i \right)\frac{\boldsymbol{i}}{b_u} +v\left( \overline{ \delta_i U + [\delta_j V; D] }^j \right)\frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\overline{[\delta_i u^2; u]}^i + \delta_i \overline{v^2}^j \right)\frac{\boldsymbol{i}}{\Delta x_u} + \left(\delta_j \overline{u^2}^i + \overline{[\delta_j v^2; v]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### `CrossAndSelfUpwinding`. - divergence flux: $u \overline{[D; D]}^i \frac{\boldsymbol{i}}{b_u}+ v \overline{ [D; D] }^j\frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\overline{[\delta_i u^2; u]}^i + \delta_i \overline{v^2}^j\right) \frac{\boldsymbol{i}}{\Delta x_u} + \left(\delta_j \overline{u^2}^i + \overline{[\delta_j v^2; v]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### `VelocityUpwinding`. - divergence flux: $u \left( \delta_i \overline{[U; U]}^i + \overline{\delta_j V}^i \right)\frac{\boldsymbol{i}}{b_u}+ v\left( \overline{ \delta_i U} + \delta_j\overline{[V; V] }^j \right) \frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\delta_i \overline{[u^2; u^2]}^i + \delta_i \overline{v^2}^j\right)\frac{\boldsymbol{i}}{\Delta x_u}+ \left(\delta_j \overline{u^2}^i + \delta_j \overline{[v^2; v^2]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### For all three formulations; - vertical advection: $\delta_k \left(\overline{W}^i \overline{[u; u]}^k \right)\frac{\boldsymbol{i}}{b_u} + \delta_k \left( \overline{W}^j \overline{[v; v]}^k\right) \frac{\boldsymbol{j}}{b_v}$. where $D = \delta_i U + \delta_j V$, $U = Ax \cdot u$, $V = Ay \cdot v$, $W = Az \cdot w$ and $b = \Delta x \cdot \Delta y \cdot \Delta z$. $[u; v]$ refers to a WENO biased reconstruction of $u$ using $v$ as a smoothness measure. Upwinding is always performed with respect to the velocity corresponding to the reconstruction d",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1577285777
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1577285777:1210,Energy Efficiency,energy,energy,1210," D] + \delta_j V}^i \right)\frac{\boldsymbol{i}}{b_u} +v\left( \overline{ \delta_i U + [\delta_j V; D] }^j \right)\frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\overline{[\delta_i u^2; u]}^i + \delta_i \overline{v^2}^j \right)\frac{\boldsymbol{i}}{\Delta x_u} + \left(\delta_j \overline{u^2}^i + \overline{[\delta_j v^2; v]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### `CrossAndSelfUpwinding`. - divergence flux: $u \overline{[D; D]}^i \frac{\boldsymbol{i}}{b_u}+ v \overline{ [D; D] }^j\frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\overline{[\delta_i u^2; u]}^i + \delta_i \overline{v^2}^j\right) \frac{\boldsymbol{i}}{\Delta x_u} + \left(\delta_j \overline{u^2}^i + \overline{[\delta_j v^2; v]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### `VelocityUpwinding`. - divergence flux: $u \left( \delta_i \overline{[U; U]}^i + \overline{\delta_j V}^i \right)\frac{\boldsymbol{i}}{b_u}+ v\left( \overline{ \delta_i U} + \delta_j\overline{[V; V] }^j \right) \frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\delta_i \overline{[u^2; u^2]}^i + \delta_i \overline{v^2}^j\right)\frac{\boldsymbol{i}}{\Delta x_u}+ \left(\delta_j \overline{u^2}^i + \delta_j \overline{[v^2; v^2]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### For all three formulations; - vertical advection: $\delta_k \left(\overline{W}^i \overline{[u; u]}^k \right)\frac{\boldsymbol{i}}{b_u} + \delta_k \left( \overline{W}^j \overline{[v; v]}^k\right) \frac{\boldsymbol{j}}{b_v}$. where $D = \delta_i U + \delta_j V$, $U = Ax \cdot u$, $V = Ay \cdot v$, $W = Az \cdot w$ and $b = \Delta x \cdot \Delta y \cdot \Delta z$. $[u; v]$ refers to a WENO biased reconstruction of $u$ using $v$ as a smoothness measure. Upwinding is always performed with respect to the velocity corresponding to the reconstruction direction. ; i.e.: reconstructions in $i$ upwind with respect to $u$, reconstructions in $j$ upwind with respect to $v$ and reconstructions in $k$ upwind with respect to $w$",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1577285777
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1577285777:1925,Performance,perform,performed,1925," D] + \delta_j V}^i \right)\frac{\boldsymbol{i}}{b_u} +v\left( \overline{ \delta_i U + [\delta_j V; D] }^j \right)\frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\overline{[\delta_i u^2; u]}^i + \delta_i \overline{v^2}^j \right)\frac{\boldsymbol{i}}{\Delta x_u} + \left(\delta_j \overline{u^2}^i + \overline{[\delta_j v^2; v]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### `CrossAndSelfUpwinding`. - divergence flux: $u \overline{[D; D]}^i \frac{\boldsymbol{i}}{b_u}+ v \overline{ [D; D] }^j\frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\overline{[\delta_i u^2; u]}^i + \delta_i \overline{v^2}^j\right) \frac{\boldsymbol{i}}{\Delta x_u} + \left(\delta_j \overline{u^2}^i + \overline{[\delta_j v^2; v]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### `VelocityUpwinding`. - divergence flux: $u \left( \delta_i \overline{[U; U]}^i + \overline{\delta_j V}^i \right)\frac{\boldsymbol{i}}{b_u}+ v\left( \overline{ \delta_i U} + \delta_j\overline{[V; V] }^j \right) \frac{\boldsymbol{j}}{b_v}$; - kinetic energy gradient: $\left(\delta_i \overline{[u^2; u^2]}^i + \delta_i \overline{v^2}^j\right)\frac{\boldsymbol{i}}{\Delta x_u}+ \left(\delta_j \overline{u^2}^i + \delta_j \overline{[v^2; v^2]}^j\right) \frac{\boldsymbol{j}}{\Delta y_v}$. #### For all three formulations; - vertical advection: $\delta_k \left(\overline{W}^i \overline{[u; u]}^k \right)\frac{\boldsymbol{i}}{b_u} + \delta_k \left( \overline{W}^j \overline{[v; v]}^k\right) \frac{\boldsymbol{j}}{b_v}$. where $D = \delta_i U + \delta_j V$, $U = Ax \cdot u$, $V = Ay \cdot v$, $W = Az \cdot w$ and $b = \Delta x \cdot \Delta y \cdot \Delta z$. $[u; v]$ refers to a WENO biased reconstruction of $u$ using $v$ as a smoothness measure. Upwinding is always performed with respect to the velocity corresponding to the reconstruction direction. ; i.e.: reconstructions in $i$ upwind with respect to $u$, reconstructions in $j$ upwind with respect to $v$ and reconstructions in $k$ upwind with respect to $w$",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1577285777
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1591092638:20,Testability,test,tests,20,should I merge when tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1591092638
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1600910504:946,Deployability,release,release,946,"@simone-silvestri Can I ask a few clarification questions about this PR so that I can review it better?. > * Rework of the `VectorInvariant` advection scheme. Now the constructor accepts a `vorticity_scheme`, a `vertical_scheme` and an `upwinding` keyword argument which specifies what implementation will be used. The choice is between `OnlySelfUpwinding`, `CrossAndSelfUpwinding` and `VelocityUpwinding` (see documentation); > * Implementation of the flux-form advection scheme for `LatitudeLongitudeGrid`s. I understand these as mainly being relevant for the hydrostatic model. Is that correct?. > * Implementation of a 5th order centered WENO scheme to be used for truly multi-dimensional reconstructions. Can you clarify what you mean by ""truly multi-dimensional reconstructions""? Also what would be the expected impact of this on simulations using it compared to the main?. I also see that you bumped the minor version, implying a breaking release. Can you include an explanation (or perhaps even a quick snippet) of the break?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1600910504
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1601156911:908,Availability,error,error,908,"Yep, they are, although extension to 3D non-hydrostatic is possible and easy to implement. `multi_dimensional` is opposed to a direction-by-direction reconstruction. It means that we reconstruct not only in the ""derivative"" direction but also in the ""tangential"" direction, i.e. we use a multi-dimensional stencil as opposed to a one-dimensional stencil. For the moment, it is only implemented for the vector invariant advection since it is quite expensive to implement it in a full 3d reconstruction (it would require a 3D stencil, while vector_invariant only requires a 2D stencil). It improves a bit the solution for what I have tested but more tests are needed, I think to make sure it de facto increases the order of reconstruction (for non-linear problems, it should allow a high-order reconstruction, on the contrary, our advection schemes only allow us second order spatial scaling of the truncation error.). I can leave it out of this PR if nobody is interested in using it, although it might be useful in the future. breaking change: keyword arguments of `VectorInvariant`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1601156911
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1601156911:632,Testability,test,tested,632,"Yep, they are, although extension to 3D non-hydrostatic is possible and easy to implement. `multi_dimensional` is opposed to a direction-by-direction reconstruction. It means that we reconstruct not only in the ""derivative"" direction but also in the ""tangential"" direction, i.e. we use a multi-dimensional stencil as opposed to a one-dimensional stencil. For the moment, it is only implemented for the vector invariant advection since it is quite expensive to implement it in a full 3d reconstruction (it would require a 3D stencil, while vector_invariant only requires a 2D stencil). It improves a bit the solution for what I have tested but more tests are needed, I think to make sure it de facto increases the order of reconstruction (for non-linear problems, it should allow a high-order reconstruction, on the contrary, our advection schemes only allow us second order spatial scaling of the truncation error.). I can leave it out of this PR if nobody is interested in using it, although it might be useful in the future. breaking change: keyword arguments of `VectorInvariant`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1601156911
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1601156911:648,Testability,test,tests,648,"Yep, they are, although extension to 3D non-hydrostatic is possible and easy to implement. `multi_dimensional` is opposed to a direction-by-direction reconstruction. It means that we reconstruct not only in the ""derivative"" direction but also in the ""tangential"" direction, i.e. we use a multi-dimensional stencil as opposed to a one-dimensional stencil. For the moment, it is only implemented for the vector invariant advection since it is quite expensive to implement it in a full 3d reconstruction (it would require a 3D stencil, while vector_invariant only requires a 2D stencil). It improves a bit the solution for what I have tested but more tests are needed, I think to make sure it de facto increases the order of reconstruction (for non-linear problems, it should allow a high-order reconstruction, on the contrary, our advection schemes only allow us second order spatial scaling of the truncation error.). I can leave it out of this PR if nobody is interested in using it, although it might be useful in the future. breaking change: keyword arguments of `VectorInvariant`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1601156911
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1605896632:152,Usability,clear,clearer,152,"> Why (or when) did we change the pattern of `FT(number)` to `convert(FT, number)` (I actually prefer the former but I am ok changing it). I think it's clearer. If it appears 20 times in 3-4 lines (like, e.g. in https://github.com/CliMA/Oceananigans.jl/blob/c030aac826215bdcbdaa942f2832fa4ba16ade97/src/Advection/multi_dimensional_reconstruction.jl#L50-L58) then `FT(number)` is fine! But if it's just an isolated incident then convert is more verbose sort of like saying in English what is happening.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1605896632
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1606894945:37,Usability,clear,clear,37,"I agree that maybe `convert` is more clear, but still, I would rather have one way to do things, and for this reason: ; to develop the code you must need to know what it means in those lines where it is repeated 20 times, so I do not think writing it in another way improves clarity. It might actually beg the question as to why the pattern is different and if there are concrete differences between the two ways of writing it, on the other hand, if you are familiar with Oceananigans, you just have to know `FT()` once and you're done",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1606894945
https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1607573233:39,Usability,clear,clear,39,"> I agree that maybe `convert` is more clear, but still, I would rather have one way to do things, and for this reason: to develop the code you must need to know what it means in those lines where it is repeated 20 times, so I do not think writing it in another way improves clarity. It might actually beg the question as to why the pattern is different and if there are concrete differences between the two ways of writing it, on the other hand, if you are familiar with Oceananigans, you just have to know `FT()` once and you're done. We agreed long ago to only use `convert` --- why are we still using patterns like `FT(num)`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1607573233
https://github.com/CliMA/Oceananigans.jl/pull/3092#issuecomment-1528946599:21,Security,validat,validation,21,I was trying to run `validation/immersed_boundaries/flow_over_hills.jl` and all simulations except the ref one are NaNing pretty quickly. On `main` it works!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3092#issuecomment-1528946599
https://github.com/CliMA/Oceananigans.jl/pull/3092#issuecomment-1528952307:64,Availability,mask,mask,64,"> Resolves #3061; > ; > Questions:; > ; > Does it make sense to mask when`with_halos = true`? With `with_halos = true` implies that the users can use the output to compute derivative fields etc; will masking obscure this?. No, because derivatives are ""boundary aware"" and thus don't touch the regions that are masked.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3092#issuecomment-1528952307
https://github.com/CliMA/Oceananigans.jl/pull/3092#issuecomment-1528952307:200,Availability,mask,masking,200,"> Resolves #3061; > ; > Questions:; > ; > Does it make sense to mask when`with_halos = true`? With `with_halos = true` implies that the users can use the output to compute derivative fields etc; will masking obscure this?. No, because derivatives are ""boundary aware"" and thus don't touch the regions that are masked.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3092#issuecomment-1528952307
https://github.com/CliMA/Oceananigans.jl/pull/3092#issuecomment-1528952307:310,Availability,mask,masked,310,"> Resolves #3061; > ; > Questions:; > ; > Does it make sense to mask when`with_halos = true`? With `with_halos = true` implies that the users can use the output to compute derivative fields etc; will masking obscure this?. No, because derivatives are ""boundary aware"" and thus don't touch the regions that are masked.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3092#issuecomment-1528952307
https://github.com/CliMA/Oceananigans.jl/issues/3093#issuecomment-1529405819:17,Availability,error,error,17,Why not throw an error like we do other places?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3093#issuecomment-1529405819
https://github.com/CliMA/Oceananigans.jl/pull/3096#issuecomment-1535576793:355,Usability,simpl,simpler,355,"> > This PR adds a `parameters` keyword to `UniformStokesDrift`.; > > At the moment this only gets activated if `parameters isa NamedTuple`. Do we want to be more general than that?; > > Closes #2960; > ; > It's better to fallback to the signature `(z, t)` when `parameters::Nothing`, and then otherwise include. @glwagner Can you check now? I think it's simpler now and it does what you suggested.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3096#issuecomment-1535576793
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1539359127:32,Availability,error,errors,32,"Anyone has any idea why all the errors with `all` or `interior` or `parent`? E.g.,. https://buildkite.com/clima/oceananigans/builds/11267#0187fd3b-6ccf-4f23-be19-445f384d6722/35-377",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1539359127
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1542475873:34,Availability,error,errors,34,"> Anyone has any idea why all the errors with `all` or `interior` or `parent`? E.g.,; > ; > https://buildkite.com/clima/oceananigans/builds/11267#0187fd3b-6ccf-4f23-be19-445f384d6722/35-377. I did a bit of investigating locally but couldn't figure it out. It would be really nice to have 1.9 going sometime soon since it apparently significantly decreases the TTFX.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1542475873
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1542722510:9,Testability,test,test,9,Do these test pass locally?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1542722510
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544978864:21,Security,access,access,21,I don't think I have access to Sverdrup. Could I get access? I wanted to try to run the test there to see what's happening...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544978864
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544978864:53,Security,access,access,53,I don't think I have access to Sverdrup. Could I get access? I wanted to try to run the test there to see what's happening...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544978864
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544978864:88,Testability,test,test,88,I don't think I have access to Sverdrup. Could I get access? I wanted to try to run the test there to see what's happening...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544978864
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544979418:11,Testability,test,test,11,"> Do these test pass locally?. E.g., on tartarus when I run the `test_timestepping.jl` it passed on GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544979418
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545530211:13,Testability,test,test,13,"> > Do these test pass locally?; > ; > E.g., on tartarus when I run the `test_timestepping.jl` it passed on GPU. Did you use `--check-bounds=yes`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545530211
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545542718:67,Testability,test,test,67,"No, I did. ```; julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'; ```. which I took from buildkite.yml",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545542718
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1557704595:77,Testability,test,test,77,"> No, I did; > ; > ```; > julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'; > ```; > ; > which I took from buildkite.yml. Ah ok. Using `Pkg.test()` sets `--check-bounds=yes`. I wasn't sure if you were running `test_timestepping.jl` individually.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1557704595
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1557704595:150,Testability,test,test,150,"> No, I did; > ; > ```; > julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'; > ```; > ; > which I took from buildkite.yml. Ah ok. Using `Pkg.test()` sets `--check-bounds=yes`. I wasn't sure if you were running `test_timestepping.jl` individually.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1557704595
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1563408348:58,Testability,test,tests,58,Me too! I need some help I think here... I'm not sure why tests fail.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1563408348
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564731957:17,Testability,test,tests,17,What does one of tests return versus what is expected? The buildkite log only says they fail so there's no way to figure out what's going wrong.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564731957
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564731957:69,Testability,log,log,69,What does one of tests return versus what is expected? The buildkite log only says they fail so there's no way to figure out what's going wrong.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564731957
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331:112,Modifiability,variab,variably,112,"It's something to do with GPU, maybe GPU reductions?. ```; [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; --;   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199;   | Expression: minimum_xspacing(grid) ≈ FT(π / 3);   | Evaluated: 0.0 ≈ 1.0471975511965976; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331:90,Testability,Test,Testing,90,"It's something to do with GPU, maybe GPU reductions?. ```; [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; --;   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199;   | Expression: minimum_xspacing(grid) ≈ FT(π / 3);   | Evaluated: 0.0 ≈ 1.0471975511965976; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331:167,Testability,Test,Test,167,"It's something to do with GPU, maybe GPU reductions?. ```; [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; --;   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199;   | Expression: minimum_xspacing(grid) ≈ FT(π / 3);   | Evaluated: 0.0 ≈ 1.0471975511965976; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331:274,Testability,test,test,274,"It's something to do with GPU, maybe GPU reductions?. ```; [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; --;   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199;   | Expression: minimum_xspacing(grid) ≈ FT(π / 3);   | Evaluated: 0.0 ≈ 1.0471975511965976; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1564733331
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080:427,Availability,error,error,427,"> It's something to do with GPU, maybe GPU reductions?; > ; > ```; > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > --; >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); >   | Evaluated: 0.0 ≈ 1.0471975511965976; > ```. I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080:122,Modifiability,variab,variably,122,"> It's something to do with GPU, maybe GPU reductions?; > ; > ```; > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > --; >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); >   | Evaluated: 0.0 ≈ 1.0471975511965976; > ```. I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080:508,Security,access,access,508,"> It's something to do with GPU, maybe GPU reductions?; > ; > ```; > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > --; >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); >   | Evaluated: 0.0 ≈ 1.0471975511965976; > ```. I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080:100,Testability,Test,Testing,100,"> It's something to do with GPU, maybe GPU reductions?; > ; > ```; > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > --; >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); >   | Evaluated: 0.0 ≈ 1.0471975511965976; > ```. I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080:181,Testability,Test,Test,181,"> It's something to do with GPU, maybe GPU reductions?; > ; > ```; > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > --; >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); >   | Evaluated: 0.0 ≈ 1.0471975511965976; > ```. I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080:288,Testability,test,test,288,"> It's something to do with GPU, maybe GPU reductions?; > ; > ```; > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > --; >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); >   | Evaluated: 0.0 ≈ 1.0471975511965976; > ```. I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566849601:169,Integrability,Wrap,Wrapping,169,"Also we get some deprecation warnings. E.g., for. ```; SpecifiedTimes(times::Vararg{<:Number}) = SpecifiedTimes(sort([Float64(t) for t in times]), 0); ```. we get. ```; Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).; ```. I don't understand what that means tho.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566849601
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566849601:223,Integrability,wrap,wrap,223,"Also we get some deprecation warnings. E.g., for. ```; SpecifiedTimes(times::Vararg{<:Number}) = SpecifiedTimes(sort([Float64(t) for t in times]), 0); ```. we get. ```; Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).; ```. I don't understand what that means tho.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566849601
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566861284:195,Integrability,Wrap,Wrapping,195,"> Also we get some deprecation warnings. E.g., for; > ; > ```; > SpecifiedTimes(times::Vararg{<:Number}) = SpecifiedTimes(sort([Float64(t) for t in times]), 0); > ```; > ; > we get; > ; > ```; > Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).; > ```; > ; > I don't understand what that means tho. I think a39445a and [bf06da1](https://github.com/CliMA/Oceananigans.jl/pull/3100/commits/bf06da180131d8cbede895913d21aa9348684095) dealt with this",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566861284
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566861284:249,Integrability,wrap,wrap,249,"> Also we get some deprecation warnings. E.g., for; > ; > ```; > SpecifiedTimes(times::Vararg{<:Number}) = SpecifiedTimes(sort([Float64(t) for t in times]), 0); > ```; > ; > we get; > ; > ```; > Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).; > ```; > ; > I don't understand what that means tho. I think a39445a and [bf06da1](https://github.com/CliMA/Oceananigans.jl/pull/3100/commits/bf06da180131d8cbede895913d21aa9348684095) dealt with this",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566861284
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567728743:2,Integrability,Wrap,Wrapping,2,> Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead). The internet says to use `times::Vararg{Number}`. somewhere in . https://discourse.julialang.org/t/deprecation-warnings-from-atom-with-v1-7/72400/3,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567728743
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567728743:56,Integrability,wrap,wrap,56,> Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead). The internet says to use `times::Vararg{Number}`. somewhere in . https://discourse.julialang.org/t/deprecation-warnings-from-atom-with-v1-7/72400/3,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567728743
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329:445,Availability,error,error,445,"> > It's something to do with GPU, maybe GPU reductions?; > > ```; > > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > > --; > >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; > >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); > >   | Evaluated: 0.0 ≈ 1.0471975511965976; > > ```; > ; > I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(. I guess its a CUDA version issue or something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329:124,Modifiability,variab,variably,124,"> > It's something to do with GPU, maybe GPU reductions?; > > ```; > > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > > --; > >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; > >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); > >   | Evaluated: 0.0 ≈ 1.0471975511965976; > > ```; > ; > I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(. I guess its a CUDA version issue or something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329:526,Security,access,access,526,"> > It's something to do with GPU, maybe GPU reductions?; > > ```; > > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > > --; > >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; > >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); > >   | Evaluated: 0.0 ≈ 1.0471975511965976; > > ```; > ; > I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(. I guess its a CUDA version issue or something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329:102,Testability,Test,Testing,102,"> > It's something to do with GPU, maybe GPU reductions?; > > ```; > > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > > --; > >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; > >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); > >   | Evaluated: 0.0 ≈ 1.0471975511965976; > > ```; > ; > I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(. I guess its a CUDA version issue or something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329:187,Testability,Test,Test,187,"> > It's something to do with GPU, maybe GPU reductions?; > > ```; > > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > > --; > >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; > >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); > >   | Evaluated: 0.0 ≈ 1.0471975511965976; > > ```; > ; > I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(. I guess its a CUDA version issue or something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329:294,Testability,test,test,294,"> > It's something to do with GPU, maybe GPU reductions?; > > ```; > > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > > --; > >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; > >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); > >   | Evaluated: 0.0 ≈ 1.0471975511965976; > > ```; > ; > I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(. I guess its a CUDA version issue or something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615839629:4,Testability,test,tests,4,"OK, tests pass!!!!!. Woooooohoooooo!!. Ready to review. Ready to move forward to Julia v1.9. cc @glwagner, @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615839629
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024:42,Deployability,release,release,42,I'm debating whether we should bump minor release. In principle there shouldn't be any breaking change. But we stopped testing on v1.8 and start testing on v1.9...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024:119,Testability,test,testing,119,I'm debating whether we should bump minor release. In principle there shouldn't be any breaking change. But we stopped testing on v1.8 and start testing on v1.9...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024:145,Testability,test,testing,145,I'm debating whether we should bump minor release. In principle there shouldn't be any breaking change. But we stopped testing on v1.8 and start testing on v1.9...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1615842024
https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1619192341:31,Usability,undo,undo,31,"OK, I'm merging! We can always undo. I think it's a step fwd.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1619192341
https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1539369815:26,Testability,test,tested,26,Is the `SmagorinskyLilly` tested? If so I'm happy to approve this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1539369815
https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682:89,Testability,test,tested,89,"@glwagner nice. I think it's indeed clearer. @navidcy I think the `SmagLilly` closure is tested in [time-stepping](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_time_stepping.jl), [closures](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_turbulence_closures.jl) and in [nonhydrostatic regression](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_nonhydrostatic_regression.jl#L63-L72). But I think the only instance where we're testing actual values (and not just compilation of trivial (i.e. zero) values) is in . https://github.com/CliMA/Oceananigans.jl/blob/8b42137e4224b86fe1f3f1744bd5076aa8821085/test/test_nonhydrostatic_regression.jl#L63-L72. Which does seem to pass, so I'm approving this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682
https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682:166,Testability,test,test,166,"@glwagner nice. I think it's indeed clearer. @navidcy I think the `SmagLilly` closure is tested in [time-stepping](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_time_stepping.jl), [closures](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_turbulence_closures.jl) and in [nonhydrostatic regression](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_nonhydrostatic_regression.jl#L63-L72). But I think the only instance where we're testing actual values (and not just compilation of trivial (i.e. zero) values) is in . https://github.com/CliMA/Oceananigans.jl/blob/8b42137e4224b86fe1f3f1744bd5076aa8821085/test/test_nonhydrostatic_regression.jl#L63-L72. Which does seem to pass, so I'm approving this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682
https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682:257,Testability,test,test,257,"@glwagner nice. I think it's indeed clearer. @navidcy I think the `SmagLilly` closure is tested in [time-stepping](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_time_stepping.jl), [closures](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_turbulence_closures.jl) and in [nonhydrostatic regression](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_nonhydrostatic_regression.jl#L63-L72). But I think the only instance where we're testing actual values (and not just compilation of trivial (i.e. zero) values) is in . https://github.com/CliMA/Oceananigans.jl/blob/8b42137e4224b86fe1f3f1744bd5076aa8821085/test/test_nonhydrostatic_regression.jl#L63-L72. Which does seem to pass, so I'm approving this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682
https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682:377,Testability,test,test,377,"@glwagner nice. I think it's indeed clearer. @navidcy I think the `SmagLilly` closure is tested in [time-stepping](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_time_stepping.jl), [closures](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_turbulence_closures.jl) and in [nonhydrostatic regression](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_nonhydrostatic_regression.jl#L63-L72). But I think the only instance where we're testing actual values (and not just compilation of trivial (i.e. zero) values) is in . https://github.com/CliMA/Oceananigans.jl/blob/8b42137e4224b86fe1f3f1744bd5076aa8821085/test/test_nonhydrostatic_regression.jl#L63-L72. Which does seem to pass, so I'm approving this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682
https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682:468,Testability,test,testing,468,"@glwagner nice. I think it's indeed clearer. @navidcy I think the `SmagLilly` closure is tested in [time-stepping](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_time_stepping.jl), [closures](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_turbulence_closures.jl) and in [nonhydrostatic regression](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_nonhydrostatic_regression.jl#L63-L72). But I think the only instance where we're testing actual values (and not just compilation of trivial (i.e. zero) values) is in . https://github.com/CliMA/Oceananigans.jl/blob/8b42137e4224b86fe1f3f1744bd5076aa8821085/test/test_nonhydrostatic_regression.jl#L63-L72. Which does seem to pass, so I'm approving this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682
https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682:642,Testability,test,test,642,"@glwagner nice. I think it's indeed clearer. @navidcy I think the `SmagLilly` closure is tested in [time-stepping](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_time_stepping.jl), [closures](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_turbulence_closures.jl) and in [nonhydrostatic regression](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_nonhydrostatic_regression.jl#L63-L72). But I think the only instance where we're testing actual values (and not just compilation of trivial (i.e. zero) values) is in . https://github.com/CliMA/Oceananigans.jl/blob/8b42137e4224b86fe1f3f1744bd5076aa8821085/test/test_nonhydrostatic_regression.jl#L63-L72. Which does seem to pass, so I'm approving this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682
https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682:36,Usability,clear,clearer,36,"@glwagner nice. I think it's indeed clearer. @navidcy I think the `SmagLilly` closure is tested in [time-stepping](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_time_stepping.jl), [closures](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_turbulence_closures.jl) and in [nonhydrostatic regression](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_nonhydrostatic_regression.jl#L63-L72). But I think the only instance where we're testing actual values (and not just compilation of trivial (i.e. zero) values) is in . https://github.com/CliMA/Oceananigans.jl/blob/8b42137e4224b86fe1f3f1744bd5076aa8821085/test/test_nonhydrostatic_regression.jl#L63-L72. Which does seem to pass, so I'm approving this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682
https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356:491,Deployability,release,release,491,"I think replacing `""docs/*.jld2""` with `""docs/**/*.jld2""` misses the stuff that previously would have been caught:. ```julia;    ~/repos/Oceananigans.jl    tc/nhpressure2 *2 !7 ?1  julia --project=docs/  ✔  9s   base  ; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.8.5 (2023-01-08); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Glob. julia> A = glob(""src/*.jl""); 6-element Vector{String}:; ""src/Architectures.jl""; ""src/Biogeochemistry.jl""; ""src/Logger.jl""; ""src/Oceananigans.jl""; ""src/StokesDrift.jl""; ""src/Units.jl"". julia> B = glob(""src/**/*.jl"");. julia> A[1] in B; false. julia> collect( a in B for a in A ); 6-element Vector{Bool}:; 0; 0; 0; 0; 0; 0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356
https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356:638,Testability,Log,Logger,638,"I think replacing `""docs/*.jld2""` with `""docs/**/*.jld2""` misses the stuff that previously would have been caught:. ```julia;    ~/repos/Oceananigans.jl    tc/nhpressure2 *2 !7 ?1  julia --project=docs/  ✔  9s   base  ; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.8.5 (2023-01-08); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> using Glob. julia> A = glob(""src/*.jl""); 6-element Vector{String}:; ""src/Architectures.jl""; ""src/Biogeochemistry.jl""; ""src/Logger.jl""; ""src/Oceananigans.jl""; ""src/StokesDrift.jl""; ""src/Units.jl"". julia> B = glob(""src/**/*.jl"");. julia> A[1] in B; false. julia> collect( a in B for a in A ); 6-element Vector{Bool}:; 0; 0; 0; 0; 0; 0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3109#issuecomment-1553617356
https://github.com/CliMA/Oceananigans.jl/pull/3111#issuecomment-1557433725:64,Modifiability,extend,extend,64,I think we want to do this over a few PRs. The first task is to extend BatchedTridiagonalSolver,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3111#issuecomment-1557433725
https://github.com/CliMA/Oceananigans.jl/pull/3111#issuecomment-1597796977:111,Energy Efficiency,adapt,adapted,111,"I think this PR is finally ready. Thanks to @simone-silvestri for the help!. Here a simple simulation (roughly adapted from the [ocean wind mixing example](https://clima.github.io/OceananigansDocumentation/stable/generated/ocean_wind_mixing_and_convection/)) using stretched grids in the x, y, and z directions respectively:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/fba0fa71-92b0-4f7b-978e-7bb24f7060fb. https://github.com/CliMA/Oceananigans.jl/assets/13205162/dea0309f-3b2f-499a-81b2-f5de819dc992. https://github.com/CliMA/Oceananigans.jl/assets/13205162/17e2c3e1-71be-4d9a-9bbe-378bbb657150",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3111#issuecomment-1597796977
https://github.com/CliMA/Oceananigans.jl/pull/3111#issuecomment-1597796977:111,Modifiability,adapt,adapted,111,"I think this PR is finally ready. Thanks to @simone-silvestri for the help!. Here a simple simulation (roughly adapted from the [ocean wind mixing example](https://clima.github.io/OceananigansDocumentation/stable/generated/ocean_wind_mixing_and_convection/)) using stretched grids in the x, y, and z directions respectively:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/fba0fa71-92b0-4f7b-978e-7bb24f7060fb. https://github.com/CliMA/Oceananigans.jl/assets/13205162/dea0309f-3b2f-499a-81b2-f5de819dc992. https://github.com/CliMA/Oceananigans.jl/assets/13205162/17e2c3e1-71be-4d9a-9bbe-378bbb657150",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3111#issuecomment-1597796977
https://github.com/CliMA/Oceananigans.jl/pull/3111#issuecomment-1597796977:84,Usability,simpl,simple,84,"I think this PR is finally ready. Thanks to @simone-silvestri for the help!. Here a simple simulation (roughly adapted from the [ocean wind mixing example](https://clima.github.io/OceananigansDocumentation/stable/generated/ocean_wind_mixing_and_convection/)) using stretched grids in the x, y, and z directions respectively:. https://github.com/CliMA/Oceananigans.jl/assets/13205162/fba0fa71-92b0-4f7b-978e-7bb24f7060fb. https://github.com/CliMA/Oceananigans.jl/assets/13205162/dea0309f-3b2f-499a-81b2-f5de819dc992. https://github.com/CliMA/Oceananigans.jl/assets/13205162/17e2c3e1-71be-4d9a-9bbe-378bbb657150",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3111#issuecomment-1597796977
https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1558314570:20,Availability,error,error,20,seems like the docs error on buildkite but locally it works -- strange.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1558314570
https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1561304116:5,Availability,error,error,5,"Same error... no idea what's happening since there are no more scaped characters. Would changing `r"".jld2""` to `raw"".jld2""` do anything?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1561304116
https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1562014188:7,Availability,error,error,7,"> Same error... no idea what's happening since there are no more scaped characters. Would changing `r"".jld2""` to `raw"".jld2""` do anything?. error is in line 168 so I'm wondering if it's simply the docstring!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1562014188
https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1562014188:140,Availability,error,error,140,"> Same error... no idea what's happening since there are no more scaped characters. Would changing `r"".jld2""` to `raw"".jld2""` do anything?. error is in line 168 so I'm wondering if it's simply the docstring!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1562014188
https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1562014188:186,Usability,simpl,simply,186,"> Same error... no idea what's happening since there are no more scaped characters. Would changing `r"".jld2""` to `raw"".jld2""` do anything?. error is in line 168 so I'm wondering if it's simply the docstring!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3113#issuecomment-1562014188
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557165977:69,Testability,test,test,69,"Thanks! I often forget this!. but then, how do you explain that this test passes without gilling the halos?? . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/test/test_computed_field.jl#L372",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557165977
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557165977:198,Testability,test,test,198,"Thanks! I often forget this!. but then, how do you explain that this test passes without gilling the halos?? . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/test/test_computed_field.jl#L372",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557165977
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557205538:5,Testability,test,test,5,that test is explicitly not testing the points near the boundary. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/test/test_computed_field.jl#L67-L68,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557205538
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557205538:28,Testability,test,testing,28,that test is explicitly not testing the points near the boundary. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/test/test_computed_field.jl#L67-L68,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557205538
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557205538:153,Testability,test,test,153,that test is explicitly not testing the points near the boundary. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/test/test_computed_field.jl#L67-L68,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1557205538
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1559611530:540,Integrability,interface,interface,540,"The issue is a little tricky. Typically we expect abstract operations to be computed during time-stepping. In that case, the halos should be correctly filled. However, @navidcy expects that abstract operations should be correct at any time and does not expect to have to call fill halo regions. Thus for `compute!` to be more generally useful to users I think we do want this behavior. The problem is that fill halo regions can be expensive eg for distributed models. Therefore to both serve expected user behavior and provide a performant interface we perhaps have to add a flag to `compute!` like `fill_halo_regions=false` so that computation for output does not trigger extra calls to fill halo regions. Note @navidcy you can also use the simpler and more transparent . ```julia; parent(model.velocities.u) .= 1; ```. or just `fill!(model.velocities.u, 1)`. I think your result would be correct then. But still if we are setting to functions then we need `set!`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1559611530
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1559611530:529,Performance,perform,performant,529,"The issue is a little tricky. Typically we expect abstract operations to be computed during time-stepping. In that case, the halos should be correctly filled. However, @navidcy expects that abstract operations should be correct at any time and does not expect to have to call fill halo regions. Thus for `compute!` to be more generally useful to users I think we do want this behavior. The problem is that fill halo regions can be expensive eg for distributed models. Therefore to both serve expected user behavior and provide a performant interface we perhaps have to add a flag to `compute!` like `fill_halo_regions=false` so that computation for output does not trigger extra calls to fill halo regions. Note @navidcy you can also use the simpler and more transparent . ```julia; parent(model.velocities.u) .= 1; ```. or just `fill!(model.velocities.u, 1)`. I think your result would be correct then. But still if we are setting to functions then we need `set!`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1559611530
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1559611530:742,Usability,simpl,simpler,742,"The issue is a little tricky. Typically we expect abstract operations to be computed during time-stepping. In that case, the halos should be correctly filled. However, @navidcy expects that abstract operations should be correct at any time and does not expect to have to call fill halo regions. Thus for `compute!` to be more generally useful to users I think we do want this behavior. The problem is that fill halo regions can be expensive eg for distributed models. Therefore to both serve expected user behavior and provide a performant interface we perhaps have to add a flag to `compute!` like `fill_halo_regions=false` so that computation for output does not trigger extra calls to fill halo regions. Note @navidcy you can also use the simpler and more transparent . ```julia; parent(model.velocities.u) .= 1; ```. or just `fill!(model.velocities.u, 1)`. I think your result would be correct then. But still if we are setting to functions then we need `set!`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1559611530
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791:32,Testability,test,test,32,Sure! I was just doing what the test does to reproduce why CI fails... :) Let's simplify the test also!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791:93,Testability,test,test,93,Sure! I was just doing what the test does to reproduce why CI fails... :) Let's simplify the test also!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791
https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791:80,Usability,simpl,simplify,80,Sure! I was just doing what the test does to reproduce why CI fails... :) Let's simplify the test also!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3114#issuecomment-1560123791
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620:1679,Integrability,wrap,wrapper,1679,"From the standpoint of `NonhydrostaticModel`, the only requirement (I think?) is a pressure solver that's valid on more grids. The `FourierTridiagonalPoissonSolver` combines FFTs with a tridiagonal solve in one direction to solve the Poisson equation. Thus, this method can be used if the grid is stretched in just one (1) direction. Right now, we only support grids that are stretched in `z`, the third direction / index. Presumably it's at most a matter of copy and paste and index permutation to support grids that are stretched in `x` (and regular in `y, z`) or stretched in `y` (and regular in `x, z`). Under the hood, the `FourierTridiagonalPoissonSolver` relies on the `BatchedTridiagonalSolver` to perform the tridiagonal solve:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/fourier_tridiagonal_poisson_solver.jl#L81-L82. The `BatchedTridiagonalSolver` launches a kernel over `xy` and performs a tridiagonal solve in `z`:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L79-L80. So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`. . This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward... Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation. I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620:1147,Modifiability,extend,extend,1147,"From the standpoint of `NonhydrostaticModel`, the only requirement (I think?) is a pressure solver that's valid on more grids. The `FourierTridiagonalPoissonSolver` combines FFTs with a tridiagonal solve in one direction to solve the Poisson equation. Thus, this method can be used if the grid is stretched in just one (1) direction. Right now, we only support grids that are stretched in `z`, the third direction / index. Presumably it's at most a matter of copy and paste and index permutation to support grids that are stretched in `x` (and regular in `y, z`) or stretched in `y` (and regular in `x, z`). Under the hood, the `FourierTridiagonalPoissonSolver` relies on the `BatchedTridiagonalSolver` to perform the tridiagonal solve:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/fourier_tridiagonal_poisson_solver.jl#L81-L82. The `BatchedTridiagonalSolver` launches a kernel over `xy` and performs a tridiagonal solve in `z`:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L79-L80. So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`. . This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward... Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation. I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620:706,Performance,perform,perform,706,"From the standpoint of `NonhydrostaticModel`, the only requirement (I think?) is a pressure solver that's valid on more grids. The `FourierTridiagonalPoissonSolver` combines FFTs with a tridiagonal solve in one direction to solve the Poisson equation. Thus, this method can be used if the grid is stretched in just one (1) direction. Right now, we only support grids that are stretched in `z`, the third direction / index. Presumably it's at most a matter of copy and paste and index permutation to support grids that are stretched in `x` (and regular in `y, z`) or stretched in `y` (and regular in `x, z`). Under the hood, the `FourierTridiagonalPoissonSolver` relies on the `BatchedTridiagonalSolver` to perform the tridiagonal solve:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/fourier_tridiagonal_poisson_solver.jl#L81-L82. The `BatchedTridiagonalSolver` launches a kernel over `xy` and performs a tridiagonal solve in `z`:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L79-L80. So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`. . This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward... Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation. I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620:947,Performance,perform,performs,947,"From the standpoint of `NonhydrostaticModel`, the only requirement (I think?) is a pressure solver that's valid on more grids. The `FourierTridiagonalPoissonSolver` combines FFTs with a tridiagonal solve in one direction to solve the Poisson equation. Thus, this method can be used if the grid is stretched in just one (1) direction. Right now, we only support grids that are stretched in `z`, the third direction / index. Presumably it's at most a matter of copy and paste and index permutation to support grids that are stretched in `x` (and regular in `y, z`) or stretched in `y` (and regular in `x, z`). Under the hood, the `FourierTridiagonalPoissonSolver` relies on the `BatchedTridiagonalSolver` to perform the tridiagonal solve:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/fourier_tridiagonal_poisson_solver.jl#L81-L82. The `BatchedTridiagonalSolver` launches a kernel over `xy` and performs a tridiagonal solve in `z`:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L79-L80. So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`. . This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward... Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation. I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620:1692,Performance,perform,performs,1692,"From the standpoint of `NonhydrostaticModel`, the only requirement (I think?) is a pressure solver that's valid on more grids. The `FourierTridiagonalPoissonSolver` combines FFTs with a tridiagonal solve in one direction to solve the Poisson equation. Thus, this method can be used if the grid is stretched in just one (1) direction. Right now, we only support grids that are stretched in `z`, the third direction / index. Presumably it's at most a matter of copy and paste and index permutation to support grids that are stretched in `x` (and regular in `y, z`) or stretched in `y` (and regular in `x, z`). Under the hood, the `FourierTridiagonalPoissonSolver` relies on the `BatchedTridiagonalSolver` to perform the tridiagonal solve:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/fourier_tridiagonal_poisson_solver.jl#L81-L82. The `BatchedTridiagonalSolver` launches a kernel over `xy` and performs a tridiagonal solve in `z`:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L79-L80. So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`. . This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward... Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation. I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1557689620
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584:570,Integrability,wrap,wrapper,570,"> So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`.; > ; > This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward...; > ; > Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation.; > ; > I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case... I also prefer the copy/paste method (that's what I used in https://github.com/CliMA/Oceananigans.jl/pull/3111). If I understand correctly these two functions are the only ones that need to be generalized, no?: . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L74-L83. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L88. if so, that's not too bad. Is duplicating one of the tests in [test_batched_tridiagonal_solver.jl](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_batched_tridiagonal_solver.jl) but rotating everything to two different directions enough to test this new functionality?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584:26,Modifiability,extend,extend,26,"> So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`.; > ; > This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward...; > ; > Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation.; > ; > I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case... I also prefer the copy/paste method (that's what I used in https://github.com/CliMA/Oceananigans.jl/pull/3111). If I understand correctly these two functions are the only ones that need to be generalized, no?: . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L74-L83. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L88. if so, that's not too bad. Is duplicating one of the tests in [test_batched_tridiagonal_solver.jl](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_batched_tridiagonal_solver.jl) but rotating everything to two different directions enough to test this new functionality?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584:583,Performance,perform,performs,583,"> So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`.; > ; > This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward...; > ; > Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation.; > ; > I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case... I also prefer the copy/paste method (that's what I used in https://github.com/CliMA/Oceananigans.jl/pull/3111). If I understand correctly these two functions are the only ones that need to be generalized, no?: . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L74-L83. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L88. if so, that's not too bad. Is duplicating one of the tests in [test_batched_tridiagonal_solver.jl](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_batched_tridiagonal_solver.jl) but rotating everything to two different directions enough to test this new functionality?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584:1276,Testability,test,tests,1276,"> So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`.; > ; > This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward...; > ; > Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation.; > ; > I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case... I also prefer the copy/paste method (that's what I used in https://github.com/CliMA/Oceananigans.jl/pull/3111). If I understand correctly these two functions are the only ones that need to be generalized, no?: . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L74-L83. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L88. if so, that's not too bad. Is duplicating one of the tests in [test_batched_tridiagonal_solver.jl](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_batched_tridiagonal_solver.jl) but rotating everything to two different directions enough to test this new functionality?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584:1373,Testability,test,test,1373,"> So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`.; > ; > This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward...; > ; > Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation.; > ; > I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case... I also prefer the copy/paste method (that's what I used in https://github.com/CliMA/Oceananigans.jl/pull/3111). If I understand correctly these two functions are the only ones that need to be generalized, no?: . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L74-L83. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L88. if so, that's not too bad. Is duplicating one of the tests in [test_batched_tridiagonal_solver.jl](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_batched_tridiagonal_solver.jl) but rotating everything to two different directions enough to test this new functionality?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584
https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584:1476,Testability,test,test,1476,"> So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`.; > ; > This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward...; > ; > Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation.; > ; > I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case... I also prefer the copy/paste method (that's what I used in https://github.com/CliMA/Oceananigans.jl/pull/3111). If I understand correctly these two functions are the only ones that need to be generalized, no?: . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L74-L83. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L88. if so, that's not too bad. Is duplicating one of the tests in [test_batched_tridiagonal_solver.jl](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_batched_tridiagonal_solver.jl) but rotating everything to two different directions enough to test this new functionality?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564811587:256,Usability,clear,clear,256,"> Sent approval; the last major question is whether we should use `ZDirection()` and `::ZDirection` instead of `:z` and `::Val{:z}` -- and then `XDirection` and `YDirection`. Hmm, that's a good point. Honestly I have no opinion here since both are equally clear, so I'll defer to you/others.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564811587
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564814148:265,Usability,clear,clear,265,"> > Sent approval; the last major question is whether we should use `ZDirection()` and `::ZDirection` instead of `:z` and `::Val{:z}` -- and then `XDirection` and `YDirection`.; > ; > Hmm, that's a good point. Honestly I have no opinion here since both are equally clear, so I'll defer to you/others. . Maybe one thing to keep in mind is that the `ZDirection` approach requires an explicit `using Oceananigans.Grids: ZDirection` when using `BatchedTridiagSolver` (plus defining `XDirection` and `YDirection`), while using `:x`, `:y`, `:z` doesn't.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564814148
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:105,Availability,error,error,105,"@glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:. ```julia; Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; Test threw exception; Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); Closest candidates are:; work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; Stacktrace:; [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Ocea",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:159,Availability,Error,Error,159,"@glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:. ```julia; Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; Test threw exception; Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); Closest candidates are:; work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; Stacktrace:; [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Ocea",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:4411,Availability,error,error,4411,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:172,Testability,Test,Test,172,"@glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:. ```julia; Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; Test threw exception; Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); Closest candidates are:; work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; Stacktrace:; [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Ocea",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:215,Testability,test,test,215,"@glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:. ```julia; Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; Test threw exception; Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); Closest candidates are:; work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; Stacktrace:; [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Ocea",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:260,Testability,Test,Test,260,"@glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:. ```julia; Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; Test threw exception; Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); Closest candidates are:; work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; Stacktrace:; [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Ocea",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3482,Testability,test,test,3482,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3591,Testability,Test,Test,3591,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3600,Testability,Test,Test,3600,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3671,Testability,test,test,3671,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3791,Testability,Test,Test,3791,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3800,Testability,Test,Test,3800,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3872,Testability,test,test,3872,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:3992,Testability,Test,Test,3992,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:4001,Testability,Test,Test,4001,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:4074,Testability,test,test,4074,"ngeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; [5] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; [6] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; [7] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [8] macro expansion; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; [9] macro expansion; @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; [10] top-level scope; @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; ```. I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be. Let me know if you want me to push the code I have with `ZDirection` and this error to the branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:107,Availability,error,error,107,"> @glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:; > ; > ```julia; > Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; > Test threw exception; > Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); > MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); > Closest candidates are:; > work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; > work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; > Stacktrace:; > [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:169,Availability,Error,Error,169,"> @glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:; > ; > ```julia; > Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; > Test threw exception; > Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); > MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); > Closest candidates are:; > work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; > work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; > Stacktrace:; > [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:4490,Availability,error,error,4490,"64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to define the work layout for `ZDirection` (I don't know what that would mean either)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:182,Testability,Test,Test,182,"> @glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:; > ; > ```julia; > Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; > Test threw exception; > Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); > MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); > Closest candidates are:; > work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; > work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; > Stacktrace:; > [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:225,Testability,test,test,225,"> @glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:; > ; > ```julia; > Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; > Test threw exception; > Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); > MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); > Closest candidates are:; > work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; > work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; > Stacktrace:; > [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:272,Testability,Test,Test,272,"> @glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:; > ; > ```julia; > Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; > Test threw exception; > Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); > MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); > Closest candidates are:; > work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; > work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; > Stacktrace:; > [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3522,Testability,test,test,3522,"nt64}}, CPU}, ::Nothing, ::Function, ::Array{Float64, 3}, ::Vararg{Any}); > @ Oceananigans.Utils ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; > [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did bu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3635,Testability,Test,Test,3635,"s/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; > [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to def",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3644,Testability,Test,Test,3644,"s/Oceananigans.jl3/src/Utils/kernel_launching.jl:80; > [3] solve!(::Array{Float64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to def",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3719,Testability,test,test,3719,"64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to define the work layout for `ZDirection` (I don't know what that would mean either)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3843,Testability,Test,Test,3843,"64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to define the work layout for `ZDirection` (I don't know what that would mean either)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3852,Testability,Test,Test,3852,"64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to define the work layout for `ZDirection` (I don't know what that would mean either)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:3928,Testability,test,test,3928,"64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to define the work layout for `ZDirection` (I don't know what that would mean either)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:4052,Testability,Test,Test,4052,"64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to define the work layout for `ZDirection` (I don't know what that would mean either)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:4061,Testability,Test,Test,4061,"64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to define the work layout for `ZDirection` (I don't know what that would mean either)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:4138,Testability,test,test,4138,"64, 3}, ::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Nothing, ZDirection}, ::Vector{Float64}); > @ Oceananigans.Solvers ~/repos/Oceananigans.jl3/src/Solvers/batched_tridiagonal_solver.jl:83; > [4] can_solve_single_tridiagonal_system(arch::CPU, N::Int64; tridiagonal_direction::ZDirection); > @ Main ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:39; > [5] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]; > [6] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169 [inlined]; > [7] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [8] macro expansion; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:167 [inlined]; > [9] macro expansion; > @ ~/bin/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]; > [10] top-level scope; > @ ~/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:163; > ```; > ; > I'm not very familiar with `KernelAbsractions` so I don't really understand what's happening, but my guess is that I need to define `work_layout` for `ZDirection`. Problem is I have no idea what it should be.; > ; > Let me know if you want me to push the code I have with `ZDirection` and this error to the branch. I don't know what you did but note that for `tridiagonal_direction isa ZDirection`, then `work_layout = :xy`. We don't need to define the work layout for `ZDirection` (I don't know what that would mean either)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399
https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1565986013:203,Usability,undo,undo,203,I pushed [e852f50](https://github.com/CliMA/Oceananigans.jl/pull/3117/commits/e852f50548f33c5e5cf5004a77c95680b62209c6) because it was easier for me to commit than add code suggestion. but. feel free to undo it!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1565986013
https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1608831536:14,Testability,test,tests,14,"Think so. GPU tests passed, only docs are failing now (but I think they just failed to start... I'm restarting!)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1608831536
https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613498127:155,Modifiability,extend,extend,155,I don't think we use PencilArray for CuArray either in the source code or tests. My question is: does bumping PencilArrays and PencilFFTs mean that we can extend the distributed FFT algorithm (currently only implemented on CPU) to GPUs?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613498127
https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613498127:74,Testability,test,tests,74,I don't think we use PencilArray for CuArray either in the source code or tests. My question is: does bumping PencilArrays and PencilFFTs mean that we can extend the distributed FFT algorithm (currently only implemented on CPU) to GPUs?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613498127
https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613661175:176,Testability,test,tests,176,Oh I see. This was not at all clear to me from your previous question. I thought you were asking whether the new versions dropped support to CuArrays and therefore explain why tests were failing!. Let me get back on your question now that I understand!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613661175
https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613661175:30,Usability,clear,clear,30,Oh I see. This was not at all clear to me from your previous question. I thought you were asking whether the new versions dropped support to CuArrays and therefore explain why tests were failing!. Let me get back on your question now that I understand!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613661175
https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613752671:45,Deployability,update,update,45,"Yes, I think they do. I was wondering if the update here brought in that change (another possibility is that it's already supported)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3121#issuecomment-1613752671
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063:197,Integrability,wrap,wrapping,197,"the offender is this line ; https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75. `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110. `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main). I see two solutions here:; 1) change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); 2) Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063:1130,Integrability,wrap,wrap,1130,"the offender is this line ; https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75. `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110. `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main). I see two solutions here:; 1) change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); 2) Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063:778,Testability,test,test,778,"the offender is this line ; https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75. `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110. `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main). I see two solutions here:; 1) change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); 2) Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063:1061,Usability,simpl,simple,1061,"the offender is this line ; https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75. `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110. `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main). I see two solutions here:; 1) change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); 2) Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603029063
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230:210,Integrability,wrap,wrapping,210,"> the offender is this line; > ; > https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75; > ; > `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; > ; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110; > ; > `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main); > ; > I see two solutions here:; > ; > 1. change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); > 2. Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?). The main criteria for the design is ease of use. So that's what we have to discuss.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230:1179,Integrability,wrap,wrap,1179,"> the offender is this line; > ; > https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75; > ; > `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; > ; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110; > ; > `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main); > ; > I see two solutions here:; > ; > 1. change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); > 2. Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?). The main criteria for the design is ease of use. So that's what we have to discuss.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230:813,Testability,test,test,813,"> the offender is this line; > ; > https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75; > ; > `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; > ; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110; > ; > `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main); > ; > I see two solutions here:; > ; > 1. change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); > 2. Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?). The main criteria for the design is ease of use. So that's what we have to discuss.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230:1108,Usability,simpl,simple,1108,"> the offender is this line; > ; > https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75; > ; > `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; > ; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110; > ; > `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main); > ; > I see two solutions here:; > ; > 1. change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); > 2. Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?). The main criteria for the design is ease of use. So that's what we have to discuss.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1706577311:24,Security,validat,validation,24,None of the examples or validation tests changed,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1706577311
https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1706577311:35,Testability,test,tests,35,None of the examples or validation tests changed,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1706577311
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905:5,Security,validat,validation,5,This validation test essentially implements the tracer advection test:. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl. but we should take care to make sure the boundary conditions are correct.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905:123,Security,validat,validation,123,This validation test essentially implements the tracer advection test:. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl. but we should take care to make sure the boundary conditions are correct.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905:16,Testability,test,test,16,This validation test essentially implements the tracer advection test:. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl. but we should take care to make sure the boundary conditions are correct.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905:65,Testability,test,test,65,This validation test essentially implements the tracer advection test:. https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl. but we should take care to make sure the boundary conditions are correct.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1574116905
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1591332644:20,Deployability,update,updates,20,(Possibly a PR that updates the tracer advection case is all we need for now to complete the first task. I don't think the tracer advection case works on `main` currently.),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1591332644
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402:856,Safety,detect,detected,856,"@glwagner I have opened a PR with the branch sb/cut-cells-experiment, on which I have been working on implementing the cut cells. To summarize the progress:. - The two-dimensional [tracer advection test case](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl) over a Gaussian bump is run successfully using the low resolution from the [Adcroft](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml) paper and a relatively higher resolution. Both partial cells and full cells are used. Time evolution of the passive tracer concentration is visualized. - CutCellBottom is implemented in the ImmersedBoundary module similar to PartialCellBottom, and the tracer advection test case is repeated with cut cells. No noticeable difference in the results is detected so far (with the simulation using partial cells). So, tasks 1 (a) and 2 (b) have been completed so far. Tasks 2(b) and 2(c) are being worked on right now, after completion of which tasks 1 (b) and 3 will be initiated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402:260,Security,validat,validation,260,"@glwagner I have opened a PR with the branch sb/cut-cells-experiment, on which I have been working on implementing the cut cells. To summarize the progress:. - The two-dimensional [tracer advection test case](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl) over a Gaussian bump is run successfully using the low resolution from the [Adcroft](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml) paper and a relatively higher resolution. Both partial cells and full cells are used. Time evolution of the passive tracer concentration is visualized. - CutCellBottom is implemented in the ImmersedBoundary module similar to PartialCellBottom, and the tracer advection test case is repeated with cut cells. No noticeable difference in the results is detected so far (with the simulation using partial cells). So, tasks 1 (a) and 2 (b) have been completed so far. Tasks 2(b) and 2(c) are being worked on right now, after completion of which tasks 1 (b) and 3 will be initiated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402:198,Testability,test,test,198,"@glwagner I have opened a PR with the branch sb/cut-cells-experiment, on which I have been working on implementing the cut cells. To summarize the progress:. - The two-dimensional [tracer advection test case](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl) over a Gaussian bump is run successfully using the low resolution from the [Adcroft](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml) paper and a relatively higher resolution. Both partial cells and full cells are used. Time evolution of the passive tracer concentration is visualized. - CutCellBottom is implemented in the ImmersedBoundary module similar to PartialCellBottom, and the tracer advection test case is repeated with cut cells. No noticeable difference in the results is detected so far (with the simulation using partial cells). So, tasks 1 (a) and 2 (b) have been completed so far. Tasks 2(b) and 2(c) are being worked on right now, after completion of which tasks 1 (b) and 3 will be initiated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402:775,Testability,test,test,775,"@glwagner I have opened a PR with the branch sb/cut-cells-experiment, on which I have been working on implementing the cut cells. To summarize the progress:. - The two-dimensional [tracer advection test case](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl) over a Gaussian bump is run successfully using the low resolution from the [Adcroft](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml) paper and a relatively higher resolution. Both partial cells and full cells are used. Time evolution of the passive tracer concentration is visualized. - CutCellBottom is implemented in the ImmersedBoundary module similar to PartialCellBottom, and the tracer advection test case is repeated with cut cells. No noticeable difference in the results is detected so far (with the simulation using partial cells). So, tasks 1 (a) and 2 (b) have been completed so far. Tasks 2(b) and 2(c) are being worked on right now, after completion of which tasks 1 (b) and 3 will be initiated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1593757333:377,Safety,detect,detectable,377,"> Nice! Do you have an image that illustrates the problems at low resolution, ie a plot that reproduces the Adcroft result?. Yes. Here they are. I improved the visualization on the latest commit and pushed it right now. The types of immersed boundary and plot are included in the filenames. The discrete version of the topography (i.e. the Gaussian bump for this test case) is detectable only for the heatmaps. https://github.com/CliMA/Oceananigans.jl/assets/12926768/f94a6b92-cb5e-4197-9e5b-bd8ea1bad42a. https://github.com/CliMA/Oceananigans.jl/assets/12926768/c2d37eb9-931e-4efa-aa99-c113e38bf393. https://github.com/CliMA/Oceananigans.jl/assets/12926768/38771b36-e030-4877-8c9f-61944cd9aefc. https://github.com/CliMA/Oceananigans.jl/assets/12926768/baf6c24b-3fc1-4f4e-aec7-17826bd4da61",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1593757333
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1593757333:363,Testability,test,test,363,"> Nice! Do you have an image that illustrates the problems at low resolution, ie a plot that reproduces the Adcroft result?. Yes. Here they are. I improved the visualization on the latest commit and pushed it right now. The types of immersed boundary and plot are included in the filenames. The discrete version of the topography (i.e. the Gaussian bump for this test case) is detectable only for the heatmaps. https://github.com/CliMA/Oceananigans.jl/assets/12926768/f94a6b92-cb5e-4197-9e5b-bd8ea1bad42a. https://github.com/CliMA/Oceananigans.jl/assets/12926768/c2d37eb9-931e-4efa-aa99-c113e38bf393. https://github.com/CliMA/Oceananigans.jl/assets/12926768/38771b36-e030-4877-8c9f-61944cd9aefc. https://github.com/CliMA/Oceananigans.jl/assets/12926768/baf6c24b-3fc1-4f4e-aec7-17826bd4da61",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1593757333
https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1595648745:62,Energy Efficiency,reduce,reduce,62,"This paper describes a ""cell merging"" technique that can help reduce problems with very small cells: https://journals.ametsoc.org/view/journals/mwre/138/10/2010mwr3252.1.xml?tab_body=abstract-display. There are also some citations in there about an alternative method that they call the ""thin wall"" method.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1595648745
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1574619364:18,Deployability,release,release,18,definitely bump a release (minor or patch; whatever more appropriate) before this is merged :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1574619364
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1574619364:36,Deployability,patch,patch,36,definitely bump a release (minor or patch; whatever more appropriate) before this is merged :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1574619364
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1588131333:102,Deployability,patch,patch,102,Perhaps we wait for https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399 to be merged and tag a patch release for KA before we merge this? @vchuravy?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1588131333
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1588131333:108,Deployability,release,release,108,Perhaps we wait for https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399 to be merged and tag a patch release for KA before we merge this? @vchuravy?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1588131333
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589347491:116,Testability,benchmark,benchmark,116,"So, it looks like docs take more to build in this PR when compared to main (4:00 hrs vs 3:40 hrs). Probably good to benchmark a bit. I ll try some benchmarking on GPU and CPU",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589347491
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589347491:147,Testability,benchmark,benchmarking,147,"So, it looks like docs take more to build in this PR when compared to main (4:00 hrs vs 3:40 hrs). Probably good to benchmark a bit. I ll try some benchmarking on GPU and CPU",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589347491
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589351279:0,Testability,benchmark,benchmarking,0,"benchmarking sounds good!. but I thought this PR only made changes to the distributed grids, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1589351279
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1610993664:52,Modifiability,refactor,refactoring,52,Is the PR on KA very crucial?. Would it be a lot of refactoring to have this merged atm with a tagged KA version? This way we don't need to wait for KA?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1610993664
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611315191:210,Integrability,depend,depend,210,"> Is the PR on KA very crucial?; > ; > Would it be a lot of refactoring to have this merged atm with a tagged KA version? This way we don't need to wait for KA?. I would wait for KA to merge (we do not want to depend on a branch). . On the other hand, I would prefer not to wait for KA to have this PR ready to merge so we can merge the two PRs in rapid succession and not take time to refactor/review this one later (it would be better to merge this by July 15th and I think it has some major changes we want to discuss before). In the end the KA PR just handles how offsets are used in indexing kernels. I don't think that API will change even when changing the internals, and even if it does, it is just a matter of changing one function (`launch!` in `src/Utils/kernel_launching!`) to reflect the API changes",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611315191
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611315191:60,Modifiability,refactor,refactoring,60,"> Is the PR on KA very crucial?; > ; > Would it be a lot of refactoring to have this merged atm with a tagged KA version? This way we don't need to wait for KA?. I would wait for KA to merge (we do not want to depend on a branch). . On the other hand, I would prefer not to wait for KA to have this PR ready to merge so we can merge the two PRs in rapid succession and not take time to refactor/review this one later (it would be better to merge this by July 15th and I think it has some major changes we want to discuss before). In the end the KA PR just handles how offsets are used in indexing kernels. I don't think that API will change even when changing the internals, and even if it does, it is just a matter of changing one function (`launch!` in `src/Utils/kernel_launching!`) to reflect the API changes",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611315191
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611315191:386,Modifiability,refactor,refactor,386,"> Is the PR on KA very crucial?; > ; > Would it be a lot of refactoring to have this merged atm with a tagged KA version? This way we don't need to wait for KA?. I would wait for KA to merge (we do not want to depend on a branch). . On the other hand, I would prefer not to wait for KA to have this PR ready to merge so we can merge the two PRs in rapid succession and not take time to refactor/review this one later (it would be better to merge this by July 15th and I think it has some major changes we want to discuss before). In the end the KA PR just handles how offsets are used in indexing kernels. I don't think that API will change even when changing the internals, and even if it does, it is just a matter of changing one function (`launch!` in `src/Utils/kernel_launching!`) to reflect the API changes",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611315191
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611394008:60,Modifiability,refactor,refactoring,60,"> Is the PR on KA very crucial?; > ; > Would it be a lot of refactoring to have this merged atm with a tagged KA version? This way we don't need to wait for KA?. Sorry, I misunderstood. Yeah, it would be indeed a bit of refactoring.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611394008
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611394008:220,Modifiability,refactor,refactoring,220,"> Is the PR on KA very crucial?; > ; > Would it be a lot of refactoring to have this merged atm with a tagged KA version? This way we don't need to wait for KA?. Sorry, I misunderstood. Yeah, it would be indeed a bit of refactoring.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1611394008
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1712193512:60,Modifiability,variab,variables,60,"> This PR allows hiding MPI passing of barotropic auxiliary variables behind the implicit vertical solver and prognostic variables behind the tendency calculations. The latter is done by splitting the tendency kernels into an interior kernel that calculates tendencies between, e.g., i = Hx and i = Nx - Hx, and a boundary kernel, executed once communication is complete, that calculates tendencies adjacent to boundaries. @simone-silvestri I think this description is incomplete. Isn't there also a change to how the auxiliary computations are done?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1712193512
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1712193512:121,Modifiability,variab,variables,121,"> This PR allows hiding MPI passing of barotropic auxiliary variables behind the implicit vertical solver and prognostic variables behind the tendency calculations. The latter is done by splitting the tendency kernels into an interior kernel that calculates tendencies between, e.g., i = Hx and i = Nx - Hx, and a boundary kernel, executed once communication is complete, that calculates tendencies adjacent to boundaries. @simone-silvestri I think this description is incomplete. Isn't there also a change to how the auxiliary computations are done?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1712193512
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1729619719:168,Integrability,depend,depends,168,"> Requires [JuliaGPU/KernelAbstractions.jl#399](https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399) # On hold at the moment. At the top comment it says this PR depends on another KA PR that isn't merged. However, this PR is merged (and tagged). Does this not depend on https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399 anymore?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1729619719
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1729619719:267,Integrability,depend,depend,267,"> Requires [JuliaGPU/KernelAbstractions.jl#399](https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399) # On hold at the moment. At the top comment it says this PR depends on another KA PR that isn't merged. However, this PR is merged (and tagged). Does this not depend on https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399 anymore?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1729619719
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1729628669:176,Integrability,depend,depends,176,"> > Requires [JuliaGPU/KernelAbstractions.jl#399](https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399) # On hold at the moment; > ; > At the top comment it says this PR depends on another KA PR that isn't merged. However, this PR is merged (and tagged). Does this not depend on [JuliaGPU/KernelAbstractions.jl#399](https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399) anymore?. Yeap, it doesn't. I edited the first post ;)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1729628669
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1729628669:275,Integrability,depend,depend,275,"> > Requires [JuliaGPU/KernelAbstractions.jl#399](https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399) # On hold at the moment; > ; > At the top comment it says this PR depends on another KA PR that isn't merged. However, this PR is merged (and tagged). Does this not depend on [JuliaGPU/KernelAbstractions.jl#399](https://github.com/JuliaGPU/KernelAbstractions.jl/pull/399) anymore?. Yeap, it doesn't. I edited the first post ;)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-1729628669
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396865871:1552,Integrability,Message,Message,1552,"Thank you for your response. The question is: what do *you* use to trace MPI; in Julia programs? Do you use `nsys`? If so, how?. Petr Krysl; Prof. and Vice chair for undergraduate education; Department of Structural Engineering; <https://urldefense.com/v3/__https://www.linkedin.com/company/uc-san-diego-structural-engineering-department/__;!!Mih3wA!DXYUp152SRRo03xCfQJ9NlAXovNVk-zBYRalwekzmzf2bGwdDMmY8gy9t6iQo9ok2_dvk8m987An93w0pnT_6lM$>; University of California, San Diego; 9500 Gilman Drive #0085; La Jolla, CA 92093. On Mon, Oct 7, 2024 at 1:06 AM Simone Silvestri ***@***.***>; wrote:. > Using nsys it is possible to trace MPI with --trace=mpi, see:; > https://docs.nvidia.com/nsight-systems/UserGuide/index.html; > <https://urldefense.com/v3/__https://docs.nvidia.com/nsight-systems/UserGuide/index.html__;!!Mih3wA!H6UjdgIwou7PJs3BrN0sPOwBQpDzgvLSPJe4sfnC3s1yyKC4zguXAXmS7ynhe0PWPbcu93qhzzaGritvlwu8ongn$>; >; > —; > Reply to this email directly, view it on GitHub; > <https://urldefense.com/v3/__https://github.com/CliMA/Oceananigans.jl/pull/3125*issuecomment-2396207964__;Iw!!Mih3wA!H6UjdgIwou7PJs3BrN0sPOwBQpDzgvLSPJe4sfnC3s1yyKC4zguXAXmS7ynhe0PWPbcu93qhzzaGritvl3gGBEE5$>,; > or unsubscribe; > <https://urldefense.com/v3/__https://github.com/notifications/unsubscribe-auth/ACLGGWH3753SQU2FEFPUVW3Z2I6HXAVCNFSM6AAAAABPKAGA5GVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGOJWGIYDOOJWGQ__;!!Mih3wA!H6UjdgIwou7PJs3BrN0sPOwBQpDzgvLSPJe4sfnC3s1yyKC4zguXAXmS7ynhe0PWPbcu93qhzzaGritvl1tQs-Dz$>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396865871
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396961670:217,Modifiability,config,configured,217,"Yep, we used nsys because our primary objective is to trace GPU execution. I think it will work also on CPU programs. ; There is nothing really specific about profiling julia with nsys, provided that MPI is correctly configured (i.e. your script works with MPI already). An example of a batch script that traces MPI calls is; ```; #!/bin/bash; #SBATCH -N 2; #SBATCH --ntasks-per-node=4; #SBATCH --cpus-per-task=16; #SBATCH --mem=500GB; #SBATCH --time 24:00:00; #SBATCH --gres=gpus:4. cat > launch.sh << EoF_s; #! /bin/sh; export CUDA_VISIBLE_DEVICES=0,1,2,3; exec \$*; EoF_s; chmod +x launch.sh. srun nsys profile --trace=nvtx,cuda,mpi --output=report_%q{SLURM_PROCID} ./launch.sh julia --check-bounds=no --project scaling_experiments.jl ; ```; Here, `nsys` will produce one report per processor. You can use `mpirun` or `mpiexec` instead of `srun`.; If you want to insert GC (garbage collection) annotations in the report through nvtx you need to add the environment variable ([ref](https://github.com/JuliaGPU/NVTX.jl)) ; ```; export JULIA_NVTX_CALLBACKS=gc; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396961670
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396961670:968,Modifiability,variab,variable,968,"Yep, we used nsys because our primary objective is to trace GPU execution. I think it will work also on CPU programs. ; There is nothing really specific about profiling julia with nsys, provided that MPI is correctly configured (i.e. your script works with MPI already). An example of a batch script that traces MPI calls is; ```; #!/bin/bash; #SBATCH -N 2; #SBATCH --ntasks-per-node=4; #SBATCH --cpus-per-task=16; #SBATCH --mem=500GB; #SBATCH --time 24:00:00; #SBATCH --gres=gpus:4. cat > launch.sh << EoF_s; #! /bin/sh; export CUDA_VISIBLE_DEVICES=0,1,2,3; exec \$*; EoF_s; chmod +x launch.sh. srun nsys profile --trace=nvtx,cuda,mpi --output=report_%q{SLURM_PROCID} ./launch.sh julia --check-bounds=no --project scaling_experiments.jl ; ```; Here, `nsys` will produce one report per processor. You can use `mpirun` or `mpiexec` instead of `srun`.; If you want to insert GC (garbage collection) annotations in the report through nvtx you need to add the environment variable ([ref](https://github.com/JuliaGPU/NVTX.jl)) ; ```; export JULIA_NVTX_CALLBACKS=gc; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396961670
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396992719:2334,Integrability,Message,Message,2334,"an Diego; 9500 Gilman Drive #0085; La Jolla, CA 92093. On Mon, Oct 7, 2024 at 6:38 AM Simone Silvestri ***@***.***>; wrote:. > Yep, we used nsys because our primary objective is to trace GPU execution.; > I think it will work also on CPU programs.; > There is nothing really specific about profiling julia with nsys, provided; > that MPI is correctly configured (i.e. your script works with MPI already).; > An example of a batch script that traces MPI calls is; >; > #!/bin/bash; > #SBATCH -N 2; > #SBATCH --ntasks-per-node=4; > #SBATCH --cpus-per-task=16; > #SBATCH --mem=500GB; > #SBATCH --time 24:00:00; > #SBATCH --gres=gpus:4; >; > cat > launch.sh << EoF_s; > #! /bin/sh; > export CUDA_VISIBLE_DEVICES=0,1,2,3; > exec \$*; > EoF_s; > chmod +x launch.sh; >; > srun nsys profile --trace=nvtx,cuda,mpi --output=report_%q{SLURM_PROCID} ./launch.sh julia --check-bounds=no --project scaling_experiments.jl; >; > Here, nsys will produce one report per processor. You can use mpirun or; > mpiexec instead of srun.; > If you want to insert NVTX annotations inside the code you need to add the; > environment variable (ref; > <https://urldefense.com/v3/__https://github.com/JuliaGPU/NVTX.jl__;!!Mih3wA!Ddu9-FVfAupB2XwS3KrF6PADRaFUORHCHdZEo-HuqlK3va2LdvyLAbpllyVWNEIiD_TVMU-miX1JnMaM6C7RIjP6$>; > ); >; > export JULIA_NVTX_CALLBACKS=gc; >; > —; > Reply to this email directly, view it on GitHub; > <https://urldefense.com/v3/__https://github.com/CliMA/Oceananigans.jl/pull/3125*issuecomment-2396961670__;Iw!!Mih3wA!Ddu9-FVfAupB2XwS3KrF6PADRaFUORHCHdZEo-HuqlK3va2LdvyLAbpllyVWNEIiD_TVMU-miX1JnMaM6H5RkVsz$>,; > or unsubscribe; > <https://urldefense.com/v3/__https://github.com/notifications/unsubscribe-auth/ACLGGWEQFWMJVYNAYQ7WX4LZ2KFD3AVCNFSM6AAAAABPKAGA5GVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGOJWHE3DCNRXGA__;!!Mih3wA!Ddu9-FVfAupB2XwS3KrF6PADRaFUORHCHdZEo-HuqlK3va2LdvyLAbpllyVWNEIiD_TVMU-miX1JnMaM6OcpZ5Rs$>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396992719
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396992719:715,Modifiability,config,configured,715,"Very cool. Many thanks!. Petr Krysl; Prof. and Vice chair for undergraduate education; Department of Structural Engineering; <https://urldefense.com/v3/__https://www.linkedin.com/company/uc-san-diego-structural-engineering-department/__;!!Mih3wA!DXYUp152SRRo03xCfQJ9NlAXovNVk-zBYRalwekzmzf2bGwdDMmY8gy9t6iQo9ok2_dvk8m987An93w0pnT_6lM$>; University of California, San Diego; 9500 Gilman Drive #0085; La Jolla, CA 92093. On Mon, Oct 7, 2024 at 6:38 AM Simone Silvestri ***@***.***>; wrote:. > Yep, we used nsys because our primary objective is to trace GPU execution.; > I think it will work also on CPU programs.; > There is nothing really specific about profiling julia with nsys, provided; > that MPI is correctly configured (i.e. your script works with MPI already).; > An example of a batch script that traces MPI calls is; >; > #!/bin/bash; > #SBATCH -N 2; > #SBATCH --ntasks-per-node=4; > #SBATCH --cpus-per-task=16; > #SBATCH --mem=500GB; > #SBATCH --time 24:00:00; > #SBATCH --gres=gpus:4; >; > cat > launch.sh << EoF_s; > #! /bin/sh; > export CUDA_VISIBLE_DEVICES=0,1,2,3; > exec \$*; > EoF_s; > chmod +x launch.sh; >; > srun nsys profile --trace=nvtx,cuda,mpi --output=report_%q{SLURM_PROCID} ./launch.sh julia --check-bounds=no --project scaling_experiments.jl; >; > Here, nsys will produce one report per processor. You can use mpirun or; > mpiexec instead of srun.; > If you want to insert NVTX annotations inside the code you need to add the; > environment variable (ref; > <https://urldefense.com/v3/__https://github.com/JuliaGPU/NVTX.jl__;!!Mih3wA!Ddu9-FVfAupB2XwS3KrF6PADRaFUORHCHdZEo-HuqlK3va2LdvyLAbpllyVWNEIiD_TVMU-miX1JnMaM6C7RIjP6$>; > ); >; > export JULIA_NVTX_CALLBACKS=gc; >; > —; > Reply to this email directly, view it on GitHub; > <https://urldefense.com/v3/__https://github.com/CliMA/Oceananigans.jl/pull/3125*issuecomment-2396961670__;Iw!!Mih3wA!Ddu9-FVfAupB2XwS3KrF6PADRaFUORHCHdZEo-HuqlK3va2LdvyLAbpllyVWNEIiD_TVMU-miX1JnMaM6H5RkVsz$>,; > or unsubscribe; > <https://urld",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396992719
https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396992719:1470,Modifiability,variab,variable,1470,"an Diego; 9500 Gilman Drive #0085; La Jolla, CA 92093. On Mon, Oct 7, 2024 at 6:38 AM Simone Silvestri ***@***.***>; wrote:. > Yep, we used nsys because our primary objective is to trace GPU execution.; > I think it will work also on CPU programs.; > There is nothing really specific about profiling julia with nsys, provided; > that MPI is correctly configured (i.e. your script works with MPI already).; > An example of a batch script that traces MPI calls is; >; > #!/bin/bash; > #SBATCH -N 2; > #SBATCH --ntasks-per-node=4; > #SBATCH --cpus-per-task=16; > #SBATCH --mem=500GB; > #SBATCH --time 24:00:00; > #SBATCH --gres=gpus:4; >; > cat > launch.sh << EoF_s; > #! /bin/sh; > export CUDA_VISIBLE_DEVICES=0,1,2,3; > exec \$*; > EoF_s; > chmod +x launch.sh; >; > srun nsys profile --trace=nvtx,cuda,mpi --output=report_%q{SLURM_PROCID} ./launch.sh julia --check-bounds=no --project scaling_experiments.jl; >; > Here, nsys will produce one report per processor. You can use mpirun or; > mpiexec instead of srun.; > If you want to insert NVTX annotations inside the code you need to add the; > environment variable (ref; > <https://urldefense.com/v3/__https://github.com/JuliaGPU/NVTX.jl__;!!Mih3wA!Ddu9-FVfAupB2XwS3KrF6PADRaFUORHCHdZEo-HuqlK3va2LdvyLAbpllyVWNEIiD_TVMU-miX1JnMaM6C7RIjP6$>; > ); >; > export JULIA_NVTX_CALLBACKS=gc; >; > —; > Reply to this email directly, view it on GitHub; > <https://urldefense.com/v3/__https://github.com/CliMA/Oceananigans.jl/pull/3125*issuecomment-2396961670__;Iw!!Mih3wA!Ddu9-FVfAupB2XwS3KrF6PADRaFUORHCHdZEo-HuqlK3va2LdvyLAbpllyVWNEIiD_TVMU-miX1JnMaM6H5RkVsz$>,; > or unsubscribe; > <https://urldefense.com/v3/__https://github.com/notifications/unsubscribe-auth/ACLGGWEQFWMJVYNAYQ7WX4LZ2KFD3AVCNFSM6AAAAABPKAGA5GVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGOJWHE3DCNRXGA__;!!Mih3wA!Ddu9-FVfAupB2XwS3KrF6PADRaFUORHCHdZEo-HuqlK3va2LdvyLAbpllyVWNEIiD_TVMU-miX1JnMaM6OcpZ5Rs$>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3125#issuecomment-2396992719
https://github.com/CliMA/Oceananigans.jl/issues/3126#issuecomment-1572601030:2708,Modifiability,variab,variable,2708,"CenteredSecondOrder` advection and `ScalarDiffusivity` with constant coefficients; * Large eddy simulation with `SmagorinskyLilly` or `AnisotropicMinimumDissipation` turbulence closures; * Idealized problems (eg two-dimensional turbulence) in 1-3 dimensions that use Laplacian, biharmonic, or implicit numerical dissipation.; 2. `HydrostaticFreeSurfaceModel`, which solves the hydrostatic Boussinesq equations with linear free surface dynamics and a `z` coordinate. The hydrostatic model is useful for larger scale simulations, eg regional ocean modeling, and can be used with `RectilinearGrid` stretched in any or all directions as well as a `LatitudeLongitudeGrid`. We have a prototype closure for vertical mixing called `CATKEVerticalDiffusivity` (paper coming soon...) as well as a `RiBasedVerticalDiffusivity` and `ConvectiveAdjustment` that support implicit time discretization for vertical diffusion. We have a new high-order advection scheme specialized for geophysical turbulence / mesoscale turbulence problems that uses a vector invariant formulation. We can treat the free surface dynamics implicitly in time with various methods (FFT-based on rectilinear grids with flat bottoms, or preconditioned conjugate gradient based with various preconditioners in other situations). We also have a `SplitExplicitFreeSurface`. All models support complex domains / bathymetry via `ImmersedBoundaryGrid`, a variety of Coriolis forces (`FPlane`, `BetaPlane`, as well as some more exotic options), a wide variety of boundary conditions for any prognostic variable on any model boundary. Note however that the pressure solver for `NonhydrostaticModel` is only approximate on `ImmersedBoundaryGrid` (we are working on an exact pressure solver for immersed boundaries). We don't support simulations on the full sphere, or sea ice, yet, but we are working on both of those. Let me know if you have any specific questions about capabilities, I'm curious to hear what problems you're interested in tackling.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3126#issuecomment-1572601030
https://github.com/CliMA/Oceananigans.jl/issues/3126#issuecomment-1572621436:168,Usability,learn,learn,168,thank you so much for the detailed response @glwagner - that's very helpful - it's a great idea to turn this into a discussion - I'll close this issue - very exited to learn more about Oceananigans (and Veros!),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3126#issuecomment-1572621436
https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577374476:47,Availability,down,down,47,The docs took 6hrs to build! Is the PR slowing down things? It could be just that tartarus was busy…,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577374476
https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577385126:25,Performance,perform,performance,25,Oh wow! Let me check the performance,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577385126
https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577490747:6,Testability,test,tests,6,A few tests are a good idea.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577490747
https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577492554:44,Availability,down,down,44,"Indeed, the simulations seem to have slowed down significantly with these changes. I ll try to figure out why",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577492554
https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1588250946:113,Testability,test,tests,113,"> I think it's also somewhere else, but cannot remember where. Let's make sure we use a consistent style for the tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1588250946
https://github.com/CliMA/Oceananigans.jl/pull/3130#issuecomment-1577475543:18,Testability,test,tests,18,Shouldn't we have tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3130#issuecomment-1577475543
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575762100:20,Usability,clear,clearer,20,"I think it would be clearer to call this ""internal tide"" or ""barotropic tide over seamount"". The point is not the barotropic tide, the point is to showcase the generation of internal waves.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575762100
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575763281:477,Security,validat,validation,477,"> So I tried with SplitExplicit and 1) it's _much faster_ but 2) I see this very fast motion in the beginning...; > ; > Compare this; > ; > barotropic_tide_splitexplicit.mp4 ; > with the animation at the top of this PR.; > ; > I suppose it's the gravity waves... Are they implicitly filtered out with the implicit free surface solver at the top?. Yeah, the implicit solver diffuses out all the gravity waves while the split explicit ""resolves"" them. You can also check out the validation case in `validation/implicit_free_surface/geostrophic_adjustment_test.jl` that shows quite some difference in the dynamics using the implicit solver vs split explicit solver",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575763281
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575763281:497,Security,validat,validation,497,"> So I tried with SplitExplicit and 1) it's _much faster_ but 2) I see this very fast motion in the beginning...; > ; > Compare this; > ; > barotropic_tide_splitexplicit.mp4 ; > with the animation at the top of this PR.; > ; > I suppose it's the gravity waves... Are they implicitly filtered out with the implicit free surface solver at the top?. Yeah, the implicit solver diffuses out all the gravity waves while the split explicit ""resolves"" them. You can also check out the validation case in `validation/implicit_free_surface/geostrophic_adjustment_test.jl` that shows quite some difference in the dynamics using the implicit solver vs split explicit solver",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575763281
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575780453:19,Security,validat,validation,19,We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575780453
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575780453:102,Security,validat,validation,102,We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575780453
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575780453:30,Testability,test,test,30,We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1575780453
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1576895842:39,Availability,mask,mask,39,"Great example @navidcy . Do we want to mask the hill in the animations? (Especially since https://github.com/CliMA/Oceananigans.jl/pull/3092 isn't merged yet.) The top plot specifically keeps changing color where the hill is supposed to be, which might throw off some readers. This could probably be done with [`Makie.poly`](https://docs.makie.org/dev/examples/plotting_functions/poly/).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1576895842
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799:21,Security,validat,validation,21,> We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl. The validation script includes a multi region example. Shall I still delete it?; I could also clean it up and add toml files in the validation script directory (see #3076).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799:104,Security,validat,validation,104,> We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl. The validation script includes a multi region example. Shall I still delete it?; I could also clean it up and add toml files in the validation script directory (see #3076).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799:157,Security,validat,validation,157,> We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl. The validation script includes a multi region example. Shall I still delete it?; I could also clean it up and add toml files in the validation script directory (see #3076).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799:285,Security,validat,validation,285,> We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl. The validation script includes a multi region example. Shall I still delete it?; I could also clean it up and add toml files in the validation script directory (see #3076).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799:32,Testability,test,test,32,> We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl. The validation script includes a multi region example. Shall I still delete it?; I could also clean it up and add toml files in the validation script directory (see #3076).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331:23,Security,validat,validation,23,"> > We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl; > ; > The validation script includes a multi region example. Shall I still delete it? I could also clean it up and add toml files in the validation script directory (see #3076). Yeah, that's a random place for a multi region example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331:106,Security,validat,validation,106,"> > We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl; > ; > The validation script includes a multi region example. Shall I still delete it? I could also clean it up and add toml files in the validation script directory (see #3076). Yeah, that's a random place for a multi region example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331:165,Security,validat,validation,165,"> > We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl; > ; > The validation script includes a multi region example. Shall I still delete it? I could also clean it up and add toml files in the validation script directory (see #3076). Yeah, that's a random place for a multi region example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331:292,Security,validat,validation,292,"> > We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl; > ; > The validation script includes a multi region example. Shall I still delete it? I could also clean it up and add toml files in the validation script directory (see #3076). Yeah, that's a random place for a multi region example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331:34,Testability,test,test,34,"> > We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl; > ; > The validation script includes a multi region example. Shall I still delete it? I could also clean it up and add toml files in the validation script directory (see #3076). Yeah, that's a random place for a multi region example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:151,Availability,error,error,151,"@navidcy I'm trying to add a drag flux to this example like we talked about in https://github.com/CliMA/Oceananigans.jl/issues/3148 but I'm getting an error that I can't figure out. Using `u` as an example, I'm trying to implement the BCs as . ```julia; @inline u_drag(x, y, t, u, v, w, p) = - p.cᵈ * u * √(u^2 + v^2 + w^2); @inline u_drag(x, y, z, t, u, v, w, cᵈ) = u_drag(x, y, t, u, v, w, cᵈ). u_drag_bc = FluxBoundaryCondition(u_drag, field_dependencies=(:u, :v, :w), parameters=(; cᵈ=1e-3)); boundary_conditions = (u = FieldBoundaryConditions(bottom=u_drag_bc),); ```. but when time-stepping the model I get. ```; ERROR: LoadError: MethodError: no method matching field_arguments(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, ::NamedTuple{(:u, :v, :w, :b, :η), Tuple{Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.Cent",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:619,Availability,ERROR,ERROR,619,"@navidcy I'm trying to add a drag flux to this example like we talked about in https://github.com/CliMA/Oceananigans.jl/issues/3148 but I'm getting an error that I can't figure out. Using `u` as an example, I'm trying to implement the BCs as . ```julia; @inline u_drag(x, y, t, u, v, w, p) = - p.cᵈ * u * √(u^2 + v^2 + w^2); @inline u_drag(x, y, z, t, u, v, w, cᵈ) = u_drag(x, y, t, u, v, w, cᵈ). u_drag_bc = FluxBoundaryCondition(u_drag, field_dependencies=(:u, :v, :w), parameters=(; cᵈ=1e-3)); boundary_conditions = (u = FieldBoundaryConditions(bottom=u_drag_bc),); ```. but when time-stepping the model I get. ```; ERROR: LoadError: MethodError: no method matching field_arguments(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, ::NamedTuple{(:u, :v, :w, :b, :η), Tuple{Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.Cent",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:2402,Deployability,Continuous,ContinuousBoundaryFunction,2402,"id{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(u_drag), NamedTuple{(:cᵈ,), Tuple{Float64}}, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Nothing}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Ba",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:11187,Deployability,Continuous,ContinuousBoundaryFunction,11187,"ion{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, loc::Tuple{Face, Center, Center}, grid::ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, bottom_bc::BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(u_drag), NamedTuple{(:cᵈ,), Tuple{Float64}}, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Nothing}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, top_bc::BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, args::Tuple{Clock{Float64}, NamedTuple{(:u, :v, :w, :b, :η), Tuple{Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetM",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:12689,Deployability,Continuous,ContinuousBoundaryFunction,12689,"id{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(u_drag), NamedTuple{(:cᵈ,), Tuple{Float64}}, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Nothing}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Ba",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:20489,Deployability,Continuous,ContinuousBoundaryFunction,20489,"thing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Tuple{Face, Center, Center}, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(u_drag), NamedTuple{(:cᵈ,), Tuple{Float64}}, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Nothing}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, Tuple{Clock{Float64}, NamedTuple{(:u, :v, :w, :b, :η), Tuple{Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:21977,Deployability,Continuous,ContinuousBoundaryFunction,21977,"id{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Face, Center, Nothing, Oceananigans.BoundaryConditions.LeftBoundary, typeof(u_drag), NamedTuple{(:cᵈ,), Tuple{Float64}}, Tuple{Symbol, Symbol, Symbol}, Tuple{Int64, Int64, Nothing}, Tuple{typeof(Oceananigans.Operators.identity4), typeof(Oceananigans.Operators.ℑxyᶠᶜᵃ), typeof(Oceananigans.Operators.ℑxᶠᵃᵃ)}}}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}, Field{Center, Face, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Ba",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:27687,Deployability,Continuous,ContinuousBoundaryFunction,27687,", Field{Center, Center, Face, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, Tuple{Colon, Colon, UnitRange{Int64}}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, Nothing, Nothing, Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Nothing, Oceananigans.Fields.FieldBoundaryBuffers{Nothing, Nothing, Nothing, Nothing}}}}, Nothing, Buoyancy{BuoyancyTracer, Oceananigans.Grids.NegativeZDirection}}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck); ```. However, if I use the same formulation on a NohydrostaticModel this works. ```julia; julia> @inline u_drag(x, y, t, u, v, w, p) = - p.cᵈ * u * √(u^2 + v^2 + w^2); u_drag (generic function with 2 methods). julia> u_drag_bc = FluxBoundaryCondition(u_drag, field_dependencies=(:u, :v, :w), parameters=(; cᵈ=1e-3)); FluxBoundaryCondition: ContinuousBoundaryFunction u_drag at (Nothing, Nothing, Nothing). julia> boundary_conditions = (u = FieldBoundaryConditions(bottom=u_drag_bc),);. julia> model = NonhydrostaticModel(; grid, boundary_conditions);. julia> time_step!(model, 1). julia>; ```. So whatever's happening probably has to do with the HydrostaticModel, which I'm really not familiar with unfortunately. What do you prefer that I do?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069:626,Performance,Load,LoadError,626,"@navidcy I'm trying to add a drag flux to this example like we talked about in https://github.com/CliMA/Oceananigans.jl/issues/3148 but I'm getting an error that I can't figure out. Using `u` as an example, I'm trying to implement the BCs as . ```julia; @inline u_drag(x, y, t, u, v, w, p) = - p.cᵈ * u * √(u^2 + v^2 + w^2); @inline u_drag(x, y, z, t, u, v, w, cᵈ) = u_drag(x, y, t, u, v, w, cᵈ). u_drag_bc = FluxBoundaryCondition(u_drag, field_dependencies=(:u, :v, :w), parameters=(; cᵈ=1e-3)); boundary_conditions = (u = FieldBoundaryConditions(bottom=u_drag_bc),); ```. but when time-stepping the model I get. ```; ERROR: LoadError: MethodError: no method matching field_arguments(::Int64, ::Int64, ::Int64, ::ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.CenterImmersedCondition}, Nothing, CPU}, ::NamedTuple{(:u, :v, :w, :b, :η), Tuple{Field{Face, Center, Center, Nothing, ImmersedBoundaryGrid{Float64, Periodic, Flat, Bounded, RectilinearGrid{Float64, Periodic, Flat, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, GridFittedBottom{OffsetArrays.OffsetMatrix{Float64, Matrix{Float64}}, Oceananigans.ImmersedBoundaries.Cent",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1667152069
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1893650409:209,Modifiability,variab,variable,209,"> So whatever's happening probably has to do with the HydrostaticModel, which I'm really not familiar with unfortunately.; > ; > What do you prefer that I do?. the hydrostatic model does not have `w` as state variable... try removing `w` and see if all is good.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1893650409
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983406343:2,Deployability,update,update,2,"I update the internal tide example. Let's merge this so we have an example with bathymetry in the docs?. The latest version of the movie is:. https://github.com/CliMA/Oceananigans.jl/assets/7112768/1bfdca5c-6d49-4101-9037-eadfacea6900. I'm not so sure about 979c2a7; is this a good idea?. cc @simone-silvestri, @glwagner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983406343
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983782339:193,Availability,mask,mask,193,"> Can't we just plot a fixed-color shape on top on the mount on all panels? [`Makie.poly`](https://docs.makie.org/stable/reference/plots/poly/) seems to be able to do that. We can. We can also mask the output after we load it, e.g, via. using something like. ```Julia; using Oceananigans.ImmersedBoundaries: mask_immersed_field!. function mask_and_get_interior(φ_t, n; value=NaN); mask_immersed_field!(φ_t[n], value); return interior(φ_t[n], :, 1, :); end. u′ₙ = @lift mask_and_get_interior(u′_t, $n); ```. which gives. https://github.com/CliMA/Oceananigans.jl/assets/7112768/a402bfcd-ef72-42d8-bbb9-97fb98be4fe3. But either of these solutions complicate the example a bit. Ideally, `mask_immersed_field!` should not be user-facing. And plotting a mountain on top of the mountain is a bit of a hack and would require a bit of explaining and justifying why we do that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983782339
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983782339:218,Performance,load,load,218,"> Can't we just plot a fixed-color shape on top on the mount on all panels? [`Makie.poly`](https://docs.makie.org/stable/reference/plots/poly/) seems to be able to do that. We can. We can also mask the output after we load it, e.g, via. using something like. ```Julia; using Oceananigans.ImmersedBoundaries: mask_immersed_field!. function mask_and_get_interior(φ_t, n; value=NaN); mask_immersed_field!(φ_t[n], value); return interior(φ_t[n], :, 1, :); end. u′ₙ = @lift mask_and_get_interior(u′_t, $n); ```. which gives. https://github.com/CliMA/Oceananigans.jl/assets/7112768/a402bfcd-ef72-42d8-bbb9-97fb98be4fe3. But either of these solutions complicate the example a bit. Ideally, `mask_immersed_field!` should not be user-facing. And plotting a mountain on top of the mountain is a bit of a hack and would require a bit of explaining and justifying why we do that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983782339
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983800733:47,Availability,mask,masking,47,But I wouldn't mind adding the post-processing masking step with the hope we can eliminate it when masking is enabled for OutputWriters; see https://github.com/CliMA/Oceananigans.jl/pull/3092,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983800733
https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983800733:99,Availability,mask,masking,99,But I wouldn't mind adding the post-processing masking step with the hope we can eliminate it when masking is enabled for OutputWriters; see https://github.com/CliMA/Oceananigans.jl/pull/3092,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1983800733
