id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classTSingleShotCleaner.html:10099,Integrability,message,message,10099," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, voi",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:612,Modifiability,inherit,inherited,612,". ROOT: TSingleShotCleaner Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TSingleShotCleaner Class Reference. . Definition at line 54 of file TTimer.cxx. Public Member Functions;  TSingleShotCleaner ();  ; virtual ~TSingleShotCleaner ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void TurnOn () override;  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set th",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:2515,Modifiability,inherit,inherited,2515,"hen timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:2983,Modifiability,inherit,inherited,2983,"ted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer ",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:4380,Modifiability,inherit,inheritance,4380,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:6591,Modifiability,inherit,inherits,6591,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:6708,Modifiability,inherit,inherits,6708,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:10406,Modifiability,inherit,inherited,10406," SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:12434,Modifiability,inherit,inherited,12434,"t_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Attributes; TList * fGarbage;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtH",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:13090,Modifiability,inherit,inherited,13090," number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Attributes; TList * fGarbage;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bo",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:13474,Modifiability,inherit,inherited,13474,"WriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Thi",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:13692,Modifiability,inherit,inherited,13692,"WriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Thi",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:14210,Modifiability,inherit,inherited,14210,"ar * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:15370,Modifiability,inherit,inherited,15370,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sende",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:15469,Modifiability,inherit,inherited,15469,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sende",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:15680,Modifiability,inherit,inherited,15680,", const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:15793,Modifiability,inherit,inherited,15793,", const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:16642,Modifiability,inherit,inherited,16642,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSingleShotCleaner:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSingleShotCleaner(). TSingleShotCleaner::TSingleShotCleaner ; (; ). inline . Definition at line 58 of file TTimer.cxx. ◆ ~TSingleShotCleaner(). virtual TSingleShotCleaner::~TSingleShotCleaner ; (; ). inlinevirtual . Definition at line 59 of file TTimer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TSingleShotCleaner::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, ",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:16845,Modifiability,inherit,inherited,16845,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSingleShotCleaner:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSingleShotCleaner(). TSingleShotCleaner::TSingleShotCleaner ; (; ). inline . Definition at line 58 of file TTimer.cxx. ◆ ~TSingleShotCleaner(). virtual TSingleShotCleaner::~TSingleShotCleaner ; (; ). inlinevirtual . Definition at line 59 of file TTimer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TSingleShotCleaner::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, ",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:17058,Modifiability,inherit,inherited,17058,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSingleShotCleaner:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSingleShotCleaner(). TSingleShotCleaner::TSingleShotCleaner ; (; ). inline . Definition at line 58 of file TTimer.cxx. ◆ ~TSingleShotCleaner(). virtual TSingleShotCleaner::~TSingleShotCleaner ; (; ). inlinevirtual . Definition at line 59 of file TTimer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TSingleShotCleaner::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, ",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:18005,Performance,load,load,18005,"fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSingleShotCleaner:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSingleShotCleaner(). TSingleShotCleaner::TSingleShotCleaner ; (; ). inline . Definition at line 58 of file TTimer.cxx. ◆ ~TSingleShotCleaner(). virtual TSingleShotCleaner::~TSingleShotCleaner ; (; ). inlinevirtual . Definition at line 59 of file TTimer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TSingleShotCleaner::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Implements TSysEvtHandler.; Definition at line 68 of file TTimer.cxx. ◆ TurnOn(). void TSingleShotCleaner::TurnOn ; (; ). inlineoverridevirtual . Add the timer to the system timer list. ; If a TTimer subclass has to be placed on another list, override TurnOn() to add the timer to the correct list. ; Reimplemented from TTimer.; Definition at line 60 of file TTimer.cxx. Member Data Documentation. ◆ fGarbage. TList* TSingleShotCleaner::fGarbage. private . Definition at line 56 of file TTimer.cxx. core/base/src/TTimer.cxx. TSingleShotCleaner. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:18043,Performance,load,load,18043,"fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSingleShotCleaner:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSingleShotCleaner(). TSingleShotCleaner::TSingleShotCleaner ; (; ). inline . Definition at line 58 of file TTimer.cxx. ◆ ~TSingleShotCleaner(). virtual TSingleShotCleaner::~TSingleShotCleaner ; (; ). inlinevirtual . Definition at line 59 of file TTimer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TSingleShotCleaner::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Implements TSysEvtHandler.; Definition at line 68 of file TTimer.cxx. ◆ TurnOn(). void TSingleShotCleaner::TurnOn ; (; ). inlineoverridevirtual . Add the timer to the system timer list. ; If a TTimer subclass has to be placed on another list, override TurnOn() to add the timer to the correct list. ; Reimplemented from TTimer.; Definition at line 60 of file TTimer.cxx. Member Data Documentation. ◆ fGarbage. TList* TSingleShotCleaner::fGarbage. private . Definition at line 56 of file TTimer.cxx. core/base/src/TTimer.cxx. TSingleShotCleaner. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:2213,Safety,timeout,timeout,2213,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  T",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSingleShotCleaner.html:6222,Security,hash,hash,6222," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSingleShotCleaner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html
https://root.cern/doc/master/classTSlave.html:5012,Availability,error,error,5012,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:5101,Availability,error,error,5101,"gs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:5256,Availability,error,error,5256,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the uniqu",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:5553,Availability,error,error,5553,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:9888,Availability,error,error,9888,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TCl",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:20110,Availability,error,error,20110," inline . Definition at line 140 of file TSlave.h. ◆ GetUser(). const char * TSlave::GetUser ; (; ); const. inline . Definition at line 128 of file TSlave.h. ◆ GetWorkDir(). const char * TSlave::GetWorkDir ; (; ); const. inline . Definition at line 127 of file TSlave.h. ◆ Init() [1/2]. void TSlave::Init ; (; const char * ; host, . Int_t ; port, . Int_t ; stype . ). private . Init a PROOF slave object. ; Called via the TSlave ctor. The Init method is technology specific and is overwritten by derived classes. ; Definition at line 87 of file TSlave.cxx. ◆ Init() [2/2]. void TSlave::Init ; (; TSocket * ; s, . Int_t ; stype . ). protected . Init a PROOF slave object using the connection opened via s. ; Used to avoid double opening when an attempt via TXSlave found a remote proofd. ; Definition at line 259 of file TSlave.cxx. ◆ Interrupt(). void TSlave::Interrupt ; (; Int_t ; type). protectedvirtual . Send interrupt OOB byte to master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 510 of file TSlave.cxx. ◆ IsA(). TClass * TSlave::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 167 of file TSlave.h. ◆ IsSortable(). Bool_t TSlave::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 122 of file TSlave.h. ◆ IsValid(). virtual Bool_t TSlave::IsValid ; (; ); const. inlinevirtual . Definition at line 150 of file TSlave.h. ◆ OldAuthSetup(). Int_t TSlave::OldAuthSetup ; (; Bool_t ; master, . TString ; wconf . ). private . Setup authentication related stuff for old versions. ; Provided for backward compatibility. ; Definition at line 403 of file TSlave.cxx. ◆ operator=(). void TSlave::operator= ; (; const TSlave & ; ). inlineprivate . Definition at line 72 of file TSlave.h. ◆ Ping(). Int_t TSlave::Ping ; (; ). protectedvirtual . Ping the remote master or slave servers. ; Returns 0 if ok, -1 in",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:21125,Availability,error,error,21125," line 510 of file TSlave.cxx. ◆ IsA(). TClass * TSlave::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 167 of file TSlave.h. ◆ IsSortable(). Bool_t TSlave::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 122 of file TSlave.h. ◆ IsValid(). virtual Bool_t TSlave::IsValid ; (; ); const. inlinevirtual . Definition at line 150 of file TSlave.h. ◆ OldAuthSetup(). Int_t TSlave::OldAuthSetup ; (; Bool_t ; master, . TString ; wconf . ). private . Setup authentication related stuff for old versions. ; Provided for backward compatibility. ; Definition at line 403 of file TSlave.cxx. ◆ operator=(). void TSlave::operator= ; (; const TSlave & ; ). inlineprivate . Definition at line 72 of file TSlave.h. ◆ Ping(). Int_t TSlave::Ping ; (; ). protectedvirtual . Ping the remote master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 493 of file TSlave.cxx. ◆ Print(). void TSlave::Print ; (; Option_t * ; option = """"); const. overridevirtual . Printf info about slave. ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 340 of file TSlave.cxx. ◆ SendCoordinator(). TObjString * TSlave::SendCoordinator ; (; Int_t ; kind, . const char * ; msg = 0, . Int_t ; int2 = 0 . ). protectedvirtual . Send message to intermediate coordinator. ; Only meaningful when there is one, i.e. in XPD framework ; Definition at line 643 of file TSlave.cxx. ◆ SendGroupPriority(). virtual Int_t TSlave::SendGroupPriority ; (; const char * ; , . Int_t ;  . ). inlineprotectedvirtual . Definition at line 110 of file TSlave.h. ◆ SetAlias(). void TSlave::SetAlias ; (; const char * ; alias). protectedvirtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 655 of fil",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:22072,Availability,recover,recovered,22072,"ing the remote master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 493 of file TSlave.cxx. ◆ Print(). void TSlave::Print ; (; Option_t * ; option = """"); const. overridevirtual . Printf info about slave. ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 340 of file TSlave.cxx. ◆ SendCoordinator(). TObjString * TSlave::SendCoordinator ; (; Int_t ; kind, . const char * ; msg = 0, . Int_t ; int2 = 0 . ). protectedvirtual . Send message to intermediate coordinator. ; Only meaningful when there is one, i.e. in XPD framework ; Definition at line 643 of file TSlave.cxx. ◆ SendGroupPriority(). virtual Int_t TSlave::SendGroupPriority ; (; const char * ; , . Int_t ;  . ). inlineprotectedvirtual . Definition at line 110 of file TSlave.h. ◆ SetAlias(). void TSlave::SetAlias ; (; const char * ; alias). protectedvirtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 655 of file TSlave.cxx. ◆ SetArchCompiler(). void TSlave::SetArchCompiler ; (; const char * ; ac). inline . Definition at line 158 of file TSlave.h. ◆ SetInputHandler(). void TSlave::SetInputHandler ; (; TFileHandler * ; ih). Adopt and register input handler for this slave. ; Handler will be deleted by the slave. ; Definition at line 393 of file TSlave.cxx. ◆ SetInterruptHandler(). virtual void TSlave::SetInterruptHandler ; (; Bool_t ; ). inlinevirtual . Definition at line 156 of file TSlave.h. ◆ SetROOTVersion(). void TSlave::SetROOTVersion ; (; const char * ; rv). inline . Definition at line 159 of file TSlave.h. ◆ SetSessionTag(). void TSlave::SetSessionTag ; (; const char * ; st). inline . Definition at line 161 of file TSlave.h. ◆ SetSocket(). void TSlave::SetSocket ; (; TSocket * ; s). inlineprotected . Definition at line 112 of file TSlave.h. ◆ SetStatus(). virtual void TSlave::SetStatus ; (; Int_t ; st). inlin",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:5018,Integrability,message,message,5018,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:5559,Integrability,message,message,5559,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:6692,Integrability,message,message,6692,"ct * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:9894,Integrability,message,message,9894,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TCl",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:10267,Integrability,message,message,10267," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectSt",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:11818,Integrability,message,message,11818,"et hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveTy",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:21543,Integrability,message,message,21543,":IsValid ; (; ); const. inlinevirtual . Definition at line 150 of file TSlave.h. ◆ OldAuthSetup(). Int_t TSlave::OldAuthSetup ; (; Bool_t ; master, . TString ; wconf . ). private . Setup authentication related stuff for old versions. ; Provided for backward compatibility. ; Definition at line 403 of file TSlave.cxx. ◆ operator=(). void TSlave::operator= ; (; const TSlave & ; ). inlineprivate . Definition at line 72 of file TSlave.h. ◆ Ping(). Int_t TSlave::Ping ; (; ). protectedvirtual . Ping the remote master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 493 of file TSlave.cxx. ◆ Print(). void TSlave::Print ; (; Option_t * ; option = """"); const. overridevirtual . Printf info about slave. ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 340 of file TSlave.cxx. ◆ SendCoordinator(). TObjString * TSlave::SendCoordinator ; (; Int_t ; kind, . const char * ; msg = 0, . Int_t ; int2 = 0 . ). protectedvirtual . Send message to intermediate coordinator. ; Only meaningful when there is one, i.e. in XPD framework ; Definition at line 643 of file TSlave.cxx. ◆ SendGroupPriority(). virtual Int_t TSlave::SendGroupPriority ; (; const char * ; , . Int_t ;  . ). inlineprotectedvirtual . Definition at line 110 of file TSlave.h. ◆ SetAlias(). void TSlave::SetAlias ; (; const char * ; alias). protectedvirtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 655 of file TSlave.cxx. ◆ SetArchCompiler(). void TSlave::SetArchCompiler ; (; const char * ; ac). inline . Definition at line 158 of file TSlave.h. ◆ SetInputHandler(). void TSlave::SetInputHandler ; (; TFileHandler * ; ih). Adopt and register input handler for this slave. ; Handler will be deleted by the slave. ; Definition at line 393 of file TSlave.cxx. ◆ SetInterruptHandler(). virtual void TSlave::SetInterruptHandler ; (; Bool_t",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:899,Modifiability,inherit,inherited,899,". ROOT: TSlave Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Static Private Attributes |; Friends |; List of all members ; TSlave Class ReferencePROOF » PROOF kernel Libraries. ; Class describing a PROOF worker server. ; It contains information like the workers host name, ordinal number, performance index, socket, etc. Objects of this class can only be created via TProof member functions. ; Definition at line 46 of file TSlave.h. Public Types; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TSlave () override;  Destroy slave. ;  ; virtual void Close (Option_t *opt="""");  Close slave socket. ;  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaves by performance index. ;  ; const char * GetArchCompiler () const;  ; Long64_t GetBytesRead () const;  ; Float_t GetCpuTime () const;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TFileHandler * GetInputHandler () const;  ; const char * GetMsd () ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:3332,Modifiability,inherit,inherited,3332,"const;  ; Float_t GetRealTime () const;  ; const char * GetROOTVersion () const;  ; const char * GetSessionTag () const;  ; Int_t GetSlaveType () const;  ; TSocket * GetSocket () const;  ; Int_t GetStatus () const;  ; const char * GetUser () const;  ; const char * GetWorkDir () const;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; virtual Bool_t IsValid () const;  ; void Print (Option_t *option="""") const override;  Printf info about slave. ;  ; void SetArchCompiler (const char *ac);  ; void SetInputHandler (TFileHandler *ih);  Adopt and register input handler for this slave. ;  ; virtual void SetInterruptHandler (Bool_t);  ; void SetROOTVersion (const char *rv);  ; void SetSessionTag (const char *st);  ; virtual Int_t SetupServ (Int_t stype, const char *conffile);  Init a PROOF slave object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Touch ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &obj",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:4648,Modifiability,inherit,inheritance,4648,"virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:6790,Modifiability,inherit,inherits,6790,"asses. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against goo",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:6907,Modifiability,inherit,inherits,6907," ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessa",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:10850,Modifiability,inherit,inherited,10850,"const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:12199,Modifiability,inherit,inherited,12199,"at (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . Private Member Functions;  TSlave (const char *host, const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF slave object. Called via the TProof ctor. ;  ;  TSlave (const TSlave &s);  ; void Init (const char *host, Int_t port, Int_t stype);  Init a PROOF slave object. ;  ; Int_t OldAuthSet",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:13872,Modifiability,inherit,inherited,13872,". Private Member Functions;  TSlave (const char *host, const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF slave object. Called via the TProof ctor. ;  ;  TSlave (const TSlave &s);  ; void Init (const char *host, Int_t port, Int_t stype);  Init a PROOF slave object. ;  ; Int_t OldAuthSetup (Bool_t master, TString wconf);  Setup authentication related stuff for old versions. ;  ; void operator= (const TSlave &);  . Static Private Member Functions; static TSlave * Create (const char *url, const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t nwk=1);  Static method returning the appropriate TSlave object for the remote server. ;  . Static Private Attributes; static TSlave_t fgTXSlaveHook = 0;  . Friends; class TProof;  ; class TProofLite;  ; class TSlaveLite;  ; class TXSlave;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSlave.h>. Inheritance diagram for TSlave:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESlaveStatus. enum TSlave::ESlaveStatus. EnumeratorkInvalid ; kActive ; kInactive . Definition at line 56 of file TSlave.h. ◆ ESlaveType. enum TSlave::ESlaveType. EnumeratorkMaster ; kSlave . Definition at line 55 of file TSlave.h. ◆ EStatusBits. enum TSlave::EStatusBits. EnumeratorkOutputRequested . Definition at line 57 of file TSlave.h. Constructor & Destructor Documentation. ◆ TSlave() [1/3]. TSlave::TSlave ; (; const TSlave & ; s). inlineprivate . Definition at line 65 of file TSlave.h. ◆ TSlave() [2/3]. TSlave::TSlave ; (; const char * ; host, . const char * ; ord, . Int_t ; perf, . const char * ; image, . TProof * ; proof, . Int_t ; stype, . const char * ; workdir, . const char * ; msd, . Int_t ; = 1 . ). private . Create a PROOF slave o",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:558,Performance,perform,performance,558,". ROOT: TSlave Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Static Private Attributes |; Friends |; List of all members ; TSlave Class ReferencePROOF » PROOF kernel Libraries. ; Class describing a PROOF worker server. ; It contains information like the workers host name, ordinal number, performance index, socket, etc. Objects of this class can only be created via TProof member functions. ; Definition at line 46 of file TSlave.h. Public Types; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TSlave () override;  Destroy slave. ;  ; virtual void Close (Option_t *opt="""");  Close slave socket. ;  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaves by performance index. ;  ; const char * GetArchCompiler () const;  ; Long64_t GetBytesRead () const;  ; Float_t GetCpuTime () const;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TFileHandler * GetInputHandler () const;  ; const char * GetMsd () ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:1731,Performance,perform,performance,1731,".h. Public Types; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TSlave () override;  Destroy slave. ;  ; virtual void Close (Option_t *opt="""");  Close slave socket. ;  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaves by performance index. ;  ; const char * GetArchCompiler () const;  ; Long64_t GetBytesRead () const;  ; Float_t GetCpuTime () const;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TFileHandler * GetInputHandler () const;  ; const char * GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; Int_t GetParallel () const;  ; Int_t GetPerfIdx () const;  ; Int_t GetPort () const;  ; TProof * GetProof () const;  ; const char * GetProofWorkDir () const;  ; Int_t GetProtocol () const;  ; Float_t GetRealTime () const;  ; const char * GetROOTVersion () const;  ; const char * GetSessionTag () const;  ; Int_t GetSlaveType () const;  ; TSocket * GetSocket () const;  ; Int_t GetStatus () const;  ; const char * GetUser () const;  ; const char * GetWorkDir () const;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; virtual Bool_t IsValid () const;  ; ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:15887,Performance,perform,performance,15887,"ject. Called via the TProof ctor. ; Definition at line 45 of file TSlave.cxx. ◆ TSlave() [3/3]. TSlave::TSlave ; (; ). protected . Default constructor used by derived classes. ; Definition at line 65 of file TSlave.cxx. ◆ ~TSlave(). TSlave::~TSlave ; (; ). override . Destroy slave. ; Definition at line 268 of file TSlave.cxx. Member Function Documentation. ◆ Class(). static TClass * TSlave::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSlave::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSlave::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 167 of file TSlave.h. ◆ Close(). void TSlave::Close ; (; Option_t * ; opt = """"). virtual . Close slave socket. ; Reimplemented in TSlaveLite.; Definition at line 276 of file TSlave.cxx. ◆ Compare(). Int_t TSlave::Compare ; (; const TObject * ; obj); const. overridevirtual . Used to sort slaves by performance index. ; Reimplemented from TObject.; Definition at line 309 of file TSlave.cxx. ◆ Create(). TSlave * TSlave::Create ; (; const char * ; url, . const char * ; ord, . Int_t ; perf, . const char * ; image, . TProof * ; proof, . Int_t ; stype, . const char * ; workdir, . const char * ; msd, . Int_t ; nwk = 1 . ). staticprivate . Static method returning the appropriate TSlave object for the remote server. ; Definition at line 441 of file TSlave.cxx. ◆ DeclFileName(). static const char * TSlave::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 167 of file TSlave.h. ◆ FlushSocket(). virtual void TSlave::FlushSocket ; (; ). inlineprotectedvirtual . Definition at line 105 of file TSlave.h. ◆ GetArchCompiler(). const char * TSlave::GetArchCompiler ; (; ); const. inline . Definition at line 147 of file TSlave.h. ◆ GetBytesRead(). Long64_t TSlave::GetBytesRead ; (; ); const. inline . Definition at line 136 of file TSl",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:12101,Safety,abort,abort,12101,"or only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . Private Member Functions;  TSlave (const char *host, const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF s",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:12114,Safety,timeout,timeout,12114,"or only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . Private Member Functions;  TSlave (const char *host, const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF s",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:12135,Safety,abort,abort,12135,"or only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . Private Member Functions;  TSlave (const char *host, const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF s",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:19831,Safety,avoid,avoid,19831,". Int_t TSlave::GetSlaveType ; (; ); const. inline . Definition at line 139 of file TSlave.h. ◆ GetSocket(). TSocket * TSlave::GetSocket ; (; ); const. inline . Definition at line 134 of file TSlave.h. ◆ GetStatus(). Int_t TSlave::GetStatus ; (; ); const. inline . Definition at line 140 of file TSlave.h. ◆ GetUser(). const char * TSlave::GetUser ; (; ); const. inline . Definition at line 128 of file TSlave.h. ◆ GetWorkDir(). const char * TSlave::GetWorkDir ; (; ); const. inline . Definition at line 127 of file TSlave.h. ◆ Init() [1/2]. void TSlave::Init ; (; const char * ; host, . Int_t ; port, . Int_t ; stype . ). private . Init a PROOF slave object. ; Called via the TSlave ctor. The Init method is technology specific and is overwritten by derived classes. ; Definition at line 87 of file TSlave.cxx. ◆ Init() [2/2]. void TSlave::Init ; (; TSocket * ; s, . Int_t ; stype . ). protected . Init a PROOF slave object using the connection opened via s. ; Used to avoid double opening when an attempt via TXSlave found a remote proofd. ; Definition at line 259 of file TSlave.cxx. ◆ Interrupt(). void TSlave::Interrupt ; (; Int_t ; type). protectedvirtual . Send interrupt OOB byte to master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 510 of file TSlave.cxx. ◆ IsA(). TClass * TSlave::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 167 of file TSlave.h. ◆ IsSortable(). Bool_t TSlave::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 122 of file TSlave.h. ◆ IsValid(). virtual Bool_t TSlave::IsValid ; (; ); const. inlinevirtual . Definition at line 150 of file TSlave.h. ◆ OldAuthSetup(). Int_t TSlave::OldAuthSetup ; (; Bool_t ; master, . TString ; wconf . ). private . Setup authentication related stuff for old versions. ; Provided for backward compatibility. ; Definition at line 403 of fi",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:22072,Safety,recover,recovered,22072,"ing the remote master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 493 of file TSlave.cxx. ◆ Print(). void TSlave::Print ; (; Option_t * ; option = """"); const. overridevirtual . Printf info about slave. ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 340 of file TSlave.cxx. ◆ SendCoordinator(). TObjString * TSlave::SendCoordinator ; (; Int_t ; kind, . const char * ; msg = 0, . Int_t ; int2 = 0 . ). protectedvirtual . Send message to intermediate coordinator. ; Only meaningful when there is one, i.e. in XPD framework ; Definition at line 643 of file TSlave.cxx. ◆ SendGroupPriority(). virtual Int_t TSlave::SendGroupPriority ; (; const char * ; , . Int_t ;  . ). inlineprotectedvirtual . Definition at line 110 of file TSlave.h. ◆ SetAlias(). void TSlave::SetAlias ; (; const char * ; alias). protectedvirtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 655 of file TSlave.cxx. ◆ SetArchCompiler(). void TSlave::SetArchCompiler ; (; const char * ; ac). inline . Definition at line 158 of file TSlave.h. ◆ SetInputHandler(). void TSlave::SetInputHandler ; (; TFileHandler * ; ih). Adopt and register input handler for this slave. ; Handler will be deleted by the slave. ; Definition at line 393 of file TSlave.cxx. ◆ SetInterruptHandler(). virtual void TSlave::SetInterruptHandler ; (; Bool_t ; ). inlinevirtual . Definition at line 156 of file TSlave.h. ◆ SetROOTVersion(). void TSlave::SetROOTVersion ; (; const char * ; rv). inline . Definition at line 159 of file TSlave.h. ◆ SetSessionTag(). void TSlave::SetSessionTag ; (; const char * ; st). inline . Definition at line 161 of file TSlave.h. ◆ SetSocket(). void TSlave::SetSocket ; (; TSocket * ; s). inlineprotected . Definition at line 112 of file TSlave.h. ◆ SetStatus(). virtual void TSlave::SetStatus ; (; Int_t ; st). inlin",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:23636,Safety,abort,abort,23636," ◆ SetROOTVersion(). void TSlave::SetROOTVersion ; (; const char * ; rv). inline . Definition at line 159 of file TSlave.h. ◆ SetSessionTag(). void TSlave::SetSessionTag ; (; const char * ; st). inline . Definition at line 161 of file TSlave.h. ◆ SetSocket(). void TSlave::SetSocket ; (; TSocket * ; s). inlineprotected . Definition at line 112 of file TSlave.h. ◆ SetStatus(). virtual void TSlave::SetStatus ; (; Int_t ; st). inlineprotectedvirtual . Definition at line 113 of file TSlave.h. ◆ SetTXSlaveHook(). void TSlave::SetTXSlaveHook ; (; TSlave_t ; xslavehook). static . Set hook to TXSlave ctor. ; Definition at line 665 of file TSlave.cxx. ◆ SetupServ(). Int_t TSlave::SetupServ ; (; Int_t ; stype, . const char * ; conffile . ). virtual . Init a PROOF slave object. ; Called via the TSlave ctor. The Init method is technology specific and is overwritten by derived classes. ; Reimplemented in TSlaveLite.; Definition at line 178 of file TSlave.cxx. ◆ StopProcess(). void TSlave::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout . ). protectedvirtual . Sent stop/abort request to PROOF server. ; Definition at line 629 of file TSlave.cxx. ◆ Streamer(). void TSlave::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TSlaveLite. ◆ StreamerNVirtual(). void TSlave::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 167 of file TSlave.h. ◆ Touch(). virtual void TSlave::Touch ; (; ). inlinevirtual . Definition at line 165 of file TSlave.h. Friends And Related Symbol Documentation. ◆ TProof. friend class TProof. friend . Definition at line 48 of file TSlave.h. ◆ TProofLite. friend class TProofLite. friend . Definition at line 49 of file TSlave.h. ◆ TSlaveLite. friend class TSlaveLite. friend . Definition at line 50 of file TSlave.h. ◆ TXSlave. friend class TXSlave. friend . Definition at line 51 of file TSlave.h. Member Data Documentation. ◆ fArchComp. TStr",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:23653,Safety,timeout,timeout,23653,":SetROOTVersion ; (; const char * ; rv). inline . Definition at line 159 of file TSlave.h. ◆ SetSessionTag(). void TSlave::SetSessionTag ; (; const char * ; st). inline . Definition at line 161 of file TSlave.h. ◆ SetSocket(). void TSlave::SetSocket ; (; TSocket * ; s). inlineprotected . Definition at line 112 of file TSlave.h. ◆ SetStatus(). virtual void TSlave::SetStatus ; (; Int_t ; st). inlineprotectedvirtual . Definition at line 113 of file TSlave.h. ◆ SetTXSlaveHook(). void TSlave::SetTXSlaveHook ; (; TSlave_t ; xslavehook). static . Set hook to TXSlave ctor. ; Definition at line 665 of file TSlave.cxx. ◆ SetupServ(). Int_t TSlave::SetupServ ; (; Int_t ; stype, . const char * ; conffile . ). virtual . Init a PROOF slave object. ; Called via the TSlave ctor. The Init method is technology specific and is overwritten by derived classes. ; Reimplemented in TSlaveLite.; Definition at line 178 of file TSlave.cxx. ◆ StopProcess(). void TSlave::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout . ). protectedvirtual . Sent stop/abort request to PROOF server. ; Definition at line 629 of file TSlave.cxx. ◆ Streamer(). void TSlave::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TSlaveLite. ◆ StreamerNVirtual(). void TSlave::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 167 of file TSlave.h. ◆ Touch(). virtual void TSlave::Touch ; (; ). inlinevirtual . Definition at line 165 of file TSlave.h. Friends And Related Symbol Documentation. ◆ TProof. friend class TProof. friend . Definition at line 48 of file TSlave.h. ◆ TProofLite. friend class TProofLite. friend . Definition at line 49 of file TSlave.h. ◆ TSlaveLite. friend class TSlaveLite. friend . Definition at line 50 of file TSlave.h. ◆ TXSlave. friend class TXSlave. friend . Definition at line 51 of file TSlave.h. Member Data Documentation. ◆ fArchComp. TString TSlave::fArchComp. protected ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:23695,Safety,abort,abort,23695,"efinition at line 159 of file TSlave.h. ◆ SetSessionTag(). void TSlave::SetSessionTag ; (; const char * ; st). inline . Definition at line 161 of file TSlave.h. ◆ SetSocket(). void TSlave::SetSocket ; (; TSocket * ; s). inlineprotected . Definition at line 112 of file TSlave.h. ◆ SetStatus(). virtual void TSlave::SetStatus ; (; Int_t ; st). inlineprotectedvirtual . Definition at line 113 of file TSlave.h. ◆ SetTXSlaveHook(). void TSlave::SetTXSlaveHook ; (; TSlave_t ; xslavehook). static . Set hook to TXSlave ctor. ; Definition at line 665 of file TSlave.cxx. ◆ SetupServ(). Int_t TSlave::SetupServ ; (; Int_t ; stype, . const char * ; conffile . ). virtual . Init a PROOF slave object. ; Called via the TSlave ctor. The Init method is technology specific and is overwritten by derived classes. ; Reimplemented in TSlaveLite.; Definition at line 178 of file TSlave.cxx. ◆ StopProcess(). void TSlave::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout . ). protectedvirtual . Sent stop/abort request to PROOF server. ; Definition at line 629 of file TSlave.cxx. ◆ Streamer(). void TSlave::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TSlaveLite. ◆ StreamerNVirtual(). void TSlave::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 167 of file TSlave.h. ◆ Touch(). virtual void TSlave::Touch ; (; ). inlinevirtual . Definition at line 165 of file TSlave.h. Friends And Related Symbol Documentation. ◆ TProof. friend class TProof. friend . Definition at line 48 of file TSlave.h. ◆ TProofLite. friend class TProofLite. friend . Definition at line 49 of file TSlave.h. ◆ TSlaveLite. friend class TSlaveLite. friend . Definition at line 50 of file TSlave.h. ◆ TXSlave. friend class TXSlave. friend . Definition at line 51 of file TSlave.h. Member Data Documentation. ◆ fArchComp. TString TSlave::fArchComp. protected . Definition at line 102 of file TSlave.h. ◆ fBytesR",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:6421,Security,hash,hash,6421,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:13301,Security,authenticat,authentication,13301,"t, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . Private Member Functions;  TSlave (const char *host, const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF slave object. Called via the TProof ctor. ;  ;  TSlave (const TSlave &s);  ; void Init (const char *host, Int_t port, Int_t stype);  Init a PROOF slave object. ;  ; Int_t OldAuthSetup (Bool_t master, TString wconf);  Setup authentication related stuff for old versions. ;  ; void operator= (const TSlave &);  . Static Private Member Functions; static TSlave * Create (const char *url, const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t nwk=1);  Static method returning the appropriate TSlave object for the remote server. ;  . Static Private Attributes; static TSlave_t fgTXSlaveHook = 0;  . Friends; class TProof;  ; class TProofLite;  ; class TSlaveLite;  ; class TXSlave;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSlave.h>. Inheritance diagram for TSlave:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESlaveStatus. enum TSlave::ESlaveStatus. EnumeratorkInvalid ; kActive ; kInactive . Definition at line 56 of file TSlave.h. ◆ ESlaveType. enum TSlave::ESlaveType. ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlave.html:20745,Security,authenticat,authentication,20745," a PROOF slave object using the connection opened via s. ; Used to avoid double opening when an attempt via TXSlave found a remote proofd. ; Definition at line 259 of file TSlave.cxx. ◆ Interrupt(). void TSlave::Interrupt ; (; Int_t ; type). protectedvirtual . Send interrupt OOB byte to master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 510 of file TSlave.cxx. ◆ IsA(). TClass * TSlave::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 167 of file TSlave.h. ◆ IsSortable(). Bool_t TSlave::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 122 of file TSlave.h. ◆ IsValid(). virtual Bool_t TSlave::IsValid ; (; ); const. inlinevirtual . Definition at line 150 of file TSlave.h. ◆ OldAuthSetup(). Int_t TSlave::OldAuthSetup ; (; Bool_t ; master, . TString ; wconf . ). private . Setup authentication related stuff for old versions. ; Provided for backward compatibility. ; Definition at line 403 of file TSlave.cxx. ◆ operator=(). void TSlave::operator= ; (; const TSlave & ; ). inlineprivate . Definition at line 72 of file TSlave.h. ◆ Ping(). Int_t TSlave::Ping ; (; ). protectedvirtual . Ping the remote master or slave servers. ; Returns 0 if ok, -1 in case of error ; Definition at line 493 of file TSlave.cxx. ◆ Print(). void TSlave::Print ; (; Option_t * ; option = """"); const. overridevirtual . Printf info about slave. ; Reimplemented from TObject.; Reimplemented in TSlaveLite.; Definition at line 340 of file TSlave.cxx. ◆ SendCoordinator(). TObjString * TSlave::SendCoordinator ; (; Int_t ; kind, . const char * ; msg = 0, . Int_t ; int2 = 0 . ). protectedvirtual . Send message to intermediate coordinator. ; Only meaningful when there is one, i.e. in XPD framework ; Definition at line 643 of file TSlave.cxx. ◆ SendGroupPriority(). virtual Int_t TSlave::SendGroupPriority ; (; const char * ",MatchSource.WIKI,doc/master/classTSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlave.html
https://root.cern/doc/master/classTSlaveInfo.html:3721,Availability,error,error,3721,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:3810,Availability,error,error,3810,"gs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:3965,Availability,error,error,3965,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the uniqu",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:4262,Availability,error,error,4262,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:8454,Availability,error,error,8454,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:3727,Integrability,message,message,3727,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:4268,Integrability,message,message,4268,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:5401,Integrability,message,message,5401,"ct * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality t",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:8460,Integrability,message,message,8460,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:8833,Integrability,message,message,8833," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Publi",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:417,Modifiability,inherit,inherited,417,". ROOT: TSlaveInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TSlaveInfo Class Reference. . Definition at line 212 of file TProof.h. Public Types; enum  ESlaveStatus { kActive; , kNotActive; , kBad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSlaveInfo (const char *ordinal="""", const char *host="""", Int_t perfidx=0, const char *msd="""", const char *datadir="""");  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaveinfos by ordinal. ;  ; const char * GetDataDir () const;  ; const char * GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; SysInfo_t GetSysInfo () const;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Used to compare slaveinfos by ordinal. ;  ; Bool_t IsSortable () const override;  ; void Print (Option_t *option="""") const override;  Print slave info. ;  ; void SetOrdinal (const char *ord);  ; void SetStatus (ESlaveStatus stat);  ; void SetSysInfo (SysInfo_t si);  Setter for fSysInfo. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerN",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:2041,Modifiability,inherit,inherited,2041," << ( 13 )). };  . Public Member Functions;  TSlaveInfo (const char *ordinal="""", const char *host="""", Int_t perfidx=0, const char *msd="""", const char *datadir="""");  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaveinfos by ordinal. ;  ; const char * GetDataDir () const;  ; const char * GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; SysInfo_t GetSysInfo () const;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Used to compare slaveinfos by ordinal. ;  ; Bool_t IsSortable () const override;  ; void Print (Option_t *option="""") const override;  Print slave info. ;  ; void SetOrdinal (const char *ord);  ; void SetStatus (ESlaveStatus stat);  ; void SetSysInfo (SysInfo_t si);  Setter for fSysInfo. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  ",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:3357,Modifiability,inherit,inheritance,3357,"virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:5499,Modifiability,inherit,inherits,5499,"asses. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t No",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:5616,Modifiability,inherit,inherits,5616," ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:9334,Modifiability,inherit,inherited,9334,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TString fDataDir;  ; TString fHostName;  ; TString fMsd;  ; TString fOrdinal;  ; Int_t fPerfIndex;  ; ESlaveStatus fStatus;  ; SysInfo_t fSysInfo;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TProof.h>. Inheri",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:10036,Modifiability,inherit,inherited,10036,"nctions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TString fDataDir;  ; TString fHostName;  ; TString fMsd;  ; TString fOrdinal;  ; Int_t fPerfIndex;  ; ESlaveStatus fStatus;  ; SysInfo_t fSysInfo;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TProof.h>. Inheritance diagram for TSlaveInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESlaveStatus. enum TSlaveInfo::ESlaveStatus. EnumeratorkActive ; kNotActive ; kBad . Definition at line 214 of file TProof.h. Constructor & Destructor Documentation. ◆ TSlaveInfo(). TSlaveInfo::TSlaveInfo ; (; const char * ; ordinal = """", . const char * ; host = """", . Int_t ; perfidx = 0, . const char * ; msd = """", . const char * ; datadir = """" . ). inline . Definition at line 224 of file TProof.h. Member Function Documentation. ◆ Class(). static TClass * TSlaveInfo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSlaveInfo::Class_Name ; (; ). static . ReturnsName of this cl",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:10135,Modifiability,inherit,inherited,10135,"nctions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TString fDataDir;  ; TString fHostName;  ; TString fMsd;  ; TString fOrdinal;  ; Int_t fPerfIndex;  ; ESlaveStatus fStatus;  ; SysInfo_t fSysInfo;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TProof.h>. Inheritance diagram for TSlaveInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESlaveStatus. enum TSlaveInfo::ESlaveStatus. EnumeratorkActive ; kNotActive ; kBad . Definition at line 214 of file TProof.h. Constructor & Destructor Documentation. ◆ TSlaveInfo(). TSlaveInfo::TSlaveInfo ; (; const char * ; ordinal = """", . const char * ; host = """", . Int_t ; perfidx = 0, . const char * ; msd = """", . const char * ; datadir = """" . ). inline . Definition at line 224 of file TProof.h. Member Function Documentation. ◆ Class(). static TClass * TSlaveInfo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSlaveInfo::Class_Name ; (; ). static . ReturnsName of this cl",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveInfo.html:5130,Security,hash,hash,5130,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the co",MatchSource.WIKI,doc/master/classTSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html
https://root.cern/doc/master/classTSlaveLite.html:4448,Availability,error,error,4448,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:4537,Availability,error,error,4537,"gs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:4692,Availability,error,error,4692,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the uniqu",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:4989,Availability,error,error,4989,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:9324,Availability,error,error,9324,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSlave; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:4454,Integrability,message,message,4454,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:4995,Integrability,message,message,4995,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:6128,Integrability,message,message,6128,"ct * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:9330,Integrability,message,message,9330,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSlave; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:9703,Integrability,message,message,9703," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSlave; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t Get",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:12651,Integrability,message,message,12651,"ingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . #include <TSlave",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:1312,Modifiability,inherit,inherited,1312," Class ReferencePROOF » PROOF kernel Libraries. ; Version of TSlave for local worker servers. ; See TSlave for details. ; Definition at line 31 of file TSlaveLite.h. Public Member Functions;  TSlaveLite (const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF slave object. Called via the TProof ctor. ;  ;  ~TSlaveLite () override;  Destroy slave. ;  ; void Close (Option_t *opt="""") override;  Close slave socket. ;  ; void DoError (int level, const char *location, const char *fmt, va_list va) const override;  Interface to ErrorHandler (protected). ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Printf info about slave. ;  ; Int_t SetupServ (Int_t stype, const char *conffile) override;  Init a PROOF slave object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSlave;  ~TSlave () override;  Destroy slave. ;  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaves by performance index. ;  ; const char * GetArchCompiler () const;  ; Long64_t GetBytesRead () const;  ; Float_t GetCpuTime () const;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TFileHandler * GetInputHandler () const;  ; const char * GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; Int_t GetParallel () const;  ; Int_t GetPerfIdx () const;  ; Int_t GetPort () const;  ; TProof * GetProof () const;  ; const char * GetProofWorkDir () const;  ; Int_t GetProtocol () const;  ; Float_t GetRealTime () const;  ; const char * GetROOTVersion () const;  ; const char * GetSessionTag () const;  ; Int_t GetSlaveType () const;  ; TSocket * GetSocket () const;  ; Int_t GetStatus () const;  ; const char * GetUser () const;  ; const char * GetWork",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:2768,Modifiability,inherit,inherited,2768,"etInputHandler () const;  ; const char * GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; Int_t GetParallel () const;  ; Int_t GetPerfIdx () const;  ; Int_t GetPort () const;  ; TProof * GetProof () const;  ; const char * GetProofWorkDir () const;  ; Int_t GetProtocol () const;  ; Float_t GetRealTime () const;  ; const char * GetROOTVersion () const;  ; const char * GetSessionTag () const;  ; Int_t GetSlaveType () const;  ; TSocket * GetSocket () const;  ; Int_t GetStatus () const;  ; const char * GetUser () const;  ; const char * GetWorkDir () const;  ; Bool_t IsSortable () const override;  ; virtual Bool_t IsValid () const;  ; void SetArchCompiler (const char *ac);  ; void SetInputHandler (TFileHandler *ih);  Adopt and register input handler for this slave. ;  ; virtual void SetInterruptHandler (Bool_t);  ; void SetROOTVersion (const char *rv);  ; void SetSessionTag (const char *st);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Touch ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object us",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:4084,Modifiability,inherit,inheritance,4084,"virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:6226,Modifiability,inherit,inherits,6226,"asses. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against goo",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:6343,Modifiability,inherit,inherits,6343," ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessa",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:10204,Modifiability,inherit,inherited,10204,"Virtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSlave; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void Init ();  Init a PROOF worker object. Called via the TSlaveLite ctor. ;  . Private Attributes; TSignalHandler * fIntHandler;  ; Bool_t fValid;  . Friends; class TProof;  . Additional Inherited Members;  Publi",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:10496,Modifiability,inherit,inherited,10496,"een invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSlave; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void Init ();  Init a PROOF worker object. Called via the TSlaveLite ctor. ;  . Private Attributes; TSignalHandler * fIntHandler;  ; Bool_t fValid;  . Friends; class TProof;  . Additional Inherited Members;  Public Types inherited from TSlave; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00f",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:11229,Modifiability,inherit,inherited,11229,"SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void Init ();  Init a PROOF worker object. Called via the TSlaveLite ctor. ;  . Private Attributes; TSignalHandler * fIntHandler;  ; Bool_t fValid;  . Friends; class TProof;  . Additional Inherited Members;  Public Types inherited from TSlave; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:11434,Modifiability,inherit,inherited,11434,"SetTXSlaveHook (TSlave_t xslavehook);  Set hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void Init ();  Init a PROOF worker object. Called via the TSlaveLite ctor. ;  . Private Attributes; TSignalHandler * fIntHandler;  ; Bool_t fValid;  . Friends; class TProof;  . Additional Inherited Members;  Public Types inherited from TSlave; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:12075,Modifiability,inherit,inherited,12075,"id;  . Friends; class TProof;  . Additional Inherited Members;  Public Types inherited from TSlave; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:12174,Modifiability,inherit,inherited,12174,"id;  . Friends; class TProof;  . Additional Inherited Members;  Public Types inherited from TSlave; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:13032,Modifiability,inherit,inherited,13032," (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . #include <TSlaveLite.h>. Inheritance diagram for TSlaveLite:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSlaveLite(). TSlaveLite::TSlaveLite ; (; const char * ; ord, . Int_t ; perf, . const char * ; image, . TProof * ; proof, . Int_t ; stype, . const char * ; workdir, . const char * ; msd, . Int_t ; = 1 . ). Create a PROOF slave object. Called via the TProof ctor. ; Definition at line 63 of file TSlaveLite.cxx. ◆ ~TSlaveLite(). TSlaveLite::~TSlaveLite ; (; ). override . Destroy slave. ; Definition at line 148 of file TSlaveLite.cxx. Member Function Documentation. ◆ Class(). static TClass * TSl",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:13101,Modifiability,inherit,inherited,13101," (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . #include <TSlaveLite.h>. Inheritance diagram for TSlaveLite:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSlaveLite(). TSlaveLite::TSlaveLite ; (; const char * ; ord, . Int_t ; perf, . const char * ; image, . TProof * ; proof, . Int_t ; stype, . const char * ; workdir, . const char * ; msd, . Int_t ; = 1 . ). Create a PROOF slave object. Called via the TProof ctor. ; Definition at line 63 of file TSlaveLite.cxx. ◆ ~TSlaveLite(). TSlaveLite::~TSlaveLite ; (; ). override . Destroy slave. ; Definition at line 148 of file TSlaveLite.cxx. Member Function Documentation. ◆ Class(). static TClass * TSl",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:1453,Performance,perform,performance,1453,"ition at line 31 of file TSlaveLite.h. Public Member Functions;  TSlaveLite (const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF slave object. Called via the TProof ctor. ;  ;  ~TSlaveLite () override;  Destroy slave. ;  ; void Close (Option_t *opt="""") override;  Close slave socket. ;  ; void DoError (int level, const char *location, const char *fmt, va_list va) const override;  Interface to ErrorHandler (protected). ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Printf info about slave. ;  ; Int_t SetupServ (Int_t stype, const char *conffile) override;  Init a PROOF slave object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSlave;  ~TSlave () override;  Destroy slave. ;  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaves by performance index. ;  ; const char * GetArchCompiler () const;  ; Long64_t GetBytesRead () const;  ; Float_t GetCpuTime () const;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TFileHandler * GetInputHandler () const;  ; const char * GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; Int_t GetParallel () const;  ; Int_t GetPerfIdx () const;  ; Int_t GetPort () const;  ; TProof * GetProof () const;  ; const char * GetProofWorkDir () const;  ; Int_t GetProtocol () const;  ; Float_t GetRealTime () const;  ; const char * GetROOTVersion () const;  ; const char * GetSessionTag () const;  ; Int_t GetSlaveType () const;  ; TSocket * GetSocket () const;  ; Int_t GetStatus () const;  ; const char * GetUser () const;  ; const char * GetWorkDir () const;  ; Bool_t IsSortable () const override;  ; virtual Bool_t IsValid () const;  ; void SetArchCompiler (const char *a",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:12934,Safety,abort,abort,12934," , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . #include <TSlaveLite.h>. Inheritance diagram for TSlaveLite:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSlaveLite(). TSlaveLite::TSlaveLite ; (; const char * ; ord, . Int_t ; perf, . const char * ; image, . TPr",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:12947,Safety,timeout,timeout,12947," , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . #include <TSlaveLite.h>. Inheritance diagram for TSlaveLite:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSlaveLite(). TSlaveLite::TSlaveLite ; (; const char * ; ord, . Int_t ; perf, . const char * ; image, . TPr",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:12968,Safety,abort,abort,12968," , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSlave;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; void MakeZombie ();  ;  Protected Attributes inherited from TSlave; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveType fSlaveType;  ; TSocket * fSocket;  ; Int_t fStatus;  ; TString fUser;  ; TString fWorkDir;  . #include <TSlaveLite.h>. Inheritance diagram for TSlaveLite:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSlaveLite(). TSlaveLite::TSlaveLite ; (; const char * ; ord, . Int_t ; perf, . const char * ; image, . TPr",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlaveLite.html:5857,Security,hash,hash,5857,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html
https://root.cern/doc/master/classTSlider.html:28738,Availability,error,error,28738,"eckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:28827,Availability,error,error,28827,"p (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:28982,Availability,error,error,28982,";  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t Inheri",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:29159,Availability,error,error,29159,"const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:32288,Availability,error,error,32288,"r delete (void *ptr, void *vp);  Only called by placement new when throwing an exception. ;  ; void operator delete[] (void *ptr);  Operator delete []. ;  ; void operator delete[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:44187,Availability,down,down,44187,"cuted when slider is changed ;  ; Double_t fMinimum {0};  Slider minimum value in [0,1]. ;  ; TObject * fObject {nullptr};  !Pointer to associated object ;  ;  Protected Attributes inherited from TPad; Bool_t fAbsCoord;  Use absolute coordinates. ;  ; Double_t fAbsHNDC;  Absolute Height of pad along Y in NDC. ;  ; Double_t fAbsPixeltoXk;  Conversion coefficient for absolute pixel to X World. ;  ; Double_t fAbsPixeltoYk;  Conversion coefficient for absolute pixel to Y World. ;  ; Double_t fAbsWNDC;  Absolute Width of pad along X in NDC. ;  ; Double_t fAbsXlowNDC;  Absolute X top left corner of pad in NDC [0,1]. ;  ; Double_t fAbsYlowNDC;  Absolute Y top left corner of pad in NDC [0,1]. ;  ; Double_t fAspectRatio;  ratio of w/h in case of fixed ratio ;  ; Short_t fBorderMode;  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize;  pad bordersize in pixels ;  ; TCanvas * fCanvas {nullptr};  ! Pointer to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear s",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:831,Deployability,release,released,831,". ROOT: TSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSlider Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A specialized TPad including a TSliderBox object. ; The TSliderBox can be moved in the pad.; Slider drawing options include the possibility to change the slider starting and ending positions or only one of them.; The current slider position can be retrieved via the functions TSlider::GetMinimum and TSlider::GetMaximum These two functions return numbers in the range [0,1].; If a method has been set (via TSlider::SetMethod), the expression is executed via the interpreter when the button 1 is released.; if no method has been set, and an object is referenced (TSlider::SetObject has been called), while the slider is being moved/resized, the object ExecuteEvent function is called. Example 1 using TSlider::SetMethod; macro xyslider.C; void xyslider(); {; // Example of macro featuring two sliders; TFile *f = new TFile(""hsimple.root"");; TH2F *hpxpy = (TH2F*)f->Get(""hpxpy"");; TCanvas *c1 = new TCanvas(""c1"");; TPad *pad = new TPad(""pad"",""Color plot pad"",0.1,0.1,0.98,0.98);; pad->Draw();; pad->cd();; hpxpy->Draw(""COLZ"");; c1->cd();; ; // Create two sliders in main canvas. When button1 will be released; // the macro action.C will be called.; TSlider *xslider = new TSlider(""xslider"",""x"",0.1,0.02,0.98,0.08);; xslider->SetMethod("".x action.C"");; TSlider *yslider = new TSlider(""yslider"",""y"",0.02,0.1,0.06,0.98);; yslider->SetMethod("".x action.C"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Defini",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:1434,Deployability,release,released,1434,"awing options include the possibility to change the slider starting and ending positions or only one of them.; The current slider position can be retrieved via the functions TSlider::GetMinimum and TSlider::GetMaximum These two functions return numbers in the range [0,1].; If a method has been set (via TSlider::SetMethod), the expression is executed via the interpreter when the button 1 is released.; if no method has been set, and an object is referenced (TSlider::SetObject has been called), while the slider is being moved/resized, the object ExecuteEvent function is called. Example 1 using TSlider::SetMethod; macro xyslider.C; void xyslider(); {; // Example of macro featuring two sliders; TFile *f = new TFile(""hsimple.root"");; TH2F *hpxpy = (TH2F*)f->Get(""hpxpy"");; TCanvas *c1 = new TCanvas(""c1"");; TPad *pad = new TPad(""pad"",""Color plot pad"",0.1,0.1,0.98,0.98);; pad->Draw();; pad->cd();; hpxpy->Draw(""COLZ"");; c1->cd();; ; // Create two sliders in main canvas. When button1 will be released; // the macro action.C will be called.; TSlider *xslider = new TSlider(""xslider"",""x"",0.1,0.02,0.98,0.08);; xslider->SetMethod("".x action.C"");; TSlider *yslider = new TSlider(""yslider"",""y"",0.02,0.1,0.06,0.98);; yslider->SetMethod("".x action.C"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::TPadTPad()Pad default constructor.Definition TPad.cxx:132; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:24648,Deployability,update,update,24648,"rride;  ; void SetToolTipText (const char *text, Long_t delayms=1000) override;  Set tool tip text associated with this pad. ;  ; void SetVertical (Bool_t vert=kTRUE) override;  Set pad vertical (default) or horizontal. ;  ; void SetView (TView *view=nullptr) override;  Set the current TView. Delete previous view if view=0. ;  ; void SetViewer3D (TVirtualViewer3D *viewer3d) override;  ; void ShowGuidelines (TObject *object, const Int_t event, const char mode='i', const bool cling=true) override;  Shows lines to indicate if a TAttBBox2D object is aligned to the center or to another object, shows distance arrows if two objects on screen have the same distance to another object Call from primitive in Execute Event, in ButtonMotion after the new coordinates have been set, to 'stick' once when button is up to delete lines. ;  ; virtual void StartEditing ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update () override;  Update pad. ;  ; void UpdateAsync () override;  Asynchronous pad update. ;  ; void UseCurrentStyle () override;  Force a copy of current style for all objects in pad. ;  ; Int_t UtoAbsPixel (Double_t u) const override;  Convert X NDC to absolute pixel. ;  ; Int_t UtoPixel (Double_t u) const override;  Convert X NDC to pixel. ;  ; Int_t VtoAbsPixel (Double_t v) const override;  Convert Y NDC to absolute pixel. ;  ; Int_t VtoPixel (Double_t v) const override;  Convert Y NDC to pixel. ;  ; TObject * WaitPrimitive (const char *pname="""", const char *emode="""") override;  Loop and sleep until a primitive with name=pname is found in the pad. ;  ; virtual void x3d (Option_t *type="""");  Deprecated: use TPad::GetViewer3D() instead. ;  ; Int_t XtoAbsPixel (Double_t x) const override;  Convert X coordinate to absolute pixel. ;  ; Double_t XtoPad (Double_t x) const override;  Convert x from X to pad. ;  ; Int_t XtoPixel (Double_t x) const override;  Convert X coordinate to pixel. ;  ; virtual void XYtoAbsPixel (Double_t x, Double_t y, Int_t",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:6850,Integrability,rout,routine,6850,"void Add (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE) override;  Add an object to list of primitives with speicified draw option When. ;  ; void AddExec (const char *name, const char *command) override;  Add a new TExec object to the list of Execs. ;  ; void AddFirst (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE) override;  Add an object as first in list of primitives with speicified draw option When. ;  ; virtual void AutoExec ();  Execute the list of Execs when a pad event occurs. ;  ; void Browse (TBrowser *b) override;  Browse pad. ;  ; TLegend * BuildLegend (Double_t x1=0.3, Double_t y1=0.21, Double_t x2=0.3, Double_t y2=0.21, const char *title="""", Option_t *option="""") override;  Build a legend from the graphical objects in the pad. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set Current pad. ;  ; void Clear (Option_t *option="""") override;  Delete all pad primitives. ;  ; Int_t Clip (Double_t *x, Double_t *y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt) override;  Clipping routine: Cohen Sutherland algorithm. ;  ; virtual Int_t Clip (Float_t *x, Float_t *y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt);  Clipping routine: Cohen Sutherland algorithm. ;  ; virtual Int_t ClippingCode (Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2);  Compute the endpoint codes for TPad::Clip. ;  ; virtual Int_t ClipPolygon (Int_t n, Double_t *x, Double_t *y, Int_t nn, Double_t *xc, Double_t *yc, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt);  Clip polygon using the Sutherland-Hodgman algorithm. ;  ; void Close (Option_t *option="""") override;  Delete all primitives in pad and pad itself. ;  ; virtual void Closed ();  ; void CloseToolTip (TObject *tip) override;  Hide tool tip. ;  ; void CopyPixmap () override;  Copy the pixmap of the pad to the canvas. ;  ; void CopyPixmaps () override;  Copy the sub-pixmaps of the pad to the canvas. ;  ; TObject * Crea",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:7011,Integrability,rout,routine,7011,"(const char *name, const char *command) override;  Add a new TExec object to the list of Execs. ;  ; void AddFirst (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE) override;  Add an object as first in list of primitives with speicified draw option When. ;  ; virtual void AutoExec ();  Execute the list of Execs when a pad event occurs. ;  ; void Browse (TBrowser *b) override;  Browse pad. ;  ; TLegend * BuildLegend (Double_t x1=0.3, Double_t y1=0.21, Double_t x2=0.3, Double_t y2=0.21, const char *title="""", Option_t *option="""") override;  Build a legend from the graphical objects in the pad. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set Current pad. ;  ; void Clear (Option_t *option="""") override;  Delete all pad primitives. ;  ; Int_t Clip (Double_t *x, Double_t *y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt) override;  Clipping routine: Cohen Sutherland algorithm. ;  ; virtual Int_t Clip (Float_t *x, Float_t *y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt);  Clipping routine: Cohen Sutherland algorithm. ;  ; virtual Int_t ClippingCode (Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2);  Compute the endpoint codes for TPad::Clip. ;  ; virtual Int_t ClipPolygon (Int_t n, Double_t *x, Double_t *y, Int_t nn, Double_t *xc, Double_t *yc, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt);  Clip polygon using the Sutherland-Hodgman algorithm. ;  ; void Close (Option_t *option="""") override;  Delete all primitives in pad and pad itself. ;  ; virtual void Closed ();  ; void CloseToolTip (TObject *tip) override;  Hide tool tip. ;  ; void CopyPixmap () override;  Copy the pixmap of the pad to the canvas. ;  ; void CopyPixmaps () override;  Copy the sub-pixmaps of the pad to the canvas. ;  ; TObject * CreateToolTip (const TBox *b, const char *text, Long_t delayms) override;  Create a tool tip and return its pointer. ;  ; void DeleteExec (const char *name) override;  R",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:16166,Integrability,rout,routine,16166,"to X. ;  ; Double_t PadtoY (Double_t y) const override;  Convert y from pad to Y. ;  ; void Paint (Option_t *option="""") override;  Paint all primitives in pad. ;  ; void PaintBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option="""") override;  Paint box in CurrentPad World coordinates. ;  ; void PaintFillArea (Int_t n, Double_t *x, Double_t *y, Option_t *option="""") override;  Paint fill area in CurrentPad World coordinates. ;  ; void PaintFillArea (Int_t n, Float_t *x, Float_t *y, Option_t *option="""") override;  ; void PaintFillAreaHatches (Int_t n, Double_t *x, Double_t *y, Int_t FillStyle);  This function paints hatched fill area according to the FillStyle value The convention for the Hatch is the following: ;  ; void PaintFillAreaNDC (Int_t n, Double_t *x, Double_t *y, Option_t *option="""") override;  Paint fill area in CurrentPad NDC coordinates. ;  ; void PaintHatches (Double_t dy, Double_t angle, Int_t nn, Double_t *xx, Double_t *yy);  This routine draw hatches inclined with the angle ""angle"" and spaced of ""dy"" in normalized device coordinates in the surface defined by n,xx,yy. ;  ; void PaintLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Paint line in CurrentPad World coordinates. ;  ; void PaintLine3D (Double_t *p1, Double_t *p2) override;  Paint 3-D line in the CurrentPad. ;  ; void PaintLine3D (Float_t *p1, Float_t *p2) override;  Paint 3-D line in the CurrentPad. ;  ; void PaintLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2) override;  Paint line in normalized coordinates. ;  ; void PaintModified () override;  Traverse pad hierarchy and (re)paint only modified pads. ;  ; void PaintPadFrame (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) override;  Paint histogram/graph frame. ;  ; void PaintPolyLine (Int_t n, Double_t *x, Double_t *y, Option_t *option="""") override;  Paint polyline in CurrentPad World coordinates. ;  ; void PaintPolyLine (Int_t n, Float_t *x, Float_t *y, Option_t *option=""""",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:28744,Integrability,message,message,28744,"eckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:29165,Integrability,message,message,29165,"const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:29955,Integrability,message,message,29955,"method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual B",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:32294,Integrability,message,message,32294,"r delete (void *ptr, void *vp);  Only called by placement new when throwing an exception. ;  ; void operator delete[] (void *ptr);  Operator delete []. ;  ; void operator delete[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:32485,Integrability,message,message,32485,"id *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:51180,Integrability,depend,depending,51180,"00000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:5239,Modifiability,inherit,inherited,5239,"er default constructor. ;  ;  TSlider (const char *name, const char *title, Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=16, Short_t bordersize=2, Short_t bordermode=-1);  Slider normal constructor. ;  ;  ~TSlider () override;  slider default destructor. ;  ; Double_t GetMaximum () const;  ; virtual const char * GetMethod () const;  ; Double_t GetMinimum () const;  ; TObject * GetObject () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetMaximum (Double_t max=1);  ; virtual void SetMethod (const char *method);  ; virtual void SetMinimum (Double_t min=0);  ; void SetObject (TObject *obj=nullptr);  ; virtual void SetRange (Double_t xmin=0, Double_t xmax=1);  Set Slider range in [0,1]. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPad;  TPad ();  Pad default constructor. ;  ;  TPad (const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=-1, Short_t bordersize=-1, Short_t bordermode=-2);  Pad constructor. ;  ;  ~TPad () override;  Pad destructor. ;  ; void AbsCoordinates (Bool_t set) override;  ; Double_t AbsPixeltoX (Int_t px) override;  ; virtual void AbsPixeltoXY (Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y);  Convert absolute pixel into X/Y coordinates. ;  ; Double_t AbsPixeltoY (Int_t py) override;  ; void Add (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE) override;  Add an object to list of primitives with speicified draw option When. ;  ; void AddExec (const char *name, const char *command) override;  Add a new TExec object to the list of Execs. ;  ; void AddFirst (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE) override;  Add an object as first in list of primitives with speicified draw optio",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:8563,Modifiability,inherit,inheritance,8563,"l void Closed ();  ; void CloseToolTip (TObject *tip) override;  Hide tool tip. ;  ; void CopyPixmap () override;  Copy the pixmap of the pad to the canvas. ;  ; void CopyPixmaps () override;  Copy the sub-pixmaps of the pad to the canvas. ;  ; TObject * CreateToolTip (const TBox *b, const char *text, Long_t delayms) override;  Create a tool tip and return its pointer. ;  ; void DeleteExec (const char *name) override;  Remove TExec name from the list of Execs. ;  ; void DeleteToolTip (TObject *tip) override;  Delete tool tip object. ;  ; void Divide (Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) override;  Automatic pad generation by division. ;  ; virtual void DivideSquare (Int_t n, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0);  ""n"" is the total number of sub-pads. ;  ; void Draw (Option_t *option="""") override;  Draw Pad in Current pad (re-parent pad if necessary). ;  ; void DrawClassObject (const TObject *obj, Option_t *option="""") override;  Draw class inheritance tree of the class to which obj belongs. ;  ; void DrawCollideGrid ();  This method draws the collide grid on top of the canvas. ;  ; virtual void DrawCrosshair ();  Function called to draw a crosshair in the canvas. ;  ; TH1F * DrawFrame (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char *title="""") override;  Draw an empty pad frame with X and Y axis. ;  ; virtual void EventPave ();  ; void ExecuteEventAxis (Int_t event, Int_t px, Int_t py, TAxis *axis) override;  Execute action corresponding to one event for a TAxis object (called by TAxis::ExecuteEvent.) This member function is called when an axis is clicked with the locator. ;  ; TObject * FindObject (const char *name) const override;  Search if object named name is inside this pad or in pads inside this pad. ;  ; TObject * FindObject (const TObject *obj) const override;  Search if obj is in pad or in pads inside this pad. ;  ; Double_t GetAbsHNDC () const override;  ; Double_t Ge",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:26110,Modifiability,inherit,inherited,26110,"*emode="""") override;  Loop and sleep until a primitive with name=pname is found in the pad. ;  ; virtual void x3d (Option_t *type="""");  Deprecated: use TPad::GetViewer3D() instead. ;  ; Int_t XtoAbsPixel (Double_t x) const override;  Convert X coordinate to absolute pixel. ;  ; Double_t XtoPad (Double_t x) const override;  Convert x from X to pad. ;  ; Int_t XtoPixel (Double_t x) const override;  Convert X coordinate to pixel. ;  ; virtual void XYtoAbsPixel (Double_t x, Double_t y, Int_t &xpixel, Int_t &ypixel) const;  Convert X/Y into absolute pixel coordinates. ;  ; virtual void XYtoPixel (Double_t x, Double_t y, Int_t &xpixel, Int_t &ypixel) const;  Convert X/Y into pixel coordinates. ;  ; Int_t YtoAbsPixel (Double_t y) const override;  Convert Y coordinate to absolute pixel. ;  ; Double_t YtoPad (Double_t y) const override;  Convert y from Y to pad. ;  ; Int_t YtoPixel (Double_t y) const override;  Convert Y coordinate to pixel. ;  ;  Public Member Functions inherited from TVirtualPad;  TVirtualPad ();  VirtualPad default constructor. ;  ;  TVirtualPad (const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=19, Short_t bordersize=4, Short_t bordermode=1);  VirtualPad constructor. ;  ; virtual ~TVirtualPad ();  VirtualPad destructor. ;  ; TClass * IsA () const override;  ; Bool_t IsBeingResized () const;  ; virtual Bool_t PadInHighlightMode () const;  Should always return false, unless you can highlight selected object in pad. ;  ; virtual Bool_t PadInSelectionMode () const;  Should always return false unless you have non-standard picking. ;  ; virtual void PopTopLevelSelectable ();  Does nothing, unless you implement your own picking. ;  ; virtual void PushSelectableObject (TObject *obj);  Does nothing, unless you implement your own picking. ;  ; virtual void PushTopLevelSelectable (TObject *top);  Does nothing, unless you implement your own picking. ;  ; virtual void RangeAxisChanged ();  ; void Streamer (TB",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:27316,Modifiability,inherit,inherited,27316," xup, Double_t yup, Color_t color=19, Short_t bordersize=4, Short_t bordermode=1);  VirtualPad constructor. ;  ; virtual ~TVirtualPad ();  VirtualPad destructor. ;  ; TClass * IsA () const override;  ; Bool_t IsBeingResized () const;  ; virtual Bool_t PadInHighlightMode () const;  Should always return false, unless you can highlight selected object in pad. ;  ; virtual Bool_t PadInSelectionMode () const;  Should always return false unless you have non-standard picking. ;  ; virtual void PopTopLevelSelectable ();  Does nothing, unless you implement your own picking. ;  ; virtual void PushSelectableObject (TObject *obj);  Does nothing, unless you implement your own picking. ;  ; virtual void PushTopLevelSelectable (TObject *top);  Does nothing, unless you implement your own picking. ;  ; virtual void RangeAxisChanged ();  ; void Streamer (TBuffer &) override;  Stream an object of class TVirtualPad. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnZoomed ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Op",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:28374,Modifiability,inherit,inheritance,28374,";  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:30053,Modifiability,inherit,inherits,30053,"ject with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notificat",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:30170,Modifiability,inherit,inherits,30170,"const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *re",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:32792,Modifiability,inherit,inherited,32792,"Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:34297,Modifiability,inherit,inherited,34297,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:35477,Modifiability,inherit,inherited,35477,"al ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttPad;  TAttPad ();  Constructor. ;  ; virtual ~TAttPad ();  Destructor. ;  ; virtual void Copy (TAttPad &attpad) const;  copy function ;  ; Float_t GetAfile () const;  ; Float_t GetAstat () const;  ; Float_t GetBottomMargin () const;  ; Int_t GetFrameBorderMode () const;  ; Width_t GetFrameBorderSize () const;  ; Color_t GetFrameFillColor () const;  ; Style_t GetFrameFillStyle () const;  ; Color_t GetFrameLineColor () const;  ; Style_t GetFrameLineStyle () const;  ; Width_t GetFrameLineWidth () const;  ; Float_t GetLeftMargin () const;  ; Float_t GetRightMargin () const;  ; Float_t GetTopMargin () const;  ; Float_t GetXfile () const;  ; Float_t GetXstat () const;  ; Float_t GetYfile () const;  ; Float_t GetYstat () const;  ; virtual void ResetAttPad (Option_t *option="""");  Reset pad attributes. ;  ; virtual void SetAfile (Float_t afile);  ; virtual void SetAstat (Float_t astat);  ; virtual void SetBottomMargin (Float_t bottommargin);  Set Pad bo",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:37493,Modifiability,inherit,inherited,37493,"irtual void SetBottomMargin (Float_t bottommargin);  Set Pad bottom margin in fraction of the pad height. ;  ; void SetFrameBorderMode (Int_t mode=1);  ; void SetFrameBorderSize (Width_t size=1);  ; void SetFrameFillColor (Color_t color=1);  ; void SetFrameFillStyle (Style_t styl=0);  ; void SetFrameLineColor (Color_t color=1);  ; void SetFrameLineStyle (Style_t styl=0);  ; void SetFrameLineWidth (Width_t width=1);  ; virtual void SetLeftMargin (Float_t leftmargin);  Set Pad left margin in fraction of the pad width. ;  ; virtual void SetMargin (Float_t left, Float_t right, Float_t bottom, Float_t top);  Set all margins. ;  ; virtual void SetRightMargin (Float_t rightmargin);  Set Pad right margin in fraction of the pad width. ;  ; virtual void SetTopMargin (Float_t topmargin);  Set Pad top margin in fraction of the pad height. ;  ; virtual void SetXfile (Float_t xfile);  ; virtual void SetXstat (Float_t xstat);  ; virtual void SetYfile (Float_t yfile);  ; virtual void SetYstat (Float_t ystat);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without a",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:39461,Modifiability,inherit,inherited,39461," Activate signal with single parameter. ;  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DrawColorTable ();  Static function to Display Color Table in a pad. ;  ; static Int_t GetMaxPickDistance ();  Static function (see also TPad::SetMaxPickDistance) ;  ; static void SetMaxPickDistance (Int_t maxPick=5);  static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default value is 5 pixels. ;  ;  Static Public Member Functions inherited f",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:39799,Modifiability,inherit,inherited,39799,"stOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DrawColorTable ();  Static function to Display Color Table in a pad. ;  ; static Int_t GetMaxPickDistance ();  Static function (see also TPad::SetMaxPickDistance) ;  ; static void SetMaxPickDistance (Int_t maxPick=5);  static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default value is 5 pixels. ;  ;  Static Public Member Functions inherited from TVirtualPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; stati",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:40461,Modifiability,inherit,inherited,40461,_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DrawColorTable ();  Static function to Display Color Table in a pad. ;  ; static Int_t GetMaxPickDistance ();  Static function (see also TPad::SetMaxPickDistance) ;  ; static void SetMaxPickDistance (Int_t maxPick=5);  static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default value is 5 pixels. ;  ;  Static Public Member Functions inherited from TVirtualPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Nam,MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:40759,Modifiability,inherit,inherited,40759,t char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DrawColorTable ();  Static function to Display Color Table in a pad. ;  ; static Int_t GetMaxPickDistance ();  Static function (see also TPad::SetMaxPickDistance) ;  ; static void SetMaxPickDistance (Int_t maxPick=5);  static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default value is 5 pixels. ;  ;  Static Public Member Functions inherited from TVirtualPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * D,MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:41277,Modifiability,inherit,inherited,41277,"FileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection betw",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:41489,Modifiability,inherit,inherited,41489,"FileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection betw",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:41701,Modifiability,inherit,inherited,41701,"FileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection betw",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:41912,Modifiability,inherit,inherited,41912,"FileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection betw",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:43087,Modifiability,inherit,inherited,43087,"();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fMaximum {1};  Slider maximum value in [0,1]. ;  ; TString fMethod;  command to be executed when slider is changed ;  ; Double_t fMinimum {0};  Slider minimum value in [0,1]. ;  ; TObject * fObject {nullptr};  !Pointer to associated object ;  ;  Protected Attributes inherited from TPad; Bool_t fAbsCoord;  Use absolute coordinates. ;  ; Double_t fAbsHNDC;  Absolute Height of pad along Y in NDC. ;  ; Double_t fAbsPixeltoXk;  Conversion coefficient for absolute pixel to X World. ;  ; Double_t fAbsPixeltoYk;  Conversion coefficient for absolute pixel to Y World. ;  ; Double_t fAbsWNDC;  Absolute Width of pad along X in NDC. ;  ; Double_t fAbsXlowNDC;  Absolute X top left corner of pad in NDC [0,1]. ;  ; Double_t fAbsYlowNDC;  Absolute Y top left corner of pad in NDC [0,1]. ;  ; Double_t fAspectRatio;  ratio of w/h in case of fixed ratio ;  ; Short_t f",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:43567,Modifiability,inherit,inherited,43567,"*receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fMaximum {1};  Slider maximum value in [0,1]. ;  ; TString fMethod;  command to be executed when slider is changed ;  ; Double_t fMinimum {0};  Slider minimum value in [0,1]. ;  ; TObject * fObject {nullptr};  !Pointer to associated object ;  ;  Protected Attributes inherited from TPad; Bool_t fAbsCoord;  Use absolute coordinates. ;  ; Double_t fAbsHNDC;  Absolute Height of pad along Y in NDC. ;  ; Double_t fAbsPixeltoXk;  Conversion coefficient for absolute pixel to X World. ;  ; Double_t fAbsPixeltoYk;  Conversion coefficient for absolute pixel to Y World. ;  ; Double_t fAbsWNDC;  Absolute Width of pad along X in NDC. ;  ; Double_t fAbsXlowNDC;  Absolute X top left corner of pad in NDC [0,1]. ;  ; Double_t fAbsYlowNDC;  Absolute Y top left corner of pad in NDC [0,1]. ;  ; Double_t fAspectRatio;  ratio of w/h in case of fixed ratio ;  ; Short_t fBorderMode;  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize;  pad bordersize in pixels ;  ; TCanvas * fCanvas {nullptr};  ! Pointer to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bo",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:48223,Modifiability,inherit,inherited,48223,"le_t fVtoPixelk;  Conversion coefficient for V NDC to pixel. ;  ; Double_t fWNDC;  Width of pad along X in Normalized Coordinates (NDC) ;  ; Double_t fX1;  X of lower X coordinate. ;  ; Double_t fX2;  X of upper X coordinate. ;  ; Double_t fXlowNDC;  X bottom left corner of pad in NDC [0,1]. ;  ; Double_t fXtoAbsPixelk;  Conversion coefficient for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:48294,Modifiability,inherit,inherited,48294,"le_t fVtoPixelk;  Conversion coefficient for V NDC to pixel. ;  ; Double_t fWNDC;  Width of pad along X in Normalized Coordinates (NDC) ;  ; Double_t fX1;  X of lower X coordinate. ;  ; Double_t fX2;  X of upper X coordinate. ;  ; Double_t fXlowNDC;  X bottom left corner of pad in NDC [0,1]. ;  ; Double_t fXtoAbsPixelk;  Conversion coefficient for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:48455,Modifiability,inherit,inherited,48455,"r X coordinate. ;  ; Double_t fXlowNDC;  X bottom left corner of pad in NDC [0,1]. ;  ; Double_t fXtoAbsPixelk;  Conversion coefficient for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to ",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:48588,Modifiability,inherit,inherited,48588,"for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ; ",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:49520,Modifiability,inherit,inherited,49520," from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TSlider (const TSlider &)=delete;  ; TSlider & operator= (const TSlider &)=delete;  . Additional Inherited Members;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:49861,Modifiability,inherit,inherited,49861,"me fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TSlider (const TSlider &)=delete;  ; TSlider & operator= (const TSlider &)=delete;  . Additional Inherited Members;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py)",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:50110,Modifiability,inherit,inherited,50110,"Margin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TSlider (const TSlider &)=delete;  ; TSlider & operator= (const TSlider &)=delete;  . Additional Inherited Members;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depen",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:50751,Modifiability,inherit,inherited,50751,"ted from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Membe",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:50850,Modifiability,inherit,inherited,50850,"ted from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Membe",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:51761,Modifiability,inherit,inherited,51761,"royExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:51880,Modifiability,inherit,inherited,51880,"royExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:52091,Modifiability,inherit,inherited,52091,"r (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBloc",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:52204,Modifiability,inherit,inherited,52204,"r (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBloc",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:53060,Modifiability,inherit,inherited,53060,"unctions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TSlider.h>. Inheritance diagram for TSlider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSlider() [1/3]. TSlider::TSlider ; (; const TSlider & ; ). privatedelete . ◆ TSlider() [2/3]. TSlider::TSlider ; (; ). slider default constructor. ; Definition at line 107 of file TSlider.cxx. ◆ TSlider() [3/3]. TSlider::TSlider ; (; const char * ; name, . const char * ; title, . Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . Color_t ; color = 16, . Short_t ; bordersize = 2, . Short_t ; bordermode = -1 . ). Slider normal constructor. ; x1,y1,x2,y2 are in pad user coordinates ; Definition at line 116 of file TSlider.cxx. ◆ ~TSlider(). TSlider::~TSlider ; (; ). override . sli",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:53175,Modifiability,inherit,inherited,53175," from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TSlider.h>. Inheritance diagram for TSlider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSlider() [1/3]. TSlider::TSlider ; (; const TSlider & ; ). privatedelete . ◆ TSlider() [2/3]. TSlider::TSlider ; (; ). slider default constructor. ; Definition at line 107 of file TSlider.cxx. ◆ TSlider() [3/3]. TSlider::TSlider ; (; const char * ; name, . const char * ; title, . Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . Color_t ; color = 16, . Short_t ; bordersize = 2, . Short_t ; bordermode = -1 . ). Slider normal constructor. ; x1,y1,x2,y2 are in pad user coordinates ; Definition at line 116 of file TSlider.cxx. ◆ ~TSlider(). TSlider::~TSlider ; (; ). override . slider default destructor. ; Definition at line 146 of file TSlider.cxx. Member Function Documentation. ◆ Class(). static TClass * TS",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:13852,Security,hash,hash,13852,";  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () const override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HasViewer3D () const override;  ; void HighLight (Color_t col=kRed, Bool_t set=kTRUE) override;  Highlight pad. ;  ; Int_t IncrementPaletteColor (Int_t i, TString opt) override;  Increment (i==1) or set (i>1) the number of autocolor in the pad. ;  ; Bool_t IsBatch () const override;  Is pad in batch mode ? ;  ; Bool_t IsEditable () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsModified () const override;  ; Bool_t IsRetained () const override;  Is pad retained ? ;  ; Bool_t IsVertical () const override;  ; Bool_t IsWeb () const override;  Is web ? ;  ; void ls (Option_t *option="""") const override;  List all primitives in pad. ;  ; void Modified (Bool_t flag=true) override;  Mark pad modified Will be repainted when TCanvas::Update() will be called next time. ;  ; void ModifiedUpdate () overri",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:12479,Testability,log,log,12479," ; TVirtualPad * GetPadSave () const override;  Get save pad. ;  ; TVirtualPadPainter * GetPainter () override;  Get pad painter from TCanvas. ;  ; Double_t GetPhi () const override;  ; Int_t GetPixmapID () const override;  ; TObject * GetPrimitive (const char *name) const override;  Get primitive. ;  ; void GetRange (Double_t &x1, Double_t &y1, Double_t &x2, Double_t &y2) override;  Return pad world coordinates range. ;  ; void GetRangeAxis (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:12627,Testability,log,log,12627,"Double_t GetPhi () const override;  ; Int_t GetPixmapID () const override;  ; TObject * GetPrimitive (const char *name) const override;  Get primitive. ;  ; void GetRange (Double_t &x1, Double_t &y1, Double_t &x2, Double_t &y2) override;  Return pad world coordinates range. ;  ; void GetRangeAxis (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override; ",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:12775,Testability,log,log,12775,"ve. ;  ; void GetRange (Double_t &x1, Double_t &y1, Double_t &x2, Double_t &y2) override;  Return pad world coordinates range. ;  ; void GetRangeAxis (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () c",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:12923,Testability,log,log,12923,"s (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () const override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HasViewer3D () const override;  ; void HighLight (",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:45281,Testability,log,log,45281,"to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear scale, =1 if log scale) ;  ; Bool_t fModified;  Set to true when pad is modified. ;  ; TPad * fMother {nullptr};  ! pointer to mother of the list ;  ; TString fName;  Pad name. ;  ; Int_t fNextPaletteColor;  Next automatic color. ;  ; Int_t fNumber;  pad number identifier ;  ; Int_t fNumPaletteColor;  Number of objects with an automatic color. ;  ; Int_t fPadPaint;  Set to 1 while painting the pad. ;  ; TObject * fPadPointer {nullptr};  ! free pointer ;  ; TObject * fPadView3D {nullptr};  ! 3D View of this TPad ;  ; Double_t fPhi;  phi angle to view as lego/surface ;  ; Double_t fPixeltoX;  xworld = fPixeltoXk + fPixeltoX*xpixel ;  ; Double_t fPixeltoXk;  Conversion coefficient for pixel to X World. ;  ; Double_t fPixeltoY;  yworld = fPixeltoYk + fPixeltoY*ypixel ;  ; Double_t fPixeltoYk;  Conversion coefficient for pixel to Y World. ;  ; Int_t fPixmapID;  ! Off-screen pixmap identifier ;  ; TList * fPrimitives {",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:45340,Testability,log,log,45340,"to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear scale, =1 if log scale) ;  ; Bool_t fModified;  Set to true when pad is modified. ;  ; TPad * fMother {nullptr};  ! pointer to mother of the list ;  ; TString fName;  Pad name. ;  ; Int_t fNextPaletteColor;  Next automatic color. ;  ; Int_t fNumber;  pad number identifier ;  ; Int_t fNumPaletteColor;  Number of objects with an automatic color. ;  ; Int_t fPadPaint;  Set to 1 while painting the pad. ;  ; TObject * fPadPointer {nullptr};  ! free pointer ;  ; TObject * fPadView3D {nullptr};  ! 3D View of this TPad ;  ; Double_t fPhi;  phi angle to view as lego/surface ;  ; Double_t fPixeltoX;  xworld = fPixeltoXk + fPixeltoX*xpixel ;  ; Double_t fPixeltoXk;  Conversion coefficient for pixel to X World. ;  ; Double_t fPixeltoY;  yworld = fPixeltoYk + fPixeltoY*ypixel ;  ; Double_t fPixeltoYk;  Conversion coefficient for pixel to Y World. ;  ; Int_t fPixmapID;  ! Off-screen pixmap identifier ;  ; TList * fPrimitives {",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSlider.html:45399,Testability,log,log,45399,"to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear scale, =1 if log scale) ;  ; Bool_t fModified;  Set to true when pad is modified. ;  ; TPad * fMother {nullptr};  ! pointer to mother of the list ;  ; TString fName;  Pad name. ;  ; Int_t fNextPaletteColor;  Next automatic color. ;  ; Int_t fNumber;  pad number identifier ;  ; Int_t fNumPaletteColor;  Number of objects with an automatic color. ;  ; Int_t fPadPaint;  Set to 1 while painting the pad. ;  ; TObject * fPadPointer {nullptr};  ! free pointer ;  ; TObject * fPadView3D {nullptr};  ! 3D View of this TPad ;  ; Double_t fPhi;  phi angle to view as lego/surface ;  ; Double_t fPixeltoX;  xworld = fPixeltoXk + fPixeltoX*xpixel ;  ; Double_t fPixeltoXk;  Conversion coefficient for pixel to X World. ;  ; Double_t fPixeltoY;  yworld = fPixeltoYk + fPixeltoY*ypixel ;  ; Double_t fPixeltoYk;  Conversion coefficient for pixel to Y World. ;  ; Int_t fPixmapID;  ! Off-screen pixmap identifier ;  ; TList * fPrimitives {",MatchSource.WIKI,doc/master/classTSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSlider.html
https://root.cern/doc/master/classTSliderBox.html:7012,Availability,error,error,7012,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:7101,Availability,error,error,7101,"nt Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const cha",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:7256,Availability,error,error,7256,"o which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTime",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:7433,Availability,error,error,7433,"Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:11517,Availability,error,error,11517,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:17321,Availability,down,down,17321,"t char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatus",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:3835,Integrability,depend,depending,3835,"ual void SetBorderMode (Short_t bordermode);  ; virtual void SetBorderSize (Short_t bordersize);  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBox;  TBox ();  Box default constructor. ;  ;  TBox (const TBox &box);  Box copy constructor. ;  ;  TBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Box standard constructor. ;  ;  ~TBox () override;  Box destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; virtual TBox * DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this box with new coordinates. ;  ; Rectangle_t GetBBox () override;  Return the ""bounding Box"" of the Box. ;  ; TPoint GetBBoxCenter () override;  Return the center of the Box as TPoint in pixels. ;  ; Double_t GetX1 () const;  ; Double_t GetX2 () const;  ; Double_t GetY1 () const;  ; Double_t GetY2 () const;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; Bool_t IsBeingResized () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Function which returns 1 if point x,y lies inside the box, 0 otherwise. ;  ; void ls (Option_t *option="""") const override;  List this box with its attributes. ;  ; TBox & operator= (const TBox &);  Assignment operator. ;  ; virtual void PaintBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option="""");  Draw this box with new coordinates. ;  ; void Print (Option_t *option="""") const override;  Dump this box with its attributes. ;  ; void SetBBoxCenter (const TPoint &p) override;  Set center of the Box. ;  ; void SetBBoxCenterX (const Int_t x) override;  Set X coordinate of the center of the Box. ;  ; void SetBBoxCenterY (const Int_t y) override;  Set Y coordinate of the center of the Box. ;  ; void SetBBoxX1 (const Int_t x) override;  Set left hand side of BoundingBox to a val",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:7018,Integrability,message,message,7018,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:7439,Integrability,message,message,7439,"Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:8641,Integrability,message,message,8641,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle again",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:11523,Integrability,message,message,11523,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:11896,Integrability,message,message,11896,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:1190,Modifiability,inherit,inherited,1190,"er Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSliderBox Class ReferenceGraphics » 2D Graphics » Graphics pad. ; The moving box in a TSlider. ; Definition at line 20 of file TSliderBox.h. Public Member Functions;  TSliderBox ();  SliderBox default constructor. ;  ;  TSliderBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=18, Short_t bordersize=2, Short_t bordermode=-1);  SliderBox normal constructor. ;  ;  ~TSliderBox () override;  SliderBox default destructor. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Interaction with a slider. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetSlider (TSlider *slider);  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TWbox;  TWbox ();  ;  TWbox (const TWbox &wbox);  wbox copy constructor. ;  ;  TWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=18, Short_t bordersize=5, Short_t bordermode=1);  wbox normal constructor. ;  ;  ~TWbox () override=default;  ; void Copy (TObject &wbox) const override;  Copy this wbox to wbox. ;  ; void Draw (Option_t *option="""") override;  Draw this wbox with its current attributes. ;  ; virtual TWbox * DrawWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=33, Short_t bordersize=5, Short_t bordermode=-1);  Draw this wbox with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Short_t GetBorderMode () const;  ; Short_t GetBorderSize () const;  ; Int_t GetDarkColor () const;  ; Int_t GetLightColor () const;  ; TClass * IsA () const override;  ; TWbox & operator= (const TWbox &src);  assignment operator ;  ; void Paint (Option_t *o",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:3026,Modifiability,inherit,inherited,3026,"etDarkColor () const;  ; Int_t GetLightColor () const;  ; TClass * IsA () const override;  ; TWbox & operator= (const TWbox &src);  assignment operator ;  ; void Paint (Option_t *option="""") override;  Paint this wbox with its current attributes. ;  ; virtual void PaintFrame (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color, Short_t bordersize, Short_t bordermode, Bool_t tops);  Paint a 3D frame around a box. ;  ; virtual void PaintWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=33, Short_t bordersize=5, Short_t bordermode=-1);  Draw this wbox with new coordinates. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetBorderMode (Short_t bordermode);  ; virtual void SetBorderSize (Short_t bordersize);  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBox;  TBox ();  Box default constructor. ;  ;  TBox (const TBox &box);  Box copy constructor. ;  ;  TBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Box standard constructor. ;  ;  ~TBox () override;  Box destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; virtual TBox * DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this box with new coordinates. ;  ; Rectangle_t GetBBox () override;  Return the ""bounding Box"" of the Box. ;  ; TPoint GetBBoxCenter () override;  Return the center of the Box as TPoint in pixels. ;  ; Double_t GetX1 () const;  ; Double_t GetX2 () const;  ; Double_t GetY1 () const;  ; Double_t GetY2 () const;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; Bool_t IsBeingResized () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Function which returns 1 if point x,y lies ins",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:5516,Modifiability,inherit,inherited,5516,"oxCenter (const TPoint &p) override;  Set center of the Box. ;  ; void SetBBoxCenterX (const Int_t x) override;  Set X coordinate of the center of the Box. ;  ; void SetBBoxCenterY (const Int_t y) override;  Set Y coordinate of the center of the Box. ;  ; void SetBBoxX1 (const Int_t x) override;  Set left hand side of BoundingBox to a value (resize in x direction on left) ;  ; void SetBBoxX2 (const Int_t x) override;  Set right hand side of BoundingBox to a value (resize in x direction on right) ;  ; void SetBBoxY1 (const Int_t y) override;  Set top of BoundingBox to a value (resize in y direction on top) ;  ; void SetBBoxY2 (const Int_t y) override;  Set bottom of BoundingBox to a value (resize in y direction on bottom) ;  ; virtual void SetToolTipText (const char *text, Long_t delayms=1000);  Set tool tip text associated with this box. ;  ; virtual void SetX1 (Double_t x1);  ; virtual void SetX2 (Double_t x2);  ; virtual void SetY1 (Double_t y1);  ; virtual void SetY2 (Double_t y2);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object usin",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:6648,Modifiability,inherit,inheritance,6648,"ect ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:8739,Modifiability,inherit,inherits,8739,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality th",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:8856,Modifiability,inherit,inherits,8856,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden t",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:12203,Modifiability,inherit,inherited,12203,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:13708,Modifiability,inherit,inherited,13708,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:14963,Modifiability,inherit,inherited,14963," a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TWbox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bo",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:15301,Modifiability,inherit,inherited,15301,"ut stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TWbox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char ",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:15510,Modifiability,inherit,inherited,15510,"ut stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TWbox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char ",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:15718,Modifiability,inherit,inherited,15718,"ut stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TWbox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char ",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:16236,Modifiability,inherit,inherited,16236," from TBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:16448,Modifiability,inherit,inherited,16448," from TBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:16660,Modifiability,inherit,inherited,16660," from TBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:16987,Modifiability,inherit,inherited,16987,"t ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public T",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:17258,Modifiability,inherit,inherited,17258,"t char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatus",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:17438,Modifiability,inherit,inherited,17438,"t char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatus",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:17680,Modifiability,inherit,inherited,17680,"TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). ",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:17841,Modifiability,inherit,inherited,17841," Functions;  TSliderBox (const TSliderBox &sb);  ; TSliderBox & operator= (const TSliderBox &sb);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSliderBox.h>. Inheritance diagram for TSliderBox:. This br",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:17996,Modifiability,inherit,inherited,17996,"t;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSliderBox.h>. Inheritance diagram for TSliderBox:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSliderBox() [1/3]. TSliderBox::TSliderBox ; (; const TSliderBox & ; sb). inlineprotected . Definition at line",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:18077,Modifiability,inherit,inherited,18077,"t;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSlider * fSlider;  Pointer to slider. ;  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSliderBox.h>. Inheritance diagram for TSliderBox:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSliderBox() [1/3]. TSliderBox::TSliderBox ; (; const TSliderBox & ; sb). inlineprotected . Definition at line",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:18718,Modifiability,inherit,inherited,18718,"; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSliderBox.h>. Inheritance diagram for TSliderBox:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSliderBox() [1/3]. TSliderBox::TSliderBox ; (; const TSliderBox & ; sb). inlineprotected . Definition at line 25 of file TSliderBox.h. ◆ TSliderBox() [2/3]. TSliderBox::TSliderBox ; (; ). SliderBox default constructor. ; Definition at line 31 of file TSliderBox.cxx. ◆ TSliderBox() [3/3]. TSliderBox::TSliderBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . Color_t ; color = 18, . Short_t ; bordersize = 2, . Short_t ; bordermode = -1 . ). SliderBox normal constructor. ; Definition at line 39 of file TSliderBox.cxx. ◆ ~TSliderBox(). TSliderBox::~TSliderBox ; (; ). override . SliderBox default destructor. ; Definition at line 48 of file TSliderBox.cxx. Member Function Documentation. ◆ Class(). static TClass * TSliderBo",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSliderBox.html:8370,Security,hash,hash,8370," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSliderBox.html
https://root.cern/doc/master/classTSocket.html:2362,Availability,error,error,2362,"= (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (const char *host, Int_t port, Int_t tcpwindowsize=-1);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TSocket (const TSocket &s);  TSocket copy ctor. ;  ;  TSocket (Int_t descriptor);  Create a socket. ;  ;  TSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; virtual void Close (Option_t *opt="""");  Close the socket. ;  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character strin",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:2760,Availability,error,error,2760,"t_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; virtual void Close (Option_t *opt="""");  Close the socket. ;  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1)",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:8403,Availability,error,error,8403,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:8492,Availability,error,error,8492,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:8647,Availability,error,error,8647,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:8944,Availability,error,error,8944,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:12986,Availability,error,error,12986,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:14672,Availability,error,error,14672,"ctions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket (",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:14687,Availability,error,error,14687,"ctions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket (",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:14713,Availability,error,error,14713,"ctions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket (",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:22812,Availability,down,down,22812,"ketpair(). ; Definition at line 314 of file TSocket.cxx. ◆ TSocket() [9/9]. TSocket::TSocket ; (; const TSocket & ; s). TSocket copy ctor. ; Definition at line 347 of file TSocket.cxx. ◆ ~TSocket(). virtual TSocket::~TSocket ; (; ). inlinevirtual . Definition at line 109 of file TSocket.h. Member Function Documentation. ◆ Authenticate(). Bool_t TSocket::Authenticate ; (; const char * ; user). protected . Authenticated the socket with specified user. ; Definition at line 1106 of file TSocket.cxx. ◆ Class(). static TClass * TSocket::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSocket::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSocket::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TSocket.h. ◆ Close(). void TSocket::Close ; (; Option_t * ; option = """"). virtual . Close the socket. ; If option is ""force"", calls shutdown(id,2) to shut down the connection. This will close the connection also for the parent of this process. Also called via the dtor (without option ""force"", call explicitly Close(""force"") if this is desired). ; Reimplemented in TPSocket, and TSSLSocket.; Definition at line 389 of file TSocket.cxx. ◆ CreateAuthSocket() [1/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; url, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server. ; url: [[proto][p][auth]://][user@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port numb",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:24170,Availability,error,error,24170,"uthSocket ; (; const char * ; url, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server. ; url: [[proto][p][auth]://][user@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]ho",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:25711,Availability,error,error,25711,"ssful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSock",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:27484,Availability,error,error,27484,". UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 175 of file TSocket.h. ◆ GetCompressionLevel(). Int_t TSocket::GetCompressionLevel ; (; ); const. inline . Definition at line 181 of file TSocket.h. ◆ GetCompressionSettings(). Int_t TSocket::GetCompressionSettings ; (; ); const. inline . Definition at line 187 of file TSocket.h. ◆ GetDescriptor(). virtual Int_t TSocket::GetDescriptor ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 112 of file TSocket.h. ◆ GetErrorCode(). Int_t TSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1035 of file TSocket.cxx. ◆ GetInetAddress(). TInetAddress TSocket::GetInetAddress ; (; ); const. inline . Definition at line 113 of file TSocket.h. ◆ GetLastUsage(). TTimeStamp TSocket::GetLastUsage ; (; ). inline . Definition at line 129 of file TSocket.h. ◆ GetLocalInetAddress(). TInetAddress TSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented in TPSocket, and TServerSocket.; Definition at line 409 of file TSocket.cxx. ◆ GetLocalPort(). Int_t TSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Reimplemented in TServerSocket.; Definition at line 423 of file TSocket.cxx. ◆ GetOption() [1/2]. Option_t * TSocket::G",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:27551,Availability,error,error,27551,"e TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 175 of file TSocket.h. ◆ GetCompressionLevel(). Int_t TSocket::GetCompressionLevel ; (; ); const. inline . Definition at line 181 of file TSocket.h. ◆ GetCompressionSettings(). Int_t TSocket::GetCompressionSettings ; (; ); const. inline . Definition at line 187 of file TSocket.h. ◆ GetDescriptor(). virtual Int_t TSocket::GetDescriptor ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 112 of file TSocket.h. ◆ GetErrorCode(). Int_t TSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1035 of file TSocket.cxx. ◆ GetInetAddress(). TInetAddress TSocket::GetInetAddress ; (; ); const. inline . Definition at line 113 of file TSocket.h. ◆ GetLastUsage(). TTimeStamp TSocket::GetLastUsage ; (; ). inline . Definition at line 129 of file TSocket.h. ◆ GetLocalInetAddress(). TInetAddress TSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented in TPSocket, and TServerSocket.; Definition at line 409 of file TSocket.cxx. ◆ GetLocalPort(). Int_t TSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Reimplemented in TServerSocket.; Definition at line 423 of file TSocket.cxx. ◆ GetOption() [1/2]. Option_t * TSocket::GetOption ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TObject.; ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:28077,Availability,error,error,28077,"on at line 181 of file TSocket.h. ◆ GetCompressionSettings(). Int_t TSocket::GetCompressionSettings ; (; ); const. inline . Definition at line 187 of file TSocket.h. ◆ GetDescriptor(). virtual Int_t TSocket::GetDescriptor ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 112 of file TSocket.h. ◆ GetErrorCode(). Int_t TSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1035 of file TSocket.cxx. ◆ GetInetAddress(). TInetAddress TSocket::GetInetAddress ; (; ); const. inline . Definition at line 113 of file TSocket.h. ◆ GetLastUsage(). TTimeStamp TSocket::GetLastUsage ; (; ). inline . Definition at line 129 of file TSocket.h. ◆ GetLocalInetAddress(). TInetAddress TSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented in TPSocket, and TServerSocket.; Definition at line 409 of file TSocket.cxx. ◆ GetLocalPort(). Int_t TSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Reimplemented in TServerSocket.; Definition at line 423 of file TSocket.cxx. ◆ GetOption() [1/2]. Option_t * TSocket::GetOption ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TObject.; Definition at line 98 of file TSocket.h. ◆ GetOption() [2/2]. Int_t TSocket::GetOption ; (; ESockOptions ; opt, . Int_t & ; val . ). virtual . Get socket options. Returns -1 in case of error. ; Reimplemented in TPSocket.; Definition at line 1023 of file TSocket.cxx. ◆ GetPort(). Int_t TSocket::GetPort ; (; ); const. inline . Definition at line 115 of file TSocket.h. ◆ GetRemoteProtocol(). Int_t TSocket::GetRemoteProtocol ; (; ); const. inline . Definition at line 126 of file TSocket.h. ◆ GetSecContext(). TSecContext * ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:28347,Availability,error,error,28347,"mplemented in TPSocket.; Definition at line 112 of file TSocket.h. ◆ GetErrorCode(). Int_t TSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1035 of file TSocket.cxx. ◆ GetInetAddress(). TInetAddress TSocket::GetInetAddress ; (; ); const. inline . Definition at line 113 of file TSocket.h. ◆ GetLastUsage(). TTimeStamp TSocket::GetLastUsage ; (; ). inline . Definition at line 129 of file TSocket.h. ◆ GetLocalInetAddress(). TInetAddress TSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented in TPSocket, and TServerSocket.; Definition at line 409 of file TSocket.cxx. ◆ GetLocalPort(). Int_t TSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Reimplemented in TServerSocket.; Definition at line 423 of file TSocket.cxx. ◆ GetOption() [1/2]. Option_t * TSocket::GetOption ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TObject.; Definition at line 98 of file TSocket.h. ◆ GetOption() [2/2]. Int_t TSocket::GetOption ; (; ESockOptions ; opt, . Int_t & ; val . ). virtual . Get socket options. Returns -1 in case of error. ; Reimplemented in TPSocket.; Definition at line 1023 of file TSocket.cxx. ◆ GetPort(). Int_t TSocket::GetPort ; (; ); const. inline . Definition at line 115 of file TSocket.h. ◆ GetRemoteProtocol(). Int_t TSocket::GetRemoteProtocol ; (; ); const. inline . Definition at line 126 of file TSocket.h. ◆ GetSecContext(). TSecContext * TSocket::GetSecContext ; (; ); const. inline . Definition at line 127 of file TSocket.h. ◆ GetService(). const char * TSocket::GetService ; (; ); const. inline . Definition at line 116 of file TSocket.h. ◆ GetServType(). Int_t TSocket::GetServType ; (; );",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:28754,Availability,error,error,28754,"nst. inline . Definition at line 113 of file TSocket.h. ◆ GetLastUsage(). TTimeStamp TSocket::GetLastUsage ; (; ). inline . Definition at line 129 of file TSocket.h. ◆ GetLocalInetAddress(). TInetAddress TSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented in TPSocket, and TServerSocket.; Definition at line 409 of file TSocket.cxx. ◆ GetLocalPort(). Int_t TSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Reimplemented in TServerSocket.; Definition at line 423 of file TSocket.cxx. ◆ GetOption() [1/2]. Option_t * TSocket::GetOption ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TObject.; Definition at line 98 of file TSocket.h. ◆ GetOption() [2/2]. Int_t TSocket::GetOption ; (; ESockOptions ; opt, . Int_t & ; val . ). virtual . Get socket options. Returns -1 in case of error. ; Reimplemented in TPSocket.; Definition at line 1023 of file TSocket.cxx. ◆ GetPort(). Int_t TSocket::GetPort ; (; ); const. inline . Definition at line 115 of file TSocket.h. ◆ GetRemoteProtocol(). Int_t TSocket::GetRemoteProtocol ; (; ); const. inline . Definition at line 126 of file TSocket.h. ◆ GetSecContext(). TSecContext * TSocket::GetSecContext ; (; ); const. inline . Definition at line 127 of file TSocket.h. ◆ GetService(). const char * TSocket::GetService ; (; ); const. inline . Definition at line 116 of file TSocket.h. ◆ GetServType(). Int_t TSocket::GetServType ; (; ); const. inline . Definition at line 117 of file TSocket.h. ◆ GetSocketBytesRecv(). ULong64_t TSocket::GetSocketBytesRecv ; (; ). static . Get total number of bytes received via all sockets. ; Definition at line 1497 of file TSocket.cxx. ◆ GetSocketBytesSent(). ULong64_t TSocket::GetSocketBytesSent ; (; ). static . Get total number of bytes sent via all sockets. ; Definition at line 1489 of file ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:30736,Availability,error,error,30736,"89 of file TSocket.cxx. ◆ GetTcpWindowSize(). Int_t TSocket::GetTcpWindowSize ; (; ); const. inline . Definition at line 128 of file TSocket.h. ◆ GetUrl(). const char * TSocket::GetUrl ; (; ); const. inline . Definition at line 130 of file TSocket.h. ◆ IsA(). TClass * TSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TSSLSocket.; Definition at line 171 of file TSocket.h. ◆ IsAuthenticated(). virtual Bool_t TSocket::IsAuthenticated ; (; ); const. inlinevirtual . Definition at line 131 of file TSocket.h. ◆ IsValid(). virtual Bool_t TSocket::IsValid ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 132 of file TSocket.h. ◆ MarkBrokenConnection(). void TSocket::MarkBrokenConnection ; (; ). protected . Close the socket and mark as due to a broken connection. ; Definition at line 371 of file TSocket.cxx. ◆ NetError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Ret",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:30762,Availability,error,error,30762,"(). Int_t TSocket::GetTcpWindowSize ; (; ); const. inline . Definition at line 128 of file TSocket.h. ◆ GetUrl(). const char * TSocket::GetUrl ; (; ); const. inline . Definition at line 130 of file TSocket.h. ◆ IsA(). TClass * TSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TSSLSocket.; Definition at line 171 of file TSocket.h. ◆ IsAuthenticated(). virtual Bool_t TSocket::IsAuthenticated ; (; ); const. inlinevirtual . Definition at line 131 of file TSocket.h. ◆ IsValid(). virtual Bool_t TSocket::IsValid ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 132 of file TSocket.h. ◆ MarkBrokenConnection(). void TSocket::MarkBrokenConnection ; (; ). protected . Close the socket and mark as due to a broken connection. ; Definition at line 371 of file TSocket.cxx. ◆ NetError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:30788,Availability,error,error,30788,"(). Int_t TSocket::GetTcpWindowSize ; (; ); const. inline . Definition at line 128 of file TSocket.h. ◆ GetUrl(). const char * TSocket::GetUrl ; (; ); const. inline . Definition at line 130 of file TSocket.h. ◆ IsA(). TClass * TSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TSSLSocket.; Definition at line 171 of file TSocket.h. ◆ IsAuthenticated(). virtual Bool_t TSocket::IsAuthenticated ; (; ); const. inlinevirtual . Definition at line 131 of file TSocket.h. ◆ IsValid(). virtual Bool_t TSocket::IsValid ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 132 of file TSocket.h. ◆ MarkBrokenConnection(). void TSocket::MarkBrokenConnection ; (; ). protected . Close the socket and mark as due to a broken connection. ; Definition at line 371 of file TSocket.cxx. ◆ NetError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:31341,Availability,error,error,31341,"e TSocket.h. ◆ IsValid(). virtual Bool_t TSocket::IsValid ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 132 of file TSocket.h. ◆ MarkBrokenConnection(). void TSocket::MarkBrokenConnection ; (; ). protected . Close the socket and mark as due to a broken connection. ; Definition at line 371 of file TSocket.cxx. ◆ NetError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:31834,Availability,error,error,31834,"n at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:32279,Availability,error,error,32279,"rns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE.",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:32718,Availability,error,error,32718," ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWO",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:33577,Availability,error,error,33577,"ect. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in mi",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34405,Availability,avail,available,34405,"l . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the numbe",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34707,Availability,error,error,34707,"-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:35030,Availability,error,error,35030,"aining streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 522 of file T",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:35478,Availability,error,error,35478,"Write the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 522 of file TSocket.cxx. ◆ Send() [3/4]. Int_t TSocket::Send ; (; Int_t ; kind). virtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:36239,Availability,error,error,36239,"plemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 522 of file TSocket.cxx. ◆ Send() [3/4]. Int_t TSocket::Send ; (; Int_t ; kind). virtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 463 of file TSocket.cxx. ◆ Send() [4/4]. Int_t TSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). virtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 481 of file TSocket.cxx. ◆ SendObject(). Int_t TSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:36777,Availability,error,error,36777," reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 522 of file TSocket.cxx. ◆ Send() [3/4]. Int_t TSocket::Send ; (; Int_t ; kind). virtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 463 of file TSocket.cxx. ◆ Send() [4/4]. Int_t TSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). virtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 481 of file TSocket.cxx. ◆ SendObject(). Int_t TSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented in TServerSocket.; Definition at line 600 of file TSocket.cxx. ◆ SendProcessIDs(). void TSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessIDs in the object in the message is found by looking in the TMessage bits. We send only the TProcessIDs not yet send on thi",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:37229,Availability,error,error,37229," sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 463 of file TSocket.cxx. ◆ Send() [4/4]. Int_t TSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). virtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 481 of file TSocket.cxx. ◆ SendObject(). Int_t TSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented in TServerSocket.; Definition at line 600 of file TSocket.cxx. ◆ SendProcessIDs(). void TSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessIDs in the object in the message is found by looking in the TMessage bits. We send only the TProcessIDs not yet send on this socket. ; Definition at line 684 of file TSocket.cxx. ◆ SendRaw(). Int_t TSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented i",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:38058,Availability,error,error,38058,"cket.cxx. ◆ SendObject(). Int_t TSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented in TServerSocket.; Definition at line 600 of file TSocket.cxx. ◆ SendProcessIDs(). void TSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessIDs in the object in the message is found by looking in the TMessage bits. We send only the TProcessIDs not yet send on this socket. ; Definition at line 684 of file TSocket.cxx. ◆ SendRaw(). Int_t TSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 620 of file TSocket.cxx. ◆ SendStreamerInfos(). void TSocket::SendStreamerInfos ; (; const TMessage & ; mess). protected . Check if TStreamerInfo must be sent. ; The list of TStreamerInfo of classes in the object in the message is in the fInfos list of the message. We send only the TStreamerInfos not yet sent on this socket. ; Definition at line 649 of file TSocket.cxx. ◆ SetCompressionAlgorithm(). void TSocket::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). See comments for function SetCompressionSettings. ; Definition at line 1046 of file TSocket.cxx. ◆ SetCompressionLevel(). void TSocket::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). See comments for function Set",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:3232,Integrability,message,message,3232,"~TSocket ();  ; virtual void Close (Option_t *opt="""");  Close the socket. ;  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:3353,Integrability,message,message,3353,"; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send a single message opcode. ;  ; virtual Int_t Send (Int_t status, Int_t kind);  Send a status and a single message opcode. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; virtual Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault); ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:3463,Integrability,message,message,3463,"p GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send a single message opcode. ;  ; virtual Int_t Send (Int_t status, Int_t kind);  Send a status and a single message opcode. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; virtual Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Send a raw buffer of specified length. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressi",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:4023,Integrability,message,message,4023," const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send a single message opcode. ;  ; virtual Int_t Send (Int_t status, Int_t kind);  Send a status and a single message opcode. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; virtual Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Send a raw buffer of specified length. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; virtual Int_t SetOption (ESockOptions opt, Int_t val);  Set socket options. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (T",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:4119,Integrability,message,message,4119,"st;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send a single message opcode. ;  ; virtual Int_t Send (Int_t status, Int_t kind);  Send a status and a single message opcode. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; virtual Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Send a raw buffer of specified length. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; virtual Int_t SetOption (ESockOptions opt, Int_t val);  Set socket options. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (TSecContext *ctx);  ; void SetService (const char *service);  ; void SetServType (I",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:8409,Integrability,message,message,8409,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:8950,Integrability,message,message,8950,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:9898,Integrability,message,message,9898,"*method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:12992,Integrability,message,message,12992,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:13365,Integrability,message,message,13365," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t Get",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:14418,Integrability,protocol,protocol,14418,"ing message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; sta",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:14700,Integrability,depend,depending,14700,"ctions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket (",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:15914,Integrability,message,message,15914,"tatic const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket ();  ; Bool_t Authenticate (const char *user);  Authenticated the socket with specified user. ;  ; void MarkBrokenConnection ();  Close the socket and mark as due to a broken connection. ;  ; Bool_t RecvProcessIDs (TMessage *mess);  Receive a message containing process ids. ;  ; Bool_t RecvStreamerInfos (TMessage *mess);  Receive a message containing streamer infos. ;  ; void SendProcessIDs (const TMessage &mess);  Check if TProcessIDs must be sent. ;  ; void SendStreamerInfos (const TMessage &mess);  Check if TStreamerInfo must be sent. ;  ; void SetDescriptor (Int_t desc);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TInetAddress fAddress;  ; TBits fBitsInfo;  ; UInt_t fBytesRecv;  ; UInt_t fBytesSent;  ; Int_t fCompress;  ; TTimeStamp fLastUsage;  ; TVirtualMutex * fLastUsageMtx;  ; TInetAddress fLocalAddress;  ; Int_t fRemoteProtocol;  ; TSecContext * fSecContext;  ; TString fService;  ; EServiceType fServType;  ; Int_t fSocket;  ; Int_t fTcpWindowSize;  ; TString fUrl;  ; TList * fUUIDs;  ;  Protected Attributes inheri",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:16005,Integrability,message,message,16005,"ct; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket ();  ; Bool_t Authenticate (const char *user);  Authenticated the socket with specified user. ;  ; void MarkBrokenConnection ();  Close the socket and mark as due to a broken connection. ;  ; Bool_t RecvProcessIDs (TMessage *mess);  Receive a message containing process ids. ;  ; Bool_t RecvStreamerInfos (TMessage *mess);  Receive a message containing streamer infos. ;  ; void SendProcessIDs (const TMessage &mess);  Check if TProcessIDs must be sent. ;  ; void SendStreamerInfos (const TMessage &mess);  Check if TStreamerInfo must be sent. ;  ; void SetDescriptor (Int_t desc);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TInetAddress fAddress;  ; TBits fBitsInfo;  ; UInt_t fBytesRecv;  ; UInt_t fBytesSent;  ; Int_t fCompress;  ; TTimeStamp fLastUsage;  ; TVirtualMutex * fLastUsageMtx;  ; TInetAddress fLocalAddress;  ; Int_t fRemoteProtocol;  ; TSecContext * fSecContext;  ; TString fService;  ; EServiceType fServType;  ; Int_t fSocket;  ; Int_t fTcpWindowSize;  ; TString fUrl;  ; TList * fUUIDs;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static U",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:24425,Integrability,protocol,protocol,24425,"ser@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" t",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:25968,Integrability,protocol,protocol,25968,"nt_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:26809,Integrability,protocol,protocol,26809,"/machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 175 of file TSocket.h. ◆ GetCompressionLevel(). Int_t TSocket::GetCompressionLevel ; (; ); const. inline . Definition at line 181 of file TSocket.h. ◆ GetCompressionSettings(). Int_t TSocket::GetCompressionSettings ; (; ); const. inline . Definition at line 187 of file TSocket.h. ◆ GetDescriptor(). virtual Int_t TSocket::GetDescriptor ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 112 of file TSocket.h. ◆ GetErrorCode(). Int_t TSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1035 of file TSocket.cxx. ◆ GetInetAddress(). TInetAddress TSocket::GetInetAddress ; (; ); const. inline . Definition at line 113 of file TSo",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:27506,Integrability,depend,depends,27506,"; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 175 of file TSocket.h. ◆ GetCompressionLevel(). Int_t TSocket::GetCompressionLevel ; (; ); const. inline . Definition at line 181 of file TSocket.h. ◆ GetCompressionSettings(). Int_t TSocket::GetCompressionSettings ; (; ); const. inline . Definition at line 187 of file TSocket.h. ◆ GetDescriptor(). virtual Int_t TSocket::GetDescriptor ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 112 of file TSocket.h. ◆ GetErrorCode(). Int_t TSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1035 of file TSocket.cxx. ◆ GetInetAddress(). TInetAddress TSocket::GetInetAddress ; (; ); const. inline . Definition at line 113 of file TSocket.h. ◆ GetLastUsage(). TTimeStamp TSocket::GetLastUsage ; (; ). inline . Definition at line 129 of file TSocket.h. ◆ GetLocalInetAddress(). TInetAddress TSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented in TPSocket, and TServerSocket.; Definition at line 409 of file TSocket.cxx. ◆ GetLocalPort(). Int_t TSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Reimplemented in TServerSocket.; Definition at line 423 of file TSocket.cxx. ◆ GetOption() [1/2]. Option_t * TSocket::GetOption ; (; ); const. inlineoverr",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:30775,Integrability,depend,depending,30775,"(). Int_t TSocket::GetTcpWindowSize ; (; ); const. inline . Definition at line 128 of file TSocket.h. ◆ GetUrl(). const char * TSocket::GetUrl ; (; ); const. inline . Definition at line 130 of file TSocket.h. ◆ IsA(). TClass * TSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TSSLSocket.; Definition at line 171 of file TSocket.h. ◆ IsAuthenticated(). virtual Bool_t TSocket::IsAuthenticated ; (; ); const. inlinevirtual . Definition at line 131 of file TSocket.h. ◆ IsValid(). virtual Bool_t TSocket::IsValid ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 132 of file TSocket.h. ◆ MarkBrokenConnection(). void TSocket::MarkBrokenConnection ; (; ). protected . Close the socket and mark as due to a broken connection. ; Definition at line 371 of file TSocket.cxx. ◆ NetError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:31158,Integrability,message,message,31158,"inition at line 171 of file TSocket.h. ◆ IsAuthenticated(). virtual Bool_t TSocket::IsAuthenticated ; (; ); const. inlinevirtual . Definition at line 131 of file TSocket.h. ◆ IsValid(). virtual Bool_t TSocket::IsValid ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 132 of file TSocket.h. ◆ MarkBrokenConnection(). void TSocket::MarkBrokenConnection ; (; ). protected . Close the socket and mark as due to a broken connection. ; Definition at line 371 of file TSocket.cxx. ◆ NetError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ;",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:31204,Integrability,message,message,31204,"d(). virtual Bool_t TSocket::IsAuthenticated ; (; ); const. inlinevirtual . Definition at line 131 of file TSocket.h. ◆ IsValid(). virtual Bool_t TSocket::IsValid ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 132 of file TSocket.h. ◆ MarkBrokenConnection(). void TSocket::MarkBrokenConnection ; (; ). protected . Close the socket and mark as due to a broken connection. ; Definition at line 371 of file TSocket.cxx. ◆ NetError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (c",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:31665,Integrability,message,message,31665,"tError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if o",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:31718,Integrability,message,message,31718,"r * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in cas",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:32144,Integrability,message,message,32144," a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:32635,Integrability,message,message,32635," ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWO",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:33096,Integrability,message,message,33096," ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be delet",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:33142,Integrability,message,message,33142,"integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:33194,Integrability,message,message,33194,"integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 789 of file TSocket.cxx. ◆ Recv() [4/4]. Int_t TSocket::Recv ; (; TMessage *& ; mess). virtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:33981,Integrability,message,message,33981,".cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34030,Integrability,message,message,34030,"otected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kME",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34085,Integrability,message,message,34085,"otected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kME",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:36085,Integrability,message,message,36085,"the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 522 of file TSocket.cxx. ◆ Send() [3/4]. Int_t TSocket::Send ; (; Int_t ; kind). virtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 463 of file TSocket.cxx. ◆ Send() [4/4]. Int_t TSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). virtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 481 of file TSocket.cxx. ◆ SendObject(). Int_t TSocket::SendObjec",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:36621,Integrability,message,message,36621,"ing the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 522 of file TSocket.cxx. ◆ Send() [3/4]. Int_t TSocket::Send ; (; Int_t ; kind). virtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 463 of file TSocket.cxx. ◆ Send() [4/4]. Int_t TSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). virtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 481 of file TSocket.cxx. ◆ SendObject(). Int_t TSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented in TServerSocket.; Definition at line 600 of file TSocket.cxx. ◆ SendProcessIDs(). void TSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessI",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:37639,Integrability,message,message,37639,"Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 481 of file TSocket.cxx. ◆ SendObject(). Int_t TSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented in TServerSocket.; Definition at line 600 of file TSocket.cxx. ◆ SendProcessIDs(). void TSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessIDs in the object in the message is found by looking in the TMessage bits. We send only the TProcessIDs not yet send on this socket. ; Definition at line 684 of file TSocket.cxx. ◆ SendRaw(). Int_t TSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 620 of file TSocket.cxx. ◆ SendStreamerInfos(). void TSocket::SendStreamerInfos ; (; const TMessage & ; mess). protected . Check if TStreamerInfo must be sent. ; The list of TStreamerInfo of classes in the object in the message is in the fInfos list of the message. We send only the TStreamerInfos not yet sent on this socket. ; Definition at line 649 of file TSocket.cxx.",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:38488,Integrability,message,message,38488,"s(). void TSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessIDs in the object in the message is found by looking in the TMessage bits. We send only the TProcessIDs not yet send on this socket. ; Definition at line 684 of file TSocket.cxx. ◆ SendRaw(). Int_t TSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 620 of file TSocket.cxx. ◆ SendStreamerInfos(). void TSocket::SendStreamerInfos ; (; const TMessage & ; mess). protected . Check if TStreamerInfo must be sent. ; The list of TStreamerInfo of classes in the object in the message is in the fInfos list of the message. We send only the TStreamerInfos not yet sent on this socket. ; Definition at line 649 of file TSocket.cxx. ◆ SetCompressionAlgorithm(). void TSocket::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). See comments for function SetCompressionSettings. ; Definition at line 1046 of file TSocket.cxx. ◆ SetCompressionLevel(). void TSocket::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). See comments for function SetCompressionSettings. ; Definition at line 1060 of file TSocket.cxx. ◆ SetCompressionSettings(). void TSocket::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ; level = 0, objects written to this file will not be compressed. level = 1, minimal compression level but fast. .... level = 9, maximal c",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:38525,Integrability,message,message,38525,"s(). void TSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessIDs in the object in the message is found by looking in the TMessage bits. We send only the TProcessIDs not yet send on this socket. ; Definition at line 684 of file TSocket.cxx. ◆ SendRaw(). Int_t TSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 620 of file TSocket.cxx. ◆ SendStreamerInfos(). void TSocket::SendStreamerInfos ; (; const TMessage & ; mess). protected . Check if TStreamerInfo must be sent. ; The list of TStreamerInfo of classes in the object in the message is in the fInfos list of the message. We send only the TStreamerInfos not yet sent on this socket. ; Definition at line 649 of file TSocket.cxx. ◆ SetCompressionAlgorithm(). void TSocket::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). See comments for function SetCompressionSettings. ; Definition at line 1046 of file TSocket.cxx. ◆ SetCompressionLevel(). void TSocket::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). See comments for function SetCompressionSettings. ; Definition at line 1060 of file TSocket.cxx. ◆ SetCompressionSettings(). void TSocket::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ; level = 0, objects written to this file will not be compressed. level = 1, minimal compression level but fast. .... level = 9, maximal c",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:668,Modifiability,inherit,inherited,668,". ROOT: TSocket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TSocket Class Reference. . Definition at line 41 of file TSocket.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ; enum  EServiceType { kSOCKD; , kROOTD; , kPROOFD; };  ; enum  EStatusBits { kIsUnix = (1ULL << ( 16 )); , kBrokenConn = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (const char *host, Int_t port, Int_t tcpwindowsize=-1);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TSocket (const TSocket &s);  TSocket copy ctor. ;  ;  TSocket (Int_t descriptor);  Create a socket. ;  ;  TSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:5318,Modifiability,inherit,inherited,5318,"a raw buffer of specified length. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; virtual Int_t SetOption (ESockOptions opt, Int_t val);  Set socket options. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (TSecContext *ctx);  ; void SetService (const char *service);  ; void SetServType (Int_t st);  ; void SetUrl (const char *url);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Touch ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and tit",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:6946,Modifiability,inherit,inherited,6946,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:8039,Modifiability,inherit,inheritance,8039,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:9996,Modifiability,inherit,inherits,9996,"tual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:10113,Modifiability,inherit,inherits,10113,"indObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:14762,Modifiability,inherit,inherited,14762,"authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket ();  ; Bool_t Authenticate (const char *user);  Authenticated the socket with specified user. ;  ; void MarkBrokenConnection ();  Close the socket and mark as due to a broken connection. ;  ; Bool_t RecvProcessIDs (TMessage *mess);  Receive a message containing process ids. ;  ; Bool_t RecvStreame",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:14972,Modifiability,inherit,inherited,14972,"authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket ();  ; Bool_t Authenticate (const char *user);  Authenticated the socket with specified user. ;  ; void MarkBrokenConnection ();  Close the socket and mark as due to a broken connection. ;  ; Bool_t RecvProcessIDs (TMessage *mess);  Receive a message containing process ids. ;  ; Bool_t RecvStreame",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:15563,Modifiability,inherit,inherited,15563,"_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket ();  ; Bool_t Authenticate (const char *user);  Authenticated the socket with specified user. ;  ; void MarkBrokenConnection ();  Close the socket and mark as due to a broken connection. ;  ; Bool_t RecvProcessIDs (TMessage *mess);  Receive a message containing process ids. ;  ; Bool_t RecvStreamerInfos (TMessage *mess);  Receive a message containing streamer infos. ;  ; void SendProcessIDs (const TMessage &mess);  Check if TProcessIDs must be sent. ;  ; void SendStreamerInfos (const TMessage &mess);  Check if TStreamerInfo must be sent. ;  ; void SetDescriptor (Int_t desc);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TInetAddress fAddress;  ; TBits fBitsInfo;  ; UInt_t fBy",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:16284,Modifiability,inherit,inherited,16284," Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket ();  ; Bool_t Authenticate (const char *user);  Authenticated the socket with specified user. ;  ; void MarkBrokenConnection ();  Close the socket and mark as due to a broken connection. ;  ; Bool_t RecvProcessIDs (TMessage *mess);  Receive a message containing process ids. ;  ; Bool_t RecvStreamerInfos (TMessage *mess);  Receive a message containing streamer infos. ;  ; void SendProcessIDs (const TMessage &mess);  Check if TProcessIDs must be sent. ;  ; void SendStreamerInfos (const TMessage &mess);  Check if TStreamerInfo must be sent. ;  ; void SetDescriptor (Int_t desc);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TInetAddress fAddress;  ; TBits fBitsInfo;  ; UInt_t fBytesRecv;  ; UInt_t fBytesSent;  ; Int_t fCompress;  ; TTimeStamp fLastUsage;  ; TVirtualMutex * fLastUsageMtx;  ; TInetAddress fLocalAddress;  ; Int_t fRemoteProtocol;  ; TSecContext * fSecContext;  ; TString fService;  ; EServiceType fServType;  ; Int_t fSocket;  ; Int_t fTcpWindowSize;  ; TString fUrl;  ; TList * fUUIDs;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static ULong64_t fgBytesRecv = 0;  ; static ULong64_t fgBytesSent = 0;  ; static Int_t fgClientProtocol = 17;  . Private Member Functions; Option_t * GetOption () const override;  ; TSocket & operator= (const TSocket &)=delete;  . Friends; class TProofServ;  ; class TServerSocket;  ; class TSlave;  . #include <TSocket.h>. Inheritance diagra",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:16895,Modifiability,inherit,inherited,16895,"*user);  Authenticated the socket with specified user. ;  ; void MarkBrokenConnection ();  Close the socket and mark as due to a broken connection. ;  ; Bool_t RecvProcessIDs (TMessage *mess);  Receive a message containing process ids. ;  ; Bool_t RecvStreamerInfos (TMessage *mess);  Receive a message containing streamer infos. ;  ; void SendProcessIDs (const TMessage &mess);  Check if TProcessIDs must be sent. ;  ; void SendStreamerInfos (const TMessage &mess);  Check if TStreamerInfo must be sent. ;  ; void SetDescriptor (Int_t desc);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TInetAddress fAddress;  ; TBits fBitsInfo;  ; UInt_t fBytesRecv;  ; UInt_t fBytesSent;  ; Int_t fCompress;  ; TTimeStamp fLastUsage;  ; TVirtualMutex * fLastUsageMtx;  ; TInetAddress fLocalAddress;  ; Int_t fRemoteProtocol;  ; TSecContext * fSecContext;  ; TString fService;  ; EServiceType fServType;  ; Int_t fSocket;  ; Int_t fTcpWindowSize;  ; TString fUrl;  ; TList * fUUIDs;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static ULong64_t fgBytesRecv = 0;  ; static ULong64_t fgBytesSent = 0;  ; static Int_t fgClientProtocol = 17;  . Private Member Functions; Option_t * GetOption () const override;  ; TSocket & operator= (const TSocket &)=delete;  . Friends; class TProofServ;  ; class TServerSocket;  ; class TSlave;  . #include <TSocket.h>. Inheritance diagram for TSocket:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterest. enum TSocket::EInterest. EnumeratorkRead ; kWrite . Definition at line 51 of file TSocket.h. ◆ EServiceType. enum TSocket::EServiceType. EnumeratorkSOCKD ; kROOTD ; kPROOFD . Definition at line 52 of file TSocket.h. ◆ ESocket",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:3741,Safety,timeout,timeout,3741,"eturns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Recv (char *mess, Int_t max);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (char *mess, Int_t max, Int_t &kind);  Receive a character string message of maximum max length. ;  ; virtual Int_t Recv (Int_t &status, Int_t &kind);  Receives a status and a message type. ;  ; virtual Int_t Recv (TMessage *&mess);  Receive a TMessage object. ;  ; virtual Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Receive a raw buffer of specified length bytes. ;  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t Send (const char *mess, Int_t kind=kMESS_STRING);  Send a character string buffer. ;  ; virtual Int_t Send (const TMessage &mess);  Send a TMessage object. ;  ; virtual Int_t Send (Int_t kind);  Send a single message opcode. ;  ; virtual Int_t Send (Int_t status, Int_t kind);  Send a status and a single message opcode. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; virtual Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault);  Send a raw buffer of specified length. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaul",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34261,Safety,timeout,timeout,34261," line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definitio",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34522,Safety,timeout,timeout,34522,"ceived bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK,",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34588,Safety,timeout,timeout,34588," case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having rece",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34650,Safety,detect,detected,34650,"-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34666,Safety,timeout,timeout,34666,"-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:34688,Safety,timeout,timeout,34688,"-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:6186,Security,hash,hash,6186," an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Touch ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:13968,Security,authenticat,authenticates,13968,"id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static cons",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:14214,Security,authenticat,authenticates,14214,"ttings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:20397,Security,authenticat,authentication,20397," program termination. ; Definition at line 122 of file TSocket.cxx. ◆ TSocket() [4/9]. TSocket::TSocket ; (; const char * ; host, . const char * ; service, . Int_t ; tcpwindowsize = -1 . ). Create a socket. ; Connect to named service on the remote host. Use tcpwindowsize to specify the size of the receive buffer, it has to be specified here to make sure the window scale option is set (for tcpwindowsize > 65KB and for platforms supporting window scaling). Returns when connection has been accepted by remote side. Use IsValid() to check the validity of the socket. Every socket is added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. ; Definition at line 165 of file TSocket.cxx. ◆ TSocket() [5/9]. TSocket::TSocket ; (; const char * ; url, . Int_t ; port, . Int_t ; tcpwindowsize = -1 . ). Create a socket; see CreateAuthSocket for the form of url. ; Connect to the specified port # on the remote host. If user is specified in url, try authentication as user. Use tcpwindowsize to specify the size of the receive buffer, it has to be specified here to make sure the window scale option is set (for tcpwindowsize > 65KB and for platforms supporting window scaling). Returns when connection has been accepted by remote side. Use IsValid() to check the validity of the socket. Every socket is added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. ; Definition at line 210 of file TSocket.cxx. ◆ TSocket() [6/9]. TSocket::TSocket ; (; const char * ; sockpath). Create a socket in the Unix domain on 'sockpath'. ; Returns when connection has been accepted by the server. Use IsValid() to check the validity of the socket. Every socket is added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. ; Definition at line 253 of file TSocket.cxx. ◆ TSocket() [7/9]. TSocket::TSocket ; (; Int_t ; desc). Create a soc",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:23348,Security,authenticat,authenticates,23348,". static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSocket::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSocket::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TSocket.h. ◆ Close(). void TSocket::Close ; (; Option_t * ; option = """"). virtual . Close the socket. ; If option is ""force"", calls shutdown(id,2) to shut down the connection. This will close the connection also for the parent of this process. Also called via the dtor (without option ""force"", call explicitly Close(""force"") if this is desired). ; Reimplemented in TPSocket, and TSSLSocket.; Definition at line 389 of file TSocket.cxx. ◆ CreateAuthSocket() [1/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; url, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server. ; url: [[proto][p][auth]://][user@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server r",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:23748,Security,authenticat,authentication,23748,"Close the socket. ; If option is ""force"", calls shutdown(id,2) to shut down the connection. This will close the connection also for the parent of this process. Also called via the dtor (without option ""force"", call explicitly Close(""force"") if this is desired). ; Reimplemented in TPSocket, and TSSLSocket.; Definition at line 389 of file TSocket.cxx. ◆ CreateAuthSocket() [1/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; url, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server. ; url: [[proto][p][auth]://][user@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx.",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:24285,Security,authenticat,authenticated,24285,"ket or a parallel socket and authenticates to the remote server. ; url: [[proto][p][auth]://][user@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session usin",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:24397,Security,authenticat,authentication,24397,"ser@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" t",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:24622,Security,authenticat,authenticated,24622,"dicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An alre",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:24663,Security,authenticat,authentication,24663,"dicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An alre",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:25036,Security,authenticat,authenticates,25036,"n be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type;",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:25438,Security,authenticat,authentication,25438,"q.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx. ◆ CreateAuthSocket() [2/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; user, . const char * ; url, . Int_t ; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:25828,Security,authenticat,authenticated,25828,"; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.c",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:25940,Security,authenticat,authentication,25940,"nt_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:26165,Security,authenticat,authenticated,26165,"r'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 175 of file TSocket.h. ◆ GetCompressionLevel(). Int_t TSocket::GetCompressionLevel ; (; ); const. inline . Definition at line 181 of file ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocket.html:26206,Security,authenticat,authentication,26206,"r'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 175 of file TSocket.h. ◆ GetCompressionLevel(). Int_t TSocket::GetCompressionLevel ; (; ); const. inline . Definition at line 181 of file ",MatchSource.WIKI,doc/master/classTSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocket.html
https://root.cern/doc/master/classTSocketHandler.html:865,Availability,mask,mask,865,". ROOT: TSocketHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TSocketHandler Class Reference. . Definition at line 39 of file TMonitor.cxx. Public Member Functions;  TSocketHandler (TMonitor *m, TSocket *s, Int_t interest, Bool_t mainloop=kTRUE);  ; TSocket * GetSocket () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ; Bool_t WriteNotify () override;  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void D",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:1521,Availability,mask,mask,1521," on descriptor associated with this handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ; Bool_t WriteNotify () override;  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ct",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:1542,Availability,mask,mask,1542," on descriptor associated with this handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ; Bool_t WriteNotify () override;  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ct",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:1551,Availability,mask,mask,1551," on descriptor associated with this handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ; Bool_t WriteNotify () override;  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ct",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:4138,Availability,error,error,4138,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:4227,Availability,error,error,4227,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:4382,Availability,error,error,4382,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:4679,Availability,error,error,4679,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:9114,Availability,error,error,9114," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:4144,Integrability,message,message,4144,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:4685,Integrability,message,message,4685,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:5887,Integrability,message,message,5887,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:9120,Integrability,message,message,9120," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:9493,Integrability,message,message,9493," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, voi",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:809,Modifiability,inherit,inherited,809,". ROOT: TSocketHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TSocketHandler Class Reference. . Definition at line 39 of file TMonitor.cxx. Public Member Functions;  TSocketHandler (TMonitor *m, TSocket *s, Int_t interest, Bool_t mainloop=kTRUE);  ; TSocket * GetSocket () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ; Bool_t WriteNotify () override;  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void D",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:1797,Modifiability,inherit,inherited,1797,"d from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:2377,Modifiability,inherit,inherited,2377,"verride;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:3774,Modifiability,inherit,inheritance,3774,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:5985,Modifiability,inherit,inherits,5985,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:6102,Modifiability,inherit,inherits,6102,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:9800,Modifiability,inherit,inherited,9800," SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:11853,Modifiability,inherit,inherited,11853," arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Attributes; TMonitor * fMonitor;  ; TSocket * fSocket;  . Additional Inherited Members;  Public Types inherited from TFileHandler; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TFileHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; stat",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:11935,Modifiability,inherit,inherited,11935," arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Attributes; TMonitor * fMonitor;  ; TSocket * fSocket;  . Additional Inherited Members;  Public Types inherited from TFileHandler; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TFileHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; stat",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:12591,Modifiability,inherit,inherited,12591," = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TFileHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (cons",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:12807,Modifiability,inherit,inherited,12807," = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TFileHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (cons",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:13025,Modifiability,inherit,inherited,13025," = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TFileHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (cons",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:13543,Modifiability,inherit,inherited,13543,"mber Functions inherited from TFileHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:14703,Modifiability,inherit,inherited,14703,"n_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TFileHandler;  TFileHandler ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:14802,Modifiability,inherit,inherited,14802,"n_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TFileHandler;  TFileHandler ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:14880,Modifiability,inherit,inherited,14880,"n_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TFileHandler;  TFileHandler ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:15091,Modifiability,inherit,inherited,15091,"slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TFileHandler;  TFileHandler ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from t",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:15204,Modifiability,inherit,inherited,15204,"slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TFileHandler;  TFileHandler ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from t",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:16053,Modifiability,inherit,inherited,16053,"ectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSocketHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSocketHandler(). TSocketHandler::TSocketHandler ; (; TMonitor * ; m, . TSocket * ; s, . Int_t ; interest, . Bool_t ; mainloop = kTRUE . ). Definition at line 52 of file TMonitor.cxx. Member Function Documentation. ◆ GetSocket(). TSocket * TSocketHandler::GetSocket ; (; ); const. inline . Definition at line 49 of file TMonitor.cxx. ◆ Notify(). Bool_t TSocketHandler::Notify ; (; ). overridevirtual . Notify when event occurred on descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 64 of file TMonitor.cxx. ◆ ReadNotify(). Bool_t TSocketHandler::Re",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:16154,Modifiability,inherit,inherited,16154,"ectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSocketHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSocketHandler(). TSocketHandler::TSocketHandler ; (; TMonitor * ; m, . TSocket * ; s, . Int_t ; interest, . Bool_t ; mainloop = kTRUE . ). Definition at line 52 of file TMonitor.cxx. Member Function Documentation. ◆ GetSocket(). TSocket * TSocketHandler::GetSocket ; (; ); const. inline . Definition at line 49 of file TMonitor.cxx. ◆ Notify(). Bool_t TSocketHandler::Notify ; (; ). overridevirtual . Notify when event occurred on descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 64 of file TMonitor.cxx. ◆ ReadNotify(). Bool_t TSocketHandler::Re",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:16367,Modifiability,inherit,inherited,16367,"ectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSocketHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSocketHandler(). TSocketHandler::TSocketHandler ; (; TMonitor * ; m, . TSocket * ; s, . Int_t ; interest, . Bool_t ; mainloop = kTRUE . ). Definition at line 52 of file TMonitor.cxx. Member Function Documentation. ◆ GetSocket(). TSocket * TSocketHandler::GetSocket ; (; ); const. inline . Definition at line 49 of file TMonitor.cxx. ◆ Notify(). Bool_t TSocketHandler::Notify ; (; ). overridevirtual . Notify when event occurred on descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 64 of file TMonitor.cxx. ◆ ReadNotify(). Bool_t TSocketHandler::Re",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSocketHandler.html:5616,Security,hash,hash,5616," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html
https://root.cern/doc/master/classTSortedList.html:9396,Availability,error,error,9396,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:9485,Availability,error,error,9485,"leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTi",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:9640,Availability,error,error,9640," whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is kn",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:9937,Availability,error,error,9937,"bj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname""",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:13414,Availability,error,error,13414," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSeqCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileN",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:9402,Integrability,message,message,9402,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:9943,Integrability,message,message,9943,"bj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname""",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:10804,Integrability,message,message,10804,"ecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *a",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:13420,Integrability,message,message,13420," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSeqCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileN",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:13793,Integrability,message,message,13793," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSeqCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t ObjCompare (TObject *a, TObject *b);  Compare to objects in the collection. Use member Compare() of object a. ;  ; static void QSort (TObject **a, Int_t first, Int_t last);  Sort array of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, Int_t nBs, TObject ***b, Int_t first, Int_t last);  Sort array a of TObject poin",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:337,Modifiability,inherit,inheriting,337,". ROOT: TSortedList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TSortedList Class ReferenceCore ROOT classes » Containers. ; A sorted doubly linked list. ; All sortable classes inheriting from TObject can be inserted in a TSortedList. ; Definition at line 28 of file TSortedList.h. Public Member Functions;  TSortedList (Bool_t order=kSortAscending);  ; void Add (TObject *obj) override;  Add object in sorted list. ;  ; void Add (TObject *obj, Option_t *opt) override;  Add object in sorted list. ;  ; void AddAfter (const TObject *, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *, TObject *obj) override;  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *, TObject *obj) override;  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; TClass * IsA () const override;  ; Bool_t IsSorted () const override;  ; void Sort (Bool_t=kSortAscending) override;  Sort linked list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the de",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:1931,Modifiability,inherit,inherited,1931,"ject at position idx in the list. ;  ; void AddBefore (const TObject *, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *, TObject *obj) override;  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; TClass * IsA () const override;  ; Bool_t IsSorted () const override;  ; void Sort (Bool_t=kSortAscending) override;  Sort linked list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; TObject * First () const override;  Return the first object",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:3964,Modifiability,inherit,inherited,3964,"ual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Bool_t IsAscending ();  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * LastLink () const;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; virtual TObject * Remove (TObjLink *lnk);  Remove object link (and therefore the object it contains) from the list. ;  ; void RemoveLast () override;  Remove the last object of the list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; virtual Int_t GetLast () const;  Returns index of last object in collection. ;  ; virtual Int_t IndexOf (const TObject *obj) const;  Return index of object in collection. ;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in the input list. ;  ; virtual void RemoveAfter (TObject *after);  ; virtual TObject * RemoveAt (Int_t idx);  ; virtual void RemoveBefore (TObject *before);  ; virtual void RemoveFirst ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnSort ();  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this collection. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class ",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:4620,Modifiability,inherit,inherited,4620," all other objects (and collections). ;  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; virtual TObject * Remove (TObjLink *lnk);  Remove object link (and therefore the object it contains) from the list. ;  ; void RemoveLast () override;  Remove the last object of the list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; virtual Int_t GetLast () const;  Returns index of last object in collection. ;  ; virtual Int_t IndexOf (const TObject *obj) const;  Return index of object in collection. ;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in the input list. ;  ; virtual void RemoveAfter (TObject *after);  ; virtual TObject * RemoveAt (Int_t idx);  ; virtual void RemoveBefore (TObject *before);  ; virtual void RemoveFirst ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnSort ();  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this collection. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collecti",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:4966,Modifiability,inherit,inherit,4966,");  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; virtual Int_t GetLast () const;  Returns index of last object in collection. ;  ; virtual Int_t IndexOf (const TObject *obj) const;  Return index of object in collection. ;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in the input list. ;  ; virtual void RemoveAfter (TObject *after);  ; virtual TObject * RemoveAt (Int_t idx);  ; virtual void RemoveBefore (TObject *before);  ; virtual void RemoveFirst ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnSort ();  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this collection. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIter end () const;  ; virtual Int_t GetEntries () const;  ; const char * GetName () const override;  Return name of this collection. ;  ; virtual Int_t GetSize () const;  Return the capacity of the collection, i.e. ;  ; virtual Int_t GrowBy (Int_t delta) const;  Increase the collection's capacity by delta slots. ;  ; ULong_t Hash () con",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:8196,Modifiability,inherit,inherited,8196," the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *optio",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:9101,Modifiability,inherit,inheritance,9101," bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () con",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:10902,Modifiability,inherit,inherits,10902,"const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method to declare a ",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:11019,Modifiability,inherit,inherits,11019,"n () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method to declare a method obsolete. ;  ; void operator delete (void *ptr);  Operator delete. ;  ; void operator delete (void *ptr, void",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:14026,Modifiability,inherit,inherited,14026," drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSeqCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t ObjCompare (TObject *a, TObject *b);  Compare to objects in the collection. Use member Compare() of object a. ;  ; static void QSort (TObject **a, Int_t first, Int_t last);  Sort array of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, Int_t nBs, TObject ***b, Int_t first, Int_t last);  Sort array a of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, TObject **b, Int_t first, Int_t last);  ;  Static Public Member Functions inherited from TCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do th",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:14235,Modifiability,inherit,inherited,14235," drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSeqCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t ObjCompare (TObject *a, TObject *b);  Compare to objects in the collection. Use member Compare() of object a. ;  ; static void QSort (TObject **a, Int_t first, Int_t last);  Sort array of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, Int_t nBs, TObject ***b, Int_t first, Int_t last);  Sort array a of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, TObject **b, Int_t first, Int_t last);  ;  Static Public Member Functions inherited from TCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do th",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:14930,Modifiability,inherit,inherited,14930,"tic Public Member Functions inherited from TList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSeqCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t ObjCompare (TObject *a, TObject *b);  Compare to objects in the collection. Use member Compare() of object a. ;  ; static void QSort (TObject **a, Int_t first, Int_t last);  Sort array of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, Int_t nBs, TObject ***b, Int_t first, Int_t last);  Sort array a of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, TObject **b, Int_t first, Int_t last);  ;  Static Public Member Functions inherited from TCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  P",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:15481,Modifiability,inherit,inherited,15481,"nt_t first, Int_t last);  Sort array of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, Int_t nBs, TObject ***b, Int_t first, Int_t last);  Sort array a of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, TObject **b, Int_t first, Int_t last);  ;  Static Public Member Functions inherited from TCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1UL",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:16011,Modifiability,inherit,inherited,16011,"arbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TList; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1UL",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:16080,Modifiability,inherit,inherited,16080,"arbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TList; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1UL",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:16187,Modifiability,inherit,inherited,16187,"arbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TList; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1UL",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:16828,Modifiability,inherit,inherited,16828,"rator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TList; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TList; TObjLinkPtr_t * DoSort (TObjLinkPtr_t *head, Int_t n);  Sort linked list. ;  ; TObjLink * FindLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObj",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:16977,Modifiability,inherit,inherited,16977,"rator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TList; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TList; TObjLinkPtr_t * DoSort (TObjLinkPtr_t *head, Int_t n);  Sort linked list. ;  ; TObjLink * FindLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObj",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:17110,Modifiability,inherit,inherited,17110,"rator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TList; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TList; TObjLinkPtr_t * DoSort (TObjLinkPtr_t *head, Int_t n);  Sort linked list. ;  ; TObjLink * FindLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObj",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:17209,Modifiability,inherit,inherited,17209,"rator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TList; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TList; TObjLinkPtr_t * DoSort (TObjLinkPtr_t *head, Int_t n);  Sort linked list. ;  ; TObjLink * FindLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObj",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:18197,Modifiability,inherit,inherited,18197,"dLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObjLink that also stores the option). ;  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, TObjLink *prev);  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inheri",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:18307,Modifiability,inherit,inherited,18307,"dLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObjLink that also stores the option). ;  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, TObjLink *prev);  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inheri",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:18815,Modifiability,inherit,inherited,18815,"bjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObjLink that also stores the option). ;  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, TObjLink *prev);  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <TSortedList.h>. Inheritance diagram for TSortedList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSortedList(). TSortedList::TSortedList ; (; Bool_t ; order = kSortAscending). inline . Definition at line 31 of file TSortedList.h. Member Function Documentation. ◆ Add() [1/2]. void TSortedList::Add ; (; TObject * ; obj",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:19020,Modifiability,inherit,inherited,19020,"m TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <TSortedList.h>. Inheritance diagram for TSortedList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSortedList(). TSortedList::TSortedList ; (; Bool_t ; order = kSortAscending). inline . Definition at line 31 of file TSortedList.h. Member Function Documentation. ◆ Add() [1/2]. void TSortedList::Add ; (; TObject * ; obj). overridevirtual . Add object in sorted list. ; Uses object Compare() member to find right position. ; Reimplemented from TList.; Definition at line 27 of file TSortedList.cxx. ◆ Add() [2/2]. void TSortedList::Add ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add object in sorted list. ; Uses object Compare() memb",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:19318,Modifiability,inherit,inherited,19318,"m TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <TSortedList.h>. Inheritance diagram for TSortedList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSortedList(). TSortedList::TSortedList ; (; Bool_t ; order = kSortAscending). inline . Definition at line 31 of file TSortedList.h. Member Function Documentation. ◆ Add() [1/2]. void TSortedList::Add ; (; TObject * ; obj). overridevirtual . Add object in sorted list. ; Uses object Compare() member to find right position. ; Reimplemented from TList.; Definition at line 27 of file TSortedList.cxx. ◆ Add() [2/2]. void TSortedList::Add ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add object in sorted list. ; Uses object Compare() memb",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:19390,Modifiability,inherit,inherited,19390,"m TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <TSortedList.h>. Inheritance diagram for TSortedList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSortedList(). TSortedList::TSortedList ; (; Bool_t ; order = kSortAscending). inline . Definition at line 31 of file TSortedList.h. Member Function Documentation. ◆ Add() [1/2]. void TSortedList::Add ; (; TObject * ; obj). overridevirtual . Add object in sorted list. ; Uses object Compare() member to find right position. ; Reimplemented from TList.; Definition at line 27 of file TSortedList.cxx. ◆ Add() [2/2]. void TSortedList::Add ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add object in sorted list. ; Uses object Compare() memb",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:18523,Performance,perform,perform,18523,"dLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObjLink that also stores the option). ;  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, TObjLink *prev);  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inheri",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:19062,Performance,cache,cache,19062,"m TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <TSortedList.h>. Inheritance diagram for TSortedList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSortedList(). TSortedList::TSortedList ; (; Bool_t ; order = kSortAscending). inline . Definition at line 31 of file TSortedList.h. Member Function Documentation. ◆ Add() [1/2]. void TSortedList::Add ; (; TObject * ; obj). overridevirtual . Add object in sorted list. ; Uses object Compare() member to find right position. ; Reimplemented from TList.; Definition at line 27 of file TSortedList.cxx. ◆ Add() [2/2]. void TSortedList::Add ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add object in sorted list. ; Uses object Compare() memb",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:7902,Safety,safe,safe,7902,"d Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:5955,Security,hash,hash,5955,"s in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIter end () const;  ; virtual Int_t GetEntries () const;  ; const char * GetName () const override;  Return name of this collection. ;  ; virtual Int_t GetSize () const;  Return the capacity of the collection, i.e. ;  ; virtual Int_t GrowBy (Int_t delta) const;  Increase the collection's capacity by delta slots. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsArgNull (const char *where, const TObject *obj) const;  Returns true if object is a null pointer. ;  ; virtual Bool_t IsEmpty () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsOwner () const;  ; Bool_t IsSortable () const override;  ; R__ALWAYS_INLINE Bool_t IsUsingRWLock () const;  ; void ls (Option_t *option="""") const override;  List (ls) all objects in this collection. ;  ; virtual TIterator * MakeReverseIterator () const;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ; TObject * operator() (const char *name) const;  Find an object in this collection by name. ;  ; void Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the ",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:7537,Security,access,accessible,7537," MakeReverseIterator () const;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ; TObject * operator() (const char *name) const;  Find an object in this collection by name. ;  ; void Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract.",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:7877,Security,access,access,7877,"d Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSortedList.html:15345,Security,access,accessible,15345,"s_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t ObjCompare (TObject *a, TObject *b);  Compare to objects in the collection. Use member Compare() of object a. ;  ; static void QSort (TObject **a, Int_t first, Int_t last);  Sort array of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, Int_t nBs, TObject ***b, Int_t first, Int_t last);  Sort array a of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, TObject **b, Int_t first, Int_t last);  ;  Static Public Member Functions inherited from TCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x0",MatchSource.WIKI,doc/master/classTSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSortedList.html
https://root.cern/doc/master/classTSpectrum.html:8209,Availability,error,error,8209,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:8298,Availability,error,error,8298,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:8453,Availability,error,error,8453,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:8750,Availability,error,error,8750,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:12834,Availability,error,error,12834,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  Static function: Set average window of searched peaks (see TSpectrum::SearchHighRes). ;  ; static void Se",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:20111,Availability,error,error,20111,"spectrum, . Int_t ; ssize, . Int_t ; numberIterations, . Int_t ; direction, . Int_t ; filterOrder, . bool ; smoothing, . Int_t ; smoothWindow, . bool ; compton . ). This function calculates background spectrum from source spectrum. ; The result is placed in the vector pointed by spectrum pointer. The goal is to separate the useful information (peaks) from useless information (background). method is based on Sensitive Nonlinear Iterative Peak (SNIP) clipping algorithm.; new value in the channel ""i"" is calculated. \[; v_p(i) = min \left\{ v_{p-1}(i)^{\frac{\left[v_{p-1}(i+p)+v_{p-1}(i-p)\right]}{2}} \right\}; \]. where p = 1, 2, ..., numberIterations. In fact it represents second order difference filter (-1,2,-1).; One can also change the direction of the change of the clipping window, the order of the clipping filter, to include smoothing, to set width of smoothing window and to include the estimation of Compton edges. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window. Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter. Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the estimation of background will be included. Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window. Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7, kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience application",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:20161,Availability,error,error,20161,"spectrum, . Int_t ; ssize, . Int_t ; numberIterations, . Int_t ; direction, . Int_t ; filterOrder, . bool ; smoothing, . Int_t ; smoothWindow, . bool ; compton . ). This function calculates background spectrum from source spectrum. ; The result is placed in the vector pointed by spectrum pointer. The goal is to separate the useful information (peaks) from useless information (background). method is based on Sensitive Nonlinear Iterative Peak (SNIP) clipping algorithm.; new value in the channel ""i"" is calculated. \[; v_p(i) = min \left\{ v_{p-1}(i)^{\frac{\left[v_{p-1}(i+p)+v_{p-1}(i-p)\right]}{2}} \right\}; \]. where p = 1, 2, ..., numberIterations. In fact it represents second order difference filter (-1,2,-1).; One can also change the direction of the change of the clipping window, the order of the clipping filter, to include smoothing, to set width of smoothing window and to include the estimation of Compton edges. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window. Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter. Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the estimation of background will be included. Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window. Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7, kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience application",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:33851,Availability,error,error,33851,"Spectrum::kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,source[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME L"");; ; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,40,TSpectrum::kBackDecreasingWindow,; TSpectrum::kBackOrder8,kFALSE,; TSpectrum::kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d4->SetBinContent(i + 1,source[i]);; d4->SetLineColor(kMagenta);; d4->Draw(""SAME L"");; }; TSpectrum::kBackOrder8@ kBackOrder8Definition TSpectrum.h:40; TSpectrum::kBackOrder6@ kBackOrder6Definition TSpectrum.h:39; TSpectrum::kBackOrder4@ kBackOrder4Definition TSpectrum.h:38; . Example 6 script Background_smooth.C:; The estimate of the background can be influenced by noise present in the spectrum. We proposed the algorithm of the background estimate with simultaneous smoothing. In the original algorithm without smoothing, the estimated background snatches the lower spikes in the noise. Consequently, the areas of peaks are biased by this error. Principle of background estimation algorithm with simultaneous smoothing.; ; void Background_smooth() {; Int_t i;; const Int_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();; ; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *back = (TH1F*) f->Get(""back1"");; back->SetTitle(""Estimation of background with noise"");; back->SetAxisRange(3460,3830);; back->Draw(""L"");; ; TSpectrum *s = new TSpectrum();; ; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,6,TSpectrum::kBackDecreasingWindow,; TSpectrum::kBackOrder2,kFALSE,; TSpectrum::kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d1->SetBinContent(i + 1,source[i]);; d1->SetLineColor(kRed);; d1->Draw(""SAME L"");; ; for (i = 0; i < nbin",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:37810,Availability,error,error,37810,"scribing this class . ◆ Class_Name(). static const char * TSpectrum::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpectrum::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TSpectrum.h. ◆ DeclFileName(). static const char * TSpectrum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TSpectrum.h. ◆ Deconvolution(). const char * TSpectrum::Deconvolution ; (; Double_t * ; source, . const Double_t * ; response, . Int_t ; ssize, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional deconvolution function. ; This function calculates deconvolution from source spectrum according to response spectrum using Gold deconvolution algorithm. The result is placed in the vector pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error. If desired after every numberIterations one can apply boosting operation (exponential function with exponent given by boost coefficient) and repeat it numberRepetitions times.; Parameters:. source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given below; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient. The goal of this function is the improvement of the resolution in spectra, decomposition of multiplets. The mathematical formulation of the convolution system is:. \[; y(i) = \sum_{k=0}^{N-1} h(i-k)x(k), i=0,1,2,...,N-1; \]. where h(i) is the impulse response function, x, y are input and output vectors, respectively, N is the length of x and h vectors. In matrix form we have: ; \[; \begin{bmatrix}; y(0) \\; y(1) \\; \dots \\; y(2N-2) \\; y(2N-1); \end{bmatrix}; =; \begin{",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:37860,Availability,error,error,37860,"scribing this class . ◆ Class_Name(). static const char * TSpectrum::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpectrum::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TSpectrum.h. ◆ DeclFileName(). static const char * TSpectrum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TSpectrum.h. ◆ Deconvolution(). const char * TSpectrum::Deconvolution ; (; Double_t * ; source, . const Double_t * ; response, . Int_t ; ssize, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional deconvolution function. ; This function calculates deconvolution from source spectrum according to response spectrum using Gold deconvolution algorithm. The result is placed in the vector pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error. If desired after every numberIterations one can apply boosting operation (exponential function with exponent given by boost coefficient) and repeat it numberRepetitions times.; Parameters:. source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given below; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient. The goal of this function is the improvement of the resolution in spectra, decomposition of multiplets. The mathematical formulation of the convolution system is:. \[; y(i) = \sum_{k=0}^{N-1} h(i-k)x(k), i=0,1,2,...,N-1; \]. where h(i) is the impulse response function, x, y are input and output vectors, respectively, N is the length of x and h vectors. In matrix form we have: ; \[; \begin{bmatrix}; y(0) \\; y(1) \\; \dots \\; y(2N-2) \\; y(2N-1); \end{bmatrix}; =; \begin{",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:46447,Availability,error,error,46447,"Gold deconvolution method"");; TH1F *d = (TH1F*) f->Get(""decon_response_wide"");; ; for (i = 0; i < nbins; i++) source[i] = h->GetBinContent(i + 1);; for (i = 0; i < nbins; i++) response[i] = d->GetBinContent(i + 1);; ; h->SetMaximum(50000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,10000,1,1);; ; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; . Example 10 - script Deconvolution_wide_boost.C :; Further let us employ boosting operation into deconvolution (Fig. 17).; The original source spectrum is drawn with black color, the spectrum after the deconvolution with red color. Number of iterations = 200, number of repetitions = 50 and boosting coefficient = 1.2.; One can observe that peaks are decomposed practically to delta functions. Number of peaks is correct, positions of big peaks as well as their areas are relatively well estimated. However there is a considerable error in the estimation of the position of small right hand peak.; ; void Deconvolution_wide_boost() {; Int_t i;; const Int_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; Double_t response[nbins];; gROOT->ForceStyle();; ; TH1F *h = new TH1F(""h"",""Deconvolution"",nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; h = (TH1F*) f->Get(""decon3"");; h->SetTitle(""Deconvolution of closely positioned overlapping peaks using boosted Gold deconvolution method"");; d = (TH1F*) f->Get(""decon_response_wide"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; ; h->SetMaximum(200000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,200,50,1.2);; ; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kR",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:48041,Availability,error,error,48041,"method"");; d = (TH1F*) f->Get(""decon_response_wide"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; ; h->SetMaximum(200000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,200,50,1.2);; ; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; . Definition at line 1452 of file TSpectrum.cxx. ◆ DeconvolutionRL(). const char * TSpectrum::DeconvolutionRL ; (; Double_t * ; source, . const Double_t * ; response, . Int_t ; ssize, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional deconvolution function. ; This function calculates deconvolution from source spectrum according to response spectrum using Richardson-Lucy deconvolution algorithm. The result is placed in the vector pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error. If desired after every numberIterations one can apply boosting operation (exponential function with exponent given by boost coefficient) and repeat it numberRepetitions times (see Gold deconvolution).; Parameters:. source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given above; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient. Richardson-Lucy deconvolution algorithm:; For discrete systems it has the form: ; \[; x^{(n)}(i) = x^{(n-1)}(i) \sum_{j=0}^{N-1}h(i,j)\frac{y(j)}{\sum_{k=0}^{M-1}h(j,k)x^{(n-1)}(k)} \\; i \in \left<0,M-1\right>; \]. for positive input data and response matrix this iterative method forces the deconvoluted spectra to be non-negative. The Richardson-Lucy iteration converges to the maximum likelihood solution for Poisson statistics in the data.; Refer",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:48091,Availability,error,error,48091,"method"");; d = (TH1F*) f->Get(""decon_response_wide"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; ; h->SetMaximum(200000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,200,50,1.2);; ; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; . Definition at line 1452 of file TSpectrum.cxx. ◆ DeconvolutionRL(). const char * TSpectrum::DeconvolutionRL ; (; Double_t * ; source, . const Double_t * ; response, . Int_t ; ssize, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional deconvolution function. ; This function calculates deconvolution from source spectrum according to response spectrum using Richardson-Lucy deconvolution algorithm. The result is placed in the vector pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error. If desired after every numberIterations one can apply boosting operation (exponential function with exponent given by boost coefficient) and repeat it numberRepetitions times (see Gold deconvolution).; Parameters:. source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given above; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient. Richardson-Lucy deconvolution algorithm:; For discrete systems it has the form: ; \[; x^{(n)}(i) = x^{(n-1)}(i) \sum_{j=0}^{N-1}h(i,j)\frac{y(j)}{\sum_{k=0}^{M-1}h(j,k)x^{(n-1)}(k)} \\; i \in \left<0,M-1\right>; \]. for positive input data and response matrix this iterative method forces the deconvoluted spectra to be non-negative. The Richardson-Lucy iteration converges to the maximum likelihood solution for Poisson statistics in the data.; Refer",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:65592,Availability,error,error,65592,"id TSpectrum::SetDeconIterations ; (; Int_t ; n = 3). static . Static function: Set max number of decon iterations in deconvolution operation (see TSpectrum::SearchHighRes). ; Definition at line 101 of file TSpectrum.cxx. ◆ SetResolution(). void TSpectrum::SetResolution ; (; Double_t ; resolution = 1). NOT USED resolution: determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 344 of file TSpectrum.cxx. ◆ SmoothMarkov(). const char * TSpectrum::SmoothMarkov ; (; Double_t * ; source, . Int_t ; ssize, . Int_t ; averWindow . ). One-dimensional markov spectrum smoothing function. ; This function calculates smoothed spectrum from source spectrum based on Markov chain method. The result is placed in the array pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. source: pointer to the array of source spectrum; ssize: length of source array; averWindow: width of averaging smoothing window. The goal of this function is the suppression of the statistical fluctuations. The algorithm is based on discrete Markov chain, which has very simple invariant distribution:. \[; U_2 = \frac{p_{1,2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1}...U_2U_1; \]. \( U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i=1\). \( n \) is the length of the smoothed spectrum and ; \[; p_{i,i\pm 1} = A_i\sum_{k=1}^{m} exp\left[ \frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. Reference:. Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Example 14 - script Smoothing.C; ; void Smoothing() {; Int_t i;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();;",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:65642,Availability,error,error,65642,"id TSpectrum::SetDeconIterations ; (; Int_t ; n = 3). static . Static function: Set max number of decon iterations in deconvolution operation (see TSpectrum::SearchHighRes). ; Definition at line 101 of file TSpectrum.cxx. ◆ SetResolution(). void TSpectrum::SetResolution ; (; Double_t ; resolution = 1). NOT USED resolution: determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 344 of file TSpectrum.cxx. ◆ SmoothMarkov(). const char * TSpectrum::SmoothMarkov ; (; Double_t * ; source, . Int_t ; ssize, . Int_t ; averWindow . ). One-dimensional markov spectrum smoothing function. ; This function calculates smoothed spectrum from source spectrum based on Markov chain method. The result is placed in the array pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. source: pointer to the array of source spectrum; ssize: length of source array; averWindow: width of averaging smoothing window. The goal of this function is the suppression of the statistical fluctuations. The algorithm is based on discrete Markov chain, which has very simple invariant distribution:. \[; U_2 = \frac{p_{1,2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1}...U_2U_1; \]. \( U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i=1\). \( n \) is the length of the smoothed spectrum and ; \[; p_{i,i\pm 1} = A_i\sum_{k=1}^{m} exp\left[ \frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. Reference:. Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Example 14 - script Smoothing.C; ; void Smoothing() {; Int_t i;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();;",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:68794,Availability,error,error,68794,"shold = 0.05 . ). static . Static function, interface to TSpectrum::Search. ; Definition at line 2570 of file TSpectrum.cxx. ◆ Streamer(). void TSpectrum::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TSpectrum.h. ◆ Unfolding(). const char * TSpectrum::Unfolding ; (; Double_t * ; source, . const Double_t ** ; respMatrix, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional unfolding function. ; This function unfolds source spectrum according to response matrix columns. The result is placed in the vector pointed by source pointer. The coefficients of the resulting vector represent contents of the columns (weights) in the input vector. On successful completion it returns 0. On error it returns pointer to the string describing error. If desired after every numberIterations one can apply boosting operation (exponential function with exponent given by boost coefficient) and repeat it numberRepetitions times. For details we refer to [1].; Parameters:. source: pointer to the vector of source spectrum; respMatrix: pointer to the matrix of response spectra; ssizex: length of source spectrum and # of rows of the response matrix. ssizex must be >= ssizey.; ssizey: length of destination coefficients and # of columns of the response matrix.; numberIterations: number of iterations; numberRepetitions: number of repetitions for boosted deconvolution. It must be greater or equal to one.; boost: boosting coefficient, applies only if numberRepetitions is greater than one. Unfolding:; The goal is the decomposition of spectrum to a given set of component spectra.; The mathematical formulation of the discrete linear system is:. \[; y(i) = \sum_{k=0}^{N_y-1} h(i,k)x(k), i = 0,1,2,...,N_x-1; \]. \[; \begi",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:68844,Availability,error,error,68844,"shold = 0.05 . ). static . Static function, interface to TSpectrum::Search. ; Definition at line 2570 of file TSpectrum.cxx. ◆ Streamer(). void TSpectrum::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TSpectrum.h. ◆ Unfolding(). const char * TSpectrum::Unfolding ; (; Double_t * ; source, . const Double_t ** ; respMatrix, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional unfolding function. ; This function unfolds source spectrum according to response matrix columns. The result is placed in the vector pointed by source pointer. The coefficients of the resulting vector represent contents of the columns (weights) in the input vector. On successful completion it returns 0. On error it returns pointer to the string describing error. If desired after every numberIterations one can apply boosting operation (exponential function with exponent given by boost coefficient) and repeat it numberRepetitions times. For details we refer to [1].; Parameters:. source: pointer to the vector of source spectrum; respMatrix: pointer to the matrix of response spectra; ssizex: length of source spectrum and # of rows of the response matrix. ssizex must be >= ssizey.; ssizey: length of destination coefficients and # of columns of the response matrix.; numberIterations: number of iterations; numberRepetitions: number of repetitions for boosted deconvolution. It must be greater or equal to one.; boost: boosting coefficient, applies only if numberRepetitions is greater than one. Unfolding:; The goal is the decomposition of spectrum to a given set of component spectra.; The mathematical formulation of the discrete linear system is:. \[; y(i) = \sum_{k=0}^{N_y-1} h(i,k)x(k), i = 0,1,2,...,N_x-1; \]. \[; \begi",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:55615,Deployability,release,release,55615," (TPolyMarker*)functions->FindObject(""TPolyMarker"");; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space.Definition TPolyMarker.h:31; Specify the option ""goff"" to disable the storage and drawing of the polymarker.; To disable the final drawing of the histogram with the search results (in case you want to draw it yourself) specify ""nodraw"" in the options parameter. ; Definition at line 259 of file TSpectrum.cxx. ◆ Search1HighRes(). Int_t TSpectrum::Search1HighRes ; (; Double_t * ; source, . Double_t * ; destVector, . Int_t ; ssize, . Double_t ; sigma, . Double_t ; threshold, . bool ; backgroundRemove, . Int_t ; deconIterations, . bool ; markov, . Int_t ; averWindow . ). Old name of SearcHighRes introduced for back compatibility. ; This function will be removed after the June 2006 release ; Definition at line 2556 of file TSpectrum.cxx. ◆ SearchHighRes(). Int_t TSpectrum::SearchHighRes ; (; Double_t * ; source, . Double_t * ; destVector, . Int_t ; ssize, . Double_t ; sigma, . Double_t ; threshold, . bool ; backgroundRemove, . Int_t ; deconIterations, . bool ; markov, . Int_t ; averWindow . ). One-dimensional high-resolution peak search function. ; This function searches for peaks in source spectrum. It is based on deconvolution method. First the background is removed (if desired), then Markov smoothed spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. The order of peaks is arranged according to their heights in the spectrum after background elimination. The highest peak is the first in the list. On success it returns number of found peaks.; Parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize:",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:57382,Deployability,continuous,continuous,57382,"trum after background elimination. The highest peak is the first in the list. On success it returns number of found peaks.; Parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (200",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:57637,Deployability,continuous,continuous,57637,"rce spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method:; The SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved da",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:26259,Energy Efficiency,green,green,26259,"TFile(file.Data());; TH1F *back = (TH1F*) f->Get(""back1"");; back->SetTitle(""Estimation of background with decreasing window"");; back->GetXaxis()->SetRange(1,nbins);; back->Draw(""L"");; ; TSpectrum *s = new TSpectrum();; ; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; ; // Estimate the background; s->Background(source,nbins,6,TSpectrum::kBackDecreasingWindow,; TSpectrum::kBackOrder2,kFALSE,; TSpectrum::kBackSmoothing3,kFALSE);; ; // Draw the estimated background; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; TSpectrum::kBackDecreasingWindow@ kBackDecreasingWindowDefinition TSpectrum.h:42; . Example 3 script Background_width.C:; The question is how to choose the width of the clipping window, i.e., numberIterations parameter. The influence of this parameter on the estimated background is illustrated in Example 3.; Example of the influence of clipping window width on the estimated background for numberIterations=4 (red line), 6 (orange line) 8 (green line) using decreasing clipping window algorithm.; in general one should set this parameter so that the value 2*numberIterations+1 was greater than the widths of preserved objects (peaks).; ; void Background_width() {; Int_t i;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *back = (TH1F*) f->Get(""back1"");; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; ; back->GetXaxis()->SetRange(1,nbins);; back->SetTitle(""Influence of clipping window width on the estimated background"");; back->Draw(""L"");; ; TSpectrum *s = new TSpectrum();; ; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,4,TSpectrum::kBackDecreasingWi",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:28460,Energy Efficiency,green,green,28460,"; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,6,TSpectrum::kBackDecreasingWindow,; TSpectrum::kBackOrder2,kFALSE,; TSpectrum::kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d2->SetBinContent(i + 1,source[i]);; d2->SetLineColor(kOrange);; d2->Draw(""SAME L"");; ; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,8,TSpectrum::kBackDecreasingWindow,; TSpectrum::kBackOrder2,kFALSE,; TSpectrum::kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,source[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME L"");; }; kOrange@ kOrangeDefinition Rtypes.h:67; kGreen@ kGreenDefinition Rtypes.h:66; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; . Example 4 script Background_width2.C:; another example for very complex spectrum is given here.; Example of the influence of clipping window width on the estimated background for numberIterations=10 (red line), 20 (blue line), 30 (green line) and 40 (magenta line) using decreasing clipping window algorithm.; ; void Background_width2() {; Int_t i;; const Int_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = 4096;; Double_t source[nbins];; gROOT->ForceStyle();; ; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *back = (TH1F*) f->Get(""back2"");; ; back->SetTitle(""Influence of clipping window width on the estimated background"");; back->SetAxisRange(0,1000);; back->SetMaximum(7000);; back->Draw(""L"");; ; TSpectrum *s = new TSpectrum();; ; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,10,TSpectrum::kBackDecreasingWindow,; TSpectrum::kBackOrder2,kFALSE,; TSpectrum::kBackSmooth",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:31227,Energy Efficiency,green,green,31227,");; ; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,40,TSpectrum::kBackDecreasingWindow,; TSpectrum::kBackOrder2,kFALSE,; TSpectrum::kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d4->SetBinContent(i + 1,source[i]);; d4->SetLineColor(kMagenta);; d4->Draw(""SAME L"");; }; kMagenta@ kMagentaDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TH1::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Definition TH1.h:404; TH1::SetAxisRangevirtual void SetAxisRange(Double_t xmin, Double_t xmax, Option_t *axis=""X"")Set the ""axis"" range.Definition Haxis.cxx:201; . Example 5 script Background_order.C:; Second order difference filter removes linear (quasi-linear) background and preserves symmetrical peaks. However if the shape of the background is more complex one can employ higher-order clipping filters.; Example of the influence of clipping filter difference order on the estimated background for fNnumberIterations=40, 2-nd order red line, 4-th order blue line, 6-th order green line and 8-th order magenta line, and using decreasing clipping window algorithm.; ; void Background_order() {; Int_t i;; const Int_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = 4096;; Double_t source[nbins];; gROOT->ForceStyle();; ; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *back = (TH1F*) f->Get(""back2"");; back->SetTitle(""Influence of clipping filter difference order on the estimated background"");; back->SetAxisRange(1220,1460);; back->SetMaximum(3000);; back->Draw(""L"");; ; TSpectrum *s = new TSpectrum();; ; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,40,TSpectrum::kBackDecreasingWindow,; TSpectrum::kBackOrde",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:42808,Energy Efficiency,green,green,42808,"(TH1F*) f->Get(""decon_response"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; ; h->SetMaximum(30000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,1000,1,1);; ; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; h#define h(i)Definition RSha256.hxx:106; TSpectrum::Deconvolutionconst char * Deconvolution(Double_t *source, const Double_t *response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost)One-dimensional deconvolution function.Definition TSpectrum.cxx:1452; . Examples of Gold deconvolution method:; First let us study the influence of the number of iterations on the deconvolved spectrum (Fig. 12). Fig. 12 Study of Gold deconvolution algorithm.The original source spectrum is drawn with black color, spectrum after 100 iterations with red color, spectrum after 1000 iterations with blue color, spectrum after 10000 iterations with green color and spectrum after 100000 iterations with magenta color.; For relatively narrow peaks in the above given example the Gold deconvolution method is able to decompose overlapping peaks practically to delta - functions. In the next example we have chosen a synthetic data (spectrum, 256 channels) consisting of 5 very closely positioned, relatively wide peaks (sigma =5), with added noise (Fig. 13). Thin lines represent pure Gaussians (see Table 1); thick line is a resulting spectrum with additive noise (10% of the amplitude of small peaks). Fig. 13 Testing example of synthetic spectrum composed of 5 Gaussians with added noise. Peak # Position Height Area . 1 50 500 10159 . 2 70 3000 60957 . 3 80 1000 20319 . 4 100 5000 101596 . 5 110 500 10159 . Table 1 Positions, heights and areas of peaks in the spectrum shown in Fig. 13.; In ideal case, we should obtain the result given in Fig. 14. The areas of the Gaussian components ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:61949,Energy Efficiency,green,green,61949,"tMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TSpectrum::fPositionXDouble_t * fPositionX[fNPeaks] X position of peaksDefinition TSpectrum.h:28; TSpectrum::SearchHighResInt_t SearchHighRes(Double_t *source, Double_t *destVector, Int_t ssize, Double_t sigma, Double_t threshold, bool backgroundRemove, Int_t deconIterations, bool markov, Int_t averWindow)One-dimensional high-resolution peak search function.Definition TSpectrum.cxx:2119; TSpectrum::fNPeaksInt_t fNPeaksnumber of peaks foundDefinition TSpectrum.h:26; TSpectrum::GetPositionXDouble_t * GetPositionX() constDefinition TSpectrum.h:58; TSpectrum::fPositionYDouble_t * fPositionY[fNPeaks] Y position of peaksDefinition TSpectrum.h:29; . Example 16 - script SearchHR3.C:; Influence of number of iterations (3-red, 10-blue, 100- green, 1000-magenta), sigma=8, smoothing width=3.; ; void SearchHR3() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t a;; Double_t source[nbins], dest[nbins];; gROOT->ForceStyle();; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *h = (TH1F*) f->Get(""back2"");; h->SetTitle(""Influence of # of iterations in deconvolution in peak searching"");; h->GetXaxis()->SetRange(1,nbins);; ; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; ; TSpectrum *s = new TSpectrum();; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; nfound = s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 3, kTRUE, 3);; ; Double_t *xpeaks = s->GetPositionX();",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:493,Integrability,interface,interface,493,". ROOT: TSpectrum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TSpectrum Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced Spectra Processing. ; AuthorMiroslav Morhac; Legacy Code TSpectrum is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions for:. One-dimensional background estimation; One-dimensional smoothing; One-dimensional deconvolution; One-dimensional peak search. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. . Definition at line 18 of file TSpectrum.h. Public Types; enum  { ;   kBackOrder2 =0; , kBackOrder4 =1; , kBackOrder6 =2; , kBackOrder8 =3; , ;   kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSmoothing3 =3; , kBackSmoothing5 =5; , ;   kBackSmoothing7 =7; , kBackSmoothing9 =9; , kBackSmoothing11 =11; , kBackSmoothing13 =13",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:634,Integrability,depend,depending,634,". ROOT: TSpectrum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TSpectrum Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced Spectra Processing. ; AuthorMiroslav Morhac; Legacy Code TSpectrum is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions for:. One-dimensional background estimation; One-dimensional smoothing; One-dimensional deconvolution; One-dimensional peak search. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. . Definition at line 18 of file TSpectrum.h. Public Types; enum  { ;   kBackOrder2 =0; , kBackOrder4 =1; , kBackOrder6 =2; , kBackOrder8 =3; , ;   kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSmoothing3 =3; , kBackSmoothing5 =5; , ;   kBackSmoothing7 =7; , kBackSmoothing9 =9; , kBackSmoothing11 =11; , kBackSmoothing13 =13",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:8215,Integrability,message,message,8215,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:8756,Integrability,message,message,8756,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:9746,Integrability,message,message,9746,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:12840,Integrability,message,message,12840,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  Static function: Set average window of searched peaks (see TSpectrum::SearchHighRes). ;  ; static void Se",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:13213,Integrability,message,message,13213," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  Static function: Set average window of searched peaks (see TSpectrum::SearchHighRes). ;  ; static void SetDeconIterations (Int_t n=3);  Static function: Set max number of decon iterations in deconvolution operation (see TSpectrum::SearchHighRes). ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  Static function, interface to TSpectrum::Background. ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""gof",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:14081,Integrability,interface,interface,14081,"when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  Static function: Set average window of searched peaks (see TSpectrum::SearchHighRes). ;  ; static void SetDeconIterations (Int_t n=3);  Static function: Set max number of decon iterations in deconvolution operation (see TSpectrum::SearchHighRes). ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  Static function, interface to TSpectrum::Background. ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""goff"", Double_t threshold=0.05);  Static function, interface to TSpectrum::Search. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:14253,Integrability,interface,interface,14253,"r *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  Static function: Set average window of searched peaks (see TSpectrum::SearchHighRes). ;  ; static void SetDeconIterations (Int_t n=3);  Static function: Set max number of decon iterations in deconvolution operation (see TSpectrum::SearchHighRes). ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  Static function, interface to TSpectrum::Background. ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""goff"", Double_t threshold=0.05);  Static function, interface to TSpectrum::Search. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:67589,Integrability,interface,interface,67589,"gROOT->ForceStyle();; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *h = (TH1F*) f->Get(""back1"");; h->SetTitle(""Smoothed spectrum for m=3"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; h->SetAxisRange(1,1024);; h->Draw(""L"");; ; TSpectrum *s = new TSpectrum();; ; TH1F *smooth = new TH1F(""smooth"",""smooth"",nbins,0.,nbins);; smooth->SetLineColor(kRed);; ; s->SmoothMarkov(source,1024,3); //3, 7, 10; for (i = 0; i < nbins; i++) smooth->SetBinContent(i + 1,source[i]);; smooth->Draw(""L SAME"");; }; TSpectrum::SmoothMarkovconst char * SmoothMarkov(Double_t *source, Int_t ssize, Int_t averWindow)One-dimensional markov spectrum smoothing function.Definition TSpectrum.cxx:1188; . Definition at line 1188 of file TSpectrum.cxx. ◆ StaticBackground(). TH1 * TSpectrum::StaticBackground ; (; const TH1 * ; hist, . Int_t ; niter = 20, . Option_t * ; option = """" . ). static . Static function, interface to TSpectrum::Background. ; Definition at line 2580 of file TSpectrum.cxx. ◆ StaticSearch(). Int_t TSpectrum::StaticSearch ; (; const TH1 * ; hist, . Double_t ; sigma = 2, . Option_t * ; option = ""goff"", . Double_t ; threshold = 0.05 . ). static . Static function, interface to TSpectrum::Search. ; Definition at line 2570 of file TSpectrum.cxx. ◆ Streamer(). void TSpectrum::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TSpectrum.h. ◆ Unfolding(). const char * TSpectrum::Unfolding ; (; Double_t * ; source, . const Double_t ** ; respMatrix, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional unfolding function. ; This function unfolds source spectrum according to response matrix columns. The result is ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:67864,Integrability,interface,interface,67864,"BinContent(i + 1);; h->SetAxisRange(1,1024);; h->Draw(""L"");; ; TSpectrum *s = new TSpectrum();; ; TH1F *smooth = new TH1F(""smooth"",""smooth"",nbins,0.,nbins);; smooth->SetLineColor(kRed);; ; s->SmoothMarkov(source,1024,3); //3, 7, 10; for (i = 0; i < nbins; i++) smooth->SetBinContent(i + 1,source[i]);; smooth->Draw(""L SAME"");; }; TSpectrum::SmoothMarkovconst char * SmoothMarkov(Double_t *source, Int_t ssize, Int_t averWindow)One-dimensional markov spectrum smoothing function.Definition TSpectrum.cxx:1188; . Definition at line 1188 of file TSpectrum.cxx. ◆ StaticBackground(). TH1 * TSpectrum::StaticBackground ; (; const TH1 * ; hist, . Int_t ; niter = 20, . Option_t * ; option = """" . ). static . Static function, interface to TSpectrum::Background. ; Definition at line 2580 of file TSpectrum.cxx. ◆ StaticSearch(). Int_t TSpectrum::StaticSearch ; (; const TH1 * ; hist, . Double_t ; sigma = 2, . Option_t * ; option = ""goff"", . Double_t ; threshold = 0.05 . ). static . Static function, interface to TSpectrum::Search. ; Definition at line 2570 of file TSpectrum.cxx. ◆ Streamer(). void TSpectrum::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TSpectrum.h. ◆ Unfolding(). const char * TSpectrum::Unfolding ; (; Double_t * ; source, . const Double_t ** ; respMatrix, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional unfolding function. ; This function unfolds source spectrum according to response matrix columns. The result is placed in the vector pointed by source pointer. The coefficients of the resulting vector represent contents of the columns (weights) in the input vector. On successful completion it returns 0. On error it returns pointer to the string describing error. If desired after eve",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:2051,Modifiability,inherit,inherited,2051,"ac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. . Definition at line 18 of file TSpectrum.h. Public Types; enum  { ;   kBackOrder2 =0; , kBackOrder4 =1; , kBackOrder6 =2; , kBackOrder8 =3; , ;   kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSmoothing3 =3; , kBackSmoothing5 =5; , ;   kBackSmoothing7 =7; , kBackSmoothing9 =9; , kBackSmoothing11 =11; , kBackSmoothing13 =13; , ;   kBackSmoothing15 =15. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum ();  Constructor. ;  ;  TSpectrum (Int_t maxpositions, Double_t resolution=1);  ;  ~TSpectrum () override;  Destructor. ;  ; virtual TH1 * Background (const TH1 *hist, Int_t niter=20, Option_t *option="""");  One-dimensional background estimation function. ;  ; const char * Background (Double_t *spectrum, Int_t ssize, Int_t numberIterations, Int_t direction, Int_t filterOrder, bool smoothing, Int_t smoothWindow, b",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:5208,Modifiability,inherit,inherited,5208," ;  ; Int_t SearchHighRes (Double_t *source, Double_t *destVector, Int_t ssize, Double_t sigma, Double_t threshold, bool backgroundRemove, Int_t deconIterations, bool markov, Int_t averWindow);  One-dimensional high-resolution peak search function. ;  ; void SetResolution (Double_t resolution=1);  NOT USED resolution: determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ;  ; const char * SmoothMarkov (Double_t *source, Int_t ssize, Int_t averWindow);  One-dimensional markov spectrum smoothing function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const char * Unfolding (Double_t *source, const Double_t **respMatrix, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost);  One-dimensional unfolding function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:6752,Modifiability,inherit,inherited,6752,"bjects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:7845,Modifiability,inherit,inheritance,7845,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:9844,Modifiability,inherit,inherits,9844,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:9961,Modifiability,inherit,inherits,9961,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:14322,Modifiability,inherit,inherited,14322,"tatic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  Static function: Set average window of searched peaks (see TSpectrum::SearchHighRes). ;  ; static void SetDeconIterations (Int_t n=3);  Static function: Set max number of decon iterations in deconvolution operation (see TSpectrum::SearchHighRes). ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  Static function, interface to TSpectrum::Background. ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""goff"", Double_t threshold=0.05);  Static function, interface to TSpectrum::Search. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  .",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:14532,Modifiability,inherit,inherited,14532,"tatic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  Static function: Set average window of searched peaks (see TSpectrum::SearchHighRes). ;  ; static void SetDeconIterations (Int_t n=3);  Static function: Set max number of decon iterations in deconvolution operation (see TSpectrum::SearchHighRes). ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  Static function, interface to TSpectrum::Background. ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""goff"", Double_t threshold=0.05);  Static function, interface to TSpectrum::Search. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  .",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:15470,Modifiability,inherit,inherited,15470,"rom TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t fgAverageWindow = 3;  Average window of searched peaks. ;  ; static Int_t fgIterations = 3;  Maximum number of decon iterations (default=3) ;  . Private Member Functions;  TSpectrum (const TSpectrum &);  ; TSpectrum & operator= (const TSpectrum &);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum.h>. Inheritance diagram for TSpectrum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Docume",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:15871,Modifiability,inherit,inherited,15871,"racking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t fgAverageWindow = 3;  Average window of searched peaks. ;  ; static Int_t fgIterations = 3;  Maximum number of decon iterations (default=3) ;  . Private Member Functions;  TSpectrum (const TSpectrum &);  ; TSpectrum & operator= (const TSpectrum &);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum.h>. Inheritance diagram for TSpectrum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBackOrder2 ; kBackOrder4 ; kBackOrder6 ; kBackOrder8 ; kBackIncreasingWindow ; kBackDecreasingWindow ; kBackSmoothing3 ; kBackSmoothing5 ; kBackSmoothing7 ; kBackSmoothing9 ; kBackSmoothing11 ; kBackSmoothing13 ; kBackSmoothing15 . Definition at line 36 of file TSpectrum.h. Constructor & Destructor Documentation. ◆ TSpectrum() [1/3]. TSpectrum::TSpectrum ; (; const TSpectrum & ; ). private . ◆ TSpectrum() [2/3]. TSpectrum::TSpectrum ; (; ). Constructor. ; Definition at line 43 of file TSpectrum.cxx. ◆ TSpectrum() [3/3]. TSpectrum::TSpectrum ; (; Int_t ; maxpositions, . Double_t ;",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:15970,Modifiability,inherit,inherited,15970,"racking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t fgAverageWindow = 3;  Average window of searched peaks. ;  ; static Int_t fgIterations = 3;  Maximum number of decon iterations (default=3) ;  . Private Member Functions;  TSpectrum (const TSpectrum &);  ; TSpectrum & operator= (const TSpectrum &);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum.h>. Inheritance diagram for TSpectrum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBackOrder2 ; kBackOrder4 ; kBackOrder6 ; kBackOrder8 ; kBackIncreasingWindow ; kBackDecreasingWindow ; kBackSmoothing3 ; kBackSmoothing5 ; kBackSmoothing7 ; kBackSmoothing9 ; kBackSmoothing11 ; kBackSmoothing13 ; kBackSmoothing15 . Definition at line 36 of file TSpectrum.h. Constructor & Destructor Documentation. ◆ TSpectrum() [1/3]. TSpectrum::TSpectrum ; (; const TSpectrum & ; ). private . ◆ TSpectrum() [2/3]. TSpectrum::TSpectrum ; (; ). Constructor. ; Definition at line 43 of file TSpectrum.cxx. ◆ TSpectrum() [3/3]. TSpectrum::TSpectrum ; (; Int_t ; maxpositions, . Double_t ;",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:20566,Modifiability,variab,variable,20566,"r Iterative Peak (SNIP) clipping algorithm.; new value in the channel ""i"" is calculated. \[; v_p(i) = min \left\{ v_{p-1}(i)^{\frac{\left[v_{p-1}(i+p)+v_{p-1}(i-p)\right]}{2}} \right\}; \]. where p = 1, 2, ..., numberIterations. In fact it represents second order difference filter (-1,2,-1).; One can also change the direction of the change of the clipping window, the order of the clipping filter, to include smoothing, to set width of smoothing window and to include the estimation of Compton edges. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window. Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter. Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the estimation of background will be included. Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window. Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7, kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience applications. NIM, B34 (1988), 396-402.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo: Background elimination methods for multidimensional gamma-ray spectra. NIM, A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.C:; Example of the estimation of background for number of iterations=6. Original spectrum is shown in black",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:20887,Modifiability,variab,variable,20887," the clipping window, the order of the clipping filter, to include smoothing, to set width of smoothing window and to include the estimation of Compton edges. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window. Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter. Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the estimation of background will be included. Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window. Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7, kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience applications. NIM, B34 (1988), 396-402.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo: Background elimination methods for multidimensional gamma-ray spectra. NIM, A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.C:; Example of the estimation of background for number of iterations=6. Original spectrum is shown in black color, estimated background in red color.; ; void Background_incr() {; Int_t i;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();; ; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:44128,Modifiability,variab,variables,44128,"c data (spectrum, 256 channels) consisting of 5 very closely positioned, relatively wide peaks (sigma =5), with added noise (Fig. 13). Thin lines represent pure Gaussians (see Table 1); thick line is a resulting spectrum with additive noise (10% of the amplitude of small peaks). Fig. 13 Testing example of synthetic spectrum composed of 5 Gaussians with added noise. Peak # Position Height Area . 1 50 500 10159 . 2 70 3000 60957 . 3 80 1000 20319 . 4 100 5000 101596 . 5 110 500 10159 . Table 1 Positions, heights and areas of peaks in the spectrum shown in Fig. 13.; In ideal case, we should obtain the result given in Fig. 14. The areas of the Gaussian components of the spectrum are concentrated completely to delta-functions. When solving the overdetermined system of linear equations with data from Fig. 13 in the sense of minimum least squares criterion without any regularisation we obtain the result with large oscillations (Fig. 15). From mathematical point of view, it is the optimal solution in the unconstrained space of independent variables. From physical point of view we are interested only in a meaningful solution. Therefore, we have to employ regularisation techniques (e.g. Gold deconvolution) and/or to confine the space of allowed solutions to subspace of positive solutions. Fig. 14 The same spectrum like in Fig. 13, outlined bars show the contents of present components (peaks). Fig. 15 Least squares solution of the system of linear equations without regularisation. Example 9 - script Deconvolution_wide.C; When we employ Gold deconvolution algorithm we obtain the result given in Fig. 16. One can observe that the resulting spectrum is smooth. On the other hand the method is not able to decompose completely the peaks in the spectrum.; Example of Gold deconvolution for closely positioned wide peaks. The original source spectrum is drawn with black color, the spectrum after the deconvolution (10000 iterations) with red color.; ; void Deconvolution_wide() {; Int_t i;;",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:56871,Modifiability,variab,variable,56871,"ol ; markov, . Int_t ; averWindow . ). One-dimensional high-resolution peak search function. ; This function searches for peaks in source spectrum. It is based on deconvolution method. First the background is removed (if desired), then Markov smoothed spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. The order of peaks is arranged according to their heights in the spectrum after background elimination. The highest peak is the first in the list. On success it returns number of found peaks.; Parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.;",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:57030,Modifiability,variab,variable,57030,"First the background is removed (if desired), then Markov smoothed spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. The order of peaks is arranged according to their heights in the spectrum after background elimination. The highest peak is the first in the list. On success it returns number of found peaks.; Parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method fo",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:53621,Performance,perform,performed,53621,"t line 58 of file TSpectrum.h. ◆ GetPositionY(). Double_t * TSpectrum::GetPositionY ; (; ); const. inline . Definition at line 59 of file TSpectrum.h. ◆ IsA(). TClass * TSpectrum::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 78 of file TSpectrum.h. ◆ operator=(). TSpectrum & TSpectrum::operator= ; (; const TSpectrum & ; ). private . ◆ Print(). void TSpectrum::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the array of positions. ; Reimplemented from TNamed.; Definition at line 212 of file TSpectrum.cxx. ◆ Search(). Int_t TSpectrum::Search ; (; const TH1 * ; hin, . Double_t ; sigma = 2, . Option_t * ; option = """", . Double_t ; threshold = 0.05 . ). virtual . One-dimensional peak search function. ; This function searches for peaks in source spectrum in hin The number of found peaks and their positions are written into the members fNpeaks and fPositionX. The search is performed in the current histogram range.; Parameters:. hin: pointer to the histogram of source spectrum; sigma: sigma of searched peaks, for details we refer to manual; threshold: (default=0.05) peaks with amplitude less than threshold*highest_peak are discarded. 0<threshold<1. By default, the background is removed before deconvolution. Specify the option ""nobackground"" to not remove the background.; By default the ""Markov"" chain algorithm is used. Specify the option ""noMarkov"" to disable this algorithm Note that by default the source spectrum is replaced by a new spectrum; By default a polymarker object is created and added to the list of functions of the histogram. The histogram is drawn with the specified option and the polymarker object drawn on top of the histogram. The polymarker coordinates correspond to the npeaks peaks found in the histogram.; A pointer to the polymarker object can be retrieved later via: TList *functions = hin->GetListOfFunctions();; TPolyMarker *pm = (TPolyMarker*)funct",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:58694,Performance,tune,tune,58694,"close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method:; The SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters. Example 15 - script SearchHR1.C:; One-dimensional spectrum with found peaks denoted by markers, 3 iterations steps in the deconvolution.; Script:; ; void SearchHR1() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t a;; Double_t source[nbins], dest[nbins];; gROOT->ForceStyle();; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *h = (TH1F*) f->Get(""back2"");; h->SetTitle(""High resolution peak searching, number of iterations = 3"");; h->GetXaxis()->SetRange(1,nbins);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; h->Draw(""L"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; ; h->Draw(""L"");; ; TSpectrum *s = new TSpectrum();; ; nfound = s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 3, kTRUE, 3);; Double_t *xpeaks = s->GetPositionX();;",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:57759,Safety,detect,detect,57759,"ted peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method:; The SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters. Example 15 - script SearchHR1.C:; O",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:6076,Security,hash,hash,6076," ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost);  One-dimensional unfolding function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:58594,Security,access,access,58594,"ically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method:; The SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters. Example 15 - script SearchHR1.C:; One-dimensional spectrum with found peaks denoted by markers, 3 iterations steps in the deconvolution.; Script:; ; void SearchHR1() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t a;; Double_t source[nbins], dest[nbins];; gROOT->ForceStyle();; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *h = (TH1F*) f->Get(""back2"");; h->SetTitle(""High resolution peak searching, number of iterations = 3"");; h->GetXaxis()->SetRange(1,nbins);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; h->Draw(""L"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; ; h->Draw(""L"");; ; TSpectrum *s = ne",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:20558,Testability,log,logical,20558,"r Iterative Peak (SNIP) clipping algorithm.; new value in the channel ""i"" is calculated. \[; v_p(i) = min \left\{ v_{p-1}(i)^{\frac{\left[v_{p-1}(i+p)+v_{p-1}(i-p)\right]}{2}} \right\}; \]. where p = 1, 2, ..., numberIterations. In fact it represents second order difference filter (-1,2,-1).; One can also change the direction of the change of the clipping window, the order of the clipping filter, to include smoothing, to set width of smoothing window and to include the estimation of Compton edges. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window. Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter. Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the estimation of background will be included. Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window. Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7, kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience applications. NIM, B34 (1988), 396-402.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo: Background elimination methods for multidimensional gamma-ray spectra. NIM, A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.C:; Example of the estimation of background for number of iterations=6. Original spectrum is shown in black",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:20879,Testability,log,logical,20879," the clipping window, the order of the clipping filter, to include smoothing, to set width of smoothing window and to include the estimation of Compton edges. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window. Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter. Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the estimation of background will be included. Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window. Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7, kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience applications. NIM, B34 (1988), 396-402.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo: Background elimination methods for multidimensional gamma-ray spectra. NIM, A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.C:; Example of the estimation of background for number of iterations=6. Original spectrum is shown in black color, estimated background in red color.; ; void Background_incr() {; Int_t i;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();; ; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile ",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:56863,Testability,log,logical,56863,"ol ; markov, . Int_t ; averWindow . ). One-dimensional high-resolution peak search function. ; This function searches for peaks in source spectrum. It is based on deconvolution method. First the background is removed (if desired), then Markov smoothed spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. The order of peaks is arranged according to their heights in the spectrum after background elimination. The highest peak is the first in the list. On success it returns number of found peaks.; Parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.;",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:57022,Testability,log,logical,57022,"First the background is removed (if desired), then Markov smoothed spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. The order of peaks is arranged according to their heights in the spectrum after background elimination. The highest peak is the first in the list. On success it returns number of found peaks.; Parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method fo",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum.html:65934,Usability,simpl,simple,65934," 1). NOT USED resolution: determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 344 of file TSpectrum.cxx. ◆ SmoothMarkov(). const char * TSpectrum::SmoothMarkov ; (; Double_t * ; source, . Int_t ; ssize, . Int_t ; averWindow . ). One-dimensional markov spectrum smoothing function. ; This function calculates smoothed spectrum from source spectrum based on Markov chain method. The result is placed in the array pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. source: pointer to the array of source spectrum; ssize: length of source array; averWindow: width of averaging smoothing window. The goal of this function is the suppression of the statistical fluctuations. The algorithm is based on discrete Markov chain, which has very simple invariant distribution:. \[; U_2 = \frac{p_{1,2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1}...U_2U_1; \]. \( U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i=1\). \( n \) is the length of the smoothed spectrum and ; \[; p_{i,i\pm 1} = A_i\sum_{k=1}^{m} exp\left[ \frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. Reference:. Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Example 14 - script Smoothing.C; ; void Smoothing() {; Int_t i;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile *f = new TFile(file.Data());; TH1F *h = (TH1F*) f->Get(""back1"");; h->SetTitle(""Smoothed spectrum for m=3"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; h->SetAxisRange(1,1024);; h",MatchSource.WIKI,doc/master/classTSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum.html
https://root.cern/doc/master/classTSpectrum2.html:1879,Availability,avail,available,1879,"sing functions. One-dimensional background estimation functions; Two-dimensional background estimation functions; One-dimensional smoothing functions; Two-dimensional smoothing functions; One-dimensional deconvolution functions; Two-dimensional deconvolution functions; One-dimensional peak search functions; Two-dimensional peak search functions. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also the online documentation and tutorials.; All the figures in this page were prepared using the DaqProVis system, Data Acquisition, Processing and Visualization system, developed at the Institute of Physics, Slovak Academy of Sciences, Bratislava, Slovakia. ; Definition at line 18 of file TSpectrum2.h. Public Types; enum  { kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSuccessiveFiltering =0; , kBackOneStepFiltering =1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:8303,Availability,error,error,8303,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:8392,Availability,error,error,8392,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:8547,Availability,error,error,8547,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:8844,Availability,error,error,8844,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:12928,Availability,error,error,12928,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  static function: Set average window of searched peaks see TSpectrum2::SearchHighRes ;  ; static void SetD",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:35658,Deployability,continuous,continuous,35658,"e response function is generated according to given sigma and deconvolution is carried out.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks i",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:35982,Deployability,continuous,continuous,35982,"alue in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; [3] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method; SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on t",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:482,Integrability,interface,interface,482,". ROOT: TSpectrum2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TSpectrum2 Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional spectra processing. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2 is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2 might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions. One-dimensional background estimation functions; Two-dimensional background estimation functions; One-dimensional smoothing functions; Two-dimensional smoothing functions; One-dimensional deconvolution functions; Two-dimensional deconvolution functions; One-dimensional peak search functions; Two-dimensional peak search functions. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also the online documenta",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:623,Integrability,depend,depending,623,". ROOT: TSpectrum2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TSpectrum2 Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional spectra processing. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2 is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2 might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions. One-dimensional background estimation functions; Two-dimensional background estimation functions; One-dimensional smoothing functions; Two-dimensional smoothing functions; One-dimensional deconvolution functions; Two-dimensional deconvolution functions; One-dimensional peak search functions; Two-dimensional peak search functions. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also the online documenta",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:8309,Integrability,message,message,8309,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:8850,Integrability,message,message,8850,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:9840,Integrability,message,message,9840,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:12934,Integrability,message,message,12934,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  static function: Set average window of searched peaks see TSpectrum2::SearchHighRes ;  ; static void SetD",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:13307,Integrability,message,message,13307," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  static function: Set average window of searched peaks see TSpectrum2::SearchHighRes ;  ; static void SetDeconIterations (Int_t n=3);  static function: Set max number of decon iterations in deconvolution operation see TSpectrum2::SearchHighRes ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  static function (called by TH1), interface to TSpectrum2::Background ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:14187,Integrability,interface,interface,14187,"NE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  static function: Set average window of searched peaks see TSpectrum2::SearchHighRes ;  ; static void SetDeconIterations (Int_t n=3);  static function: Set max number of decon iterations in deconvolution operation see TSpectrum2::SearchHighRes ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  static function (called by TH1), interface to TSpectrum2::Background ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""goff"", Double_t threshold=0.05);  static function (called by TH1), interface to TSpectrum2::Search ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat fl",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:14375,Integrability,interface,interface,14375,"ions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  static function: Set average window of searched peaks see TSpectrum2::SearchHighRes ;  ; static void SetDeconIterations (Int_t n=3);  static function: Set max number of decon iterations in deconvolution operation see TSpectrum2::SearchHighRes ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  static function (called by TH1), interface to TSpectrum2::Background ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""goff"", Double_t threshold=0.05);  static function (called by TH1), interface to TSpectrum2::Search ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; T",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:48597,Integrability,interface,interface,48597," 256;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbinsx;; Double_t ymin = 0;; Double_t ymax = (Double_t)nbinsy;; Double_t** source = new Double_t*[nbinsx];; for (i=0;i<nbinsx;i++); source[i] = new Double_t[nbinsy];; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum2.root"";; TFile *f = new TFile(file.Data());; auto smooth = (TH2F*) f->Get(""smooth1"");; gStyle->SetOptStat(0);; auto *s = new TSpectrum2();; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; source[i][j] = smooth->GetBinContent(i + 1,j + 1);; }; }; s->SmoothMarkov(source,nbinsx,nbinsx,3); //5,7; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++); smooth->SetBinContent(i + 1,j + 1, source[i][j]);; }; smooth->Draw(""SURF2"");; }; . Definition at line 582 of file TSpectrum2.cxx. ◆ StaticBackground(). TH1 * TSpectrum2::StaticBackground ; (; const TH1 * ; hist, . Int_t ; niter = 20, . Option_t * ; option = """" . ). static . static function (called by TH1), interface to TSpectrum2::Background ; Definition at line 1721 of file TSpectrum2.cxx. ◆ StaticSearch(). Int_t TSpectrum2::StaticSearch ; (; const TH1 * ; hist, . Double_t ; sigma = 2, . Option_t * ; option = ""goff"", . Double_t ; threshold = 0.05 . ). static . static function (called by TH1), interface to TSpectrum2::Search ; Definition at line 1712 of file TSpectrum2.cxx. ◆ Streamer(). void TSpectrum2::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum2::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TSpectrum2.h. Member Data Documentation. ◆ fgAverageWindow. Int_t TSpectrum2::fgAverageWindow = 3. staticprotected . Average window of searched peaks. ; Definition at line 27 of file TSpectrum2.h. ◆ fgIterations. Int_t TSpectrum2::fgIterations = 3. staticprotected . Maximum number of decon iterations (default=3) ; Definition at line 28 of file TSpectrum2.h. ◆",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:48890,Integrability,interface,interface,48890,"Spectrum2.root"";; TFile *f = new TFile(file.Data());; auto smooth = (TH2F*) f->Get(""smooth1"");; gStyle->SetOptStat(0);; auto *s = new TSpectrum2();; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; source[i][j] = smooth->GetBinContent(i + 1,j + 1);; }; }; s->SmoothMarkov(source,nbinsx,nbinsx,3); //5,7; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++); smooth->SetBinContent(i + 1,j + 1, source[i][j]);; }; smooth->Draw(""SURF2"");; }; . Definition at line 582 of file TSpectrum2.cxx. ◆ StaticBackground(). TH1 * TSpectrum2::StaticBackground ; (; const TH1 * ; hist, . Int_t ; niter = 20, . Option_t * ; option = """" . ). static . static function (called by TH1), interface to TSpectrum2::Background ; Definition at line 1721 of file TSpectrum2.cxx. ◆ StaticSearch(). Int_t TSpectrum2::StaticSearch ; (; const TH1 * ; hist, . Double_t ; sigma = 2, . Option_t * ; option = ""goff"", . Double_t ; threshold = 0.05 . ). static . static function (called by TH1), interface to TSpectrum2::Search ; Definition at line 1712 of file TSpectrum2.cxx. ◆ Streamer(). void TSpectrum2::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum2::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TSpectrum2.h. Member Data Documentation. ◆ fgAverageWindow. Int_t TSpectrum2::fgAverageWindow = 3. staticprotected . Average window of searched peaks. ; Definition at line 27 of file TSpectrum2.h. ◆ fgIterations. Int_t TSpectrum2::fgIterations = 3. staticprotected . Maximum number of decon iterations (default=3) ; Definition at line 28 of file TSpectrum2.h. ◆ fHistogram. TH1* TSpectrum2::fHistogram. protected . resulting histogram ; Definition at line 26 of file TSpectrum2.h. ◆ fMaxPeaks. Int_t TSpectrum2::fMaxPeaks. protected . Maximum number of peaks to be found. ; Definition at line 20 of file TSpectrum2.h. ◆ fNPeaks. Int_t TSpectrum2::fNPea",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:2438,Modifiability,inherit,inherited,2438,"Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also the online documentation and tutorials.; All the figures in this page were prepared using the DaqProVis system, Data Acquisition, Processing and Visualization system, developed at the Institute of Physics, Slovak Academy of Sciences, Bratislava, Slovakia. ; Definition at line 18 of file TSpectrum2.h. Public Types; enum  { kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSuccessiveFiltering =0; , kBackOneStepFiltering =1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2 ();  Constructor. ;  ;  TSpectrum2 (Int_t maxpositions, Double_t resolution=1);  ;  ~TSpectrum2 () override;  Destructor. ;  ; virtual TH1 * Background (const TH1 *hist, Int_t niter=20, Option_t *option="""");  This function calculates the background spectrum in the input histogram h. ;  ; const char * Background (Double_t **spectrum, Int_t ssize",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:5302,Modifiability,inherit,inherited,5302,"or peaks in source spectrum in hin The number of found peaks and their positions are written into the members fNpeaks and fPositionX. ;  ; Int_t SearchHighRes (Double_t **source, Double_t **dest, Int_t ssizex, Int_t ssizey, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow);  This function searches for peaks in source spectrum It is based on deconvolution method. ;  ; void SetResolution (Double_t resolution=1);  NOT USED resolution: determines resolution of the neighboring peaks default value is 1 correspond to 3 sigma distance between peaks. ;  ; const char * SmoothMarkov (Double_t **source, Int_t ssizex, Int_t ssizey, Int_t averWindow);  This function calculates smoothed spectrum from source spectrum based on Markov chain method. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:6846,Modifiability,inherit,inherited,6846,"bjects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:7939,Modifiability,inherit,inheritance,7939,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:9938,Modifiability,inherit,inherits,9938,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:10055,Modifiability,inherit,inherits,10055,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:14444,Modifiability,inherit,inherited,14444,"ions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  static function: Set average window of searched peaks see TSpectrum2::SearchHighRes ;  ; static void SetDeconIterations (Int_t n=3);  static function: Set max number of decon iterations in deconvolution operation see TSpectrum2::SearchHighRes ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  static function (called by TH1), interface to TSpectrum2::Background ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""goff"", Double_t threshold=0.05);  static function (called by TH1), interface to TSpectrum2::Search ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; T",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:14654,Modifiability,inherit,inherited,14654,"ions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetAverageWindow (Int_t w=3);  static function: Set average window of searched peaks see TSpectrum2::SearchHighRes ;  ; static void SetDeconIterations (Int_t n=3);  static function: Set max number of decon iterations in deconvolution operation see TSpectrum2::SearchHighRes ;  ; static TH1 * StaticBackground (const TH1 *hist, Int_t niter=20, Option_t *option="""");  static function (called by TH1), interface to TSpectrum2::Background ;  ; static Int_t StaticSearch (const TH1 *hist, Double_t sigma=2, Option_t *option=""goff"", Double_t threshold=0.05);  static function (called by TH1), interface to TSpectrum2::Search ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; T",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:15592,Modifiability,inherit,inherited,15592,"rom TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t fgAverageWindow = 3;  Average window of searched peaks. ;  ; static Int_t fgIterations = 3;  Maximum number of decon iterations (default=3) ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum2.h>. Inheritance diagram for TSpectrum2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBackIncreasingWindow ; kBackDecreasingWindow ; kBac",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:15886,Modifiability,inherit,inherited,15886,"orOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t fgAverageWindow = 3;  Average window of searched peaks. ;  ; static Int_t fgIterations = 3;  Maximum number of decon iterations (default=3) ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum2.h>. Inheritance diagram for TSpectrum2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBackIncreasingWindow ; kBackDecreasingWindow ; kBackSuccessiveFiltering ; kBackOneStepFiltering . Definition at line 31 of file TSpectrum2.h. Constructor & Destructor Documentation. ◆ TSpectrum2() [1/2]. TSpectrum2::TSpectrum2 ; (; ). Constructor. ; Definition at line 59 of file TSpectrum2.cxx. ◆ TSpectrum2() [2/2]. TSpectrum2::TSpectrum2 ; (; Int_t ; maxpositions, . Double_t ; resolution = 1 . ). maxpositions: maximum number of peaks; resolution: NOT USED determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. Higher val",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:15985,Modifiability,inherit,inherited,15985,"orOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X position of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y position of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t fgAverageWindow = 3;  Average window of searched peaks. ;  ; static Int_t fgIterations = 3;  Maximum number of decon iterations (default=3) ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum2.h>. Inheritance diagram for TSpectrum2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBackIncreasingWindow ; kBackDecreasingWindow ; kBackSuccessiveFiltering ; kBackOneStepFiltering . Definition at line 31 of file TSpectrum2.h. Constructor & Destructor Documentation. ◆ TSpectrum2() [1/2]. TSpectrum2::TSpectrum2 ; (; ). Constructor. ; Definition at line 59 of file TSpectrum2.cxx. ◆ TSpectrum2() [2/2]. TSpectrum2::TSpectrum2 ; (; Int_t ; maxpositions, . Double_t ; resolution = 1 . ). maxpositions: maximum number of peaks; resolution: NOT USED determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. Higher val",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:35175,Modifiability,variab,variable,35175,"age and drawing of the polymarker. . Definition at line 208 of file TSpectrum2.cxx. ◆ SearchHighRes(). Int_t TSpectrum2::SearchHighRes ; (; Double_t ** ; source, . Double_t ** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions)",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:35331,Modifiability,variab,variable,35331,"age and drawing of the polymarker. . Definition at line 208 of file TSpectrum2.cxx. ◆ SearchHighRes(). Int_t TSpectrum2::SearchHighRes ; (; Double_t ** ; source, . Double_t ** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions)",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:47343,Modifiability,extend,extended,47343,"Markov chain method. ; The result is placed in the array pointed by source pointer.; Function parameters:; source-pointer to the array of source spectrum; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. Smoothing; Goal: Suppression of statistical fluctuations the algorithm is based on discrete Markov chain, which has very simple invariant distribution ; \[; U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; \]. \(U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i = 1\) n is the length of the smoothed spectrum and ; \[; p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. is the probability of the change of the peak position from channel i to the channel i+1. \(A_i\) is the normalization constant so that \( p_{i,i-1}+p_{i,i+1}=1\) and m is a width of smoothing window. We have extended this algorithm to two dimensions.; Reference:; [1] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Example 4 - Smooth.C; ; #include <TSpectrum2.h>; ; void Smooth() {; Int_t i, j;; const Int_t nbinsx = 256;; const Int_t nbinsy = 256;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbinsx;; Double_t ymin = 0;; Double_t ymax = (Double_t)nbinsy;; Double_t** source = new Double_t*[nbinsx];; for (i=0;i<nbinsx;i++); source[i] = new Double_t[nbinsy];; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum2.root"";; TFile *f = new TFile(file.Data());; auto smooth = (TH2F*) f->Get(""smooth1"");; gStyle->SetOptStat(0);; auto *s = new TSpectrum2();; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; source[i][j] = smooth->GetBinContent(i + 1,j + 1);; }; }; s->SmoothMarkov(source,nbinsx,nbinsx,3); //5,7; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++); smooth->SetBinContent(i + 1,j + 1, source[i][j]);; }; smooth->Draw(""SUR",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:32707,Performance,perform,performed,32707,"e 43 of file TSpectrum2.h. ◆ GetPositionX(). Double_t * TSpectrum2::GetPositionX ; (; ); const. inline . Definition at line 44 of file TSpectrum2.h. ◆ GetPositionY(). Double_t * TSpectrum2::GetPositionY ; (; ); const. inline . Definition at line 45 of file TSpectrum2.h. ◆ IsA(). TClass * TSpectrum2::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 61 of file TSpectrum2.h. ◆ Print(). void TSpectrum2::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the array of positions. ; Reimplemented from TNamed.; Definition at line 168 of file TSpectrum2.cxx. ◆ Search(). Int_t TSpectrum2::Search ; (; const TH1 * ; hin, . Double_t ; sigma = 2, . Option_t * ; option = """", . Double_t ; threshold = 0.05 . ). virtual . This function searches for peaks in source spectrum in hin The number of found peaks and their positions are written into the members fNpeaks and fPositionX. ; The search is performed in the current histogram range.; Function parameters:; hin: pointer to the histogram of source spectrum; sigma: sigma of searched peaks, for details we refer to manual; threshold: (default=0.05) peaks with amplitude less than threshold*highest_peak are discarded. 0<threshold<1; By default, the background is removed before deconvolution. Specify the option ""nobackground"" to not remove the background.; By default the ""Markov"" chain algorithm is used. Specify the option ""noMarkov"" to disable this algorithm Note that by default the source spectrum is replaced by a new spectrum; By default a polymarker object is created and added to the list of functions of the histogram. The histogram is drawn with the specified option and the polymarker object drawn on top of the histogram. The polymarker coordinates correspond to the npeaks peaks found in the histogram. A pointer to the polymarker object can be retrieved later via: TList *functions = hin->GetListOfFunctions();; TPolyMarker *pm = (TPolyMark",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:37061,Performance,tune,tune,37061,"ences peak - background in both dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; [3] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method; SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters. Example 8 - Src.C; ; #include <TSpectrum2.h>; ; void Src(); {; const Int_t nbinsx = 64;; const Int_t nbinsy = 64;; std::vector<Double_t *> source(nbinsx), dest(nbinsx);; for (Int_t i = 0; i < nbinsx; i++) {; source[i] = new Double_t[nbinsy];; dest[i] = new Double_t[nbinsy];; }; TString dir = gROOT->GetTutorialDir();; TString file = dir + ""/spectrum/TSpectrum2.root"";; TFile *f = TFile::Open(file.Data());; gStyle->SetOptStat(0);; auto search = (TH2F *)f->Get(""search4"");; TSpectrum2 s;; for (Int_t i = 0; i < nbinsx; i++) {; for (Int_t j = 0; j < nbinsy; j++) {; source[i][j] = search->GetBinContent(i + 1, j + 1);; }; }; Int_t nfound = s.SearchHighRes(source.data(), dest.data(), nbinsx, nbinsy, 2, 5, kTRUE, 3, kFALSE, 3);; printf(""Found %d candidate peaks\n"", nfound);; Double_t *PositionX = s.GetPositionX();; Double_t *PositionY = s.GetPositionY();; search->Draw(""COL"");; TMarker m;; m.SetMarkerStyle(23);; m.SetMarkerColor(kRed);; for (Int_t i = 0; i < nfound; i++",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:36217,Safety,detect,detect,36217,"ion is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; [3] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method; SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters. Example 8 - Src.C; ; #include <TSpectrum2.h>; ; void Src(); {; const Int_t nbinsx = 64;; const Int_t nbinsy = 64;; std::vector<Double_t *> source(nbinsx)",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:6170,Security,hash,hash,6170," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:36961,Security,access,access,36961,"hould be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; [3] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method; SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters. Example 8 - Src.C; ; #include <TSpectrum2.h>; ; void Src(); {; const Int_t nbinsx = 64;; const Int_t nbinsy = 64;; std::vector<Double_t *> source(nbinsx), dest(nbinsx);; for (Int_t i = 0; i < nbinsx; i++) {; source[i] = new Double_t[nbinsy];; dest[i] = new Double_t[nbinsy];; }; TString dir = gROOT->GetTutorialDir();; TString file = dir + ""/spectrum/TSpectrum2.root"";; TFile *f = TFile::Open(file.Data());; gStyle->SetOptStat(0);; auto search = (TH2F *)f->Get(""search4"");; TSpectrum2 s;; for (Int_t i = 0; i < nbinsx; i++) {; for (Int_t j = 0; j < nbinsy; j++) {; source[i][j] = search->GetBinContent(i + 1, j + 1);; }; }; Int_t nfound = s.SearchHighRes(source.data(), dest.data(), nbinsx, nbinsy, 2, 5, kTRUE, 3, kFALSE, 3);; printf(""Found %d candidate peaks\n"", nfound);; Double_t *PositionX = s.GetPositionX();; Double_t *PositionY = s.GetP",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:35167,Testability,log,logical,35167,"age and drawing of the polymarker. . Definition at line 208 of file TSpectrum2.cxx. ◆ SearchHighRes(). Int_t TSpectrum2::SearchHighRes ; (; Double_t ** ; source, . Double_t ** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions)",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:35323,Testability,log,logical,35323,"age and drawing of the polymarker. . Definition at line 208 of file TSpectrum2.cxx. ◆ SearchHighRes(). Int_t TSpectrum2::SearchHighRes ; (; Double_t ** ; source, . Double_t ** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions)",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2.html:46737,Usability,simpl,simple,46737,"archHighRes ; Definition at line 115 of file TSpectrum2.cxx. ◆ SetResolution(). void TSpectrum2::SetResolution ; (; Double_t ; resolution = 1). NOT USED resolution: determines resolution of the neighboring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 289 of file TSpectrum2.cxx. ◆ SmoothMarkov(). const char * TSpectrum2::SmoothMarkov ; (; Double_t ** ; source, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; averWindow . ). This function calculates smoothed spectrum from source spectrum based on Markov chain method. ; The result is placed in the array pointed by source pointer.; Function parameters:; source-pointer to the array of source spectrum; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. Smoothing; Goal: Suppression of statistical fluctuations the algorithm is based on discrete Markov chain, which has very simple invariant distribution ; \[; U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; \]. \(U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i = 1\) n is the length of the smoothed spectrum and ; \[; p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. is the probability of the change of the peak position from channel i to the channel i+1. \(A_i\) is the normalization constant so that \( p_{i,i-1}+p_{i,i+1}=1\) and m is a width of smoothing window. We have extended this algorithm to two dimensions.; Reference:; [1] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Example 4 - Smooth.C; ; #include <TSpectrum2.h>; ; void Smooth() {; Int_t i, j;; const Int_t nbinsx = 256;; const Int_t nbinsy = 256;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbinsx;; Double_t ymin = 0;; D",MatchSource.WIKI,doc/master/classTSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html
https://root.cern/doc/master/classTSpectrum2Fit.html:3705,Availability,error,errors,3705,"ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Fit (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. ;  ;  TSpectrum2Fit (void);  Default constructor. ;  ;  ~TSpectrum2Fit () override;  Destructor. ;  ; void FitAwmi (Double_t **source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t **source);  This function fits the source spectrum. ;  ; void GetAmplitudeErrors (Double_t *amplitudeErrors, Double_t *amplitudeErrorsX1, Double_t *amplitudeErrorsY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetAmplitudes (Double_t *amplitudes, Double_t *amplitudesX1, Double_t *amplitudesY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &ax, Double_t &axErr, Double_t &ay, Double_t &ayErr);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; void GetPositionErrors (Double_t *positionErrorsX, Double_t *positionErrorsY, Double_t *positionErrorsX1, Double_t *positionErrorsY1);  This function gets the errors of positions of fitted 2D peaks and 1D ridges. ;  ; void GetPositions (Double_t *positionsX, Double_t *positionsY, Double_t *positionsX1, Double_t *positionsY1);  This function gets the positions of fitted 2D peaks and 1D ridges. ;  ; void GetRo (Double_t &ro, Double_t &roErr);  This function gets the ro parameter and its error. ;  ; void GetSigmaX (Double_t &sigmaX, Double_t &sigmaErrX);  This function gets the sigma x parameter and its error. ;  ; void GetSigmaY (Double_t &sigmaY, Double_t &sigmaErrY);  This function gets the sigma y parameter and its error. ;  ; void GetTailParameters (Double_t &txy, Double_t &txyErr, Double_t &tx, Double_t &txErr, Double_t &ty, Double_t &tyErr, Double_t &bx",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:3906,Availability,error,errors,3906,"ns, amplitudes etc) and sets the member variables to their default values. ;  ;  TSpectrum2Fit (void);  Default constructor. ;  ;  ~TSpectrum2Fit () override;  Destructor. ;  ; void FitAwmi (Double_t **source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t **source);  This function fits the source spectrum. ;  ; void GetAmplitudeErrors (Double_t *amplitudeErrors, Double_t *amplitudeErrorsX1, Double_t *amplitudeErrorsY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetAmplitudes (Double_t *amplitudes, Double_t *amplitudesX1, Double_t *amplitudesY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &ax, Double_t &axErr, Double_t &ay, Double_t &ayErr);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; void GetPositionErrors (Double_t *positionErrorsX, Double_t *positionErrorsY, Double_t *positionErrorsX1, Double_t *positionErrorsY1);  This function gets the errors of positions of fitted 2D peaks and 1D ridges. ;  ; void GetPositions (Double_t *positionsX, Double_t *positionsY, Double_t *positionsX1, Double_t *positionsY1);  This function gets the positions of fitted 2D peaks and 1D ridges. ;  ; void GetRo (Double_t &ro, Double_t &roErr);  This function gets the ro parameter and its error. ;  ; void GetSigmaX (Double_t &sigmaX, Double_t &sigmaErrX);  This function gets the sigma x parameter and its error. ;  ; void GetSigmaY (Double_t &sigmaY, Double_t &sigmaErrY);  This function gets the sigma y parameter and its error. ;  ; void GetTailParameters (Double_t &txy, Double_t &txyErr, Double_t &tx, Double_t &txErr, Double_t &ty, Double_t &tyErr, Double_t &bx, Double_t &bxErr, Double_t &by, Double_t &byErr, Double_t &sxy, Double_t &sxyErr, Double_t &sx, Double_t &sxErr, Double_t &sy, Double_t &syErr);  This function gets the tail parameters and their errors. ;  ; void GetVol",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:4237,Availability,error,error,4237,"Errors (Double_t *amplitudeErrors, Double_t *amplitudeErrorsX1, Double_t *amplitudeErrorsY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetAmplitudes (Double_t *amplitudes, Double_t *amplitudesX1, Double_t *amplitudesY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &ax, Double_t &axErr, Double_t &ay, Double_t &ayErr);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; void GetPositionErrors (Double_t *positionErrorsX, Double_t *positionErrorsY, Double_t *positionErrorsX1, Double_t *positionErrorsY1);  This function gets the errors of positions of fitted 2D peaks and 1D ridges. ;  ; void GetPositions (Double_t *positionsX, Double_t *positionsY, Double_t *positionsX1, Double_t *positionsY1);  This function gets the positions of fitted 2D peaks and 1D ridges. ;  ; void GetRo (Double_t &ro, Double_t &roErr);  This function gets the ro parameter and its error. ;  ; void GetSigmaX (Double_t &sigmaX, Double_t &sigmaErrX);  This function gets the sigma x parameter and its error. ;  ; void GetSigmaY (Double_t &sigmaY, Double_t &sigmaErrY);  This function gets the sigma y parameter and its error. ;  ; void GetTailParameters (Double_t &txy, Double_t &txyErr, Double_t &tx, Double_t &txErr, Double_t &ty, Double_t &tyErr, Double_t &bx, Double_t &bxErr, Double_t &by, Double_t &byErr, Double_t &sxy, Double_t &sxyErr, Double_t &sx, Double_t &sxErr, Double_t &sy, Double_t &syErr);  This function gets the tail parameters and their errors. ;  ; void GetVolumeErrors (Double_t *volumeErrors);  This function gets errors of the volumes of fitted 2D peaks. ;  ; void GetVolumes (Double_t *volumes);  This function gets the volumes of fitted 2D peaks. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy);  ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:4355,Availability,error,error,4355,"ets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetAmplitudes (Double_t *amplitudes, Double_t *amplitudesX1, Double_t *amplitudesY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &ax, Double_t &axErr, Double_t &ay, Double_t &ayErr);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; void GetPositionErrors (Double_t *positionErrorsX, Double_t *positionErrorsY, Double_t *positionErrorsX1, Double_t *positionErrorsY1);  This function gets the errors of positions of fitted 2D peaks and 1D ridges. ;  ; void GetPositions (Double_t *positionsX, Double_t *positionsY, Double_t *positionsX1, Double_t *positionsY1);  This function gets the positions of fitted 2D peaks and 1D ridges. ;  ; void GetRo (Double_t &ro, Double_t &roErr);  This function gets the ro parameter and its error. ;  ; void GetSigmaX (Double_t &sigmaX, Double_t &sigmaErrX);  This function gets the sigma x parameter and its error. ;  ; void GetSigmaY (Double_t &sigmaY, Double_t &sigmaErrY);  This function gets the sigma y parameter and its error. ;  ; void GetTailParameters (Double_t &txy, Double_t &txyErr, Double_t &tx, Double_t &txErr, Double_t &ty, Double_t &tyErr, Double_t &bx, Double_t &bxErr, Double_t &by, Double_t &byErr, Double_t &sxy, Double_t &sxyErr, Double_t &sx, Double_t &sxErr, Double_t &sy, Double_t &syErr);  This function gets the tail parameters and their errors. ;  ; void GetVolumeErrors (Double_t *volumeErrors);  This function gets errors of the volumes of fitted 2D peaks. ;  ; void GetVolumes (Double_t *volumes);  This function gets the volumes of fitted 2D peaks. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, In",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:4473,Availability,error,error,4473,"esX1, Double_t *amplitudesY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &ax, Double_t &axErr, Double_t &ay, Double_t &ayErr);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; void GetPositionErrors (Double_t *positionErrorsX, Double_t *positionErrorsY, Double_t *positionErrorsX1, Double_t *positionErrorsY1);  This function gets the errors of positions of fitted 2D peaks and 1D ridges. ;  ; void GetPositions (Double_t *positionsX, Double_t *positionsY, Double_t *positionsX1, Double_t *positionsY1);  This function gets the positions of fitted 2D peaks and 1D ridges. ;  ; void GetRo (Double_t &ro, Double_t &roErr);  This function gets the ro parameter and its error. ;  ; void GetSigmaX (Double_t &sigmaX, Double_t &sigmaErrX);  This function gets the sigma x parameter and its error. ;  ; void GetSigmaY (Double_t &sigmaY, Double_t &sigmaErrY);  This function gets the sigma y parameter and its error. ;  ; void GetTailParameters (Double_t &txy, Double_t &txyErr, Double_t &tx, Double_t &txErr, Double_t &ty, Double_t &tyErr, Double_t &bx, Double_t &bxErr, Double_t &by, Double_t &byErr, Double_t &sxy, Double_t &sxyErr, Double_t &sx, Double_t &sxErr, Double_t &sy, Double_t &syErr);  This function gets the tail parameters and their errors. ;  ; void GetVolumeErrors (Double_t *volumeErrors);  This function gets errors of the volumes of fitted 2D peaks. ;  ; void GetVolumes (Double_t *volumes);  This function gets the volumes of fitted 2D peaks. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:4812,Availability,error,errors,4812," This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; void GetPositionErrors (Double_t *positionErrorsX, Double_t *positionErrorsY, Double_t *positionErrorsX1, Double_t *positionErrorsY1);  This function gets the errors of positions of fitted 2D peaks and 1D ridges. ;  ; void GetPositions (Double_t *positionsX, Double_t *positionsY, Double_t *positionsX1, Double_t *positionsY1);  This function gets the positions of fitted 2D peaks and 1D ridges. ;  ; void GetRo (Double_t &ro, Double_t &roErr);  This function gets the ro parameter and its error. ;  ; void GetSigmaX (Double_t &sigmaX, Double_t &sigmaErrX);  This function gets the sigma x parameter and its error. ;  ; void GetSigmaY (Double_t &sigmaY, Double_t &sigmaErrY);  This function gets the sigma y parameter and its error. ;  ; void GetTailParameters (Double_t &txy, Double_t &txyErr, Double_t &tx, Double_t &txErr, Double_t &ty, Double_t &tyErr, Double_t &bx, Double_t &bxErr, Double_t &by, Double_t &byErr, Double_t &sxy, Double_t &sxyErr, Double_t &sx, Double_t &sxErr, Double_t &sy, Double_t &syErr);  This function gets the tail parameters and their errors. ;  ; void GetVolumeErrors (Double_t *volumeErrors);  This function gets errors of the volumes of fitted 2D peaks. ;  ; void GetVolumes (Double_t *volumes);  This function gets the volumes of fitted 2D peaks. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following fitting parameters: ;  ; void SetPeakParameters (Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t *positio",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:4892,Availability,error,errors,4892,"sY1);  This function gets the errors of positions of fitted 2D peaks and 1D ridges. ;  ; void GetPositions (Double_t *positionsX, Double_t *positionsY, Double_t *positionsX1, Double_t *positionsY1);  This function gets the positions of fitted 2D peaks and 1D ridges. ;  ; void GetRo (Double_t &ro, Double_t &roErr);  This function gets the ro parameter and its error. ;  ; void GetSigmaX (Double_t &sigmaX, Double_t &sigmaErrX);  This function gets the sigma x parameter and its error. ;  ; void GetSigmaY (Double_t &sigmaY, Double_t &sigmaErrY);  This function gets the sigma y parameter and its error. ;  ; void GetTailParameters (Double_t &txy, Double_t &txyErr, Double_t &tx, Double_t &txErr, Double_t &ty, Double_t &tyErr, Double_t &bx, Double_t &bxErr, Double_t &by, Double_t &byErr, Double_t &sxy, Double_t &sxyErr, Double_t &sx, Double_t &sxErr, Double_t &sy, Double_t &syErr);  This function gets the tail parameters and their errors. ;  ; void GetVolumeErrors (Double_t *volumeErrors);  This function gets errors of the volumes of fitted 2D peaks. ;  ; void GetVolumes (Double_t *volumes);  This function gets the volumes of fitted 2D peaks. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following fitting parameters: ;  ; void SetPeakParameters (Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t *positionInitX, const Bool_t *fixPositionX, const Double_t *positionInitY, const Bool_t *fixPositionY, const Double_t *positionInitX1, const Bool_t *fixPositionX1, const Double_t *positionInitY1, const Bool_t *fixPositionY1, const Doub",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:9690,Availability,error,error,9690,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:9779,Availability,error,error,9779,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:9934,Availability,error,error,9934,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:10231,Availability,error,error,10231,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:14315,Availability,error,error,14315,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:18292,Availability,error,error,18292,"_t y0, Double_t sigmax, Double_t sigmay, Double_t ro);  This function calculates second derivative of 2D peaks shape function (see manual) according to x position of 2D peak. ;  ; Double_t Derderj02 (Double_t x, Double_t y, Double_t a, Double_t x0, Double_t y0, Double_t sigmax, Double_t sigmay, Double_t ro);  This function calculates second derivative of 2D peaks shape function (see manual) according to y position of 2D peak. ;  ; Double_t Derdersigmax (Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t *parameter, Double_t sigmax, Double_t sigmay, Double_t ro);  This function calculates second derivative of peaks shape function (see manual) according to sigmax of peaks. ;  ; Double_t Derdersigmay (Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t *parameter, Double_t sigmax, Double_t sigmay, Double_t ro);  This function calculates second derivative of peaks shape function (see manual) according to sigmay of peaks. ;  ; Double_t Derfc (Double_t x);  This function calculates derivative of error function of x. ;  ; Double_t Deri01 (Double_t x, Double_t ax, Double_t x0, Double_t sigmax, Double_t tx, Double_t sx, Double_t bx);  This function calculates derivative of 2D peaks shape function (see manual) according to x position of 1D ridge. ;  ; Double_t Deri02 (Double_t x, Double_t y, Double_t a, Double_t x0, Double_t y0, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t txy, Double_t sxy, Double_t bx, Double_t by);  This function calculates derivative of 2D peaks shape function (see manual) according to x position of 2D peak. ;  ; Double_t Derj02 (Double_t x, Double_t y, Double_t a, Double_t x0, Double_t y0, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t txy, Double_t sxy, Double_t bx, Double_t by);  This function calculates derivative of 2D peaks shape function (see manual) according to y position of 2D peak Function parameters: ;  ; Double_t Derpa2 (Double_t sx, Double_t sy, Double_t ro);  This function calculates derivative of t",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:22114,Availability,error,error,22114,"ng to relative amplitude sxy. ;  ; Double_t Dersy (Int_t numOfFittedPeaks, Double_t x, const Double_t *parameter, Double_t sigmax);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude sy. ;  ; Double_t Dertx (Int_t numOfFittedPeaks, Double_t x, const Double_t *parameter, Double_t sigmax, Double_t bx);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude tx. ;  ; Double_t Dertxy (Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t *parameter, Double_t sigmax, Double_t sigmay, Double_t bx, Double_t by);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude txy. ;  ; Double_t Derty (Int_t numOfFittedPeaks, Double_t x, const Double_t *parameter, Double_t sigmax, Double_t bx);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude ty. ;  ; Double_t Erfc (Double_t x);  This function calculates error function of x. ;  ; Double_t Ourpowl (Double_t a, Int_t pw);  power function ;  ; Double_t Shape2 (Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t *parameter, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t a0, Double_t ax, Double_t ay, Double_t txy, Double_t sxy, Double_t tx, Double_t ty, Double_t sx, Double_t sy, Double_t bx, Double_t by);  This function calculates 2D peaks shape function (see manual) ;  ; void StiefelInversion (Double_t **a, Int_t size);  This function calculates solution of the system of linear equations. ;  ; Double_t Volume (Double_t a, Double_t sx, Double_t sy, Double_t ro);  This function calculates volume of a peak. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:23117,Availability,error,error,23117,,MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:23925,Availability,error,errors,23925,,MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:24021,Availability,error,errors,24021,"butes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ;  ; Double_t * fAmpCalcX1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpCalcY1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBx",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:24133,Availability,error,errors,24133,"ground a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ;  ; Double_t * fAmpCalcX1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpCalcY1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b para",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:24629,Availability,error,error,24629,"AmpCalcX1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpCalcY1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b parameter for 1D ridges in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here th",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:24864,Availability,error,error,24864,"calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b parameter for 1D ridges in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond.",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:25116,Availability,error,error,25116,"calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b parameter for 1D ridges in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond.",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:25414,Availability,error,error,25414,"calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b parameter for 1D ridges in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond.",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:29452,Availability,error,error,29452,"e of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of error values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrX1;  [fNPeaks] array of x positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionErrY;  [fNPeaks] array of error values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrY1;  [fNPeaks] array of y positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionInitX;  [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitX1;  [fNPeaks] array of initial x positions of 1D ridges, input parameters ;  ; Double_t * fPositionInitY;  [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitY1;  [fNPeaks] array of initial y positions of 1D ridges, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fRoCalc;  calculated value of correlation coefficient ;  ; Double_t fRoErr;  error value of correlation coefficient ;  ; Double_t fRoInit;  initial ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:29575,Availability,error,errors,29575,"e of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of error values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrX1;  [fNPeaks] array of x positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionErrY;  [fNPeaks] array of error values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrY1;  [fNPeaks] array of y positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionInitX;  [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitX1;  [fNPeaks] array of initial x positions of 1D ridges, input parameters ;  ; Double_t * fPositionInitY;  [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitY1;  [fNPeaks] array of initial y positions of 1D ridges, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fRoCalc;  calculated value of correlation coefficient ;  ; Double_t fRoErr;  error value of correlation coefficient ;  ; Double_t fRoInit;  initial ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:29665,Availability,error,error,29665,"e of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of error values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrX1;  [fNPeaks] array of x positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionErrY;  [fNPeaks] array of error values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrY1;  [fNPeaks] array of y positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionInitX;  [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitX1;  [fNPeaks] array of initial x positions of 1D ridges, input parameters ;  ; Double_t * fPositionInitY;  [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitY1;  [fNPeaks] array of initial y positions of 1D ridges, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fRoCalc;  calculated value of correlation coefficient ;  ; Double_t fRoErr;  error value of correlation coefficient ;  ; Double_t fRoInit;  initial ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:29788,Availability,error,errors,29788,"e of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of error values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrX1;  [fNPeaks] array of x positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionErrY;  [fNPeaks] array of error values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrY1;  [fNPeaks] array of y positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionInitX;  [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitX1;  [fNPeaks] array of initial x positions of 1D ridges, input parameters ;  ; Double_t * fPositionInitY;  [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitY1;  [fNPeaks] array of initial y positions of 1D ridges, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fRoCalc;  calculated value of correlation coefficient ;  ; Double_t fRoErr;  error value of correlation coefficient ;  ; Double_t fRoInit;  initial ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:30481,Availability,error,error,30481,,MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:30744,Availability,error,error,30744,,MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:30804,Availability,error,error,30804,,MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:31334,Availability,error,error,31334,,MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:31639,Availability,error,error,31639,"arameter ;  ; Double_t fSigmaCalcY;  calculated value of sigma y parameter ;  ; Double_t fSigmaErrX;  error value of sigma x parameter ;  ; Double_t fSigmaErrY;  error value of sigma y parameter ;  ; Double_t fSigmaInitX;  initial value of sigma x parameter ;  ; Double_t fSigmaInitY;  initial value of sigma y parameter ;  ; Int_t fStatisticType;  type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ;  ; Double_t fSxCalc;  calculated value of s parameter for 1D ridges in x direction ;  ; Double_t fSxErr;  error value of s parameter for 1D ridges in x direction ;  ; Double_t fSxInit;  initial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fSxyCalc;  calculated value of s parameter for 2D peaks ;  ; Double_t fSxyErr;  error value of s parameter for 2D peaks ;  ; Double_t fSxyInit;  initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ;  ; Double_t fSyCalc;  calculated value of s parameter for 1D ridges in y direction ;  ; Double_t fSyErr;  error value of s parameter for 1D ridges in y direction ;  ; Double_t fSyInit;  initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fTxCalc;  calculated value of t parameter for 1D ridges in x direction ;  ; Double_t fTxErr;  error value of t parameter for 1D ridges in x direction ;  ; Double_t fTxInit;  initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTxyCalc;  calculated value of t parameter for 2D peaks ;  ; Double_t fTxyErr;  error value of t parameter for 2D peaks ;  ; Double_t fTxyInit;  initial value of t paramet",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:31927,Availability,error,error,31927,"itial value of sigma y parameter ;  ; Int_t fStatisticType;  type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ;  ; Double_t fSxCalc;  calculated value of s parameter for 1D ridges in x direction ;  ; Double_t fSxErr;  error value of s parameter for 1D ridges in x direction ;  ; Double_t fSxInit;  initial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fSxyCalc;  calculated value of s parameter for 2D peaks ;  ; Double_t fSxyErr;  error value of s parameter for 2D peaks ;  ; Double_t fSxyInit;  initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ;  ; Double_t fSyCalc;  calculated value of s parameter for 1D ridges in y direction ;  ; Double_t fSyErr;  error value of s parameter for 1D ridges in y direction ;  ; Double_t fSyInit;  initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fTxCalc;  calculated value of t parameter for 1D ridges in x direction ;  ; Double_t fTxErr;  error value of t parameter for 1D ridges in x direction ;  ; Double_t fTxInit;  initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTxyCalc;  calculated value of t parameter for 2D peaks ;  ; Double_t fTxyErr;  error value of t parameter for 2D peaks ;  ; Double_t fTxyInit;  initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTyCalc;  calculated value of t parameter for 1D ridges in y direction ;  ; Double_t fTyErr;  error value of t parameter for 1D ridges in y direction ;  ; Double_t fTyInit;  initial val",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:32246,Availability,error,error,32246," calculated value of s parameter for 1D ridges in x direction ;  ; Double_t fSxErr;  error value of s parameter for 1D ridges in x direction ;  ; Double_t fSxInit;  initial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fSxyCalc;  calculated value of s parameter for 2D peaks ;  ; Double_t fSxyErr;  error value of s parameter for 2D peaks ;  ; Double_t fSxyInit;  initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ;  ; Double_t fSyCalc;  calculated value of s parameter for 1D ridges in y direction ;  ; Double_t fSyErr;  error value of s parameter for 1D ridges in y direction ;  ; Double_t fSyInit;  initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fTxCalc;  calculated value of t parameter for 1D ridges in x direction ;  ; Double_t fTxErr;  error value of t parameter for 1D ridges in x direction ;  ; Double_t fTxInit;  initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTxyCalc;  calculated value of t parameter for 2D peaks ;  ; Double_t fTxyErr;  error value of t parameter for 2D peaks ;  ; Double_t fTxyInit;  initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTyCalc;  calculated value of t parameter for 1D ridges in y direction ;  ; Double_t fTyErr;  error value of t parameter for 1D ridges in y direction ;  ; Double_t fTyInit;  initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t * fVolume;  [fNPeaks] array of calculated volumes of 2D peaks, output parameters ;  ; Double_t * fVolumeErr;  [fNPeaks] array of volumes errors of 2D peaks, output parameters ;  ; Int_t",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:32551,Availability,error,error,32551,"es ;  ; Double_t fSxyCalc;  calculated value of s parameter for 2D peaks ;  ; Double_t fSxyErr;  error value of s parameter for 2D peaks ;  ; Double_t fSxyInit;  initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ;  ; Double_t fSyCalc;  calculated value of s parameter for 1D ridges in y direction ;  ; Double_t fSyErr;  error value of s parameter for 1D ridges in y direction ;  ; Double_t fSyInit;  initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fTxCalc;  calculated value of t parameter for 1D ridges in x direction ;  ; Double_t fTxErr;  error value of t parameter for 1D ridges in x direction ;  ; Double_t fTxInit;  initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTxyCalc;  calculated value of t parameter for 2D peaks ;  ; Double_t fTxyErr;  error value of t parameter for 2D peaks ;  ; Double_t fTxyInit;  initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTyCalc;  calculated value of t parameter for 1D ridges in y direction ;  ; Double_t fTyErr;  error value of t parameter for 1D ridges in y direction ;  ; Double_t fTyInit;  initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t * fVolume;  [fNPeaks] array of calculated volumes of 2D peaks, output parameters ;  ; Double_t * fVolumeErr;  [fNPeaks] array of volumes errors of 2D peaks, output parameters ;  ; Int_t fXmax;  last fitted channel in x direction ;  ; Int_t fXmin;  first fitted channel in x direction ;  ; Int_t fYmax;  last fitted channel in y direction ;  ; Int_t fYmin;  first fitted channel in y direction ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  .",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:32839,Availability,error,error,32839,"es ;  ; Double_t fSxyCalc;  calculated value of s parameter for 2D peaks ;  ; Double_t fSxyErr;  error value of s parameter for 2D peaks ;  ; Double_t fSxyInit;  initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ;  ; Double_t fSyCalc;  calculated value of s parameter for 1D ridges in y direction ;  ; Double_t fSyErr;  error value of s parameter for 1D ridges in y direction ;  ; Double_t fSyInit;  initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fTxCalc;  calculated value of t parameter for 1D ridges in x direction ;  ; Double_t fTxErr;  error value of t parameter for 1D ridges in x direction ;  ; Double_t fTxInit;  initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTxyCalc;  calculated value of t parameter for 2D peaks ;  ; Double_t fTxyErr;  error value of t parameter for 2D peaks ;  ; Double_t fTxyInit;  initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTyCalc;  calculated value of t parameter for 1D ridges in y direction ;  ; Double_t fTyErr;  error value of t parameter for 1D ridges in y direction ;  ; Double_t fTyInit;  initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t * fVolume;  [fNPeaks] array of calculated volumes of 2D peaks, output parameters ;  ; Double_t * fVolumeErr;  [fNPeaks] array of volumes errors of 2D peaks, output parameters ;  ; Int_t fXmax;  last fitted channel in x direction ;  ; Int_t fXmin;  first fitted channel in x direction ;  ; Int_t fYmax;  last fitted channel in y direction ;  ; Int_t fYmin;  first fitted channel in y direction ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  .",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:33201,Availability,error,errors,33201,"es ;  ; Double_t fSxyCalc;  calculated value of s parameter for 2D peaks ;  ; Double_t fSxyErr;  error value of s parameter for 2D peaks ;  ; Double_t fSxyInit;  initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ;  ; Double_t fSyCalc;  calculated value of s parameter for 1D ridges in y direction ;  ; Double_t fSyErr;  error value of s parameter for 1D ridges in y direction ;  ; Double_t fSyInit;  initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fTxCalc;  calculated value of t parameter for 1D ridges in x direction ;  ; Double_t fTxErr;  error value of t parameter for 1D ridges in x direction ;  ; Double_t fTxInit;  initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTxyCalc;  calculated value of t parameter for 2D peaks ;  ; Double_t fTxyErr;  error value of t parameter for 2D peaks ;  ; Double_t fTxyInit;  initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTyCalc;  calculated value of t parameter for 1D ridges in y direction ;  ; Double_t fTyErr;  error value of t parameter for 1D ridges in y direction ;  ; Double_t fTyInit;  initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t * fVolume;  [fNPeaks] array of calculated volumes of 2D peaks, output parameters ;  ; Double_t * fVolumeErr;  [fNPeaks] array of volumes errors of 2D peaks, output parameters ;  ; Int_t fXmax;  last fitted channel in x direction ;  ; Int_t fXmin;  first fitted channel in x direction ;  ; Int_t fYmax;  last fitted channel in y direction ;  ; Int_t fYmin;  first fitted channel in y direction ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  .",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:41326,Availability,error,error,41326,"; Function parameters:; numOfFittedPeaks-number of fitted peaks; x,y-position of channel; parameter-array of peaks parameters (amplitudes and positions); sigmax-sigmax of peaks; sigmay-sigmay of peaks; ro-correlation coefficient . Definition at line 987 of file TSpectrum2Fit.cxx. ◆ Derdersigmay(). Double_t TSpectrum2Fit::Derdersigmay ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro . ). protected . This function calculates second derivative of peaks shape function (see manual) according to sigmay of peaks. ; Function parameters:; numOfFittedPeaks-number of fitted peaks; x,y-position of channel; parameter-array of peaks parameters (amplitudes and positions); sigmax-sigmax of peaks; sigmay-sigmay of peaks; ro-correlation coefficient . Definition at line 1134 of file TSpectrum2Fit.cxx. ◆ Derfc(). Double_t TSpectrum2Fit::Derfc ; (; Double_t ; x). protected . This function calculates derivative of error function of x. ; Definition at line 324 of file TSpectrum2Fit.cxx. ◆ Deri01(). Double_t TSpectrum2Fit::Deri01 ; (; Double_t ; x, . Double_t ; ax, . Double_t ; x0, . Double_t ; sigmax, . Double_t ; tx, . Double_t ; sx, . Double_t ; bx . ). protected . This function calculates derivative of 2D peaks shape function (see manual) according to x position of 1D ridge. ; Function parameters:; x-channel in x-dimension; ax-amplitude of ridge; x0-position of peak in x-dimension; sigmax-sigmax of peaks; ro-correlation coefficient; tx, sx-relative amplitudes; bx-slope . Definition at line 823 of file TSpectrum2Fit.cxx. ◆ Deri02(). Double_t TSpectrum2Fit::Deri02 ; (; Double_t ; x, . Double_t ; y, . Double_t ; a, . Double_t ; x0, . Double_t ; y0, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; txy, . Double_t ; sxy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates derivative of 2D peaks shape function (see manual) according to x positi",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:50160,Availability,error,error,50160,"ed . This function calculates derivative of peaks shape function (see manual) according to relative amplitude txy. ; Function parameters:; numOfFittedPeaks-number of fitted peaks; x,y-position of channel; parameter-array of peaks parameters (amplitudes and positions); sigmax-sigmax of peaks; sigmay-sigmay of peaks; bx, by-slopes . Definition at line 1234 of file TSpectrum2Fit.cxx. ◆ Derty(). Double_t TSpectrum2Fit::Derty ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; bx . ). protected . This function calculates derivative of peaks shape function (see manual) according to relative amplitude ty. ; Function parameters:; numOfFittedPeaks-number of fitted peaks; x-position of channel; parameter-array of peaks parameters (amplitudes and positions); sigmax-sigma of 1D ridge; bx-slope . Definition at line 1333 of file TSpectrum2Fit.cxx. ◆ Erfc(). Double_t TSpectrum2Fit::Erfc ; (; Double_t ; x). protected . This function calculates error function of x. ; Definition at line 300 of file TSpectrum2Fit.cxx. ◆ FitAwmi(). void TSpectrum2Fit::FitAwmi ; (; Double_t ** ; source). This function fits the source spectrum. ; The calling program should fill in input parameters of the TSpectrum2Fit class. The fitted parameters are written into TSpectrum2Fit class output parameters and fitted data are written into source spectrum.; Function parameters:; source-pointer to the matrix of source spectrum. Fitting; Goal: to estimate simultaneously peak shape parameters in spectra with large number of peaks. peaks can be fitted separately, each peak (or multiplets) in a region or together all peaks in a spectrum. To fit separately each peak one needs to determine the fitted region. However it can happen that the regions of neighbouring peaks are overlapping. Then the results of fitting are very poor. On the other hand, when fitting together all peaks found in a spectrum, one needs to have a method that is stable (converges) and fas",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:64354,Availability,error,errors,64354," ymax-1, 1000, 0.1,; pfit->kFitOptimChiCounts, pfit->kFitAlphaHalving, pfit->kFitPower2,; pfit->kFitTaylorOrderFirst);; pfit->SetPeakParameters(2, kFALSE, 2, kFALSE, 0, kTRUE, PosX, (Bool_t *); FixPosX, PosY, (Bool_t *) FixPosY, PosX, (Bool_t *) FixPosX, PosY, (Bool_t *); FixPosY, Amp, (Bool_t *) FixAmp, AmpXY, (Bool_t *) FixAmp, AmpXY, (Bool_t *); FixAmp);; pfit->SetBackgroundParameters(0, kFALSE, 0, kTRUE, 0, kTRUE);; pfit->FitStiefel(source);; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; search->SetBinContent(i + 1, j + 1,source[i][j]);; }; }; search->Draw(""SURF"");; }. Definition at line 3944 of file TSpectrum2Fit.cxx. ◆ GetAmplitudeErrors(). void TSpectrum2Fit::GetAmplitudeErrors ; (; Double_t * ; amplitudeErrors, . Double_t * ; amplitudeErrorsX1, . Double_t * ; amplitudeErrorsY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudeErrors - gets vector of amplitudes errors of 2D peaks; amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:64420,Availability,error,errors,64420," ymax-1, 1000, 0.1,; pfit->kFitOptimChiCounts, pfit->kFitAlphaHalving, pfit->kFitPower2,; pfit->kFitTaylorOrderFirst);; pfit->SetPeakParameters(2, kFALSE, 2, kFALSE, 0, kTRUE, PosX, (Bool_t *); FixPosX, PosY, (Bool_t *) FixPosY, PosX, (Bool_t *) FixPosX, PosY, (Bool_t *); FixPosY, Amp, (Bool_t *) FixAmp, AmpXY, (Bool_t *) FixAmp, AmpXY, (Bool_t *); FixAmp);; pfit->SetBackgroundParameters(0, kFALSE, 0, kTRUE, 0, kTRUE);; pfit->FitStiefel(source);; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; search->SetBinContent(i + 1, j + 1,source[i][j]);; }; }; search->Draw(""SURF"");; }. Definition at line 3944 of file TSpectrum2Fit.cxx. ◆ GetAmplitudeErrors(). void TSpectrum2Fit::GetAmplitudeErrors ; (; Double_t * ; amplitudeErrors, . Double_t * ; amplitudeErrorsX1, . Double_t * ; amplitudeErrorsY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudeErrors - gets vector of amplitudes errors of 2D peaks; amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:64502,Availability,error,errors,64502," ymax-1, 1000, 0.1,; pfit->kFitOptimChiCounts, pfit->kFitAlphaHalving, pfit->kFitPower2,; pfit->kFitTaylorOrderFirst);; pfit->SetPeakParameters(2, kFALSE, 2, kFALSE, 0, kTRUE, PosX, (Bool_t *); FixPosX, PosY, (Bool_t *) FixPosY, PosX, (Bool_t *) FixPosX, PosY, (Bool_t *); FixPosY, Amp, (Bool_t *) FixAmp, AmpXY, (Bool_t *) FixAmp, AmpXY, (Bool_t *); FixAmp);; pfit->SetBackgroundParameters(0, kFALSE, 0, kTRUE, 0, kTRUE);; pfit->FitStiefel(source);; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; search->SetBinContent(i + 1, j + 1,source[i][j]);; }; }; search->Draw(""SURF"");; }. Definition at line 3944 of file TSpectrum2Fit.cxx. ◆ GetAmplitudeErrors(). void TSpectrum2Fit::GetAmplitudeErrors ; (; Double_t * ; amplitudeErrors, . Double_t * ; amplitudeErrorsX1, . Double_t * ; amplitudeErrorsY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudeErrors - gets vector of amplitudes errors of 2D peaks; amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:65307,Availability,error,errors,65307,"d 2D peaks and 1D ridges. . amplitudeErrors - gets vector of amplitudes errors of 2D peaks; amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:65374,Availability,error,error,65374,"direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; pos",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:65460,Availability,error,error,65460,"direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; pos",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:65546,Availability,error,error,65546,"direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; pos",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:65963,Availability,error,errors,65963,"ges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its e",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:66052,Availability,error,errors,66052," ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:66120,Availability,error,errors,66120," ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:66189,Availability,error,errors,66189," ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:66259,Availability,error,errors,66259," ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:66977,Availability,error,error,66977,"s the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit::GetSigmaX ; (; Double_t & ; sigmaX, . Double_t & ; sigmaErrX . ). This function gets the sigma x parameter and its error. . sigmaX - gets the fitted value of sigma x parameter; sigmaErrX - gets error value of sigma x parameter . Definition at line 5792 of file TSpectrum2Fit.cxx. ◆ GetSigmaY(). void TSpectrum2Fit::GetSigmaY ; (; Double_t & ; sigmaY, . Double_t & ; sigmaErrY . ). This function gets the sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:67043,Availability,error,error,67043,"rrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit::GetSigmaX ; (; Double_t & ; sigmaX, . Double_t & ; sigmaErrX . ). This function gets the sigma x parameter and its error. . sigmaX - gets the fitted value of sigma x parameter; sigmaErrX - gets error value of sigma x parameter . Definition at line 5792 of file TSpectrum2Fit.cxx. ◆ GetSigmaY(). void TSpectrum2Fit::GetSigmaY ; (; Double_t & ; sigmaY, . Double_t & ; sigmaErrY . ). This function gets the sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Do",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:67274,Availability,error,error,67274,"tor of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit::GetSigmaX ; (; Double_t & ; sigmaX, . Double_t & ; sigmaErrX . ). This function gets the sigma x parameter and its error. . sigmaX - gets the fitted value of sigma x parameter; sigmaErrX - gets error value of sigma x parameter . Definition at line 5792 of file TSpectrum2Fit.cxx. ◆ GetSigmaY(). void TSpectrum2Fit::GetSigmaY ; (; Double_t & ; sigmaY, . Double_t & ; sigmaErrY . ). This function gets the sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy para",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:67353,Availability,error,error,67353,"rum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; positionsY, . Double_t * ; positionsX1, . Double_t * ; positionsY1 . ). This function gets the positions of fitted 2D peaks and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit::GetSigmaX ; (; Double_t & ; sigmaX, . Double_t & ; sigmaErrX . ). This function gets the sigma x parameter and its error. . sigmaX - gets the fitted value of sigma x parameter; sigmaErrX - gets error value of sigma x parameter . Definition at line 5792 of file TSpectrum2Fit.cxx. ◆ GetSigmaY(). void TSpectrum2Fit::GetSigmaY ; (; Double_t & ; sigmaY, . Double_t & ; sigmaErrY . ). This function gets the sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:67589,Availability,error,error,67589,"and 1D ridges. . positionX - gets vector of x positions of 2D peaks; positionY - gets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit::GetSigmaX ; (; Double_t & ; sigmaX, . Double_t & ; sigmaErrX . ). This function gets the sigma x parameter and its error. . sigmaX - gets the fitted value of sigma x parameter; sigmaErrX - gets error value of sigma x parameter . Definition at line 5792 of file TSpectrum2Fit.cxx. ◆ GetSigmaY(). void TSpectrum2Fit::GetSigmaY ; (; Double_t & ; sigmaY, . Double_t & ; sigmaErrY . ). This function gets the sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - g",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:67668,Availability,error,error,67668,"ets vector of y positions of 2D peaks; positionX1 - gets vector of x positions of 1D ridges; positionY1 - gets vector of y positions of 1D ridges . Definition at line 5708 of file TSpectrum2Fit.cxx. ◆ GetRo(). void TSpectrum2Fit::GetRo ; (; Double_t & ; ro, . Double_t & ; roErr . ). This function gets the ro parameter and its error. . ro - gets the fitted value of ro parameter; roErr - gets error value of ro parameter . Definition at line 5814 of file TSpectrum2Fit.cxx. ◆ GetSigmaX(). void TSpectrum2Fit::GetSigmaX ; (; Double_t & ; sigmaX, . Double_t & ; sigmaErrX . ). This function gets the sigma x parameter and its error. . sigmaX - gets the fitted value of sigma x parameter; sigmaErrX - gets error value of sigma x parameter . Definition at line 5792 of file TSpectrum2Fit.cxx. ◆ GetSigmaY(). void TSpectrum2Fit::GetSigmaY ; (; Double_t & ; sigmaY, . Double_t & ; sigmaErrY . ). This function gets the sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68203,Availability,error,errors,68203,"t & ; sigmaX, . Double_t & ; sigmaErrX . ). This function gets the sigma x parameter and its error. . sigmaX - gets the fitted value of sigma x parameter; sigmaErrX - gets error value of sigma x parameter . Definition at line 5792 of file TSpectrum2Fit.cxx. ◆ GetSigmaY(). void TSpectrum2Fit::GetSigmaY ; (; Double_t & ; sigmaY, . Double_t & ; sigmaErrY . ). This function gets the sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definitio",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68273,Availability,error,error,68273,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68360,Availability,error,error,68360,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68446,Availability,error,error,68446,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68532,Availability,error,error,68532,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68618,Availability,error,error,68618,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68707,Availability,error,error,68707,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68794,Availability,error,error,68794,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:68880,Availability,error,error,68880,"he sigma y parameter and its error. . sigmaY - gets the fitted value of sigma y parameter; sigmaErrY - gets error value of sigma y parameter . Definition at line 5803 of file TSpectrum2Fit.cxx. ◆ GetTailParameters(). void TSpectrum2Fit::GetTailParameters ; (; Double_t & ; txy, . Double_t & ; txyErr, . Double_t & ; tx, . Double_t & ; txErr, . Double_t & ; ty, . Double_t & ; tyErr, . Double_t & ; bx, . Double_t & ; bxErr, . Double_t & ; by, . Double_t & ; byErr, . Double_t & ; sxy, . Double_t & ; sxyErr, . Double_t & ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current ob",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:69070,Availability,error,errors,69070," ; sx, . Double_t & ; sxErr, . Double_t & ; sy, . Double_t & ; syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 190 of file TSpectrum2Fit.h. ◆ Ourpowl(). Double_t TSpectrum2Fit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . power function ; Definition at line 347 of file TSpectrum2Fit.cxx. ◆ SetBackgroundParameters(). void TSpectrum2Fit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; axInit, . Bool_t ; fixAx, . Double_t ; ayInit, . Bool_t ; fixAy . ). This function sets the following fitting parameters of background: . a0Init - i",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:69152,Availability,error,errors,69152," syErr . ). This function gets the tail parameters and their errors. . txy - gets the fitted value of txy parameter; txyErr - gets error value of txy parameter; tx - gets the fitted value of tx parameter; txErr - gets error value of tx parameter; ty - gets the fitted value of ty parameter; tyErr - gets error value of ty parameter; bx - gets the fitted value of bx parameter; bxErr - gets error value of bx parameter; by - gets the fitted value of by parameter; byErr - gets error value of by parameter; sxy - gets the fitted value of sxy parameter; sxyErr - gets error value of sxy parameter; sx - gets the fitted value of sx parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 190 of file TSpectrum2Fit.h. ◆ Ourpowl(). Double_t TSpectrum2Fit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . power function ; Definition at line 347 of file TSpectrum2Fit.cxx. ◆ SetBackgroundParameters(). void TSpectrum2Fit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; axInit, . Bool_t ; fixAx, . Double_t ; ayInit, . Bool_t ; fixAy . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+ax",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:77912,Availability,error,error,77912,"ze+4); size-number of rows of the matrix . Definition at line 374 of file TSpectrum2Fit.cxx. ◆ Streamer(). void TSpectrum2Fit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum2Fit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 190 of file TSpectrum2Fit.h. ◆ Volume(). Double_t TSpectrum2Fit::Volume ; (; Double_t ; a, . Double_t ; sx, . Double_t ; sy, . Double_t ; ro . ). protected . This function calculates volume of a peak. ; Function parameters:; a-amplitude of the peak; sx,sy-sigmas of peak; ro-correlation coefficient . Definition at line 1529 of file TSpectrum2Fit.cxx. Member Data Documentation. ◆ fA0Calc. Double_t TSpectrum2Fit::fA0Calc. protected . calculated value of background a0 parameter ; Definition at line 87 of file TSpectrum2Fit.h. ◆ fA0Err. Double_t TSpectrum2Fit::fA0Err. protected . error value of background a0 parameter ; Definition at line 88 of file TSpectrum2Fit.h. ◆ fA0Init. Double_t TSpectrum2Fit::fA0Init. protected . initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 86 of file TSpectrum2Fit.h. ◆ fAlpha. Double_t TSpectrum2Fit::fAlpha. protected . convergence coefficient, input parameter, it should be positive number and <=1, for details see references ; Definition at line 28 of file TSpectrum2Fit.h. ◆ fAlphaOptim. Int_t TSpectrum2Fit::fAlphaOptim. protected . optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrum2Fit.h. ◆ fAmpCalc. Double_t* TSpectrum2Fit::fAmpCalc. protected . [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ; Definition at line 43 of file TSpectrum2Fit.h. ◆ fAmpCalcX1. Double_t* TSpectrum2Fit::fAmpCalcX1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ; Defin",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:79293,Availability,error,errors,79293," for details see references ; Definition at line 28 of file TSpectrum2Fit.h. ◆ fAlphaOptim. Int_t TSpectrum2Fit::fAlphaOptim. protected . optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrum2Fit.h. ◆ fAmpCalc. Double_t* TSpectrum2Fit::fAmpCalc. protected . [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ; Definition at line 43 of file TSpectrum2Fit.h. ◆ fAmpCalcX1. Double_t* TSpectrum2Fit::fAmpCalcX1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ; Definition at line 46 of file TSpectrum2Fit.h. ◆ fAmpCalcY1. Double_t* TSpectrum2Fit::fAmpCalcY1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ; Definition at line 49 of file TSpectrum2Fit.h. ◆ fAmpErr. Double_t* TSpectrum2Fit::fAmpErr. protected . [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ; Definition at line 44 of file TSpectrum2Fit.h. ◆ fAmpErrX1. Double_t* TSpectrum2Fit::fAmpErrX1. protected . [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ; Definition at line 47 of file TSpectrum2Fit.h. ◆ fAmpErrY1. Double_t* TSpectrum2Fit::fAmpErrY1. protected . [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ; Definition at line 50 of file TSpectrum2Fit.h. ◆ fAmpInit. Double_t* TSpectrum2Fit::fAmpInit. protected . [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ; Definition at line 42 of file TSpectrum2Fit.h. ◆ fAmpInitX1. Double_t* TSpectrum2Fit::fAmpInitX1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ; Definition at line 45 of file TSpectrum2Fit.h. ◆ fAmpInitY1. Double_t* TSpectrum2Fit::fAmpInitY1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ; D",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:79471,Availability,error,errors,79471,"values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrum2Fit.h. ◆ fAmpCalc. Double_t* TSpectrum2Fit::fAmpCalc. protected . [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ; Definition at line 43 of file TSpectrum2Fit.h. ◆ fAmpCalcX1. Double_t* TSpectrum2Fit::fAmpCalcX1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ; Definition at line 46 of file TSpectrum2Fit.h. ◆ fAmpCalcY1. Double_t* TSpectrum2Fit::fAmpCalcY1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ; Definition at line 49 of file TSpectrum2Fit.h. ◆ fAmpErr. Double_t* TSpectrum2Fit::fAmpErr. protected . [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ; Definition at line 44 of file TSpectrum2Fit.h. ◆ fAmpErrX1. Double_t* TSpectrum2Fit::fAmpErrX1. protected . [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ; Definition at line 47 of file TSpectrum2Fit.h. ◆ fAmpErrY1. Double_t* TSpectrum2Fit::fAmpErrY1. protected . [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ; Definition at line 50 of file TSpectrum2Fit.h. ◆ fAmpInit. Double_t* TSpectrum2Fit::fAmpInit. protected . [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ; Definition at line 42 of file TSpectrum2Fit.h. ◆ fAmpInitX1. Double_t* TSpectrum2Fit::fAmpInitX1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ; Definition at line 45 of file TSpectrum2Fit.h. ◆ fAmpInitY1. Double_t* TSpectrum2Fit::fAmpInitY1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ; Definition at line 48 of file TSpectrum2Fit.h. ◆ fAxCalc. Double_t TSpectrum2Fit::fAxCalc. protected . calculated value of background ax parameter ; Definition at line 90 of file TSpectru",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:79665,Availability,error,errors,79665,"itudes of 2D peaks, output parameters ; Definition at line 43 of file TSpectrum2Fit.h. ◆ fAmpCalcX1. Double_t* TSpectrum2Fit::fAmpCalcX1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ; Definition at line 46 of file TSpectrum2Fit.h. ◆ fAmpCalcY1. Double_t* TSpectrum2Fit::fAmpCalcY1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ; Definition at line 49 of file TSpectrum2Fit.h. ◆ fAmpErr. Double_t* TSpectrum2Fit::fAmpErr. protected . [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ; Definition at line 44 of file TSpectrum2Fit.h. ◆ fAmpErrX1. Double_t* TSpectrum2Fit::fAmpErrX1. protected . [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ; Definition at line 47 of file TSpectrum2Fit.h. ◆ fAmpErrY1. Double_t* TSpectrum2Fit::fAmpErrY1. protected . [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ; Definition at line 50 of file TSpectrum2Fit.h. ◆ fAmpInit. Double_t* TSpectrum2Fit::fAmpInit. protected . [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ; Definition at line 42 of file TSpectrum2Fit.h. ◆ fAmpInitX1. Double_t* TSpectrum2Fit::fAmpInitX1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ; Definition at line 45 of file TSpectrum2Fit.h. ◆ fAmpInitY1. Double_t* TSpectrum2Fit::fAmpInitY1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ; Definition at line 48 of file TSpectrum2Fit.h. ◆ fAxCalc. Double_t TSpectrum2Fit::fAxCalc. protected . calculated value of background ax parameter ; Definition at line 90 of file TSpectrum2Fit.h. ◆ fAxErr. Double_t TSpectrum2Fit::fAxErr. protected . error value of background ax parameter ; Definition at line 91 of file TSpectrum2Fit.h. ◆ fAxInit. Double_t TSpectrum2Fit::fAxInit.",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:80569,Availability,error,error,80569,":fAmpErrY1. protected . [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ; Definition at line 50 of file TSpectrum2Fit.h. ◆ fAmpInit. Double_t* TSpectrum2Fit::fAmpInit. protected . [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ; Definition at line 42 of file TSpectrum2Fit.h. ◆ fAmpInitX1. Double_t* TSpectrum2Fit::fAmpInitX1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ; Definition at line 45 of file TSpectrum2Fit.h. ◆ fAmpInitY1. Double_t* TSpectrum2Fit::fAmpInitY1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ; Definition at line 48 of file TSpectrum2Fit.h. ◆ fAxCalc. Double_t TSpectrum2Fit::fAxCalc. protected . calculated value of background ax parameter ; Definition at line 90 of file TSpectrum2Fit.h. ◆ fAxErr. Double_t TSpectrum2Fit::fAxErr. protected . error value of background ax parameter ; Definition at line 91 of file TSpectrum2Fit.h. ◆ fAxInit. Double_t TSpectrum2Fit::fAxInit. protected . initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 89 of file TSpectrum2Fit.h. ◆ fAyCalc. Double_t TSpectrum2Fit::fAyCalc. protected . calculated value of background ay parameter ; Definition at line 93 of file TSpectrum2Fit.h. ◆ fAyErr. Double_t TSpectrum2Fit::fAyErr. protected . error value of background ay parameter ; Definition at line 94 of file TSpectrum2Fit.h. ◆ fAyInit. Double_t TSpectrum2Fit::fAyInit. protected . initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 92 of file TSpectrum2Fit.h. ◆ fBxCalc. Double_t TSpectrum2Fit::fBxCalc. protected . calculated value of b parameter for 1D ridges in x direction ; Definition at line 81 of file TSpectrum2Fit.h. ◆ fBxErr. Double_t TSpectrum2Fit::fBxErr. protected . error value of b parameter for 1D ridges in x direction ; Definition at",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:81046,Availability,error,error,81046,"tion, input parameters ; Definition at line 45 of file TSpectrum2Fit.h. ◆ fAmpInitY1. Double_t* TSpectrum2Fit::fAmpInitY1. protected . [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ; Definition at line 48 of file TSpectrum2Fit.h. ◆ fAxCalc. Double_t TSpectrum2Fit::fAxCalc. protected . calculated value of background ax parameter ; Definition at line 90 of file TSpectrum2Fit.h. ◆ fAxErr. Double_t TSpectrum2Fit::fAxErr. protected . error value of background ax parameter ; Definition at line 91 of file TSpectrum2Fit.h. ◆ fAxInit. Double_t TSpectrum2Fit::fAxInit. protected . initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 89 of file TSpectrum2Fit.h. ◆ fAyCalc. Double_t TSpectrum2Fit::fAyCalc. protected . calculated value of background ay parameter ; Definition at line 93 of file TSpectrum2Fit.h. ◆ fAyErr. Double_t TSpectrum2Fit::fAyErr. protected . error value of background ay parameter ; Definition at line 94 of file TSpectrum2Fit.h. ◆ fAyInit. Double_t TSpectrum2Fit::fAyInit. protected . initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 92 of file TSpectrum2Fit.h. ◆ fBxCalc. Double_t TSpectrum2Fit::fBxCalc. protected . calculated value of b parameter for 1D ridges in x direction ; Definition at line 81 of file TSpectrum2Fit.h. ◆ fBxErr. Double_t TSpectrum2Fit::fBxErr. protected . error value of b parameter for 1D ridges in x direction ; Definition at line 82 of file TSpectrum2Fit.h. ◆ fBxInit. Double_t TSpectrum2Fit::fBxInit. protected . initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ; Definition at line 80 of file TSpectrum2Fit.h. ◆ fByCalc. Double_t TSpectrum2Fit::fByCalc. protected . calculated value of b parameter for 1D ridges in y direction ; Definition at line 84 of file TSpectrum2Fit.h. ◆ fByErr. Double_t TSpectrum2Fit::fByErr. protected . error va",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:81540,Availability,error,error,81540,"ound ax parameter ; Definition at line 91 of file TSpectrum2Fit.h. ◆ fAxInit. Double_t TSpectrum2Fit::fAxInit. protected . initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 89 of file TSpectrum2Fit.h. ◆ fAyCalc. Double_t TSpectrum2Fit::fAyCalc. protected . calculated value of background ay parameter ; Definition at line 93 of file TSpectrum2Fit.h. ◆ fAyErr. Double_t TSpectrum2Fit::fAyErr. protected . error value of background ay parameter ; Definition at line 94 of file TSpectrum2Fit.h. ◆ fAyInit. Double_t TSpectrum2Fit::fAyInit. protected . initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 92 of file TSpectrum2Fit.h. ◆ fBxCalc. Double_t TSpectrum2Fit::fBxCalc. protected . calculated value of b parameter for 1D ridges in x direction ; Definition at line 81 of file TSpectrum2Fit.h. ◆ fBxErr. Double_t TSpectrum2Fit::fBxErr. protected . error value of b parameter for 1D ridges in x direction ; Definition at line 82 of file TSpectrum2Fit.h. ◆ fBxInit. Double_t TSpectrum2Fit::fBxInit. protected . initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ; Definition at line 80 of file TSpectrum2Fit.h. ◆ fByCalc. Double_t TSpectrum2Fit::fByCalc. protected . calculated value of b parameter for 1D ridges in y direction ; Definition at line 84 of file TSpectrum2Fit.h. ◆ fByErr. Double_t TSpectrum2Fit::fByErr. protected . error value of b parameter for 1D ridges in y direction ; Definition at line 85 of file TSpectrum2Fit.h. ◆ fByInit. Double_t TSpectrum2Fit::fByInit. protected . initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ; Definition at line 83 of file TSpectrum2Fit.h. ◆ fChi. Double_t TSpectrum2Fit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrum2Fit.h. ◆ fFitTaylor. Int_t TSpectrum2Fit::fF",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:82080,Availability,error,error,82080,".h. ◆ fAyInit. Double_t TSpectrum2Fit::fAyInit. protected . initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 92 of file TSpectrum2Fit.h. ◆ fBxCalc. Double_t TSpectrum2Fit::fBxCalc. protected . calculated value of b parameter for 1D ridges in x direction ; Definition at line 81 of file TSpectrum2Fit.h. ◆ fBxErr. Double_t TSpectrum2Fit::fBxErr. protected . error value of b parameter for 1D ridges in x direction ; Definition at line 82 of file TSpectrum2Fit.h. ◆ fBxInit. Double_t TSpectrum2Fit::fBxInit. protected . initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ; Definition at line 80 of file TSpectrum2Fit.h. ◆ fByCalc. Double_t TSpectrum2Fit::fByCalc. protected . calculated value of b parameter for 1D ridges in y direction ; Definition at line 84 of file TSpectrum2Fit.h. ◆ fByErr. Double_t TSpectrum2Fit::fByErr. protected . error value of b parameter for 1D ridges in y direction ; Definition at line 85 of file TSpectrum2Fit.h. ◆ fByInit. Double_t TSpectrum2Fit::fByInit. protected . initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ; Definition at line 83 of file TSpectrum2Fit.h. ◆ fChi. Double_t TSpectrum2Fit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrum2Fit.h. ◆ fFitTaylor. Int_t TSpectrum2Fit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrum2Fit.h. ◆ fFixA0. Bool_t TSpectrum2Fit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). How",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:88705,Availability,error,error,88705,"eter, it should be > 0 ; Definition at line 19 of file TSpectrum2Fit.h. ◆ fPositionCalcX. Double_t* TSpectrum2Fit::fPositionCalcX. protected . [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ; Definition at line 31 of file TSpectrum2Fit.h. ◆ fPositionCalcX1. Double_t* TSpectrum2Fit::fPositionCalcX1. protected . [fNPeaks] array of calculated x positions of 1D ridges, output parameters ; Definition at line 37 of file TSpectrum2Fit.h. ◆ fPositionCalcY. Double_t* TSpectrum2Fit::fPositionCalcY. protected . [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ; Definition at line 34 of file TSpectrum2Fit.h. ◆ fPositionCalcY1. Double_t* TSpectrum2Fit::fPositionCalcY1. protected . [fNPeaks] array of calculated y positions of 1D ridges, output parameters ; Definition at line 40 of file TSpectrum2Fit.h. ◆ fPositionErrX. Double_t* TSpectrum2Fit::fPositionErrX. protected . [fNPeaks] array of error values of x positions of 2D peaks, output parameters ; Definition at line 32 of file TSpectrum2Fit.h. ◆ fPositionErrX1. Double_t* TSpectrum2Fit::fPositionErrX1. protected . [fNPeaks] array of x positions errors of 1D ridges, output parameters ; Definition at line 38 of file TSpectrum2Fit.h. ◆ fPositionErrY. Double_t* TSpectrum2Fit::fPositionErrY. protected . [fNPeaks] array of error values of y positions of 2D peaks, output parameters ; Definition at line 35 of file TSpectrum2Fit.h. ◆ fPositionErrY1. Double_t* TSpectrum2Fit::fPositionErrY1. protected . [fNPeaks] array of y positions errors of 1D ridges, output parameters ; Definition at line 41 of file TSpectrum2Fit.h. ◆ fPositionInitX. Double_t* TSpectrum2Fit::fPositionInitX. protected . [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ; Definition at line 30 of file TSpectrum2Fit.h. ◆ fPositionInitX1. Double_t* TSpectrum2Fit::fPositionInitX1. protected . [fNPeaks] array of initial x positions of 1D ridges, input parameters ; Definition at l",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:88915,Availability,error,errors,88915," of 2D peaks, output parameters ; Definition at line 31 of file TSpectrum2Fit.h. ◆ fPositionCalcX1. Double_t* TSpectrum2Fit::fPositionCalcX1. protected . [fNPeaks] array of calculated x positions of 1D ridges, output parameters ; Definition at line 37 of file TSpectrum2Fit.h. ◆ fPositionCalcY. Double_t* TSpectrum2Fit::fPositionCalcY. protected . [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ; Definition at line 34 of file TSpectrum2Fit.h. ◆ fPositionCalcY1. Double_t* TSpectrum2Fit::fPositionCalcY1. protected . [fNPeaks] array of calculated y positions of 1D ridges, output parameters ; Definition at line 40 of file TSpectrum2Fit.h. ◆ fPositionErrX. Double_t* TSpectrum2Fit::fPositionErrX. protected . [fNPeaks] array of error values of x positions of 2D peaks, output parameters ; Definition at line 32 of file TSpectrum2Fit.h. ◆ fPositionErrX1. Double_t* TSpectrum2Fit::fPositionErrX1. protected . [fNPeaks] array of x positions errors of 1D ridges, output parameters ; Definition at line 38 of file TSpectrum2Fit.h. ◆ fPositionErrY. Double_t* TSpectrum2Fit::fPositionErrY. protected . [fNPeaks] array of error values of y positions of 2D peaks, output parameters ; Definition at line 35 of file TSpectrum2Fit.h. ◆ fPositionErrY1. Double_t* TSpectrum2Fit::fPositionErrY1. protected . [fNPeaks] array of y positions errors of 1D ridges, output parameters ; Definition at line 41 of file TSpectrum2Fit.h. ◆ fPositionInitX. Double_t* TSpectrum2Fit::fPositionInitX. protected . [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ; Definition at line 30 of file TSpectrum2Fit.h. ◆ fPositionInitX1. Double_t* TSpectrum2Fit::fPositionInitX1. protected . [fNPeaks] array of initial x positions of 1D ridges, input parameters ; Definition at line 36 of file TSpectrum2Fit.h. ◆ fPositionInitY. Double_t* TSpectrum2Fit::fPositionInitY. protected . [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ; Definition",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:89091,Availability,error,error,89091,"ons of 1D ridges, output parameters ; Definition at line 37 of file TSpectrum2Fit.h. ◆ fPositionCalcY. Double_t* TSpectrum2Fit::fPositionCalcY. protected . [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ; Definition at line 34 of file TSpectrum2Fit.h. ◆ fPositionCalcY1. Double_t* TSpectrum2Fit::fPositionCalcY1. protected . [fNPeaks] array of calculated y positions of 1D ridges, output parameters ; Definition at line 40 of file TSpectrum2Fit.h. ◆ fPositionErrX. Double_t* TSpectrum2Fit::fPositionErrX. protected . [fNPeaks] array of error values of x positions of 2D peaks, output parameters ; Definition at line 32 of file TSpectrum2Fit.h. ◆ fPositionErrX1. Double_t* TSpectrum2Fit::fPositionErrX1. protected . [fNPeaks] array of x positions errors of 1D ridges, output parameters ; Definition at line 38 of file TSpectrum2Fit.h. ◆ fPositionErrY. Double_t* TSpectrum2Fit::fPositionErrY. protected . [fNPeaks] array of error values of y positions of 2D peaks, output parameters ; Definition at line 35 of file TSpectrum2Fit.h. ◆ fPositionErrY1. Double_t* TSpectrum2Fit::fPositionErrY1. protected . [fNPeaks] array of y positions errors of 1D ridges, output parameters ; Definition at line 41 of file TSpectrum2Fit.h. ◆ fPositionInitX. Double_t* TSpectrum2Fit::fPositionInitX. protected . [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ; Definition at line 30 of file TSpectrum2Fit.h. ◆ fPositionInitX1. Double_t* TSpectrum2Fit::fPositionInitX1. protected . [fNPeaks] array of initial x positions of 1D ridges, input parameters ; Definition at line 36 of file TSpectrum2Fit.h. ◆ fPositionInitY. Double_t* TSpectrum2Fit::fPositionInitY. protected . [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ; Definition at line 33 of file TSpectrum2Fit.h. ◆ fPositionInitY1. Double_t* TSpectrum2Fit::fPositionInitY1. protected . [fNPeaks] array of initial y positions of 1D ridges, input parameters ; Definition",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:89301,Availability,error,errors,89301,"f y positions of 2D peaks, output parameters ; Definition at line 34 of file TSpectrum2Fit.h. ◆ fPositionCalcY1. Double_t* TSpectrum2Fit::fPositionCalcY1. protected . [fNPeaks] array of calculated y positions of 1D ridges, output parameters ; Definition at line 40 of file TSpectrum2Fit.h. ◆ fPositionErrX. Double_t* TSpectrum2Fit::fPositionErrX. protected . [fNPeaks] array of error values of x positions of 2D peaks, output parameters ; Definition at line 32 of file TSpectrum2Fit.h. ◆ fPositionErrX1. Double_t* TSpectrum2Fit::fPositionErrX1. protected . [fNPeaks] array of x positions errors of 1D ridges, output parameters ; Definition at line 38 of file TSpectrum2Fit.h. ◆ fPositionErrY. Double_t* TSpectrum2Fit::fPositionErrY. protected . [fNPeaks] array of error values of y positions of 2D peaks, output parameters ; Definition at line 35 of file TSpectrum2Fit.h. ◆ fPositionErrY1. Double_t* TSpectrum2Fit::fPositionErrY1. protected . [fNPeaks] array of y positions errors of 1D ridges, output parameters ; Definition at line 41 of file TSpectrum2Fit.h. ◆ fPositionInitX. Double_t* TSpectrum2Fit::fPositionInitX. protected . [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ; Definition at line 30 of file TSpectrum2Fit.h. ◆ fPositionInitX1. Double_t* TSpectrum2Fit::fPositionInitX1. protected . [fNPeaks] array of initial x positions of 1D ridges, input parameters ; Definition at line 36 of file TSpectrum2Fit.h. ◆ fPositionInitY. Double_t* TSpectrum2Fit::fPositionInitY. protected . [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ; Definition at line 33 of file TSpectrum2Fit.h. ◆ fPositionInitY1. Double_t* TSpectrum2Fit::fPositionInitY1. protected . [fNPeaks] array of initial y positions of 1D ridges, input parameters ; Definition at line 39 of file TSpectrum2Fit.h. ◆ fPower. Int_t TSpectrum2Fit::fPower. protected . possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting funct",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:90585,Availability,error,error,90585,"Fit::fPositionInitX1. protected . [fNPeaks] array of initial x positions of 1D ridges, input parameters ; Definition at line 36 of file TSpectrum2Fit.h. ◆ fPositionInitY. Double_t* TSpectrum2Fit::fPositionInitY. protected . [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ; Definition at line 33 of file TSpectrum2Fit.h. ◆ fPositionInitY1. Double_t* TSpectrum2Fit::fPositionInitY1. protected . [fNPeaks] array of initial y positions of 1D ridges, input parameters ; Definition at line 39 of file TSpectrum2Fit.h. ◆ fPower. Int_t TSpectrum2Fit::fPower. protected . possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ; Definition at line 26 of file TSpectrum2Fit.h. ◆ fRoCalc. Double_t TSpectrum2Fit::fRoCalc. protected . calculated value of correlation coefficient ; Definition at line 60 of file TSpectrum2Fit.h. ◆ fRoErr. Double_t TSpectrum2Fit::fRoErr. protected . error value of correlation coefficient ; Definition at line 61 of file TSpectrum2Fit.h. ◆ fRoInit. Double_t TSpectrum2Fit::fRoInit. protected . initial value of correlation coefficient ; Definition at line 59 of file TSpectrum2Fit.h. ◆ fSigmaCalcX. Double_t TSpectrum2Fit::fSigmaCalcX. protected . calculated value of sigma x parameter ; Definition at line 54 of file TSpectrum2Fit.h. ◆ fSigmaCalcY. Double_t TSpectrum2Fit::fSigmaCalcY. protected . calculated value of sigma y parameter ; Definition at line 57 of file TSpectrum2Fit.h. ◆ fSigmaErrX. Double_t TSpectrum2Fit::fSigmaErrX. protected . error value of sigma x parameter ; Definition at line 55 of file TSpectrum2Fit.h. ◆ fSigmaErrY. Double_t TSpectrum2Fit::fSigmaErrY. protected . error value of sigma y parameter ; Definition at line 58 of file TSpectrum2Fit.h. ◆ fSigmaInitX. Double_t TSpectrum2Fit::fSigmaInitX. protected . initial value of sigma x parameter ; Definition at line 53 of file TSpectrum2Fit.h. ◆ fSigmaInitY. Double_t TSpectrum2Fit::fSigmaInitY. protected . initia",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:91183,Availability,error,error,91183,"possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ; Definition at line 26 of file TSpectrum2Fit.h. ◆ fRoCalc. Double_t TSpectrum2Fit::fRoCalc. protected . calculated value of correlation coefficient ; Definition at line 60 of file TSpectrum2Fit.h. ◆ fRoErr. Double_t TSpectrum2Fit::fRoErr. protected . error value of correlation coefficient ; Definition at line 61 of file TSpectrum2Fit.h. ◆ fRoInit. Double_t TSpectrum2Fit::fRoInit. protected . initial value of correlation coefficient ; Definition at line 59 of file TSpectrum2Fit.h. ◆ fSigmaCalcX. Double_t TSpectrum2Fit::fSigmaCalcX. protected . calculated value of sigma x parameter ; Definition at line 54 of file TSpectrum2Fit.h. ◆ fSigmaCalcY. Double_t TSpectrum2Fit::fSigmaCalcY. protected . calculated value of sigma y parameter ; Definition at line 57 of file TSpectrum2Fit.h. ◆ fSigmaErrX. Double_t TSpectrum2Fit::fSigmaErrX. protected . error value of sigma x parameter ; Definition at line 55 of file TSpectrum2Fit.h. ◆ fSigmaErrY. Double_t TSpectrum2Fit::fSigmaErrY. protected . error value of sigma y parameter ; Definition at line 58 of file TSpectrum2Fit.h. ◆ fSigmaInitX. Double_t TSpectrum2Fit::fSigmaInitX. protected . initial value of sigma x parameter ; Definition at line 53 of file TSpectrum2Fit.h. ◆ fSigmaInitY. Double_t TSpectrum2Fit::fSigmaInitY. protected . initial value of sigma y parameter ; Definition at line 56 of file TSpectrum2Fit.h. ◆ fStatisticType. Int_t TSpectrum2Fit::fStatisticType. protected . type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrum2Fit.h. ◆ fSxCalc. Double_t TSpectrum2Fit::fSxCalc. protected . calculated value of s parameter for 1D ridges in x direction ; Definition at line 75 of file TSpectrum2Fit.h. ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:91327,Availability,error,error,91327,"Spectrum2Fit.h. ◆ fRoCalc. Double_t TSpectrum2Fit::fRoCalc. protected . calculated value of correlation coefficient ; Definition at line 60 of file TSpectrum2Fit.h. ◆ fRoErr. Double_t TSpectrum2Fit::fRoErr. protected . error value of correlation coefficient ; Definition at line 61 of file TSpectrum2Fit.h. ◆ fRoInit. Double_t TSpectrum2Fit::fRoInit. protected . initial value of correlation coefficient ; Definition at line 59 of file TSpectrum2Fit.h. ◆ fSigmaCalcX. Double_t TSpectrum2Fit::fSigmaCalcX. protected . calculated value of sigma x parameter ; Definition at line 54 of file TSpectrum2Fit.h. ◆ fSigmaCalcY. Double_t TSpectrum2Fit::fSigmaCalcY. protected . calculated value of sigma y parameter ; Definition at line 57 of file TSpectrum2Fit.h. ◆ fSigmaErrX. Double_t TSpectrum2Fit::fSigmaErrX. protected . error value of sigma x parameter ; Definition at line 55 of file TSpectrum2Fit.h. ◆ fSigmaErrY. Double_t TSpectrum2Fit::fSigmaErrY. protected . error value of sigma y parameter ; Definition at line 58 of file TSpectrum2Fit.h. ◆ fSigmaInitX. Double_t TSpectrum2Fit::fSigmaInitX. protected . initial value of sigma x parameter ; Definition at line 53 of file TSpectrum2Fit.h. ◆ fSigmaInitY. Double_t TSpectrum2Fit::fSigmaInitY. protected . initial value of sigma y parameter ; Definition at line 56 of file TSpectrum2Fit.h. ◆ fStatisticType. Int_t TSpectrum2Fit::fStatisticType. protected . type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrum2Fit.h. ◆ fSxCalc. Double_t TSpectrum2Fit::fSxCalc. protected . calculated value of s parameter for 1D ridges in x direction ; Definition at line 75 of file TSpectrum2Fit.h. ◆ fSxErr. Double_t TSpectrum2Fit::fSxErr. protected . error value of s parameter for 1D ridges in x direction ; Definition at line 76 of file TS",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:92276,Availability,error,error,92276," error value of sigma y parameter ; Definition at line 58 of file TSpectrum2Fit.h. ◆ fSigmaInitX. Double_t TSpectrum2Fit::fSigmaInitX. protected . initial value of sigma x parameter ; Definition at line 53 of file TSpectrum2Fit.h. ◆ fSigmaInitY. Double_t TSpectrum2Fit::fSigmaInitY. protected . initial value of sigma y parameter ; Definition at line 56 of file TSpectrum2Fit.h. ◆ fStatisticType. Int_t TSpectrum2Fit::fStatisticType. protected . type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrum2Fit.h. ◆ fSxCalc. Double_t TSpectrum2Fit::fSxCalc. protected . calculated value of s parameter for 1D ridges in x direction ; Definition at line 75 of file TSpectrum2Fit.h. ◆ fSxErr. Double_t TSpectrum2Fit::fSxErr. protected . error value of s parameter for 1D ridges in x direction ; Definition at line 76 of file TSpectrum2Fit.h. ◆ fSxInit. Double_t TSpectrum2Fit::fSxInit. protected . initial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references ; Definition at line 74 of file TSpectrum2Fit.h. ◆ fSxyCalc. Double_t TSpectrum2Fit::fSxyCalc. protected . calculated value of s parameter for 2D peaks ; Definition at line 66 of file TSpectrum2Fit.h. ◆ fSxyErr. Double_t TSpectrum2Fit::fSxyErr. protected . error value of s parameter for 2D peaks ; Definition at line 67 of file TSpectrum2Fit.h. ◆ fSxyInit. Double_t TSpectrum2Fit::fSxyInit. protected . initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ; Definition at line 65 of file TSpectrum2Fit.h. ◆ fSyCalc. Double_t TSpectrum2Fit::fSyCalc. protected . calculated value of s parameter for 1D ridges in y direction ; Definition at line 78 of file TSpectrum2Fit.h. ◆ fSyErr. Double_t TSpect",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:92825,Availability,error,error,92825,"ighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrum2Fit.h. ◆ fSxCalc. Double_t TSpectrum2Fit::fSxCalc. protected . calculated value of s parameter for 1D ridges in x direction ; Definition at line 75 of file TSpectrum2Fit.h. ◆ fSxErr. Double_t TSpectrum2Fit::fSxErr. protected . error value of s parameter for 1D ridges in x direction ; Definition at line 76 of file TSpectrum2Fit.h. ◆ fSxInit. Double_t TSpectrum2Fit::fSxInit. protected . initial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references ; Definition at line 74 of file TSpectrum2Fit.h. ◆ fSxyCalc. Double_t TSpectrum2Fit::fSxyCalc. protected . calculated value of s parameter for 2D peaks ; Definition at line 66 of file TSpectrum2Fit.h. ◆ fSxyErr. Double_t TSpectrum2Fit::fSxyErr. protected . error value of s parameter for 2D peaks ; Definition at line 67 of file TSpectrum2Fit.h. ◆ fSxyInit. Double_t TSpectrum2Fit::fSxyInit. protected . initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ; Definition at line 65 of file TSpectrum2Fit.h. ◆ fSyCalc. Double_t TSpectrum2Fit::fSyCalc. protected . calculated value of s parameter for 1D ridges in y direction ; Definition at line 78 of file TSpectrum2Fit.h. ◆ fSyErr. Double_t TSpectrum2Fit::fSyErr. protected . error value of s parameter for 1D ridges in y direction ; Definition at line 79 of file TSpectrum2Fit.h. ◆ fSyInit. Double_t TSpectrum2Fit::fSyInit. protected . initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ; Definition at line 77 of file TSpectrum2Fit.h. ◆ fTxCalc. Double_t TSpectrum2Fit::fTxCalc. protected . calculated value of t parameter for 1D ridges in x direction ; Definition at line 69 of file TSpectrum2Fit.h. ◆ fTx",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:93356,Availability,error,error,93356,"trum2Fit::fSxInit. protected . initial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references ; Definition at line 74 of file TSpectrum2Fit.h. ◆ fSxyCalc. Double_t TSpectrum2Fit::fSxyCalc. protected . calculated value of s parameter for 2D peaks ; Definition at line 66 of file TSpectrum2Fit.h. ◆ fSxyErr. Double_t TSpectrum2Fit::fSxyErr. protected . error value of s parameter for 2D peaks ; Definition at line 67 of file TSpectrum2Fit.h. ◆ fSxyInit. Double_t TSpectrum2Fit::fSxyInit. protected . initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ; Definition at line 65 of file TSpectrum2Fit.h. ◆ fSyCalc. Double_t TSpectrum2Fit::fSyCalc. protected . calculated value of s parameter for 1D ridges in y direction ; Definition at line 78 of file TSpectrum2Fit.h. ◆ fSyErr. Double_t TSpectrum2Fit::fSyErr. protected . error value of s parameter for 1D ridges in y direction ; Definition at line 79 of file TSpectrum2Fit.h. ◆ fSyInit. Double_t TSpectrum2Fit::fSyInit. protected . initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ; Definition at line 77 of file TSpectrum2Fit.h. ◆ fTxCalc. Double_t TSpectrum2Fit::fTxCalc. protected . calculated value of t parameter for 1D ridges in x direction ; Definition at line 69 of file TSpectrum2Fit.h. ◆ fTxErr. Double_t TSpectrum2Fit::fTxErr. protected . error value of t parameter for 1D ridges in x direction ; Definition at line 70 of file TSpectrum2Fit.h. ◆ fTxInit. Double_t TSpectrum2Fit::fTxInit. protected . initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ; Definition at line 68 of file TSpectrum2Fit.h. ◆ fTxyCalc. Double_t TSpectrum2Fit::fTxyCalc. protected . calculated value of t parameter for 2D peaks ; Definition at line 63 of file TSpectrum2Fit.",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:93917,Availability,error,error,93917,"ed . initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ; Definition at line 65 of file TSpectrum2Fit.h. ◆ fSyCalc. Double_t TSpectrum2Fit::fSyCalc. protected . calculated value of s parameter for 1D ridges in y direction ; Definition at line 78 of file TSpectrum2Fit.h. ◆ fSyErr. Double_t TSpectrum2Fit::fSyErr. protected . error value of s parameter for 1D ridges in y direction ; Definition at line 79 of file TSpectrum2Fit.h. ◆ fSyInit. Double_t TSpectrum2Fit::fSyInit. protected . initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ; Definition at line 77 of file TSpectrum2Fit.h. ◆ fTxCalc. Double_t TSpectrum2Fit::fTxCalc. protected . calculated value of t parameter for 1D ridges in x direction ; Definition at line 69 of file TSpectrum2Fit.h. ◆ fTxErr. Double_t TSpectrum2Fit::fTxErr. protected . error value of t parameter for 1D ridges in x direction ; Definition at line 70 of file TSpectrum2Fit.h. ◆ fTxInit. Double_t TSpectrum2Fit::fTxInit. protected . initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ; Definition at line 68 of file TSpectrum2Fit.h. ◆ fTxyCalc. Double_t TSpectrum2Fit::fTxyCalc. protected . calculated value of t parameter for 2D peaks ; Definition at line 63 of file TSpectrum2Fit.h. ◆ fTxyErr. Double_t TSpectrum2Fit::fTxyErr. protected . error value of t parameter for 2D peaks ; Definition at line 64 of file TSpectrum2Fit.h. ◆ fTxyInit. Double_t TSpectrum2Fit::fTxyInit. protected . initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ; Definition at line 62 of file TSpectrum2Fit.h. ◆ fTyCalc. Double_t TSpectrum2Fit::fTyCalc. protected . calculated value of t parameter for 1D ridges in y direction ; Definition at line 72 of file TSpectrum2Fit.h. ◆ fTyErr. Double_t TSpect",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:94466,Availability,error,error,94466,"tected . initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ; Definition at line 77 of file TSpectrum2Fit.h. ◆ fTxCalc. Double_t TSpectrum2Fit::fTxCalc. protected . calculated value of t parameter for 1D ridges in x direction ; Definition at line 69 of file TSpectrum2Fit.h. ◆ fTxErr. Double_t TSpectrum2Fit::fTxErr. protected . error value of t parameter for 1D ridges in x direction ; Definition at line 70 of file TSpectrum2Fit.h. ◆ fTxInit. Double_t TSpectrum2Fit::fTxInit. protected . initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ; Definition at line 68 of file TSpectrum2Fit.h. ◆ fTxyCalc. Double_t TSpectrum2Fit::fTxyCalc. protected . calculated value of t parameter for 2D peaks ; Definition at line 63 of file TSpectrum2Fit.h. ◆ fTxyErr. Double_t TSpectrum2Fit::fTxyErr. protected . error value of t parameter for 2D peaks ; Definition at line 64 of file TSpectrum2Fit.h. ◆ fTxyInit. Double_t TSpectrum2Fit::fTxyInit. protected . initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ; Definition at line 62 of file TSpectrum2Fit.h. ◆ fTyCalc. Double_t TSpectrum2Fit::fTyCalc. protected . calculated value of t parameter for 1D ridges in y direction ; Definition at line 72 of file TSpectrum2Fit.h. ◆ fTyErr. Double_t TSpectrum2Fit::fTyErr. protected . error value of t parameter for 1D ridges in y direction ; Definition at line 73 of file TSpectrum2Fit.h. ◆ fTyInit. Double_t TSpectrum2Fit::fTyInit. protected . initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ; Definition at line 71 of file TSpectrum2Fit.h. ◆ fVolume. Double_t* TSpectrum2Fit::fVolume. protected . [fNPeaks] array of calculated volumes of 2D peaks, output parameters ; Definition at line 51 of file TSpectrum2Fit",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:94997,Availability,error,error,94997,"trum2Fit::fTxInit. protected . initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ; Definition at line 68 of file TSpectrum2Fit.h. ◆ fTxyCalc. Double_t TSpectrum2Fit::fTxyCalc. protected . calculated value of t parameter for 2D peaks ; Definition at line 63 of file TSpectrum2Fit.h. ◆ fTxyErr. Double_t TSpectrum2Fit::fTxyErr. protected . error value of t parameter for 2D peaks ; Definition at line 64 of file TSpectrum2Fit.h. ◆ fTxyInit. Double_t TSpectrum2Fit::fTxyInit. protected . initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ; Definition at line 62 of file TSpectrum2Fit.h. ◆ fTyCalc. Double_t TSpectrum2Fit::fTyCalc. protected . calculated value of t parameter for 1D ridges in y direction ; Definition at line 72 of file TSpectrum2Fit.h. ◆ fTyErr. Double_t TSpectrum2Fit::fTyErr. protected . error value of t parameter for 1D ridges in y direction ; Definition at line 73 of file TSpectrum2Fit.h. ◆ fTyInit. Double_t TSpectrum2Fit::fTyInit. protected . initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ; Definition at line 71 of file TSpectrum2Fit.h. ◆ fVolume. Double_t* TSpectrum2Fit::fVolume. protected . [fNPeaks] array of calculated volumes of 2D peaks, output parameters ; Definition at line 51 of file TSpectrum2Fit.h. ◆ fVolumeErr. Double_t* TSpectrum2Fit::fVolumeErr. protected . [fNPeaks] array of volumes errors of 2D peaks, output parameters ; Definition at line 52 of file TSpectrum2Fit.h. ◆ fXmax. Int_t TSpectrum2Fit::fXmax. protected . last fitted channel in x direction ; Definition at line 21 of file TSpectrum2Fit.h. ◆ fXmin. Int_t TSpectrum2Fit::fXmin. protected . first fitted channel in x direction ; Definition at line 20 of file TSpectrum2Fit.h. ◆ fYmax. Int_t TSpectrum2Fit::fYmax. protected . last fitted channel in y direction ; Defin",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:95603,Availability,error,errors,95603," of file TSpectrum2Fit.h. ◆ fTxyInit. Double_t TSpectrum2Fit::fTxyInit. protected . initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ; Definition at line 62 of file TSpectrum2Fit.h. ◆ fTyCalc. Double_t TSpectrum2Fit::fTyCalc. protected . calculated value of t parameter for 1D ridges in y direction ; Definition at line 72 of file TSpectrum2Fit.h. ◆ fTyErr. Double_t TSpectrum2Fit::fTyErr. protected . error value of t parameter for 1D ridges in y direction ; Definition at line 73 of file TSpectrum2Fit.h. ◆ fTyInit. Double_t TSpectrum2Fit::fTyInit. protected . initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ; Definition at line 71 of file TSpectrum2Fit.h. ◆ fVolume. Double_t* TSpectrum2Fit::fVolume. protected . [fNPeaks] array of calculated volumes of 2D peaks, output parameters ; Definition at line 51 of file TSpectrum2Fit.h. ◆ fVolumeErr. Double_t* TSpectrum2Fit::fVolumeErr. protected . [fNPeaks] array of volumes errors of 2D peaks, output parameters ; Definition at line 52 of file TSpectrum2Fit.h. ◆ fXmax. Int_t TSpectrum2Fit::fXmax. protected . last fitted channel in x direction ; Definition at line 21 of file TSpectrum2Fit.h. ◆ fXmin. Int_t TSpectrum2Fit::fXmin. protected . first fitted channel in x direction ; Definition at line 20 of file TSpectrum2Fit.h. ◆ fYmax. Int_t TSpectrum2Fit::fYmax. protected . last fitted channel in y direction ; Definition at line 23 of file TSpectrum2Fit.h. ◆ fYmin. Int_t TSpectrum2Fit::fYmin. protected . first fitted channel in y direction ; Definition at line 22 of file TSpectrum2Fit.h. Libraries for TSpectrum2Fit:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrum2Fit.h; hist/spectrum/src/TSpectrum2Fit.cxx. TSpectrum2Fit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:2779,Energy Efficiency,allocate,allocates,2779,";   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Fit (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. ;  ;  TSpectrum2Fit (void);  Default constructor. ;  ;  ~TSpectrum2Fit () override;  Destructor. ;  ; void FitAwmi (Double_t **source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t **source);  This function fits the source spectrum. ;  ; void GetAmplitudeErrors (Double_t *amplitudeErrors, Double_t *amplitudeErrorsX1, Double_t *amplitudeErrorsY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetAmplitudes (Double_t *amplitudes, Double_t *amplitudesX1, Double_t *amplitudesY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &ax, Double_t &axErr, Double_t &ay, Double_t &ayErr);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; void GetPositionErrors (Do",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:5421,Energy Efficiency,power,power,5421," Double_t &sy, Double_t &syErr);  This function gets the tail parameters and their errors. ;  ; void GetVolumeErrors (Double_t *volumeErrors);  This function gets errors of the volumes of fitted 2D peaks. ;  ; void GetVolumes (Double_t *volumes);  This function gets the volumes of fitted 2D peaks. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following fitting parameters: ;  ; void SetPeakParameters (Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t *positionInitX, const Bool_t *fixPositionX, const Double_t *positionInitY, const Bool_t *fixPositionY, const Double_t *positionInitX1, const Bool_t *fixPositionX1, const Double_t *positionInitY1, const Bool_t *fixPositionY1, const Double_t *ampInit, const Bool_t *fixAmp, const Double_t *ampInitX1, const Bool_t *fixAmpX1, const Double_t *ampInitY1, const Bool_t *fixAmpY1);  This function sets the following fitting parameters of peaks: ;  ; void SetTailParameters (Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy);  This function sets the following fitting parameters of tails of peaks. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TName",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:22182,Energy Efficiency,power,power,22182,"e_t *parameter, Double_t sigmax, Double_t bx);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude tx. ;  ; Double_t Dertxy (Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t *parameter, Double_t sigmax, Double_t sigmay, Double_t bx, Double_t by);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude txy. ;  ; Double_t Derty (Int_t numOfFittedPeaks, Double_t x, const Double_t *parameter, Double_t sigmax, Double_t bx);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude ty. ;  ; Double_t Erfc (Double_t x);  This function calculates error function of x. ;  ; Double_t Ourpowl (Double_t a, Int_t pw);  power function ;  ; Double_t Shape2 (Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t *parameter, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t a0, Double_t ax, Double_t ay, Double_t txy, Double_t sxy, Double_t tx, Double_t ty, Double_t sx, Double_t sy, Double_t bx, Double_t by);  This function calculates 2D peaks shape function (see manual) ;  ; void StiefelInversion (Double_t **a, Int_t size);  This function calculates solution of the system of linear equations. ;  ; Double_t Volume (Double_t a, Double_t sx, Double_t sy, Double_t ro);  This function calculates volume of a peak. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fA",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:34551,Energy Efficiency,allocate,allocates,34551,"Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Fit.h>. Inheritance diagram for TSpectrum2Fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ; kFitPower2 ; kFitPower4 ; kFitPower6 ; kFitPower8 ; kFitPower10 ; kFitPower12 ; kFitTaylorOrderFirst ; kFitTaylorOrderSecond ; kFitNumRegulCycles . Definition at line 117 of file TSpectrum2Fit.h. Constructor & Destructor Documentation. ◆ TSpectrum2Fit() [1/2]. TSpectrum2Fit::TSpectrum2Fit ; (; void ; ). Default constructor. ; Definition at line 37 of file TSpectrum2Fit.cxx. ◆ TSpectrum2Fit() [2/2]. TSpectrum2Fit::TSpectrum2Fit ; (; Int_t ; numberPeaks). numberPeaks: number of fitted peaks (must be greater than zero) the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. ; One can change these variables by member functions (setters) of TSpectrumFit class.; Shape function of the fitted peaks contains the two-dimensional symmetrical Gaussian two one-dimensional symmetrical Gaussian ridges as well as non-symmetrical terms and background. Definition at line 152 of file TSpectrum2Fit.cxx. ◆ ~TSpectrum2Fit(). TSpectrum2Fit::~TSpectrum2Fit ; (; ). override . Destructor. ; Definition at line 261 of file TSpectrum2Fit.cxx. Member Function Documentation. ◆ Class(). static TClass * TSpectrum2Fit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSpectrum2Fit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpectrum2Fit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 190 of file TSpectrum2Fit.h. ◆ DeclFileName(",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:69738,Energy Efficiency,power,power,69738,"x parameter; sxErr - gets error value of sx parameter; sy - gets the fitted value of sy parameter; syErr - gets error value of sy parameter . Definition at line 5858 of file TSpectrum2Fit.cxx. ◆ GetVolumeErrors(). void TSpectrum2Fit::GetVolumeErrors ; (; Double_t * ; volumeErrors). This function gets errors of the volumes of fitted 2D peaks. . volumeErrors - gets vector of volumes errors of 2D peaks . Definition at line 5780 of file TSpectrum2Fit.cxx. ◆ GetVolumes(). void TSpectrum2Fit::GetVolumes ; (; Double_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 190 of file TSpectrum2Fit.h. ◆ Ourpowl(). Double_t TSpectrum2Fit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . power function ; Definition at line 347 of file TSpectrum2Fit.cxx. ◆ SetBackgroundParameters(). void TSpectrum2Fit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; axInit, . Bool_t ; fixAx, . Double_t ; ayInit, . Bool_t ; fixAy . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+ax*x+ay*y); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); axInit - initial value of ax parameter; fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); ayInit - initial value of ay parameter; fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit) . Definition at line 5652 of file TSpectrum2Fit.cxx. ◆ SetFitParameters(). void TSpectrum2Fit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:70777,Energy Efficiency,power,power,70777,"7 of file TSpectrum2Fit.cxx. ◆ SetBackgroundParameters(). void TSpectrum2Fit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; axInit, . Bool_t ; fixAx, . Double_t ; ayInit, . Bool_t ; fixAy . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+ax*x+ay*y); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); axInit - initial value of ax parameter; fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); ayInit - initial value of ay parameter; fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit) . Definition at line 5652 of file TSpectrum2Fit.cxx. ◆ SetFitParameters(). void TSpectrum2Fit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax, ymin, ymax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 5525 of file TSpectrum2Fit.cxx. ◆ SetPeakParameters(). void TSpectrum2Fit::Set",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:71415,Energy Efficiency,power,power,71415,"f a0 parameter, which allows to fix the parameter (not to fit); axInit - initial value of ax parameter; fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); ayInit - initial value of ay parameter; fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit) . Definition at line 5652 of file TSpectrum2Fit.cxx. ◆ SetFitParameters(). void TSpectrum2Fit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax, ymin, ymax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 5525 of file TSpectrum2Fit.cxx. ◆ SetPeakParameters(). void TSpectrum2Fit::SetPeakParameters ; (; Double_t ; sigmaX, . Bool_t ; fixSigmaX, . Double_t ; sigmaY, . Bool_t ; fixSigmaY, . Double_t ; ro, . Bool_t ; fixRo, . const Double_t * ; positionInitX, . const Bool_t * ; fixPositionX, . const Double_t * ; positionInitY, . const Bool_t * ; fixPositionY, . const Double_t * ; positionInitX1, . const Bool_t * ; fixPositionX1, . const Double_t * ; positionInitY1, . const Bool_t ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:497,Integrability,interface,interface,497,". ROOT: TSpectrum2Fit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrum2Fit Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional spectra fitting functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Fit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Fit might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class for fitting 2D spectra using AWMI (algorithm without matrix inversion) and conjugate gradient algorithms for symmetrical matrices (Stiefel-Hestens method). AWMI method allows to fit simultaneously 100s up to 1000s peaks. Stiefel method is very stable, it converges faster, but is more time consuming.; The algorithms in this class have been published in the following references:. M. Morhac et al.: Efficient fitting algorithms applied to analysis of coincidence gamma-ray spectra. Computer Physics Communications, Vol 172/1 (2005) pp. 19-41.; M. Morhac et al.: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in gamma-ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. . Definition at line 16 of file TSpectrum2Fit.h. Public Types; enum  { ;   kFitOptimChiCounts =0; , kFitOptimChiFuncValues =1; , kFitOptimMaxLikelihood =2; , kFitAlphaHalving =0; , ;   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  P",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:638,Integrability,depend,depending,638,". ROOT: TSpectrum2Fit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrum2Fit Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional spectra fitting functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Fit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Fit might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class for fitting 2D spectra using AWMI (algorithm without matrix inversion) and conjugate gradient algorithms for symmetrical matrices (Stiefel-Hestens method). AWMI method allows to fit simultaneously 100s up to 1000s peaks. Stiefel method is very stable, it converges faster, but is more time consuming.; The algorithms in this class have been published in the following references:. M. Morhac et al.: Efficient fitting algorithms applied to analysis of coincidence gamma-ray spectra. Computer Physics Communications, Vol 172/1 (2005) pp. 19-41.; M. Morhac et al.: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in gamma-ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. . Definition at line 16 of file TSpectrum2Fit.h. Public Types; enum  { ;   kFitOptimChiCounts =0; , kFitOptimChiFuncValues =1; , kFitOptimMaxLikelihood =2; , kFitAlphaHalving =0; , ;   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  P",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:9696,Integrability,message,message,9696,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:10237,Integrability,message,message,10237,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:11227,Integrability,message,message,11227,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:14321,Integrability,message,message,14321,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:14694,Integrability,message,message,14694," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:2013,Modifiability,inherit,inherited,2013,"iefel method is very stable, it converges faster, but is more time consuming.; The algorithms in this class have been published in the following references:. M. Morhac et al.: Efficient fitting algorithms applied to analysis of coincidence gamma-ray spectra. Computer Physics Communications, Vol 172/1 (2005) pp. 19-41.; M. Morhac et al.: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in gamma-ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. . Definition at line 16 of file TSpectrum2Fit.h. Public Types; enum  { ;   kFitOptimChiCounts =0; , kFitOptimChiFuncValues =1; , kFitOptimMaxLikelihood =2; , kFitAlphaHalving =0; , ;   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Fit (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. ;  ;  TSpectrum2Fit (void);  Default constructor. ;  ;  ~TSpectrum2Fit () override;  Destructor. ;  ; void FitAwmi (Double_t **source);  This function fits the source spectrum. ;",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:2875,Modifiability,variab,variables,2875,";   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Fit (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. ;  ;  TSpectrum2Fit (void);  Default constructor. ;  ;  ~TSpectrum2Fit () override;  Destructor. ;  ; void FitAwmi (Double_t **source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t **source);  This function fits the source spectrum. ;  ; void GetAmplitudeErrors (Double_t *amplitudeErrors, Double_t *amplitudeErrorsX1, Double_t *amplitudeErrorsY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetAmplitudes (Double_t *amplitudes, Double_t *amplitudesX1, Double_t *amplitudesY1);  This function gets the amplitudes of fitted 2D peaks and 1D ridges. ;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &ax, Double_t &axErr, Double_t &ay, Double_t &ayErr);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; void GetPositionErrors (Do",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:6605,Modifiability,inherit,inherited,6605," const Double_t *positionInitX, const Bool_t *fixPositionX, const Double_t *positionInitY, const Bool_t *fixPositionY, const Double_t *positionInitX1, const Bool_t *fixPositionX1, const Double_t *positionInitY1, const Bool_t *fixPositionY1, const Double_t *ampInit, const Bool_t *fixAmp, const Double_t *ampInitX1, const Bool_t *fixAmpX1, const Double_t *ampInitY1, const Bool_t *fixAmpY1);  This function sets the following fitting parameters of peaks: ;  ; void SetTailParameters (Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy);  This function sets the following fitting parameters of tails of peaks. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:8233,Modifiability,inherit,inherited,8233,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:9326,Modifiability,inherit,inheritance,9326,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:11325,Modifiability,inherit,inherits,11325,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:11442,Modifiability,inherit,inherits,11442,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:15195,Modifiability,inherit,inherited,15195,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Double_t Deramp2 (Double_t x, Double_t y, Double_t x0, Double_t y0, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t txy, Double_t sxy, Double_t bx, Double_t by);  This function calculates derivative of 2D peaks shape function (see manual) according to amplitude of 2D peak. ;  ; Double_t Derampx (Double_t x, Double_t x0, Double_t sigmax, Double_t tx, Double_t sx, Double_t bx);  This",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:15405,Modifiability,inherit,inherited,15405,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Double_t Deramp2 (Double_t x, Double_t y, Double_t x0, Double_t y0, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t txy, Double_t sxy, Double_t bx, Double_t by);  This function calculates derivative of 2D peaks shape function (see manual) according to amplitude of 2D peak. ;  ; Double_t Derampx (Double_t x, Double_t x0, Double_t sigmax, Double_t tx, Double_t sx, Double_t bx);  This",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:22826,Modifiability,inherit,inherited,22826," const Double_t *parameter, Double_t sigmax, Double_t bx);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude ty. ;  ; Double_t Erfc (Double_t x);  This function calculates error function of x. ;  ; Double_t Ourpowl (Double_t a, Int_t pw);  power function ;  ; Double_t Shape2 (Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t *parameter, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t a0, Double_t ax, Double_t ay, Double_t txy, Double_t sxy, Double_t tx, Double_t ty, Double_t sx, Double_t sy, Double_t bx, Double_t by);  This function calculates 2D peaks shape function (see manual) ;  ; void StiefelInversion (Double_t **a, Int_t size);  This function calculates solution of the system of linear equations. ;  ; Double_t Volume (Double_t a, Double_t sx, Double_t sy, Double_t ro);  This function calculates volume of a peak. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ;  ; Double_t * fAmpCalcX1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpCalcY1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * f",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:33484,Modifiability,inherit,inherited,33484,"es ;  ; Double_t fSxyCalc;  calculated value of s parameter for 2D peaks ;  ; Double_t fSxyErr;  error value of s parameter for 2D peaks ;  ; Double_t fSxyInit;  initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ;  ; Double_t fSyCalc;  calculated value of s parameter for 1D ridges in y direction ;  ; Double_t fSyErr;  error value of s parameter for 1D ridges in y direction ;  ; Double_t fSyInit;  initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ;  ; Double_t fTxCalc;  calculated value of t parameter for 1D ridges in x direction ;  ; Double_t fTxErr;  error value of t parameter for 1D ridges in x direction ;  ; Double_t fTxInit;  initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTxyCalc;  calculated value of t parameter for 2D peaks ;  ; Double_t fTxyErr;  error value of t parameter for 2D peaks ;  ; Double_t fTxyInit;  initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTyCalc;  calculated value of t parameter for 1D ridges in y direction ;  ; Double_t fTyErr;  error value of t parameter for 1D ridges in y direction ;  ; Double_t fTyInit;  initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t * fVolume;  [fNPeaks] array of calculated volumes of 2D peaks, output parameters ;  ; Double_t * fVolumeErr;  [fNPeaks] array of volumes errors of 2D peaks, output parameters ;  ; Int_t fXmax;  last fitted channel in x direction ;  ; Int_t fXmin;  first fitted channel in x direction ;  ; Int_t fYmax;  last fitted channel in y direction ;  ; Int_t fYmin;  first fitted channel in y direction ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  .",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:33591,Modifiability,inherit,inherited,33591,"_t fTxyInit;  initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ;  ; Double_t fTyCalc;  calculated value of t parameter for 1D ridges in y direction ;  ; Double_t fTyErr;  error value of t parameter for 1D ridges in y direction ;  ; Double_t fTyInit;  initial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references ;  ; Double_t * fVolume;  [fNPeaks] array of calculated volumes of 2D peaks, output parameters ;  ; Double_t * fVolumeErr;  [fNPeaks] array of volumes errors of 2D peaks, output parameters ;  ; Int_t fXmax;  last fitted channel in x direction ;  ; Int_t fXmin;  first fitted channel in x direction ;  ; Int_t fYmax;  last fitted channel in y direction ;  ; Int_t fYmin;  first fitted channel in y direction ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Fit.h>. Inheritance diagram for TSpectrum2Fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ; kFitPower2 ; kFitPower4 ; kFitPower6 ; kFitPower8 ; kFitPower10 ; kFitPower12 ; kFitTaylorOrderFirst ; kFitTaylorOrderSecond ; kFitNumRegulCycles . Definition at line 117 of file TSpectrum2Fit.h. Constructor & Destructor Documentation. ◆ TSpectrum2Fit() [1/2]. TSpectrum2Fit::TSpectrum2Fit ; (; void ; ). Default constructor. ; Definition at line 37 of file TSpectrum2Fit.cxx. ◆ TSpectrum2Fit() [2/2]. TSpectrum2Fit::TSpectrum2Fit ; (; Int_t ; numberPeaks). numberPeaks: number of fitted peaks (must be greater than zero) the constructor allocates arrays for all fitted parameters (peak po",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:34647,Modifiability,variab,variables,34647,"Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Fit.h>. Inheritance diagram for TSpectrum2Fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ; kFitPower2 ; kFitPower4 ; kFitPower6 ; kFitPower8 ; kFitPower10 ; kFitPower12 ; kFitTaylorOrderFirst ; kFitTaylorOrderSecond ; kFitNumRegulCycles . Definition at line 117 of file TSpectrum2Fit.h. Constructor & Destructor Documentation. ◆ TSpectrum2Fit() [1/2]. TSpectrum2Fit::TSpectrum2Fit ; (; void ; ). Default constructor. ; Definition at line 37 of file TSpectrum2Fit.cxx. ◆ TSpectrum2Fit() [2/2]. TSpectrum2Fit::TSpectrum2Fit ; (; Int_t ; numberPeaks). numberPeaks: number of fitted peaks (must be greater than zero) the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. ; One can change these variables by member functions (setters) of TSpectrumFit class.; Shape function of the fitted peaks contains the two-dimensional symmetrical Gaussian two one-dimensional symmetrical Gaussian ridges as well as non-symmetrical terms and background. Definition at line 152 of file TSpectrum2Fit.cxx. ◆ ~TSpectrum2Fit(). TSpectrum2Fit::~TSpectrum2Fit ; (; ). override . Destructor. ; Definition at line 261 of file TSpectrum2Fit.cxx. Member Function Documentation. ◆ Class(). static TClass * TSpectrum2Fit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSpectrum2Fit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpectrum2Fit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 190 of file TSpectrum2Fit.h. ◆ DeclFileName(",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:34705,Modifiability,variab,variables,34705,"Fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ; kFitPower2 ; kFitPower4 ; kFitPower6 ; kFitPower8 ; kFitPower10 ; kFitPower12 ; kFitTaylorOrderFirst ; kFitTaylorOrderSecond ; kFitNumRegulCycles . Definition at line 117 of file TSpectrum2Fit.h. Constructor & Destructor Documentation. ◆ TSpectrum2Fit() [1/2]. TSpectrum2Fit::TSpectrum2Fit ; (; void ; ). Default constructor. ; Definition at line 37 of file TSpectrum2Fit.cxx. ◆ TSpectrum2Fit() [2/2]. TSpectrum2Fit::TSpectrum2Fit ; (; Int_t ; numberPeaks). numberPeaks: number of fitted peaks (must be greater than zero) the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. ; One can change these variables by member functions (setters) of TSpectrumFit class.; Shape function of the fitted peaks contains the two-dimensional symmetrical Gaussian two one-dimensional symmetrical Gaussian ridges as well as non-symmetrical terms and background. Definition at line 152 of file TSpectrum2Fit.cxx. ◆ ~TSpectrum2Fit(). TSpectrum2Fit::~TSpectrum2Fit ; (; ). override . Destructor. ; Definition at line 261 of file TSpectrum2Fit.cxx. Member Function Documentation. ◆ Class(). static TClass * TSpectrum2Fit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSpectrum2Fit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpectrum2Fit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 190 of file TSpectrum2Fit.h. ◆ DeclFileName(). static const char * TSpectrum2Fit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at l",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:23416,Performance,optimiz,optimization,23416,,MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:71324,Performance,optimiz,optimization,71324,"f a0 parameter, which allows to fix the parameter (not to fit); axInit - initial value of ax parameter; fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); ayInit - initial value of ay parameter; fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit) . Definition at line 5652 of file TSpectrum2Fit.cxx. ◆ SetFitParameters(). void TSpectrum2Fit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax, ymin, ymax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 5525 of file TSpectrum2Fit.cxx. ◆ SetPeakParameters(). void TSpectrum2Fit::SetPeakParameters ; (; Double_t ; sigmaX, . Bool_t ; fixSigmaX, . Double_t ; sigmaY, . Bool_t ; fixSigmaY, . Double_t ; ro, . Bool_t ; fixRo, . const Double_t * ; positionInitX, . const Bool_t * ; fixPositionX, . const Double_t * ; positionInitY, . const Bool_t * ; fixPositionY, . const Double_t * ; positionInitX1, . const Bool_t * ; fixPositionX1, . const Double_t * ; positionInitY1, . const Bool_t ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:78457,Performance,optimiz,optimization,78457," peak. ; Function parameters:; a-amplitude of the peak; sx,sy-sigmas of peak; ro-correlation coefficient . Definition at line 1529 of file TSpectrum2Fit.cxx. Member Data Documentation. ◆ fA0Calc. Double_t TSpectrum2Fit::fA0Calc. protected . calculated value of background a0 parameter ; Definition at line 87 of file TSpectrum2Fit.h. ◆ fA0Err. Double_t TSpectrum2Fit::fA0Err. protected . error value of background a0 parameter ; Definition at line 88 of file TSpectrum2Fit.h. ◆ fA0Init. Double_t TSpectrum2Fit::fA0Init. protected . initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 86 of file TSpectrum2Fit.h. ◆ fAlpha. Double_t TSpectrum2Fit::fAlpha. protected . convergence coefficient, input parameter, it should be positive number and <=1, for details see references ; Definition at line 28 of file TSpectrum2Fit.h. ◆ fAlphaOptim. Int_t TSpectrum2Fit::fAlphaOptim. protected . optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrum2Fit.h. ◆ fAmpCalc. Double_t* TSpectrum2Fit::fAmpCalc. protected . [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ; Definition at line 43 of file TSpectrum2Fit.h. ◆ fAmpCalcX1. Double_t* TSpectrum2Fit::fAmpCalcX1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ; Definition at line 46 of file TSpectrum2Fit.h. ◆ fAmpCalcY1. Double_t* TSpectrum2Fit::fAmpCalcY1. protected . [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ; Definition at line 49 of file TSpectrum2Fit.h. ◆ fAmpErr. Double_t* TSpectrum2Fit::fAmpErr. protected . [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ; Definition at line 44 of file TSpectrum2Fit.h. ◆ fAmpErrX1. Double_t* TSpectrum2Fit::fAmpErrX1. protected . [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:7473,Security,hash,hash,7473," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:25856,Testability,log,logical,25856,"round ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b parameter for 1D ridges in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:25978,Testability,log,logical,25978,"0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b parameter for 1D ridges in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] a",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:26156,Testability,log,logical,26156,"es in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fF",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:26350,Testability,log,logical,26350,"f b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositio",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:26520,Testability,log,logical,26520,"r for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fF",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:26620,Testability,log,logical,26620,"ons return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However th",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:26720,Testability,log,logical,26720,"First, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which al",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:26848,Testability,log,logical,26848,"ch allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the par",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:27004,Testability,log,logical,27004,"iate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit).",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:27188,Testability,log,logical,27188," allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:27372,Testability,log,logical,27372,"lues which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:27556,Testability,log,logical,27556,"meter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logica",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:27712,Testability,log,logical,27712," logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which all",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:27827,Testability,log,logical,27827," value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:27936,Testability,log,logical,27936,"_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:28041,Testability,log,logical,28041,". However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:28170,Testability,log,logical,28170,"which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCa",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:28282,Testability,log,logical,28282,"  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:28410,Testability,log,logical,28410," However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:28539,Testability,log,logical,28539,"hich allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of error values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrX1;  [fNPeaks] array of x position",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:28651,Testability,log,logical,28651," ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of error values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrX1;  [fNPeaks] array of x positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionErrY;  [fNPeaks] array of error values of y positions ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:70161,Testability,log,logical,70161,"_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 190 of file TSpectrum2Fit.h. ◆ Ourpowl(). Double_t TSpectrum2Fit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . power function ; Definition at line 347 of file TSpectrum2Fit.cxx. ◆ SetBackgroundParameters(). void TSpectrum2Fit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; axInit, . Bool_t ; fixAx, . Double_t ; ayInit, . Bool_t ; fixAy . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+ax*x+ay*y); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); axInit - initial value of ax parameter; fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); ayInit - initial value of ay parameter; fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit) . Definition at line 5652 of file TSpectrum2Fit.cxx. ◆ SetFitParameters(). void TSpectrum2Fit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax, ymin, ymax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficie",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:70288,Testability,log,logical,70288,"_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 190 of file TSpectrum2Fit.h. ◆ Ourpowl(). Double_t TSpectrum2Fit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . power function ; Definition at line 347 of file TSpectrum2Fit.cxx. ◆ SetBackgroundParameters(). void TSpectrum2Fit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; axInit, . Bool_t ; fixAx, . Double_t ; ayInit, . Bool_t ; fixAy . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+ax*x+ay*y); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); axInit - initial value of ax parameter; fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); ayInit - initial value of ay parameter; fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit) . Definition at line 5652 of file TSpectrum2Fit.cxx. ◆ SetFitParameters(). void TSpectrum2Fit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax, ymin, ymax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficie",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:70415,Testability,log,logical,70415,"_t * ; volumes). This function gets the volumes of fitted 2D peaks. . volumes - gets vector of volumes of 2D peaks . Definition at line 5769 of file TSpectrum2Fit.cxx. ◆ IsA(). TClass * TSpectrum2Fit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 190 of file TSpectrum2Fit.h. ◆ Ourpowl(). Double_t TSpectrum2Fit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . power function ; Definition at line 347 of file TSpectrum2Fit.cxx. ◆ SetBackgroundParameters(). void TSpectrum2Fit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; axInit, . Bool_t ; fixAx, . Double_t ; ayInit, . Bool_t ; fixAy . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+ax*x+ay*y); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); axInit - initial value of ax parameter; fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); ayInit - initial value of ay parameter; fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit) . Definition at line 5652 of file TSpectrum2Fit.cxx. ◆ SetFitParameters(). void TSpectrum2Fit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax, ymin, ymax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficie",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:72500,Testability,log,logical,72500,"tPeakParameters(). void TSpectrum2Fit::SetPeakParameters ; (; Double_t ; sigmaX, . Bool_t ; fixSigmaX, . Double_t ; sigmaY, . Bool_t ; fixSigmaY, . Double_t ; ro, . Bool_t ; fixRo, . const Double_t * ; positionInitX, . const Bool_t * ; fixPositionX, . const Double_t * ; positionInitY, . const Bool_t * ; fixPositionY, . const Double_t * ; positionInitX1, . const Bool_t * ; fixPositionX1, . const Double_t * ; positionInitY1, . const Bool_t * ; fixPositionY1, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp, . const Double_t * ; ampInitX1, . const Bool_t * ; fixAmpX1, . const Double_t * ; ampInitY1, . const Bool_t * ; fixAmpY1 . ). This function sets the following fitting parameters of peaks: . sigmaX - initial value of sigma x parameter; fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the esti",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:72641,Testability,log,logical,72641,"tPeakParameters(). void TSpectrum2Fit::SetPeakParameters ; (; Double_t ; sigmaX, . Bool_t ; fixSigmaX, . Double_t ; sigmaY, . Bool_t ; fixSigmaY, . Double_t ; ro, . Bool_t ; fixRo, . const Double_t * ; positionInitX, . const Bool_t * ; fixPositionX, . const Double_t * ; positionInitY, . const Bool_t * ; fixPositionY, . const Double_t * ; positionInitX1, . const Bool_t * ; fixPositionX1, . const Double_t * ; positionInitY1, . const Bool_t * ; fixPositionY1, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp, . const Double_t * ; ampInitX1, . const Bool_t * ; fixAmpX1, . const Double_t * ; ampInitY1, . const Bool_t * ; fixAmpY1 . ). This function sets the following fitting parameters of peaks: . sigmaX - initial value of sigma x parameter; fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the esti",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:72795,Testability,log,logical,72795,"tPeakParameters(). void TSpectrum2Fit::SetPeakParameters ; (; Double_t ; sigmaX, . Bool_t ; fixSigmaX, . Double_t ; sigmaY, . Bool_t ; fixSigmaY, . Double_t ; ro, . Bool_t ; fixRo, . const Double_t * ; positionInitX, . const Bool_t * ; fixPositionX, . const Double_t * ; positionInitY, . const Bool_t * ; fixPositionY, . const Double_t * ; positionInitX1, . const Bool_t * ; fixPositionX1, . const Double_t * ; positionInitY1, . const Bool_t * ; fixPositionY1, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp, . const Double_t * ; ampInitX1, . const Bool_t * ; fixAmpX1, . const Double_t * ; ampInitY1, . const Bool_t * ; fixAmpY1 . ). This function sets the following fitting parameters of peaks: . sigmaX - initial value of sigma x parameter; fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the esti",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:72960,Testability,log,logical,72960,"tPeakParameters(). void TSpectrum2Fit::SetPeakParameters ; (; Double_t ; sigmaX, . Bool_t ; fixSigmaX, . Double_t ; sigmaY, . Bool_t ; fixSigmaY, . Double_t ; ro, . Bool_t ; fixRo, . const Double_t * ; positionInitX, . const Bool_t * ; fixPositionX, . const Double_t * ; positionInitY, . const Bool_t * ; fixPositionY, . const Double_t * ; positionInitX1, . const Bool_t * ; fixPositionX1, . const Double_t * ; positionInitY1, . const Bool_t * ; fixPositionY1, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp, . const Double_t * ; ampInitX1, . const Bool_t * ; fixAmpX1, . const Double_t * ; ampInitY1, . const Bool_t * ; fixAmpY1 . ). This function sets the following fitting parameters of peaks: . sigmaX - initial value of sigma x parameter; fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the esti",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:73170,Testability,log,logical,73170,", . const Bool_t * ; fixPositionY1, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp, . const Double_t * ; ampInitX1, . const Bool_t * ; fixAmpX1, . const Double_t * ; ampInitY1, . const Bool_t * ; fixAmpY1 . ). This function sets the following fitting parameters of peaks: . sigmaX - initial value of sigma x parameter; fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; ampInitY1 - array of initial values of amplitudes of 1D ridges in y direction; fixAmpY1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional . Definition at line 5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, .",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:73370,Testability,log,logical,73370,"pY1 . ). This function sets the following fitting parameters of peaks: . sigmaX - initial value of sigma x parameter; fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; ampInitY1 - array of initial values of amplitudes of 1D ridges in y direction; fixAmpY1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional . Definition at line 5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sI",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:73603,Testability,log,logical,73603,"t to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; ampInitY1 - array of initial values of amplitudes of 1D ridges in y direction; fixAmpY1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional . Definition at line 5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical valu",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:73852,Testability,log,logical,73852,"er, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; ampInitY1 - array of initial values of amplitudes of 1D ridges in y direction; fixAmpY1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional . Definition at line 5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logica",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:74562,Testability,log,logical,74562,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:74690,Testability,log,logical,74690,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:74817,Testability,log,logical,74817,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:74944,Testability,log,logical,74944,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:75071,Testability,log,logical,75071,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:75201,Testability,log,logical,75201,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:75329,Testability,log,logical,75329,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:75456,Testability,log,logical,75456,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:82845,Testability,log,logical,82845,"ectrum2Fit::fByCalc. protected . calculated value of b parameter for 1D ridges in y direction ; Definition at line 84 of file TSpectrum2Fit.h. ◆ fByErr. Double_t TSpectrum2Fit::fByErr. protected . error value of b parameter for 1D ridges in y direction ; Definition at line 85 of file TSpectrum2Fit.h. ◆ fByInit. Double_t TSpectrum2Fit::fByInit. protected . initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ; Definition at line 83 of file TSpectrum2Fit.h. ◆ fChi. Double_t TSpectrum2Fit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrum2Fit.h. ◆ fFitTaylor. Int_t TSpectrum2Fit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrum2Fit.h. ◆ fFixA0. Bool_t TSpectrum2Fit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to f",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:83048,Testability,log,logical,83048," . error value of b parameter for 1D ridges in y direction ; Definition at line 85 of file TSpectrum2Fit.h. ◆ fByInit. Double_t TSpectrum2Fit::fByInit. protected . initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ; Definition at line 83 of file TSpectrum2Fit.h. ◆ fChi. Double_t TSpectrum2Fit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrum2Fit.h. ◆ fFitTaylor. Int_t TSpectrum2Fit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrum2Fit.h. ◆ fFixA0. Bool_t TSpectrum2Fit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parame",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:83308,Testability,log,logical,83308,"ences ; Definition at line 83 of file TSpectrum2Fit.h. ◆ fChi. Double_t TSpectrum2Fit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrum2Fit.h. ◆ fFitTaylor. Int_t TSpectrum2Fit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrum2Fit.h. ◆ fFixA0. Bool_t TSpectrum2Fit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectru",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:83585,Testability,log,logical,83585,"Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrum2Fit.h. ◆ fFixA0. Bool_t TSpectrum2Fit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. prot",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:83836,Testability,log,logical,83836,", which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::f",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:84017,Testability,log,logical,84017," values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:84198,Testability,log,logical,84198," TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:84407,Testability,log,logical,84407,"Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array o",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:84650,Testability,log,logical,84650," However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fF",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:84921,Testability,log,logical,84921,"ectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fi",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:85191,Testability,log,logical,85191,"meter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fi",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:85462,Testability,log,logical,85462,"rameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logi",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:85698,Testability,log,logical,85698,"y are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, w",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:85898,Testability,log,logical,85898,"ch allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 97 of file TSpectrum2Fit.h. ◆ fFixPositionY. Bool_t* TSpectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:86092,Testability,log,logical,86092,"ectrum2Fit::fFixPositionY. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter fo",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:86278,Testability,log,logical,86278,"inition at line 96 of file TSpectrum2Fit.h. ◆ fFixPositionY1. Bool_t* TSpectrum2Fit::fFixPositionY1. protected . [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 105 of file TSpectrum2Fit.h. ◆ fFixTy. Bool_t TSpectrum2Fit::fFixTy. protected . logical value of t parameter for 1D ",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:86489,Testability,log,logical,86489,"(not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 105 of file TSpectrum2Fit.h. ◆ fFixTy. Bool_t TSpectrum2Fit::fFixTy. protected . logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 108 of file TSpectrum2Fit.h. ◆ fNPeaks. Int_t TSpectrum2Fit::fNPeaks. protected . number of peaks present in fi",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:86682,Testability,log,logical,86682,"ient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 105 of file TSpectrum2Fit.h. ◆ fFixTy. Bool_t TSpectrum2Fit::fFixTy. protected . logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 108 of file TSpectrum2Fit.h. ◆ fNPeaks. Int_t TSpectrum2Fit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 18 of file TSpectrum2Fit.h. ◆ fNumberIterations. Int_t TSpectrum2Fit::fNumberIterations. protected . number of iterations in fitting procedure,",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:86891,Testability,log,logical,86891,"ows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 105 of file TSpectrum2Fit.h. ◆ fFixTy. Bool_t TSpectrum2Fit::fFixTy. protected . logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 108 of file TSpectrum2Fit.h. ◆ fNPeaks. Int_t TSpectrum2Fit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 18 of file TSpectrum2Fit.h. ◆ fNumberIterations. Int_t TSpectrum2Fit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 19 of file TSpectrum2Fit.h. ◆ fPositionCalcX. Double_t* TSpectrum2Fit::fPositionCalcX. protected . [fNPeaks] array of calculated values of x positions of",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:87102,Testability,log,logical,87102,"x the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 105 of file TSpectrum2Fit.h. ◆ fFixTy. Bool_t TSpectrum2Fit::fFixTy. protected . logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 108 of file TSpectrum2Fit.h. ◆ fNPeaks. Int_t TSpectrum2Fit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 18 of file TSpectrum2Fit.h. ◆ fNumberIterations. Int_t TSpectrum2Fit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 19 of file TSpectrum2Fit.h. ◆ fPositionCalcX. Double_t* TSpectrum2Fit::fPositionCalcX. protected . [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ; Definition at line 31 of file TSpectrum2Fit.h. ◆ fPositionCalcX1. Double_t* TSpectrum2Fit::fPositionCalcX1. protected . [fNPeaks] array of calculated x positions of 1D ridg",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Fit.html:87295,Testability,log,logical,87295,"ws to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 105 of file TSpectrum2Fit.h. ◆ fFixTy. Bool_t TSpectrum2Fit::fFixTy. protected . logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 108 of file TSpectrum2Fit.h. ◆ fNPeaks. Int_t TSpectrum2Fit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 18 of file TSpectrum2Fit.h. ◆ fNumberIterations. Int_t TSpectrum2Fit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 19 of file TSpectrum2Fit.h. ◆ fPositionCalcX. Double_t* TSpectrum2Fit::fPositionCalcX. protected . [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ; Definition at line 31 of file TSpectrum2Fit.h. ◆ fPositionCalcX1. Double_t* TSpectrum2Fit::fPositionCalcX1. protected . [fNPeaks] array of calculated x positions of 1D ridges, output parameters ; Definition at line 37 of file TSpectrum2Fit.h. ◆ fPositionCalcY. Double_t* TSpectrum2Fit::fPositionCalcY. protected . [fNPeaks] array of calculated values of y positions of 2D p",MatchSource.WIKI,doc/master/classTSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html
https://root.cern/doc/master/classTSpectrum2Painter.html:10341,Availability,error,error,10341,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:10430,Availability,error,error,10430,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:10585,Availability,error,error,10585,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:10882,Availability,error,error,10882,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:14853,Availability,error,error,14853,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void PaintSpectrum (TH2 *h2, Option_t *option="""", Int_t bs=1600);  This function allows to set all the possible options available in TSpectru",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:15828,Availability,avail,available,15828,". ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void PaintSpectrum (TH2 *h2, Option_t *option="""", Int_t bs=1600);  This function allows to set all the possible options available in TSpectrum2Painter and paint ""h2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t BezC (Int_t i);  This function is called from Bezier",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:43510,Availability,avail,available,43510,", Inc. 1994. Script:; Example to draw source spectrum (class TSpectrum2Painter). To execute this example, do: root > .x VisA.C; #include ""TSpectrum2Painter.h""; ; void VisA() {; TFile *f = new TFile(""TSpectrum2.root"");; TH2F *graph=(TH2F*) f->Get(""graph2;1"");; TCanvas *Graph2 = new TCanvas(""Graph2"",""Illustration of 2D graphics"",10,10,1000,700);; graph->Draw(""SPEC"");; }; f#define f(i)Definition RSha256.hxx:104; TSpectrum2Painter.h; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; graphDefinition graph.py:1. Reimplemented from TObject.; Definition at line 1583 of file TSpectrum2Painter.cxx. ◆ PaintSpectrum(). void TSpectrum2Painter::PaintSpectrum ; (; TH2 * ; h2, . Option_t * ; option = """", . Int_t ; bs = 1600 . ). static . This function allows to set all the possible options available in TSpectrum2Painter and paint ""h2"". ; TSpectrum2Painter offers a large set of options/attributes. In the ""option"" parameter each of them can be set to specific values via ""operators"" in the option itself. for instance on can do: h2->Draw(""SPEC a(30,30,0)"");; to draw h2 with TSpectrum2Painter using all the default attributes except the viewing angles. The operators' names are case insensitive (one can use ""a"" or ""A""). Operators parameters are separated by "","". The operators can be put is any order in the option. Operators must be separated by "" "". No "" "" characters should be put in an operator. This help page describes all the available operators.; The way ""h2"" will be painted is controlled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"".; ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carried out according to the position of the fictive",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:44155,Availability,avail,available,44155,"oat per channel (see TH1 documentation)Definition TH2.h:307; graphDefinition graph.py:1. Reimplemented from TObject.; Definition at line 1583 of file TSpectrum2Painter.cxx. ◆ PaintSpectrum(). void TSpectrum2Painter::PaintSpectrum ; (; TH2 * ; h2, . Option_t * ; option = """", . Int_t ; bs = 1600 . ). static . This function allows to set all the possible options available in TSpectrum2Painter and paint ""h2"". ; TSpectrum2Painter offers a large set of options/attributes. In the ""option"" parameter each of them can be set to specific values via ""operators"" in the option itself. for instance on can do: h2->Draw(""SPEC a(30,30,0)"");; to draw h2 with TSpectrum2Painter using all the default attributes except the viewing angles. The operators' names are case insensitive (one can use ""a"" or ""A""). Operators parameters are separated by "","". The operators can be put is any order in the option. Operators must be separated by "" "". No "" "" characters should be put in an operator. This help page describes all the available operators.; The way ""h2"" will be painted is controlled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"".; ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carried out according to the position of the fictive light source; 2 = Height - in this group the shading is carried out according to the channel contents; 3 = LightHeight - combination of two previous shading algorithms. One can control the weight between both algorithms. ""Display modes"" can take the following values:. 1 = Points.; 2 = Grid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator in the option. Example: h2->Draw(""SPEC dm(1,2)"");; will paint the 2D histogram h2 using the ""Light Display mode group"" and the ""Grid Display mode"". The fol",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:46139,Availability,error,error,46139,"marises all the possible combinations of the ""Display modes groups"" and the ""Display modes"". Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . The Pen Attributes can be changed using pa(color, style, width). Example: h2->Draw(""SPEC dm(1,2) pa(2,1,2)"");; sets the line color to 2, line type to 1 and line width to2. Note that if pa() is not specified, the histogram ""h2"" line attributes are used. Note also that operators for SPEC option can be cumulated and specified in any order.; The buffer size can be change with bf(size). Example: h2->Draw(""SPEC bf(8000)"");; The spectrum painter needs a buffer to paint the spectrum. By default the buffer size is set to 1600. In most cases this buffer size is enough. But if the canvas size is very big, for instance 8000x5000 this buffer size is too small. An error message is issued telling to use the option bf().; The number of nodes can be change with n(nodesx, nodesy). Example: h2->Draw(""SPEC n(40,40)"");; Sometimes the displayed region is rather large. When displaying all channels pictures become very dense and complicated. It is very difficult to understand the overall shape of data. ""n(nx,ny)"" allows to change the density of displayed channels. Only the channels coinciding with given nodes are displayed.; The visualization angles can be changed with a(alpha, beta, view). Example: h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");; Alpha defines the angle between bottom horizontal screen line and the displayed space on the right side of the picture and beta on the left side, respectively. One can rotate the 3-d space around vertical axis going through the center of it employing the view parameter. Allowed values are 0, 90, 180 and 270 degrees.; zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; 2 = Sqrt. If gPad->SetLogz() ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:470,Integrability,interface,interface,470,". ROOT: TSpectrum2Painter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSpectrum2Painter Class ReferenceHistogram Library » Painting classes » TSpectrum painting class. ; Legacy Code TSpectrum2Painter is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Painter might still be a valid solution. ; Two-dimensional graphics function; TSpectrum2Painter is a set of graphical functions developed by Miroslav Morhac to paint 2D-histograms in three dimensions. This package is accessed via THistPainter in a transparent way. For the ROOT user it is enough to use the ""SPEC"" option to draw a 2D-Histogram. This option offers many functionalities detailed in the header of the PaintSpectrum function.; Reference:; Morhac M., Kliman J., Matousek V., Turzo I.: Sophisticated visualization algorithms for analysis of multidimensional experimental nuclear data. Acta Pysica Slovaca Vol. 54/ 4 (2004), pp. 385-400. ; Definition at line 30 of file TSpectrum2Painter.h. Public Types; enum  { ;   kModeGroupSimple =0; , kModeGroupHeight =1; , kModeGroupLight =2; , kModeGroupLightHeight =3; , ;   kDisplayModePoints =1; , kDisplayModeGrid =2; , kDisplayModeContours =3; , kDisplayModeBars =4; , ;   kDisplayModeLinesX =5; , kDisplayModeLinesY =6; , kDisplayModeBarsX =7; , kDisplayModeBarsY =8; , ;   kDisplayModeNeedles =9; , kDisplayModeSurface =10; , kDisplayModeTriangles =11; , kZScaleLinear =0; , ;   kZScaleLog =1; , kZScaleSqrt =2; , kColorAlgRgbSmooth =0; , kColorAlgRgbModulo =1; , ;   kColorAlgCmySmooth =2; , kColorAlgCmyModulo =3; , kColorAlgCieSmooth =4; , kColorAlgCieModulo =5; , ;   kColorAlgYiqSmooth",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:611,Integrability,depend,depending,611,". ROOT: TSpectrum2Painter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSpectrum2Painter Class ReferenceHistogram Library » Painting classes » TSpectrum painting class. ; Legacy Code TSpectrum2Painter is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Painter might still be a valid solution. ; Two-dimensional graphics function; TSpectrum2Painter is a set of graphical functions developed by Miroslav Morhac to paint 2D-histograms in three dimensions. This package is accessed via THistPainter in a transparent way. For the ROOT user it is enough to use the ""SPEC"" option to draw a 2D-Histogram. This option offers many functionalities detailed in the header of the PaintSpectrum function.; Reference:; Morhac M., Kliman J., Matousek V., Turzo I.: Sophisticated visualization algorithms for analysis of multidimensional experimental nuclear data. Acta Pysica Slovaca Vol. 54/ 4 (2004), pp. 385-400. ; Definition at line 30 of file TSpectrum2Painter.h. Public Types; enum  { ;   kModeGroupSimple =0; , kModeGroupHeight =1; , kModeGroupLight =2; , kModeGroupLightHeight =3; , ;   kDisplayModePoints =1; , kDisplayModeGrid =2; , kDisplayModeContours =3; , kDisplayModeBars =4; , ;   kDisplayModeLinesX =5; , kDisplayModeLinesY =6; , kDisplayModeBarsX =7; , kDisplayModeBarsY =8; , ;   kDisplayModeNeedles =9; , kDisplayModeSurface =10; , kDisplayModeTriangles =11; , kZScaleLinear =0; , ;   kZScaleLog =1; , kZScaleSqrt =2; , kColorAlgRgbSmooth =0; , kColorAlgRgbModulo =1; , ;   kColorAlgCmySmooth =2; , kColorAlgCmyModulo =3; , kColorAlgCieSmooth =4; , kColorAlgCieModulo =5; , ;   kColorAlgYiqSmooth",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:10347,Integrability,message,message,10347,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:10888,Integrability,message,message,10888,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:11878,Integrability,message,message,11878,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:14859,Integrability,message,message,14859,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void PaintSpectrum (TH2 *h2, Option_t *option="""", Int_t bs=1600);  This function allows to set all the possible options available in TSpectru",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:15232,Integrability,message,message,15232," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void PaintSpectrum (TH2 *h2, Option_t *option="""", Int_t bs=1600);  This function allows to set all the possible options available in TSpectrum2Painter and paint ""h2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static cons",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:46145,Integrability,message,message,46145,"marises all the possible combinations of the ""Display modes groups"" and the ""Display modes"". Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . The Pen Attributes can be changed using pa(color, style, width). Example: h2->Draw(""SPEC dm(1,2) pa(2,1,2)"");; sets the line color to 2, line type to 1 and line width to2. Note that if pa() is not specified, the histogram ""h2"" line attributes are used. Note also that operators for SPEC option can be cumulated and specified in any order.; The buffer size can be change with bf(size). Example: h2->Draw(""SPEC bf(8000)"");; The spectrum painter needs a buffer to paint the spectrum. By default the buffer size is set to 1600. In most cases this buffer size is enough. But if the canvas size is very big, for instance 8000x5000 this buffer size is too small. An error message is issued telling to use the option bf().; The number of nodes can be change with n(nodesx, nodesy). Example: h2->Draw(""SPEC n(40,40)"");; Sometimes the displayed region is rather large. When displaying all channels pictures become very dense and complicated. It is very difficult to understand the overall shape of data. ""n(nx,ny)"" allows to change the density of displayed channels. Only the channels coinciding with given nodes are displayed.; The visualization angles can be changed with a(alpha, beta, view). Example: h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");; Alpha defines the angle between bottom horizontal screen line and the displayed space on the right side of the picture and beta on the left side, respectively. One can rotate the 3-d space around vertical axis going through the center of it employing the view parameter. Allowed values are 0, 90, 180 and 270 degrees.; zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; 2 = Sqrt. If gPad->SetLogz() ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:2648,Modifiability,inherit,inherited,2648,"Surface =10; , kDisplayModeTriangles =11; , kZScaleLinear =0; , ;   kZScaleLog =1; , kZScaleSqrt =2; , kColorAlgRgbSmooth =0; , kColorAlgRgbModulo =1; , ;   kColorAlgCmySmooth =2; , kColorAlgCmyModulo =3; , kColorAlgCieSmooth =4; , kColorAlgCieModulo =5; , ;   kColorAlgYiqSmooth =6; , kColorAlgYiqModulo =7; , kColorAlgHvsSmooth =8; , kColorAlgHvsModulo =9; , ;   kShadowsNotPainted =0; , kShadowsPainted =1; , kNotShaded =0; , kShaded =1; , ;   kNoBezierInterpol =0; , kBezierInterpol =1; , kPenStyleSolid =1; , kPenStyleDash =2; , ;   kPenStyleDot =3; , kPenStyleDashDot =4; , kChannelMarksNotDrawn =0; , kChannelMarksDrawn =1; , ;   kChannelMarksStyleDot =1; , kChannelMarksStyleCross =2; , kChannelMarksStyleStar =3; , kChannelMarksStyleRectangle =4; , ;   kChannelMarksStyleX =5; , kChannelMarksStyleDiamond =6; , kChannelMarksStyleTriangle =7; , kChannelGridNotDrawn =0; , ;   kChannelGridDrawn =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Painter (TH2 *h2, Int_t bs);  TSpectrum2Painter normal constructor. ;  ;  ~TSpectrum2Painter () override;  TSpectrum2Painter destructor. ;  ; void GetAngles (Int_t &alpha, Int_t &beta, Int_t &view);  Gets angles of the view: ;  ; void GetBezier (Int_t &bezier);  Gets Bezier smoothing switch: ;  ; void GetChanGrid (Int_t &enable, Int_t &color);  This function gets attributes for drawing channel: ;  ; void GetChan",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:7256,Modifiability,inherit,inherited,7256,"nts between two color levels for r, g, b components: ;  ; void SetContourWidth (Int_t width);  Sets width between horizontal slices: ;  ; void SetDisplayMode (Int_t modeGroup, Int_t displayMode);  Sets display group mode and display mode: ;  ; void SetLightHeightWeight (Double_t weight);  Sets weight between shading according to fictive light source and according to channels counts: ;  ; void SetLightPosition (Int_t x, Int_t y, Int_t z);  Sets position of fictive light source in 3D space: ;  ; void SetNodes (Int_t nodesx, Int_t nodesy);  Sets nodes in both directions: ;  ; void SetPenAttr (Int_t color, Int_t style, Int_t width);  Sets pen attributes: ;  ; void SetShading (Int_t shading, Int_t shadow);  Sets on/off shading and shadow switches: ;  ; void SetZScale (Int_t scale);  Sets z-axis scale: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:8884,Modifiability,inherit,inherited,8884,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:9977,Modifiability,inherit,inheritance,9977,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:11976,Modifiability,inherit,inherits,11976,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:12093,Modifiability,inherit,inherits,12093,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:15912,Modifiability,inherit,inherited,15912,"e have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void PaintSpectrum (TH2 *h2, Option_t *option="""", Int_t bs=1600);  This function allows to set all the possible options available in TSpectrum2Painter and paint ""h2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t BezC (Int_t i);  This function is called from BezierBlend function. ;  ; Double_t BezierBlend (Int_t i, Double_t bezf);  This function calculates Bezier approximation. ;  ; void BezierSmoothing (Double_t bezf);  Calculates screen coordinates of the smoothed point. ;  ; Double_t ColorCalculation (Double_t dx1, Double_t dy1, Double_t z1, Double_t dx2, Double_t dy2, Double_t z2, Double_t dx3, Double_t dy3, Double_t z3);  Calculates and returns color value for the surface tria",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:16122,Modifiability,inherit,inherited,16122,"e have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void PaintSpectrum (TH2 *h2, Option_t *option="""", Int_t bs=1600);  This function allows to set all the possible options available in TSpectrum2Painter and paint ""h2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t BezC (Int_t i);  This function is called from BezierBlend function. ;  ; Double_t BezierBlend (Int_t i, Double_t bezf);  This function calculates Bezier approximation. ;  ; void BezierSmoothing (Double_t bezf);  Calculates screen coordinates of the smoothed point. ;  ; Double_t ColorCalculation (Double_t dx1, Double_t dy1, Double_t z1, Double_t dx2, Double_t dy2, Double_t z2, Double_t dx3, Double_t dy3, Double_t z3);  Calculates and returns color value for the surface tria",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:18534,Modifiability,inherit,inherited,18534,"nsures hidden surface removal for the contours display mode. ;  ; void DrawMarker (Int_t x, Int_t y, Int_t w, Int_t h, Int_t type);  Draws channel mark at the screen coordinates x, y. ;  ; void Envelope (Int_t x1, Int_t y1, Int_t x2, Int_t y2);  Ensures hidden surface removal. ;  ; void EnvelopeBars (Int_t x1, Int_t y1, Int_t x2, Int_t y2);  Ensures hidden surface removal for Bars, BarsX and BarsY display modes. ;  ; Double_t ShadowColorCalculation (Double_t xtaz, Double_t ytaz, Double_t ztaz, Double_t shad_noise);  Determines whether the center of the triangle in 3-d space given by function parameters: ;  ; void Slice (Double_t xr, Double_t yr, Double_t xs, Double_t ys, TLine *line);  Calculates screen coordinates of the line given by two nodes for contours display mode. ;  ; void Transform (Int_t it, Int_t jt, Int_t zmt);  Reads out the value from histogram and calculates screen coordinates. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fAlpha;  ; Int_t fBeta;  ; Int_t fBezier;  ; Int_t fBx1;  ; Int_t fBx2;  ; Int_t fBy1;  ; Int_t fBy2;  ; Int_t fBzX [4];  ; Int_t fBzY [4];  ; Int_t fChanlineColor;  ; Int_t fChanlineEnDis;  ; Int_t fChanmarkColor;  ; Int_t fChanmarkEnDis;  ; Int_t fChanmarkHeight;  ; Int_t fChanmarkStyle;  ; Int_t fChanmarkWidth;  ; Int_t fColorAlg;  ; Int_t fContWidth;  ; Int_t fDisplayMode;  ; Double_t fDxspline;  ; Double_t fDyspline;  ; Short_t * fEnvelope;  ; Short_t * fEnvelopeContour;  ; Double_t fGbezx;  ; Double_t fGbezy;  ; TH2 * fH2;  ; Double_t fKx;  ; Double_t fKy;  ; Int_t fLevels;  ; Double_t fLHweight;  ; Int_t fLine;  ; Int_t fMaximumXScreenResolution;  ; Int_t fModeGroup;  ; Double_t fMxx;  ; Double_t fMxy;  ; Double_t fMyx;  ; Double_t fMyy;  ; TColor * fNewColor;  ; Int_t fNewColorIndex;  buffers' size ;  ; Int_t fNodesx;  ; Int_t fN",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:20287,Modifiability,inherit,inherited,20287,"ns inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fAlpha;  ; Int_t fBeta;  ; Int_t fBezier;  ; Int_t fBx1;  ; Int_t fBx2;  ; Int_t fBy1;  ; Int_t fBy2;  ; Int_t fBzX [4];  ; Int_t fBzY [4];  ; Int_t fChanlineColor;  ; Int_t fChanlineEnDis;  ; Int_t fChanmarkColor;  ; Int_t fChanmarkEnDis;  ; Int_t fChanmarkHeight;  ; Int_t fChanmarkStyle;  ; Int_t fChanmarkWidth;  ; Int_t fColorAlg;  ; Int_t fContWidth;  ; Int_t fDisplayMode;  ; Double_t fDxspline;  ; Double_t fDyspline;  ; Short_t * fEnvelope;  ; Short_t * fEnvelopeContour;  ; Double_t fGbezx;  ; Double_t fGbezy;  ; TH2 * fH2;  ; Double_t fKx;  ; Double_t fKy;  ; Int_t fLevels;  ; Double_t fLHweight;  ; Int_t fLine;  ; Int_t fMaximumXScreenResolution;  ; Int_t fModeGroup;  ; Double_t fMxx;  ; Double_t fMxy;  ; Double_t fMyx;  ; Double_t fMyy;  ; TColor * fNewColor;  ; Int_t fNewColorIndex;  buffers' size ;  ; Int_t fNodesx;  ; Int_t fNodesy;  ; Double_t fNuSli;  ; Int_t fPenColor;  ; Int_t fPenDash;  ; Int_t fPenWidth;  ; Double_t fRainbow1Step;  ; Double_t fRainbow2Step;  ; Double_t fRainbow3Step;  ; Int_t fShading;  ; Int_t fShadow;  ; Double_t fTxx;  ; Double_t fTxy;  ; Double_t fTyx;  ; Double_t fTyy;  ; Double_t fTyz;  ; Int_t fViewAngle;  ; Double_t fVx;  ; Double_t fVy;  ; Int_t fXe;  ; Int_t fXlight;  ; Int_t fXmax;  ; Int_t fXmin;  ; Int_t fXs;  ; Int_t fXt;  ; Int_t fYe;  ; Int_t fYlight;  ; Int_t fYmax;  ; Int_t fYmin;  ; Int_t fYs;  ; Int_t fYt;  ; Double_t fZ;  ; Double_t fZeq;  ; Int_t fZlight;  ; Double_t fZmax;  ; Double_t fZmin;  ; Double_t fZPresetValue;  ; Int_t fZscale;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TSpectrum2Painter (const TSpectrum2Painter &);  ; TSpectrum2Painter & operator= (const TSpectrum2Painter &);  . Additional Inherited Members;  Protected Type",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:20533,Modifiability,inherit,inherited,20533,"ex;  buffers' size ;  ; Int_t fNodesx;  ; Int_t fNodesy;  ; Double_t fNuSli;  ; Int_t fPenColor;  ; Int_t fPenDash;  ; Int_t fPenWidth;  ; Double_t fRainbow1Step;  ; Double_t fRainbow2Step;  ; Double_t fRainbow3Step;  ; Int_t fShading;  ; Int_t fShadow;  ; Double_t fTxx;  ; Double_t fTxy;  ; Double_t fTyx;  ; Double_t fTyy;  ; Double_t fTyz;  ; Int_t fViewAngle;  ; Double_t fVx;  ; Double_t fVy;  ; Int_t fXe;  ; Int_t fXlight;  ; Int_t fXmax;  ; Int_t fXmin;  ; Int_t fXs;  ; Int_t fXt;  ; Int_t fYe;  ; Int_t fYlight;  ; Int_t fYmax;  ; Int_t fYmin;  ; Int_t fYs;  ; Int_t fYt;  ; Double_t fZ;  ; Double_t fZeq;  ; Int_t fZlight;  ; Double_t fZmax;  ; Double_t fZmin;  ; Double_t fZPresetValue;  ; Int_t fZscale;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TSpectrum2Painter (const TSpectrum2Painter &);  ; TSpectrum2Painter & operator= (const TSpectrum2Painter &);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Painter.h>. Inheritance diagram for TSpectrum2Painter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkModeGroupSimple ; kModeGroupHeight ; kModeGroupLight ; kModeGroupLightHeight ; kDisplayModePoints ; kDisplayModeGrid ; kDisplayModeContours ; kDisplayModeBars ; kDisplayModeLinesX ; kDisplayModeLinesY ; kDisplayModeBarsX ; kDisplayModeBarsY ; kDisplayModeNeedles ; kDisplayModeSurface ; kDisplayModeTriangles ; kZScaleLinear ; kZScaleLog ; kZScaleSqrt ; kColorAlgRgbSmooth ; kColorAlgRgbModulo ; kColorAlgCmySmooth ; kColorAlgCmyModulo ; kColorAlgCieSmooth ; kColorAlgCieModulo ; kColorAlgYiqSmooth ; kColorAlgYiqModulo ; kColorAlgHvsSmooth ; kColorAlgHvsModulo ; kShadowsNotPainted ; kShadowsPainted ; kNotShaded ; kShaded ; kNoBezierInterpol ; kBezierInterpol ; kPenStyleSolid ; kPenStyl",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:57650,Modifiability,variab,variable,57650," otherwise it returns 0. . Definition at line 387 of file TSpectrum2Painter.cxx. ◆ Slice(). void TSpectrum2Painter::Slice ; (; Double_t ; xr, . Double_t ; yr, . Double_t ; xs, . Double_t ; ys, . TLine * ; line . ). protected . Calculates screen coordinates of the line given by two nodes for contours display mode. ; The line is given by two points xr, yr, xs, ys. Finally it draws the line. ; Definition at line 1084 of file TSpectrum2Painter.cxx. ◆ Streamer(). void TSpectrum2Painter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum2Painter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 205 of file TSpectrum2Painter.h. ◆ Transform(). void TSpectrum2Painter::Transform ; (; Int_t ; it, . Int_t ; jt, . Int_t ; zmt . ). protected . Reads out the value from histogram and calculates screen coordinates. ; Parameters:; it - node in x- direction; jt - node in y- direction; zmt - control variable . Definition at line 198 of file TSpectrum2Painter.cxx. Member Data Documentation. ◆ fAlpha. Int_t TSpectrum2Painter::fAlpha. protected . Definition at line 141 of file TSpectrum2Painter.h. ◆ fBeta. Int_t TSpectrum2Painter::fBeta. protected . Definition at line 142 of file TSpectrum2Painter.h. ◆ fBezier. Int_t TSpectrum2Painter::fBezier. protected . Definition at line 155 of file TSpectrum2Painter.h. ◆ fBx1. Int_t TSpectrum2Painter::fBx1. protected . Definition at line 128 of file TSpectrum2Painter.h. ◆ fBx2. Int_t TSpectrum2Painter::fBx2. protected . Definition at line 129 of file TSpectrum2Painter.h. ◆ fBy1. Int_t TSpectrum2Painter::fBy1. protected . Definition at line 130 of file TSpectrum2Painter.h. ◆ fBy2. Int_t TSpectrum2Painter::fBy2. protected . Definition at line 131 of file TSpectrum2Painter.h. ◆ fBzX. Int_t TSpectrum2Painter::fBzX[4]. protected . Definition at line 188 of file TSpectrum2Painter.h. ◆ fBzY. Int_t TSpectrum2Painter:",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:870,Security,access,accessed,870,". ROOT: TSpectrum2Painter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSpectrum2Painter Class ReferenceHistogram Library » Painting classes » TSpectrum painting class. ; Legacy Code TSpectrum2Painter is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Painter might still be a valid solution. ; Two-dimensional graphics function; TSpectrum2Painter is a set of graphical functions developed by Miroslav Morhac to paint 2D-histograms in three dimensions. This package is accessed via THistPainter in a transparent way. For the ROOT user it is enough to use the ""SPEC"" option to draw a 2D-Histogram. This option offers many functionalities detailed in the header of the PaintSpectrum function.; Reference:; Morhac M., Kliman J., Matousek V., Turzo I.: Sophisticated visualization algorithms for analysis of multidimensional experimental nuclear data. Acta Pysica Slovaca Vol. 54/ 4 (2004), pp. 385-400. ; Definition at line 30 of file TSpectrum2Painter.h. Public Types; enum  { ;   kModeGroupSimple =0; , kModeGroupHeight =1; , kModeGroupLight =2; , kModeGroupLightHeight =3; , ;   kDisplayModePoints =1; , kDisplayModeGrid =2; , kDisplayModeContours =3; , kDisplayModeBars =4; , ;   kDisplayModeLinesX =5; , kDisplayModeLinesY =6; , kDisplayModeBarsX =7; , kDisplayModeBarsY =8; , ;   kDisplayModeNeedles =9; , kDisplayModeSurface =10; , kDisplayModeTriangles =11; , kZScaleLinear =0; , ;   kZScaleLog =1; , kZScaleSqrt =2; , kColorAlgRgbSmooth =0; , kColorAlgRgbModulo =1; , ;   kColorAlgCmySmooth =2; , kColorAlgCmyModulo =3; , kColorAlgCieSmooth =4; , kColorAlgCieModulo =5; , ;   kColorAlgYiqSmooth",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:8124,Security,hash,hash,8124," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:30763,Testability,log,log,30763,"sy . ). Gets nodes in both directions: . nodesx, nodesy, only the bins at the nodes points are displayed . Definition at line 7312 of file TSpectrum2Painter.cxx. ◆ GetPenAttr(). void TSpectrum2Painter::GetPenAttr ; (; Int_t & ; color, . Int_t & ; style, . Int_t & ; width . ). Gets pen attributes: -color - color of spectrum -style - style of pen (solid, dash, dot, dash-dot) -width - width of pen in pixels. ; Definition at line 7300 of file TSpectrum2Painter.cxx. ◆ GetShading(). void TSpectrum2Painter::GetShading ; (; Int_t & ; shading, . Int_t & ; shadow . ). Gets shading and shadow switches: . shading - determines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; shadow - determines whether shadow will be drawn, for rainbowed display modes with shading according to light . Definition at line 7382 of file TSpectrum2Painter.cxx. ◆ GetZScale(). void TSpectrum2Painter::GetZScale ; (; Int_t & ; scale). Gets z-axis scale: . scale - it can be linear, sqrt or log . Definition at line 7337 of file TSpectrum2Painter.cxx. ◆ IsA(). TClass * TSpectrum2Painter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 205 of file TSpectrum2Painter.h. ◆ operator=(). TSpectrum2Painter & TSpectrum2Painter::operator= ; (; const TSpectrum2Painter & ; ). private . ◆ Paint(). void TSpectrum2Painter::Paint ; (; Option_t * ; option). overridevirtual . Paints histogram according to preset parameters. . Visualization; Goal: to present 2-dimensional spectra in suitable visual form; This package has several display mode groups and display modes, which can be employed for the presentation of 2-dimensional histograms Display modes groups:. kModeGroupSimple - it covers simple display modes using one color only; kModeGroupLight - in this group the shading is carried out according to the position of the fictive light source; kModeGroupHeight - in this group the shading is carr",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:36433,Testability,log,log,36433,"trum2Painter::SetAngles (Int_t alpha,Int_t beta, Int_t view); One can change the angles of the position of 3-d space and to rotate the space. Alpha parameter defines the angle between bottom horizontal screen line and the displayed space on the right side of the picture and beta on the left side, respectively. One can rotate the 3-d space around vertical axis going through the center of it employing the view parameter. Allowed values are 0, 90, 180 and 270 degrees respectively.; Default values:. alpha = 20; beta = 60; view = 0. Light modes group, display mode = surface, 256 x 256 channels. Angles are set as follows: alpha=40, beta=30, view=0. . Light modes group, display mode = surface, 256 x 256 channels. Angles are set as follows: alpha=30, beta=30, view=90.; Function: TSpectrum2Painter::SetZScale(Int_t scale); One can change the scale of z-axis. Possible values are:. kZScaleLinear; kZScaleLog; kZScaleSqrt. Default value is:. scale = kZScaleLinear. Height modes group, display mode = surface, 64 x 64 channels, log scale.; Function: TSpectrum2Painter::SetColorIncrements(Double_t r,Double_t g,Double_t b);; For sophisticated shading (in kModeGroupLight, kModeGroupHeight and kModeGroupLightHeight display modes groups) the color palette starts from the basic pen color (see SetPenAttr function). There is a predefined number of color levels (256). Color in every level is calculated by adding the increments of the r, g, b components to the previous level. Using this function one can change the color increments between two neighbouring color levels. The function does not apply for kModeGroupSimple display modes group. Default values: r=1, g=1, b=1; . Light modes group, display mode = surface, 64 x 64 channels, color increments r=1, g=2, b=3. . Light modes group, display mode = surface, 64 x 64 channels, color increments r=4, g=2, b=1.; Function: TSpectrum2Painter::SetColorAlgorithm(Int_t colorAlgorithm); To define the colors one can employ one of the following color algorith",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:47179,Testability,log,log,47179,"option bf().; The number of nodes can be change with n(nodesx, nodesy). Example: h2->Draw(""SPEC n(40,40)"");; Sometimes the displayed region is rather large. When displaying all channels pictures become very dense and complicated. It is very difficult to understand the overall shape of data. ""n(nx,ny)"" allows to change the density of displayed channels. Only the channels coinciding with given nodes are displayed.; The visualization angles can be changed with a(alpha, beta, view). Example: h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");; Alpha defines the angle between bottom horizontal screen line and the displayed space on the right side of the picture and beta on the left side, respectively. One can rotate the 3-d space around vertical axis going through the center of it employing the view parameter. Allowed values are 0, 90, 180 and 270 degrees.; zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; 2 = Sqrt. If gPad->SetLogz() has been set, log scale on Z-axis is set automatically. No need to use the zs() operator. Note that the X and Y axis are always linear.; ci(r,g,b), were r,g and b are floats defines the colors increments. For sophisticated shading (Light, Height and LightHeight Display Modes Groups) the color palette starts from the basic pen color (see pa() function). There is a predefined number of color levels (256). Color in every level is calculated by adding the increments of the r, g, b components to the previous level. Using this function one can change the color increments between two neighbouring color levels. The function does not apply dor the Simple Display Modes Group. The default values are: (1,1,1).; ca(color_algorithm) allows to choose the Color Algorithm. To define the colors one can employ one of the following color algorithms (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches the limit value one can choose either smooth transition (by decreasing the limit value) or a sharp modulo",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:56227,Testability,log,log,56227,"t_t ; nodesy . ). Sets nodes in both directions: . nodesx, nodesy, only the bins at the nodes points are displayed . Definition at line 7102 of file TSpectrum2Painter.cxx. ◆ SetPenAttr(). void TSpectrum2Painter::SetPenAttr ; (; Int_t ; color, . Int_t ; style, . Int_t ; width . ). Sets pen attributes: . color - color of spectrum; style - style of pen (solid, dash, dot, dash-dot); width - width of pen in pixels . Definition at line 7088 of file TSpectrum2Painter.cxx. ◆ SetShading(). void TSpectrum2Painter::SetShading ; (; Int_t ; shading, . Int_t ; shadow . ). Sets on/off shading and shadow switches: . shading - determines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; shadow - determines whether shadow will be drawn, for rainbowed display modes with shading according to light . Definition at line 7191 of file TSpectrum2Painter.cxx. ◆ SetZScale(). void TSpectrum2Painter::SetZScale ; (; Int_t ; scale). Sets z-axis scale: . scale - linear, sqrt or log . Definition at line 7132 of file TSpectrum2Painter.cxx. ◆ ShadowColorCalculation(). Double_t TSpectrum2Painter::ShadowColorCalculation ; (; Double_t ; xtaz, . Double_t ; ytaz, . Double_t ; ztaz, . Double_t ; shad_noise . ). protected . Determines whether the center of the triangle in 3-d space given by function parameters: . xtaz,ytaz,ztaz is in shadow or not. If yes it return 1 otherwise it returns 0. . Definition at line 387 of file TSpectrum2Painter.cxx. ◆ Slice(). void TSpectrum2Painter::Slice ; (; Double_t ; xr, . Double_t ; yr, . Double_t ; xs, . Double_t ; ys, . TLine * ; line . ). protected . Calculates screen coordinates of the line given by two nodes for contours display mode. ; The line is given by two points xr, yr, xs, ys. Finally it draws the line. ; Definition at line 1084 of file TSpectrum2Painter.cxx. ◆ Streamer(). void TSpectrum2Painter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:4322,Usability,simpl,simple,4322,"Referenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Painter (TH2 *h2, Int_t bs);  TSpectrum2Painter normal constructor. ;  ;  ~TSpectrum2Painter () override;  TSpectrum2Painter destructor. ;  ; void GetAngles (Int_t &alpha, Int_t &beta, Int_t &view);  Gets angles of the view: ;  ; void GetBezier (Int_t &bezier);  Gets Bezier smoothing switch: ;  ; void GetChanGrid (Int_t &enable, Int_t &color);  This function gets attributes for drawing channel: ;  ; void GetChanMarks (Int_t &enable, Int_t &color, Int_t &width, Int_t &height, Int_t &style);  Gets drawing attributes for channel marks: ;  ; void GetColorAlgorithm (Int_t &colorAlgorithm);  Gets shading color algorithm: ;  ; void GetColorIncrements (Double_t &r, Double_t &g, Double_t &b);  Gets color increments between two color levels for r, g, b components: ;  ; void GetContourWidth (Int_t &width);  Gets width between horizontal slices: ;  ; void GetDisplayMode (Int_t &modeGroup, Int_t &displayMode);  Gets display group mode and display mode: -modeGroup - the following group modes might have been set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight -displayMode - display modes that might have been set: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. ;  ; void GetLightHeightWeight (Double_t &weight);  Gets weight between shading according to fictive light source and according to channels counts: ;  ; void GetLightPosition (Int_t &x, Int_t &y, Int_t &z);  Gets position of fictive light source in 3D space: ;  ; void GetNodes (Int_t &nodesx, Int_t &nodesy);  Gets nodes in both directions: ;  ; ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:26361,Usability,simpl,simple,26361," ; y1, . Int_t ; x2, . Int_t ; y2 . ). protected . Ensures hidden surface removal. ; Definition at line 799 of file TSpectrum2Painter.cxx. ◆ EnvelopeBars(). void TSpectrum2Painter::EnvelopeBars ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). protected . Ensures hidden surface removal for Bars, BarsX and BarsY display modes. ; Definition at line 912 of file TSpectrum2Painter.cxx. ◆ GetAngles(). void TSpectrum2Painter::GetAngles ; (; Int_t & ; alpha, . Int_t & ; beta, . Int_t & ; view . ). Gets angles of the view: . alpha - angle between base line of Canvas and right lower edge of picture base plane; beta - angle between base line of Canvas and left lower edge of picture base plane; view - rotation angle of the view, it can be 0, 90, 180, 270 degrees . Definition at line 7325 of file TSpectrum2Painter.cxx. ◆ GetBezier(). void TSpectrum2Painter::GetBezier ; (; Int_t & ; bezier). Gets Bezier smoothing switch: . bezier - determines Bezier interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes) . Definition at line 7393 of file TSpectrum2Painter.cxx. ◆ GetChanGrid(). void TSpectrum2Painter::GetChanGrid ; (; Int_t & ; enable, . Int_t & ; color . ). This function gets attributes for drawing channel: . enable - decides whether the channel grid is shown or not; color - color of channel grid . Definition at line 7439 of file TSpectrum2Painter.cxx. ◆ GetChanMarks(). void TSpectrum2Painter::GetChanMarks ; (; Int_t & ; enable, . Int_t & ; color, . Int_t & ; width, . Int_t & ; height, . Int_t & ; style . ). Gets drawing attributes for channel marks: . enable - decides whether the channel marks are shown or not; color - color of channel marks; width - width of channel marks in pixels; height - height of channel marks in pixels; style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle) . Definition at line 7427 of file TSpectrum2Painter.cxx. ◆ GetColorAlgorithm(). void TSpectrum2Painter::GetColorAlg",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:28532,Usability,simpl,simple,28532,"hm . Definition at line 7347 of file TSpectrum2Painter.cxx. ◆ GetColorIncrements(). void TSpectrum2Painter::GetColorIncrements ; (; Double_t & ; r, . Double_t & ; g, . Double_t & ; b . ). Gets color increments between two color levels for r, g, b components: . r, g, b - color increments between two color levels . Definition at line 7357 of file TSpectrum2Painter.cxx. ◆ GetContourWidth(). void TSpectrum2Painter::GetContourWidth ; (; Int_t & ; width). Gets width between horizontal slices: . width - width between contours, applies only for contours display mode . Definition at line 7403 of file TSpectrum2Painter.cxx. ◆ GetDisplayMode(). void TSpectrum2Painter::GetDisplayMode ; (; Int_t & ; modeGroup, . Int_t & ; displayMode . ). Gets display group mode and display mode: -modeGroup - the following group modes might have been set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight -displayMode - display modes that might have been set: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. ; Definition at line 7287 of file TSpectrum2Painter.cxx. ◆ GetLightHeightWeight(). void TSpectrum2Painter::GetLightHeightWeight ; (; Double_t & ; weight). Gets weight between shading according to fictive light source and according to channels counts: . weight - weight between shading according to fictive light source and according to channels counts, applies only for kPicture2ModeGroupLightHeight modes group . Definition at line 7413 of file TSpectrum2Painter.cxx. ◆ GetLightPosition(). void TSpectrum2Painter::GetLightPosition ; (; Int_t & ; x, . Int_t & ; y, . Int_t & ; z . ). Gets position of fictive light source in 3D space: . x, y, z . Definition at line 7369 of file TSpectrum2Painter.cxx. ◆ GetNodes(). void TSpectrum2Pai",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:31539,Usability,simpl,simple,31539,"; (; Int_t & ; scale). Gets z-axis scale: . scale - it can be linear, sqrt or log . Definition at line 7337 of file TSpectrum2Painter.cxx. ◆ IsA(). TClass * TSpectrum2Painter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 205 of file TSpectrum2Painter.h. ◆ operator=(). TSpectrum2Painter & TSpectrum2Painter::operator= ; (; const TSpectrum2Painter & ; ). private . ◆ Paint(). void TSpectrum2Painter::Paint ; (; Option_t * ; option). overridevirtual . Paints histogram according to preset parameters. . Visualization; Goal: to present 2-dimensional spectra in suitable visual form; This package has several display mode groups and display modes, which can be employed for the presentation of 2-dimensional histograms Display modes groups:. kModeGroupSimple - it covers simple display modes using one color only; kModeGroupLight - in this group the shading is carried out according to the position of the fictive light source; kModeGroupHeight - in this group the shading is carried out according to the channel contents; kModeGroupLightHeight - combination of two previous shading algorithms. One can control the weight between both algorithms. Display modes:. kDisplayModePoints,; kDisplayModeGrid,; kDisplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful combinations (denoted by x) are given in the next table. Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); This function controls the display mode group and display mode of the histogra",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:44370,Usability,simpl,simple,44370,"available in TSpectrum2Painter and paint ""h2"". ; TSpectrum2Painter offers a large set of options/attributes. In the ""option"" parameter each of them can be set to specific values via ""operators"" in the option itself. for instance on can do: h2->Draw(""SPEC a(30,30,0)"");; to draw h2 with TSpectrum2Painter using all the default attributes except the viewing angles. The operators' names are case insensitive (one can use ""a"" or ""A""). Operators parameters are separated by "","". The operators can be put is any order in the option. Operators must be separated by "" "". No "" "" characters should be put in an operator. This help page describes all the available operators.; The way ""h2"" will be painted is controlled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"".; ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carried out according to the position of the fictive light source; 2 = Height - in this group the shading is carried out according to the channel contents; 3 = LightHeight - combination of two previous shading algorithms. One can control the weight between both algorithms. ""Display modes"" can take the following values:. 1 = Points.; 2 = Grid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator in the option. Example: h2->Draw(""SPEC dm(1,2)"");; will paint the 2D histogram h2 using the ""Light Display mode group"" and the ""Grid Display mode"". The following table summarises all the possible combinations of the ""Display modes groups"" and the ""Display modes"". Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . The Pen Attributes can be chang",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:51731,Usability,simpl,simple,51731,"e; 5 = X; 6 = Diamond; 7 = Triangle. cg(enable,color) channel grid. In addition to the surface drawn using any above given algorithm one can display grid using the color parameter. The parameter enable can be set to:. 0 = Grid not drawn; 1 = Grid drawn. See example spectrumpainter.C. Definition at line 7674 of file TSpectrum2Painter.cxx. ◆ SetAngles(). void TSpectrum2Painter::SetAngles ; (; Int_t ; alpha, . Int_t ; beta, . Int_t ; view . ). Sets angles of the view: . alpha - angles of display,alpha+beta must be less or equal to 90, alpha- angle between base line of Canvas and right lower edge of picture base plane; beta - angle between base line of Canvas and left lower edge of picture base plane; view - rotation angle of the view, it can be 0, 90, 180, 270 degrees . Definition at line 7117 of file TSpectrum2Painter.cxx. ◆ SetBezier(). void TSpectrum2Painter::SetBezier ; (; Int_t ; bezier). Sets on/off Bezier smoothing: . bezier - determines Bezier interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes) . Definition at line 7205 of file TSpectrum2Painter.cxx. ◆ SetChanGrid(). void TSpectrum2Painter::SetChanGrid ; (; Int_t ; enable, . Int_t ; color . ). This function sets enables/disables drawing of channel grid and sets its color: -enable - decides whether the channel grid is shown or not -color - color of channel grid. ; Definition at line 7271 of file TSpectrum2Painter.cxx. ◆ SetChanMarks(). void TSpectrum2Painter::SetChanMarks ; (; Int_t ; enable, . Int_t ; color, . Int_t ; width, . Int_t ; height, . Int_t ; style . ). Sets enables/disables drawing of channel marks and sets their attributes: . enable - decides whether the channel marks are shown or not; color - color of channel marks; width - width of channel marks in pixels; height - height of channel marks in pixels; style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle) . Definition at line 7244 of file TSpectrum2Painter.cxx. ◆ SetColorAl",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:53185,Usability,simpl,simple,53185,"ble - decides whether the channel grid is shown or not -color - color of channel grid. ; Definition at line 7271 of file TSpectrum2Painter.cxx. ◆ SetChanMarks(). void TSpectrum2Painter::SetChanMarks ; (; Int_t ; enable, . Int_t ; color, . Int_t ; width, . Int_t ; height, . Int_t ; style . ). Sets enables/disables drawing of channel marks and sets their attributes: . enable - decides whether the channel marks are shown or not; color - color of channel marks; width - width of channel marks in pixels; height - height of channel marks in pixels; style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle) . Definition at line 7244 of file TSpectrum2Painter.cxx. ◆ SetColorAlgorithm(). void TSpectrum2Painter::SetColorAlgorithm ; (; Int_t ; colorAlgorithm). Sets shading color algorithm: . olorAlgorithm - applies only for rainbowed display modes (rgb smooth algorithm, rgb modulo color component, cmy smooth algorithm,; cmy modulo color component, cie smooth algorithm,; cie modulo color component, yiq smooth algorithm,; yiq modulo color component, hsv smooth algorithm,; hsv modulo color component, it does not apply for simple display modes algorithm group . Definition at line 7150 of file TSpectrum2Painter.cxx. ◆ SetColorIncrements(). void TSpectrum2Painter::SetColorIncrements ; (; Double_t ; r, . Double_t ; g, . Double_t ; b . ). Sets color increments between two color levels for r, g, b components: . r, g, b - color increments between two color levels . Definition at line 7162 of file TSpectrum2Painter.cxx. ◆ SetContourWidth(). void TSpectrum2Painter::SetContourWidth ; (; Int_t ; width). Sets width between horizontal slices: . width - width between contours, applies only for contours display mode . Definition at line 7218 of file TSpectrum2Painter.cxx. ◆ SetDisplayMode(). void TSpectrum2Painter::SetDisplayMode ; (; Int_t ; modeGroup, . Int_t ; displayMode . ). Sets display group mode and display mode: . modeGroup - the following group modes can be set: ",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Painter.html:54037,Usability,simpl,simple,54037,"up . Definition at line 7150 of file TSpectrum2Painter.cxx. ◆ SetColorIncrements(). void TSpectrum2Painter::SetColorIncrements ; (; Double_t ; r, . Double_t ; g, . Double_t ; b . ). Sets color increments between two color levels for r, g, b components: . r, g, b - color increments between two color levels . Definition at line 7162 of file TSpectrum2Painter.cxx. ◆ SetContourWidth(). void TSpectrum2Painter::SetContourWidth ; (; Int_t ; width). Sets width between horizontal slices: . width - width between contours, applies only for contours display mode . Definition at line 7218 of file TSpectrum2Painter.cxx. ◆ SetDisplayMode(). void TSpectrum2Painter::SetDisplayMode ; (; Int_t ; modeGroup, . Int_t ; displayMode . ). Sets display group mode and display mode: . modeGroup - the following group modes can be set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; displayMode - posible display modes are: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles . Definition at line 7071 of file TSpectrum2Painter.cxx. ◆ SetLightHeightWeight(). void TSpectrum2Painter::SetLightHeightWeight ; (; Double_t ; weight). Sets weight between shading according to fictive light source and according to channels counts: . weight - weight between shading according to fictive light source and according to channels counts, applies only for kPicture2ModeGroupLightHeight modes group . Definition at line 7228 of file TSpectrum2Painter.cxx. ◆ SetLightPosition(). void TSpectrum2Painter::SetLightPosition ; (; Int_t ; x, . Int_t ; y, . Int_t ; z . ). Sets position of fictive light source in 3D space: . x, y, z . Definition at line 7176 of file TSpectrum2Painter.cxx. ◆ SetNodes(). void TSpectrum2Painter::SetNodes ; (; Int_t ; nodesx, . Int_",MatchSource.WIKI,doc/master/classTSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html
https://root.cern/doc/master/classTSpectrum2Transform.html:6037,Availability,error,error,6037,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:6126,Availability,error,error,6126,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:6281,Availability,error,error,6281,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:6578,Availability,error,error,6578,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:11142,Availability,error,error,11142," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:1456,Energy Efficiency,adapt,adaptive,1456,"interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:1649,Energy Efficiency,adapt,adaptive,1649,"ing on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanva",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:1799,Energy Efficiency,adapt,adaptive,1799,"mating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kI",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:16492,Energy Efficiency,power,power,16492," . #include <TSpectrum2Transform.h>. Inheritance diagram for TSpectrum2Transform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTransformWalshHaar ; kTransformCosWalsh ; kTransformCosHaar ; kTransformSinWalsh ; kTransformSinHaar ; kTransformForward ; kTransformInverse . Definition at line 30 of file TSpectrum2Transform.h. Constructor & Destructor Documentation. ◆ TSpectrum2Transform() [1/2]. TSpectrum2Transform::TSpectrum2Transform ; (; ). Default constructor. ; Definition at line 41 of file TSpectrum2Transform.cxx. ◆ TSpectrum2Transform() [2/2]. TSpectrum2Transform::TSpectrum2Transform ; (; Int_t ; sizeX, . Int_t ; sizeY . ). The constructor creates TSpectrum2Transform object. ; Its sizes must be > than zero and must be power of 2. It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ; Definition at line 59 of file TSpectrum2Transform.cxx. ◆ ~TSpectrum2Transform(). TSpectrum2Transform::~TSpectrum2Transform ; (; ). override . Destructor. ; Definition at line 97 of file TSpectrum2Transform.cxx. Member Function Documentation. ◆ BitReverse(). void TSpectrum2Transform::BitReverse ; (; Double_t * ; working_space, . Int_t ; num . ). protected . This function carries out bit-reverse reordering of data. ; Function parameters:; working_space-pointer to vector of processed data; num-length of processed data . Definition at line 242 of file TSpectrum2Transform.cxx. ◆ BitReverseHaar(). void TSpectrum2Transform::BitReverseHaar ; (; Double_t * ; working_space, . Int_t ; shift, . Int_t ; num, . Int_t ; start . ). protected . This function carries out bit-reverse reordering for Haar transform. ; Function parameters:; working_space-pointer t",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31514,Energy Efficiency,adapt,adaptive,31514," be fSizex*fSizey except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These need fSizex*2*fSizey length to store real and imaginary coefficients; fSizex,fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31711,Energy Efficiency,adapt,adaptive,31711,"fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[i]=newDouble_t[nbinsy];; for (i=0;i<nbinsx;i++); dest[i]=newDouble_t[nbinsy];; TH2F *trans = newTH2F(""trans"",""Background estimation"",nbinsx,xmin,xmax,n",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31865,Energy Efficiency,adapt,adaptive,31865,"transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[i]=newDouble_t[nbinsy];; for (i=0;i<nbinsx;i++); dest[i]=newDouble_t[nbinsy];; TH2F *trans = newTH2F(""trans"",""Background estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; TFile *f = new TFile(""TSpectrum2.root"");; trans=(TH2F*)f->Get(""back3;1"");; TCanvas *Tr = new TCanvas(""Tr",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:520,Integrability,interface,interface,520,". ROOT: TSpectrum2Transform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrum2Transform Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Transform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformC",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:661,Integrability,depend,depending,661,". ROOT: TSpectrum2Transform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrum2Transform Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Transform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformC",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:6043,Integrability,message,message,6043,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:6584,Integrability,message,message,6584,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:7786,Integrability,message,message,7786,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:11148,Integrability,message,message,11148," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:11521,Integrability,message,message,11521," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:950,Modifiability,enhance,enhancement,950,". ROOT: TSpectrum2Transform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrum2Transform Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Transform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformC",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:1352,Modifiability,enhance,enhancement,1352,"» Advanced spectra processing classes. ; Advanced 2-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Transform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from T",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:1456,Modifiability,adapt,adaptive,1456,"interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:1649,Modifiability,adapt,adaptive,1649,"ing on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanva",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:1799,Modifiability,adapt,adaptive,1799,"mating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kI",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:2340,Modifiability,inherit,inherited,2340,"94) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Transform ();  Default constructor. ;  ;  TSpectrum2Transform (Int_t sizeX, Int_t sizeY);  The constructor creates TSpectrum2Transform object. ;  ;  ~TSpectrum2Transform () override;  Destructor. ;  ; void Enhance (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t **fSource, Double_t **fDest);  This function transforms the source spe",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:3587,Modifiability,enhance,enhanceCoeff,3587," )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Transform ();  Default constructor. ;  ;  TSpectrum2Transform (Int_t sizeX, Int_t sizeY);  The constructor creates TSpectrum2Transform object. ;  ;  ~TSpectrum2Transform () override;  Destructor. ;  ; void Enhance (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:3626,Modifiability,enhance,enhancement,3626," )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Transform ();  Default constructor. ;  ;  TSpectrum2Transform (Int_t sizeX, Int_t sizeY);  The constructor creates TSpectrum2Transform object. ;  ;  ~TSpectrum2Transform () override;  Destructor. ;  ; void Enhance (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:3851,Modifiability,enhance,enhancement,3851," )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Transform ();  Default constructor. ;  ;  TSpectrum2Transform (Int_t sizeX, Int_t sizeY);  The constructor creates TSpectrum2Transform object. ;  ;  ~TSpectrum2Transform () override;  Destructor. ;  ; void Enhance (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:4276,Modifiability,inherit,inherited,4276," source spectrum. ;  ; void FilterZonal (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t **fSource, Double_t **fDest);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:5673,Modifiability,inherit,inheritance,5673,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:7884,Modifiability,inherit,inherits,7884,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:8001,Modifiability,inherit,inherits,8001,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:12022,Modifiability,inherit,inherited,12022,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void BitReverse (Double_t *working_space, Int_t num);  This function carries out bit-reverse reordering of data. ;  ; void BitReverseHaar (Double_t *working_space, Int_t shift, Int_t num, Int_t start);  This function carries out bit-reverse reordering for Haar transform. ;  ; void FourCos2 (Double_t **working_matrix, Double_t *working_vector, Int_t numx, Int_t numy, Int_t direction, Int_t type);  This function calculates 2D Fourier based transforms Function parameters: ;  ; void Fourier (Doub",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:14241,Modifiability,inherit,inherited,14241,"t type, Int_t degree);  This function calculates generalized (mixed) 2D transforms Function parameters: ;  ; Int_t GeneralExe (Double_t *working_space, Int_t zt_clear, Int_t num, Int_t degree, Int_t type);  This function calculates generalized (mixed) transforms of different degrees. ;  ; Int_t GeneralInv (Double_t *working_space, Int_t num, Int_t degree, Int_t type);  This function calculates inverse generalized (mixed) transforms Function parameters: ;  ; void Haar (Double_t *working_space, Int_t num, Int_t direction);  This function calculates Haar transform of a part of data. ;  ; void HaarWalsh2 (Double_t **working_matrix, Double_t *working_vector, Int_t numx, Int_t numy, Int_t direction, Int_t type);  This function calculates 2D Haar and Walsh transforms Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSizeX;  x length of transformed data ;  ; Int_t fSizeY;  y length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel x of filtered or enhanced region ;  ; Int_t fXmin;  first channel x of filtered or enhanced region ;  ; Int_t fYmax;  last channel y of filtered or enhanced region ;  ; Int_t f",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:14728,Modifiability,enhance,enhanced,14728,"; void HaarWalsh2 (Double_t **working_matrix, Double_t *working_vector, Int_t numx, Int_t numy, Int_t direction, Int_t type);  This function calculates 2D Haar and Walsh transforms Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSizeX;  x length of transformed data ;  ; Int_t fSizeY;  y length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel x of filtered or enhanced region ;  ; Int_t fXmin;  first channel x of filtered or enhanced region ;  ; Int_t fYmax;  last channel y of filtered or enhanced region ;  ; Int_t fYmin;  first channel y of filtered or enhanced region ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Transform.h>. Inheritance diagram for TSpectrum2Transform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTr",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:15142,Modifiability,enhance,enhanced,15142,"; void HaarWalsh2 (Double_t **working_matrix, Double_t *working_vector, Int_t numx, Int_t numy, Int_t direction, Int_t type);  This function calculates 2D Haar and Walsh transforms Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSizeX;  x length of transformed data ;  ; Int_t fSizeY;  y length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel x of filtered or enhanced region ;  ; Int_t fXmin;  first channel x of filtered or enhanced region ;  ; Int_t fYmax;  last channel y of filtered or enhanced region ;  ; Int_t fYmin;  first channel y of filtered or enhanced region ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Transform.h>. Inheritance diagram for TSpectrum2Transform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTr",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:15208,Modifiability,enhance,enhanced,15208,"; void HaarWalsh2 (Double_t **working_matrix, Double_t *working_vector, Int_t numx, Int_t numy, Int_t direction, Int_t type);  This function calculates 2D Haar and Walsh transforms Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSizeX;  x length of transformed data ;  ; Int_t fSizeY;  y length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel x of filtered or enhanced region ;  ; Int_t fXmin;  first channel x of filtered or enhanced region ;  ; Int_t fYmax;  last channel y of filtered or enhanced region ;  ; Int_t fYmin;  first channel y of filtered or enhanced region ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Transform.h>. Inheritance diagram for TSpectrum2Transform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTr",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:15273,Modifiability,enhance,enhanced,15273,"; void HaarWalsh2 (Double_t **working_matrix, Double_t *working_vector, Int_t numx, Int_t numy, Int_t direction, Int_t type);  This function calculates 2D Haar and Walsh transforms Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSizeX;  x length of transformed data ;  ; Int_t fSizeY;  y length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel x of filtered or enhanced region ;  ; Int_t fXmin;  first channel x of filtered or enhanced region ;  ; Int_t fYmax;  last channel y of filtered or enhanced region ;  ; Int_t fYmin;  first channel y of filtered or enhanced region ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Transform.h>. Inheritance diagram for TSpectrum2Transform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTr",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:15339,Modifiability,enhance,enhanced,15339,"; void HaarWalsh2 (Double_t **working_matrix, Double_t *working_vector, Int_t numx, Int_t numy, Int_t direction, Int_t type);  This function calculates 2D Haar and Walsh transforms Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSizeX;  x length of transformed data ;  ; Int_t fSizeY;  y length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel x of filtered or enhanced region ;  ; Int_t fXmin;  first channel x of filtered or enhanced region ;  ; Int_t fYmax;  last channel y of filtered or enhanced region ;  ; Int_t fYmin;  first channel y of filtered or enhanced region ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Transform.h>. Inheritance diagram for TSpectrum2Transform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTr",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:15407,Modifiability,inherit,inherited,15407,");  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSizeX;  x length of transformed data ;  ; Int_t fSizeY;  y length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel x of filtered or enhanced region ;  ; Int_t fXmin;  first channel x of filtered or enhanced region ;  ; Int_t fYmax;  last channel y of filtered or enhanced region ;  ; Int_t fYmin;  first channel y of filtered or enhanced region ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrum2Transform.h>. Inheritance diagram for TSpectrum2Transform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTransformWalshHaar ; kTransformCosWalsh ; kTransformCosHaar ; kTransformSinWalsh ; kTransformSinHaar ; kTransformForward ; kTransformInverse . Definition at line 30 of file TSpectrum2Transform.h. Constructor & Destructor Documentation. ◆ TSpectrum2Transform() [1/2]. TSpectrum2Transform::TSpectrum2Transform ; (; ). Default constructor. ; Definition at line 41 of file TSpectrum2Transform.cxx. ◆ TSpectrum2Transform() [2/2]. TSpectrum2Transform::TSpectrum2Transform ; (; Int_t ; sizeX, . Int_t ; sizeY . ). The constructor create",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:18821,Modifiability,enhance,enhancement,18821," . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpectrum2Transform::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 73 of file TSpectrum2Transform.h. ◆ DeclFileName(). static const char * TSpectrum2Transform::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 73 of file TSpectrum2Transform.h. ◆ Enhance(). void TSpectrum2Transform::Enhance ; (; const Double_t ** ; fSource, . Double_t ** ; fDest . ). This function transforms the source spectrum. ; The calling program should fill in input parameters. Then it multiplies transformed coefficients in the given region by the given enhance_coeff and transforms it back; Function parameters:; fSource-pointer to the matrix of source spectrum, its size should be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be fSizeX*fSizeY. Example of enhancement; This function transforms the source spectrum (for details see Transform function). Before the Enhance function is called the class must be created by constructor and the type of the transform as well as some other parameters must be set using a set of setter functions. The Enhance function multiplies transformed coefficients in the given region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it back. Enhanced data are written into dest spectrum. Example - script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63) were multiplied by 5); Script:; Example to illustrate enhancement (class TSpectrumTransform2). To execute this example, do; root > .x Enhance2.C; void Enhance2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:19544,Modifiability,enhance,enhancement,19544,"hen it multiplies transformed coefficients in the given region by the given enhance_coeff and transforms it back; Function parameters:; fSource-pointer to the matrix of source spectrum, its size should be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be fSizeX*fSizeY. Example of enhancement; This function transforms the source spectrum (for details see Transform function). Before the Enhance function is called the class must be created by constructor and the type of the transform as well as some other parameters must be set using a set of setter functions. The Enhance function multiplies transformed coefficients in the given region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it back. Enhanced data are written into dest spectrum. Example - script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63) were multiplied by 5); Script:; Example to illustrate enhancement (class TSpectrumTransform2). To execute this example, do; root > .x Enhance2.C; void Enhance2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[i]= new Double_t[nbinsy];; for (i=0;i<nbinsx;i++); dest[i]= new Double_t[nbinsy];; TH2F *trans = new TH2F(""trans"",""Background estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; TFile *f = new TFile(""TSpectrum2.root"");; trans=(TH2F*)f->Get(""back3;1"");; TCanvas *Tr = new TCanvas(""Transform"",""Illustration of transform function"",10,10,1000,700);; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; source[i][j] = trans->GetBinContent(i + 1,j + 1);; }; }; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);; t->SetTransformType(t->kTransformCos,0);; t->SetRegion(0,63,0,63);; t->SetEn",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:28238,Modifiability,enhance,enhanceCoeff,28238,"Walsh2 ; (; Double_t ** ; working_matrix, . Double_t * ; working_vector, . Int_t ; numx, . Int_t ; numy, . Int_t ; direction, . Int_t ; type . ). protected . This function calculates 2D Haar and Walsh transforms Function parameters: . working_matrix-pointer to matrix of transformed data; working_vector-pointer to vector where the data are processed; numx,numy-lengths of processed data; direction-forward or inverse; type-type of transform (see manual) . Definition at line 685 of file TSpectrum2Transform.cxx. ◆ IsA(). TClass * TSpectrum2Transform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 73 of file TSpectrum2Transform.h. ◆ SetDirection(). void TSpectrum2Transform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2762 of file TSpectrum2Transform.cxx. ◆ SetEnhanceCoeff(). void TSpectrum2Transform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2784 of file TSpectrum2Transform.cxx. ◆ SetFilterCoeff(). void TSpectrum2Transform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2775 of file TSpectrum2Transform.cxx. ◆ SetRegion(). void TSpectrum2Transform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax . ). This function sets the filtering or enhancement region: . xmin, xmax, ymin, ymax . Definition at line 2742 of file TSpectrum2Transform.cxx. ◆ SetTransformType(). void TSpectrum2Transform::SetTransformType ; (; Int_t ; transType, . I",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:28276,Modifiability,enhance,enhancement,28276,"ng_vector, . Int_t ; numx, . Int_t ; numy, . Int_t ; direction, . Int_t ; type . ). protected . This function calculates 2D Haar and Walsh transforms Function parameters: . working_matrix-pointer to matrix of transformed data; working_vector-pointer to vector where the data are processed; numx,numy-lengths of processed data; direction-forward or inverse; type-type of transform (see manual) . Definition at line 685 of file TSpectrum2Transform.cxx. ◆ IsA(). TClass * TSpectrum2Transform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 73 of file TSpectrum2Transform.h. ◆ SetDirection(). void TSpectrum2Transform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2762 of file TSpectrum2Transform.cxx. ◆ SetEnhanceCoeff(). void TSpectrum2Transform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2784 of file TSpectrum2Transform.cxx. ◆ SetFilterCoeff(). void TSpectrum2Transform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2775 of file TSpectrum2Transform.cxx. ◆ SetRegion(). void TSpectrum2Transform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax . ). This function sets the filtering or enhancement region: . xmin, xmax, ymin, ymax . Definition at line 2742 of file TSpectrum2Transform.cxx. ◆ SetTransformType(). void TSpectrum2Transform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameter",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:28303,Modifiability,enhance,enhanceCoeff,28303,". protected . This function calculates 2D Haar and Walsh transforms Function parameters: . working_matrix-pointer to matrix of transformed data; working_vector-pointer to vector where the data are processed; numx,numy-lengths of processed data; direction-forward or inverse; type-type of transform (see manual) . Definition at line 685 of file TSpectrum2Transform.cxx. ◆ IsA(). TClass * TSpectrum2Transform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 73 of file TSpectrum2Transform.h. ◆ SetDirection(). void TSpectrum2Transform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2762 of file TSpectrum2Transform.cxx. ◆ SetEnhanceCoeff(). void TSpectrum2Transform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2784 of file TSpectrum2Transform.cxx. ◆ SetFilterCoeff(). void TSpectrum2Transform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2775 of file TSpectrum2Transform.cxx. ◆ SetRegion(). void TSpectrum2Transform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax . ). This function sets the filtering or enhancement region: . xmin, xmax, ymin, ymax . Definition at line 2742 of file TSpectrum2Transform.cxx. ◆ SetTransformType(). void TSpectrum2Transform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sine, Fourie",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:28342,Modifiability,enhance,enhanced,28342,". protected . This function calculates 2D Haar and Walsh transforms Function parameters: . working_matrix-pointer to matrix of transformed data; working_vector-pointer to vector where the data are processed; numx,numy-lengths of processed data; direction-forward or inverse; type-type of transform (see manual) . Definition at line 685 of file TSpectrum2Transform.cxx. ◆ IsA(). TClass * TSpectrum2Transform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 73 of file TSpectrum2Transform.h. ◆ SetDirection(). void TSpectrum2Transform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2762 of file TSpectrum2Transform.cxx. ◆ SetEnhanceCoeff(). void TSpectrum2Transform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2784 of file TSpectrum2Transform.cxx. ◆ SetFilterCoeff(). void TSpectrum2Transform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2775 of file TSpectrum2Transform.cxx. ◆ SetRegion(). void TSpectrum2Transform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax . ). This function sets the filtering or enhancement region: . xmin, xmax, ymin, ymax . Definition at line 2742 of file TSpectrum2Transform.cxx. ◆ SetTransformType(). void TSpectrum2Transform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sine, Fourie",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:28435,Modifiability,enhance,enhancement,28435,"arameters: . working_matrix-pointer to matrix of transformed data; working_vector-pointer to vector where the data are processed; numx,numy-lengths of processed data; direction-forward or inverse; type-type of transform (see manual) . Definition at line 685 of file TSpectrum2Transform.cxx. ◆ IsA(). TClass * TSpectrum2Transform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 73 of file TSpectrum2Transform.h. ◆ SetDirection(). void TSpectrum2Transform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2762 of file TSpectrum2Transform.cxx. ◆ SetEnhanceCoeff(). void TSpectrum2Transform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2784 of file TSpectrum2Transform.cxx. ◆ SetFilterCoeff(). void TSpectrum2Transform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2775 of file TSpectrum2Transform.cxx. ◆ SetRegion(). void TSpectrum2Transform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax . ). This function sets the filtering or enhancement region: . xmin, xmax, ymin, ymax . Definition at line 2742 of file TSpectrum2Transform.cxx. ◆ SetTransformType(). void TSpectrum2Transform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haa",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:29020,Modifiability,enhance,enhancement,29020,"n). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2762 of file TSpectrum2Transform.cxx. ◆ SetEnhanceCoeff(). void TSpectrum2Transform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2784 of file TSpectrum2Transform.cxx. ◆ SetFilterCoeff(). void TSpectrum2Transform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2775 of file TSpectrum2Transform.cxx. ◆ SetRegion(). void TSpectrum2Transform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax . ). This function sets the filtering or enhancement region: . xmin, xmax, ymin, ymax . Definition at line 2742 of file TSpectrum2Transform.cxx. ◆ SetTransformType(). void TSpectrum2Transform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms . Definition at line 2709 of file TSpectrum2Transform.cxx. ◆ Streamer(). void TSpectrum2Transform::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSpectrum2Transform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TSpectrum2Transform.h. ◆ Tra",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31063,Modifiability,enhance,enhance,31063,"trum2Transform.h. ◆ Transform(). void TSpectrum2Transform::Transform ; (; const Double_t ** ; fSource, . Double_t ** ; fDest . ). This function transforms the source spectrum. ; The calling program should fill in input parameters. Transformed data are written into dest spectrum.; Function parameters:; fSource-pointer to the matrix of source spectrum, its size should be fSizex*fSizey except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transform. These need fSizex*2*fSizey length to supply real and imaginary coefficients.; fDest-pointer to the matrix of destination data, its size should be fSizex*fSizey except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These need fSizex*2*fSizey length to store real and imaginary coefficients; fSizex,fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dime",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31282,Modifiability,enhance,enhancement,31282,"rmed data are written into dest spectrum.; Function parameters:; fSource-pointer to the matrix of source spectrum, its size should be fSizex*fSizey except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transform. These need fSizex*2*fSizey length to supply real and imaginary coefficients.; fDest-pointer to the matrix of destination data, its size should be fSizex*fSizey except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These need fSizex*2*fSizey length to store real and imaginary coefficients; fSizex,fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31405,Modifiability,enhance,enhancement,31405,"WALSH, FOUR-HAAR transform. These need fSizex*2*fSizey length to supply real and imaginary coefficients.; fDest-pointer to the matrix of destination data, its size should be fSizex*fSizey except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These need fSizex*2*fSizey length to store real and imaginary coefficients; fSizex,fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax =",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31514,Modifiability,adapt,adaptive,31514," be fSizex*fSizey except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These need fSizex*2*fSizey length to store real and imaginary coefficients; fSizex,fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31711,Modifiability,adapt,adaptive,31711,"fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[i]=newDouble_t[nbinsy];; for (i=0;i<nbinsx;i++); dest[i]=newDouble_t[nbinsy];; TH2F *trans = newTH2F(""trans"",""Background estimation"",nbinsx,xmin,xmax,n",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:31865,Modifiability,adapt,adaptive,31865,"transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[i]=newDouble_t[nbinsy];; for (i=0;i<nbinsx;i++); dest[i]=newDouble_t[nbinsy];; TH2F *trans = newTH2F(""trans"",""Background estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; TFile *f = new TFile(""TSpectrum2.root"");; trans=(TH2F*)f->Get(""back3;1"");; TCanvas *Tr = new TCanvas(""Tr",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:34396,Modifiability,enhance,enhanced,34396," overrideSet bin content.Definition TH2.cxx:2616. Definition at line 1748 of file TSpectrum2Transform.cxx. ◆ Walsh(). void TSpectrum2Transform::Walsh ; (; Double_t * ; working_space, . Int_t ; num . ). protected . This function calculates Walsh transform of a part of data. ; Function parameters:; working_space-pointer to vector of transformed data; num-length of processed data . Definition at line 188 of file TSpectrum2Transform.cxx. Member Data Documentation. ◆ fDegree. Int_t TSpectrum2Transform::fDegree. protected . degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ; Definition at line 21 of file TSpectrum2Transform.h. ◆ fDirection. Int_t TSpectrum2Transform::fDirection. protected . forward or inverse transform ; Definition at line 22 of file TSpectrum2Transform.h. ◆ fEnhanceCoeff. Double_t TSpectrum2Transform::fEnhanceCoeff. protected . multiplication coefficient applied in enhanced region; ; Definition at line 28 of file TSpectrum2Transform.h. ◆ fFilterCoeff. Double_t TSpectrum2Transform::fFilterCoeff. protected . value set in the filtered region ; Definition at line 27 of file TSpectrum2Transform.h. ◆ fSizeX. Int_t TSpectrum2Transform::fSizeX. protected . x length of transformed data ; Definition at line 18 of file TSpectrum2Transform.h. ◆ fSizeY. Int_t TSpectrum2Transform::fSizeY. protected . y length of transformed data ; Definition at line 19 of file TSpectrum2Transform.h. ◆ fTransformType. Int_t TSpectrum2Transform::fTransformType. protected . type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ; Definition at line 20 of file TSpectrum2Transform.h. ◆ fXmax. Int_t TSpectrum2Transform::fXmax. protected . last channel x of filtered or enhanced region ; Definition at line 24 of file TSpectrum2Transform.h. ◆ fXmin. Int_t TSpectrum2Transform::fXmin. protected . fi",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:35283,Modifiability,enhance,enhanced,35283,"t TSpectrum2Transform::fDirection. protected . forward or inverse transform ; Definition at line 22 of file TSpectrum2Transform.h. ◆ fEnhanceCoeff. Double_t TSpectrum2Transform::fEnhanceCoeff. protected . multiplication coefficient applied in enhanced region; ; Definition at line 28 of file TSpectrum2Transform.h. ◆ fFilterCoeff. Double_t TSpectrum2Transform::fFilterCoeff. protected . value set in the filtered region ; Definition at line 27 of file TSpectrum2Transform.h. ◆ fSizeX. Int_t TSpectrum2Transform::fSizeX. protected . x length of transformed data ; Definition at line 18 of file TSpectrum2Transform.h. ◆ fSizeY. Int_t TSpectrum2Transform::fSizeY. protected . y length of transformed data ; Definition at line 19 of file TSpectrum2Transform.h. ◆ fTransformType. Int_t TSpectrum2Transform::fTransformType. protected . type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ; Definition at line 20 of file TSpectrum2Transform.h. ◆ fXmax. Int_t TSpectrum2Transform::fXmax. protected . last channel x of filtered or enhanced region ; Definition at line 24 of file TSpectrum2Transform.h. ◆ fXmin. Int_t TSpectrum2Transform::fXmin. protected . first channel x of filtered or enhanced region ; Definition at line 23 of file TSpectrum2Transform.h. ◆ fYmax. Int_t TSpectrum2Transform::fYmax. protected . last channel y of filtered or enhanced region ; Definition at line 26 of file TSpectrum2Transform.h. ◆ fYmin. Int_t TSpectrum2Transform::fYmin. protected . first channel y of filtered or enhanced region ; Definition at line 25 of file TSpectrum2Transform.h. Libraries for TSpectrum2Transform:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrum2Transform.h; hist/spectrum/src/TSpectrum2Transform.cxx. TSpectrum2Transform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:35440,Modifiability,enhance,enhanced,35440,"t TSpectrum2Transform::fDirection. protected . forward or inverse transform ; Definition at line 22 of file TSpectrum2Transform.h. ◆ fEnhanceCoeff. Double_t TSpectrum2Transform::fEnhanceCoeff. protected . multiplication coefficient applied in enhanced region; ; Definition at line 28 of file TSpectrum2Transform.h. ◆ fFilterCoeff. Double_t TSpectrum2Transform::fFilterCoeff. protected . value set in the filtered region ; Definition at line 27 of file TSpectrum2Transform.h. ◆ fSizeX. Int_t TSpectrum2Transform::fSizeX. protected . x length of transformed data ; Definition at line 18 of file TSpectrum2Transform.h. ◆ fSizeY. Int_t TSpectrum2Transform::fSizeY. protected . y length of transformed data ; Definition at line 19 of file TSpectrum2Transform.h. ◆ fTransformType. Int_t TSpectrum2Transform::fTransformType. protected . type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ; Definition at line 20 of file TSpectrum2Transform.h. ◆ fXmax. Int_t TSpectrum2Transform::fXmax. protected . last channel x of filtered or enhanced region ; Definition at line 24 of file TSpectrum2Transform.h. ◆ fXmin. Int_t TSpectrum2Transform::fXmin. protected . first channel x of filtered or enhanced region ; Definition at line 23 of file TSpectrum2Transform.h. ◆ fYmax. Int_t TSpectrum2Transform::fYmax. protected . last channel y of filtered or enhanced region ; Definition at line 26 of file TSpectrum2Transform.h. ◆ fYmin. Int_t TSpectrum2Transform::fYmin. protected . first channel y of filtered or enhanced region ; Definition at line 25 of file TSpectrum2Transform.h. Libraries for TSpectrum2Transform:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrum2Transform.h; hist/spectrum/src/TSpectrum2Transform.cxx. TSpectrum2Transform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:35596,Modifiability,enhance,enhanced,35596,"t TSpectrum2Transform::fDirection. protected . forward or inverse transform ; Definition at line 22 of file TSpectrum2Transform.h. ◆ fEnhanceCoeff. Double_t TSpectrum2Transform::fEnhanceCoeff. protected . multiplication coefficient applied in enhanced region; ; Definition at line 28 of file TSpectrum2Transform.h. ◆ fFilterCoeff. Double_t TSpectrum2Transform::fFilterCoeff. protected . value set in the filtered region ; Definition at line 27 of file TSpectrum2Transform.h. ◆ fSizeX. Int_t TSpectrum2Transform::fSizeX. protected . x length of transformed data ; Definition at line 18 of file TSpectrum2Transform.h. ◆ fSizeY. Int_t TSpectrum2Transform::fSizeY. protected . y length of transformed data ; Definition at line 19 of file TSpectrum2Transform.h. ◆ fTransformType. Int_t TSpectrum2Transform::fTransformType. protected . type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ; Definition at line 20 of file TSpectrum2Transform.h. ◆ fXmax. Int_t TSpectrum2Transform::fXmax. protected . last channel x of filtered or enhanced region ; Definition at line 24 of file TSpectrum2Transform.h. ◆ fXmin. Int_t TSpectrum2Transform::fXmin. protected . first channel x of filtered or enhanced region ; Definition at line 23 of file TSpectrum2Transform.h. ◆ fYmax. Int_t TSpectrum2Transform::fYmax. protected . last channel y of filtered or enhanced region ; Definition at line 26 of file TSpectrum2Transform.h. ◆ fYmin. Int_t TSpectrum2Transform::fYmin. protected . first channel y of filtered or enhanced region ; Definition at line 25 of file TSpectrum2Transform.h. Libraries for TSpectrum2Transform:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrum2Transform.h; hist/spectrum/src/TSpectrum2Transform.cxx. TSpectrum2Transform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:35753,Modifiability,enhance,enhanced,35753,"t TSpectrum2Transform::fDirection. protected . forward or inverse transform ; Definition at line 22 of file TSpectrum2Transform.h. ◆ fEnhanceCoeff. Double_t TSpectrum2Transform::fEnhanceCoeff. protected . multiplication coefficient applied in enhanced region; ; Definition at line 28 of file TSpectrum2Transform.h. ◆ fFilterCoeff. Double_t TSpectrum2Transform::fFilterCoeff. protected . value set in the filtered region ; Definition at line 27 of file TSpectrum2Transform.h. ◆ fSizeX. Int_t TSpectrum2Transform::fSizeX. protected . x length of transformed data ; Definition at line 18 of file TSpectrum2Transform.h. ◆ fSizeY. Int_t TSpectrum2Transform::fSizeY. protected . y length of transformed data ; Definition at line 19 of file TSpectrum2Transform.h. ◆ fTransformType. Int_t TSpectrum2Transform::fTransformType. protected . type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ; Definition at line 20 of file TSpectrum2Transform.h. ◆ fXmax. Int_t TSpectrum2Transform::fXmax. protected . last channel x of filtered or enhanced region ; Definition at line 24 of file TSpectrum2Transform.h. ◆ fXmin. Int_t TSpectrum2Transform::fXmin. protected . first channel x of filtered or enhanced region ; Definition at line 23 of file TSpectrum2Transform.h. ◆ fYmax. Int_t TSpectrum2Transform::fYmax. protected . last channel y of filtered or enhanced region ; Definition at line 26 of file TSpectrum2Transform.h. ◆ fYmin. Int_t TSpectrum2Transform::fYmin. protected . first channel y of filtered or enhanced region ; Definition at line 25 of file TSpectrum2Transform.h. Libraries for TSpectrum2Transform:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrum2Transform.h; hist/spectrum/src/TSpectrum2Transform.cxx. TSpectrum2Transform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:7515,Security,hash,hash,7515," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum2Transform.html:26109,Usability,clear,clear,26109,"rm.cxx. ◆ General2(). void TSpectrum2Transform::General2 ; (; Double_t ** ; working_matrix, . Double_t * ; working_vector, . Int_t ; numx, . Int_t ; numy, . Int_t ; direction, . Int_t ; type, . Int_t ; degree . ). protected . This function calculates generalized (mixed) 2D transforms Function parameters: . working_matrix-pointer to matrix of transformed data; working_vector-pointer to vector where the data are processed; numx,numy-lengths of processed data; direction-forward or inverse; type-type of transform (see manual); degree-degree of transform (see manual) . Definition at line 1040 of file TSpectrum2Transform.cxx. ◆ GeneralExe(). Int_t TSpectrum2Transform::GeneralExe ; (; Double_t * ; working_space, . Int_t ; zt_clear, . Int_t ; num, . Int_t ; degree, . Int_t ; type . ). protected . This function calculates generalized (mixed) transforms of different degrees. ; Function parameters:; working_space-pointer to vector of transformed data; zt_clear-flag to clear imaginary data before staring; num-length of processed data; degree-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 449 of file TSpectrum2Transform.cxx. ◆ GeneralInv(). Int_t TSpectrum2Transform::GeneralInv ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; degree, . Int_t ; type . ). protected . This function calculates inverse generalized (mixed) transforms Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; degree-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 566 of file TSpectrum2Transform.cxx. ◆ Haar(). void TSpectrum2Transform::Haar ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data. ; Function parameters:; working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 109 o",MatchSource.WIKI,doc/master/classTSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html
https://root.cern/doc/master/classTSpectrum3.html:1898,Availability,avail,available,1898,"ound estimation functions; Three-dimensional smoothing functions; Three-dimensional deconvolution functions; Three-dimensional peak search functions. The algorithms in this class have been published in the following references:; [1] M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; [2] M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; [3] M. Morhac et al.: Efficient algorithm of multidimensional deconvolution and its application to nuclear data processing. Digital Signal Processing, Vol. 13, No. 1, (2003), 144-171.; [4] M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125.; These NIM papers are also available as Postscript files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also the online documentation and tutorials. ; Definition at line 18 of file TSpectrum3.h. Public Types; enum  { kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSuccessiveFiltering =0; , kBackOneStepFiltering =1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum3",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:8581,Availability,error,error,8581,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:8670,Availability,error,error,8670,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:8825,Availability,error,error,8825,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:9122,Availability,error,error,9122,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:13206,Availability,error,error,13206,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:19680,Deployability,continuous,continuously,19680,"another dimension. For details we refer to [2].; Algorithm based on One Step Filtering; The algorithm is analogous to that for 2-dimensional data. For details we refer to TSpectrum2. New value in the estimated channel is calculated as \( a = \nu_{p-1}(i_1, i_2, i_3)\). \[; \nu_p(i_1, i_2, i_3) = min (a,b); \]. where p = 1, 2, ..., number_of_iterations.; References:; [1] C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience applications. NIM, B34 (1988), 396-402./; [2] M.Morhac, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.: Background elimination methods for multidimensional gamma-ray spectra. NIM, A401 (1997) 113-132.; Example 1- script Back3.c :. Fig. 1 Original three-dimensional gamma-gamma-gamma-ray spectrum. Fig. 2 Background estimated from data from Fig. 1 using decreasing clipping window with widths 5, 5, 5 and algorithm based on successive comparisons. The estimate includes not only continuously changing background but also one- and two-dimensional ridges. Fig. 3 Resulting peaks after subtraction of the estimated background (Fig. 2) from original three-dimensional gamma-gamma-gamma-ray spectrum (Fig. 1).; Script:; Example to illustrate the background estimator (class TSpectrum3). To execute this example, do:; root > .x Back3.C; void Back3() {; Int_t i, j, k;; Int_t nbinsx = 64;; Int_t nbinsy = 64;; Int_t nbinsz = 64;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Int_t zmin = 0;; Int_t zmax = nbinsz;; Double_t*** source = new Double_t**[nbinsx];; Double_t*** dest = new Double_t**[nbinsx];; for(i=0;i<nbinsx;i++){; source[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); source[i][j]=new Double_t[nbinsz];; }; for(i=0;i<nbinsx;i++){; dest[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); dest[i][j]=new Double_t[nbinsz];; }; TH3F *back = new TH3F(""back"",""Background estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax,nbinsz,zmin,zmax);; TFile *f = new TFile(""TSpec",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:36108,Deployability,continuous,continuous,36108,"n is carried out. It returns number of found peaks.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one- and two-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - peak - background in all dimensions) and their crossings; non-sensitivity to two-fold coincidences (coincidences peak - background - background in all dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M.Morhac, J. Kliman, V. Matouoek, M. ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:36443,Deployability,continuous,continuous,36443," manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one- and two-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - peak - background in all dimensions) and their crossings; non-sensitivity to two-fold coincidences (coincidences peak - background - background in all dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M.Morhac, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; [3] Z.K. Silagadze, A new algorithm for automatic photo-peak searches. NIM A 376 (1996), 451. Example of peak searching method; SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters.; Example 1",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:29127,Energy Efficiency,power,power,29127," TSpectrum3 *s = new TSpectrum3();; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; for (k = 0; k < nbinsz; k++){; source[i][j][k] = decon_in->GetBinContent(i + 1,j + 1,k + 1);; resp[i][j][k] = decon_resp->GetBinContent(i + 1,j + 1,k + 1);; }; }; }; s->Deconvolution(source,resp,nbinsx,nbinsy,nbinsz,100,1,1);; for (i = 0; i < nbinsx; i++){; for (j = 0; j < nbinsy; j++){; for (k = 0; k < nbinsz; k++){; decon_in->SetBinContent(i + 1,j + 1,k + 1, source[i][j][k]);; }; }; }; decon_in->Draw("""");; }; TSpectrum3::Deconvolutionconst char * Deconvolution(Double_t ***source, const Double_t ***resp, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t numberIterations, Int_t numberRepetitions, Double_t boost)This function calculates deconvolution from source spectrum according to response spectrum The result...Definition TSpectrum3.cxx:1599. Example 2 - script Decon_hr.c :; This example illustrates repeated Gold deconvolution with boosting. After every 10 iterations we apply power function with exponent = 2 to the spectrum given in Fig. 2. Fig. 4 Spectrum from Fig. 2 after boosted deconvolution (10 iterations repeated 10 times). It decomposes completely cluster of peaks from Fig 2.; Script:; Example to illustrate the Gold deconvolution (class TSpectrum3). To execute this example, do:; root > .x Decon3_hr.C; void Decon3_hr() {; Int_t i, j, k;; Int_t nbinsx = 32;; Int_t nbinsy = 32;; Int_t nbinsz = 32;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Int_t zmin = 0;; Int_t zmax = nbinsz;; Double_t*** source = new Double_t**[nbinsx];; Double_t*** resp = new Double_t**[nbinsx];; for(i=0;i<nbinsx;i++){; source[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); source[i][j]=new Double_t[nbinsz];; }; for(i=0;i<nbinsx;i++){; resp[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); resp[i][j]=new Double_t[nbinsz];; }; TH3F *decon_in = new TH3F(""decon_in"",""Deconvolution"",nbinsx,xmin,xmax,nbinsy,ymin,ymax,nbinsz,zmin,zmax);; TH3F *decon_resp = new TH3F(",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:461,Integrability,interface,interface,461,". ROOT: TSpectrum3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSpectrum3 Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 3-dimensional spectra processing functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum3 is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum3 might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions. Three-dimensional background estimation functions; Three-dimensional smoothing functions; Three-dimensional deconvolution functions; Three-dimensional peak search functions. The algorithms in this class have been published in the following references:; [1] M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; [2] M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; [3] M. Morhac et al.: Efficient algorithm of multidimensional deconvolution and its application to nuclear data processing. Digital Signal Processing, Vol. 13, No. 1, (2003), 144-171.; [4] M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125.; These NIM papers are also available as Postscript files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:602,Integrability,depend,depending,602,". ROOT: TSpectrum3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSpectrum3 Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 3-dimensional spectra processing functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum3 is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum3 might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions. Three-dimensional background estimation functions; Three-dimensional smoothing functions; Three-dimensional deconvolution functions; Three-dimensional peak search functions. The algorithms in this class have been published in the following references:; [1] M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; [2] M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; [3] M. Morhac et al.: Efficient algorithm of multidimensional deconvolution and its application to nuclear data processing. Digital Signal Processing, Vol. 13, No. 1, (2003), 144-171.; [4] M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125.; These NIM papers are also available as Postscript files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:8587,Integrability,message,message,8587,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:9128,Integrability,message,message,9128,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:10118,Integrability,message,message,10118,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:13212,Integrability,message,message,13212,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:13585,Integrability,message,message,13585," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:2242,Modifiability,inherit,inherited,2242,"ments and Methods in Physics Research A 401 (1997) 113-132.; [2] M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; [3] M. Morhac et al.: Efficient algorithm of multidimensional deconvolution and its application to nuclear data processing. Digital Signal Processing, Vol. 13, No. 1, (2003), 144-171.; [4] M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125.; These NIM papers are also available as Postscript files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also the online documentation and tutorials. ; Definition at line 18 of file TSpectrum3.h. Public Types; enum  { kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSuccessiveFiltering =0; , kBackOneStepFiltering =1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum3 ();  Constructor. ;  ;  TSpectrum3 (Int_t maxpositions, Double_t resolution=1);  ;  ~TSpectrum3 () override;  Destructor. ;  ; virtual const char * Background (const TH1 *hist, Int_t niter, Option_t *option=""goff"");  This function calculates background spectrum from source in h. ;  ; const char * Background (Double_t ***spectrum, Int_t ssizex, ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:5580,Modifiability,inherit,inherited,5580,"searches for peaks in source spectrum using the algorithm based on smoothed second differences. ;  ; Int_t SearchHighRes (const Double_t ***source, Double_t ***dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow);  This function searches for peaks in source spectrum It is based on deconvolution method. ;  ; void SetResolution (Double_t resolution=1);  NOT USED resolution: determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ;  ; const char * SmoothMarkov (Double_t ***source, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t averWindow);  This function calculates smoothed spectrum from source spectrum based on Markov chain method. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:7124,Modifiability,inherit,inherited,7124,"bjects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:8217,Modifiability,inherit,inheritance,8217,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:10216,Modifiability,inherit,inherits,10216,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:10333,Modifiability,inherit,inherits,10333,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:14086,Modifiability,inherit,inherited,14086,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X positions of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y positions of peaks ;  ; Double_t * fPositionZ;  [fNPeaks] Z positions of peaks ;  ; D",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:14296,Modifiability,inherit,inherited,14296,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X positions of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y positions of peaks ;  ; Double_t * fPositionZ;  [fNPeaks] Z positions of peaks ;  ; D",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:15296,Modifiability,inherit,inherited,15296,"ss ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X positions of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y positions of peaks ;  ; Double_t * fPositionZ;  [fNPeaks] Z positions of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum3.h>. Inheritance diagram for TSpectrum3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBackIncreasingWindow ; kBackDecreasingWindow ; kBackSuccessiveFiltering ; kBackOneStepFiltering . Definition at line 30 of file TSpectrum3.h. Constructor & Destructor Documentation. ◆ TSpectrum3() [1/2]. TSp",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:15403,Modifiability,inherit,inherited,15403,");  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X positions of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y positions of peaks ;  ; Double_t * fPositionZ;  [fNPeaks] Z positions of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum3.h>. Inheritance diagram for TSpectrum3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBackIncreasingWindow ; kBackDecreasingWindow ; kBackSuccessiveFiltering ; kBackOneStepFiltering . Definition at line 30 of file TSpectrum3.h. Constructor & Destructor Documentation. ◆ TSpectrum3() [1/2]. TSpectrum3::TSpectrum3 ; (; ). Constructor. ; Definition at line 60 of file TSpectrum3.cxx. ◆ TSpectrum3() [2/2]. TSpectrum3::TSpectrum3 ; (; Int_t ; maxpositions, . Double_t ; resolution = 1 . ). maxpositions: maximum number of peaks; resolution: NOT USED determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. Higher val",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:15502,Modifiability,inherit,inherited,15502,");  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TH1 * fHistogram;  resulting histogram ;  ; Int_t fMaxPeaks;  Maximum number of peaks to be found. ;  ; Int_t fNPeaks;  number of peaks found ;  ; Double_t * fPosition;  [fNPeaks] array of current peak positions ;  ; Double_t * fPositionX;  [fNPeaks] X positions of peaks ;  ; Double_t * fPositionY;  [fNPeaks] Y positions of peaks ;  ; Double_t * fPositionZ;  [fNPeaks] Z positions of peaks ;  ; Double_t fResolution;  NOT USED resolution of the neighboring peaks ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSpectrum3.h>. Inheritance diagram for TSpectrum3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBackIncreasingWindow ; kBackDecreasingWindow ; kBackSuccessiveFiltering ; kBackOneStepFiltering . Definition at line 30 of file TSpectrum3.h. Constructor & Destructor Documentation. ◆ TSpectrum3() [1/2]. TSpectrum3::TSpectrum3 ; (; ). Constructor. ; Definition at line 60 of file TSpectrum3.cxx. ◆ TSpectrum3() [2/2]. TSpectrum3::TSpectrum3 ; (; Int_t ; maxpositions, . Double_t ; resolution = 1 . ). maxpositions: maximum number of peaks; resolution: NOT USED determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. Higher val",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:34255,Modifiability,variab,variable,34255,"; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space.Definition TPolyMarker.h:31; . Definition at line 162 of file TSpectrum3.cxx. ◆ SearchFast(). Int_t TSpectrum3::SearchFast ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; markov, . Int_t ; averWindow . ). THREE-DIMENSIONAL CLASSICAL PEAK SEARCH FUNCTION This function searches for peaks in source spectrum using the algorithm based on smoothed second differences. ; Function parameters:; source-pointer to the matrix of source spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method) . Definition at line 3174 of file TSpectrum3.cxx. ◆ SearchHighRes(). Int_t TSpectrum3::SearchHighRes ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is car",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:35625,Modifiability,variab,variable,35625,".cxx. ◆ SearchHighRes(). Int_t TSpectrum3::SearchHighRes ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. It returns number of found peaks.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one- and two-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - p",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:35781,Modifiability,variab,variable,35781,".cxx. ◆ SearchHighRes(). Int_t TSpectrum3::SearchHighRes ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. It returns number of found peaks.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one- and two-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - p",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:42425,Modifiability,extend,extended,42425,"m; working_space-pointer to the working array; ssizex-x length of spectrum and working space arrays; ssizey-y length of spectrum and working space arrays; ssizey-z length of spectrum and working space arrays; averWindow-width of averaging smoothing window. Smoothing; Goal: Suppression of statistical fluctuations the algorithm is based on discrete Markov chain, which has very simple invariant distribution. \[; U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; \]. \(U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i = 1\) n is the length of the smoothed spectrum and ; \[; p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. is the probability of the change of the peak position from channel i to the channel i+1. \(A_i\) is the normalization constant so that \( p_{i,i-1}+p_{i,i+1}=1\) and m is a width of smoothing window. We have extended this algorithm to three dimensions.; Reference:; [1] Z.K. Silagadze, A new algorithm for automatic photo-peak searches. NIM A 376 (1996), 451-. Example 1 - script SmootMarkov3.c :. Fig. 1 Original noisy spectrum. Fig. 2 Smoothed spectrum with averaging window m=3.; Script:; Example to illustrate the Markov smoothing (class TSpectrum3). To execute this example, do:; root > .x SmoothMarkov3.C; void SmoothMarkov3() {; Int_t i, j, k;; Int_t nbinsx = 64;; Int_t nbinsy = 64;; Int_t nbinsz = 64;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Int_t zmin = 0;; Int_t zmax = nbinsz;; Double_t*** source = new Double_t**[nbinsx];; for(i=0;i<nbinsx;i++){; source[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); source[i][j]=new Double_t[nbinsz];; }; TH3F *sm = new TH3F(""Smoothing"",""Markov smoothing"",nbinsx,xmin,xmax,nbinsy,ymin,ymax,nbinsz,zmin,zmax);; TFile *f = new TFile(""TSpectrum3.root"");; sm=(TH3F*)f->Get(""back;1"");; TCanvas *Background = new TCanvas(""Smoothing"",""Markov s",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:37561,Performance,tune,tune,37561,"imensions) and their crossings; non-sensitivity to two-fold coincidences (coincidences peak - background - background in all dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M.Morhac, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; [3] Z.K. Silagadze, A new algorithm for automatic photo-peak searches. NIM A 376 (1996), 451. Example of peak searching method; SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters.; Example 1 - script Search3.c:. Fig. 1 Three-dimensional spectrum with 5 peaks (sigma=2, threshold=5%, 3 iterations steps in the deconvolution). Fig. 2 Spectrum from Fig. 1 after background elimination and deconvolution; Script:; Example to illustrate high resolution peak searching function (class TSpectrum3). To execute this example, do:; root > .x Search3.C; void Search3() {; Int_t i, j, k, nfound;; Int_t nbinsx = 32;; Int_t nbinsy = 32;; Int_t nbinsz = 32;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Int_t zmin = 0;; Int_t zmax = nbinsz;; Double_t*** source = new Double_t**[nbinsx];; Double_t*** dest = new Double_t**[nbinsx];; for(i=0;i<nbinsx;i++){; source[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); source[i][j]=new Double_t[nbinsz];; }; for(i=0;i<nbinsx;i++){; dest[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); dest[i][j]=new Double_t [nbinsz];; }; TH3F *search = new TH3F(""Search"",""Peak searching"",nbinsx,xmin,x",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:6448,Security,hash,hash,6448," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:37461,Security,access,access,37461,"the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - peak - background in all dimensions) and their crossings; non-sensitivity to two-fold coincidences (coincidences peak - background - background in all dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M.Morhac, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; [3] Z.K. Silagadze, A new algorithm for automatic photo-peak searches. NIM A 376 (1996), 451. Example of peak searching method; SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters.; Example 1 - script Search3.c:. Fig. 1 Three-dimensional spectrum with 5 peaks (sigma=2, threshold=5%, 3 iterations steps in the deconvolution). Fig. 2 Spectrum from Fig. 1 after background elimination and deconvolution; Script:; Example to illustrate high resolution peak searching function (class TSpectrum3). To execute this example, do:; root > .x Search3.C; void Search3() {; Int_t i, j, k, nfound;; Int_t nbinsx = 32;; Int_t nbinsy = 32;; Int_t nbinsz = 32;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Int_t zmin = 0;; Int_t zmax = nbinsz;; Double_t*** source = new Double_t**[nbinsx];; Double_t*** dest = new Double_t**[nbinsx];; for(i=0;i<nbinsx;i++){; source[i]=new Double_t*[nbinsy];; for(j=0;j<nbinsy;j++); source[i][j]=new Double_t[nbinsz];; }; for(i=0;i<nbinsx;i++){; dest[i]=new Double_t*[nbinsy",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:34247,Testability,log,logical,34247,"; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space.Definition TPolyMarker.h:31; . Definition at line 162 of file TSpectrum3.cxx. ◆ SearchFast(). Int_t TSpectrum3::SearchFast ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; markov, . Int_t ; averWindow . ). THREE-DIMENSIONAL CLASSICAL PEAK SEARCH FUNCTION This function searches for peaks in source spectrum using the algorithm based on smoothed second differences. ; Function parameters:; source-pointer to the matrix of source spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method) . Definition at line 3174 of file TSpectrum3.cxx. ◆ SearchHighRes(). Int_t TSpectrum3::SearchHighRes ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is car",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:35617,Testability,log,logical,35617,".cxx. ◆ SearchHighRes(). Int_t TSpectrum3::SearchHighRes ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. It returns number of found peaks.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one- and two-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - p",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:35773,Testability,log,logical,35773,".cxx. ◆ SearchHighRes(). Int_t TSpectrum3::SearchHighRes ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. It returns number of found peaks.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one- and two-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - p",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrum3.html:41820,Usability,simpl,simple,41820,": determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 229 of file TSpectrum3.cxx. ◆ SmoothMarkov(). const char * TSpectrum3::SmoothMarkov ; (; Double_t *** ; source, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Int_t ; averWindow . ). This function calculates smoothed spectrum from source spectrum based on Markov chain method. ; The result is placed in the array pointed by spectrum pointer.; Function parameters:; source-pointer to the array of source spectrum; working_space-pointer to the working array; ssizex-x length of spectrum and working space arrays; ssizey-y length of spectrum and working space arrays; ssizey-z length of spectrum and working space arrays; averWindow-width of averaging smoothing window. Smoothing; Goal: Suppression of statistical fluctuations the algorithm is based on discrete Markov chain, which has very simple invariant distribution. \[; U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; \]. \(U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i = 1\) n is the length of the smoothed spectrum and ; \[; p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. is the probability of the change of the peak position from channel i to the channel i+1. \(A_i\) is the normalization constant so that \( p_{i,i-1}+p_{i,i+1}=1\) and m is a width of smoothing window. We have extended this algorithm to three dimensions.; Reference:; [1] Z.K. Silagadze, A new algorithm for automatic photo-peak searches. NIM A 376 (1996), 451-. Example 1 - script SmootMarkov3.c :. Fig. 1 Original noisy spectrum. Fig. 2 Smoothed spectrum with averaging window m=3.; Script:; Example to illustrate the Markov smoothing (class TSpectrum3). To",MatchSource.WIKI,doc/master/classTSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html
https://root.cern/doc/master/classTSpectrumFit.html:3351,Availability,error,errors,3351,"enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumFit (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) ;  ;  TSpectrumFit (void);  Default constructor. ;  ;  ~TSpectrumFit () override;  Destructor. ;  ; void FitAwmi (Double_t *source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t *source);  This function fits the source spectrum. ;  ; Double_t * GetAmplitudes () const;  ; Double_t * GetAmplitudesErrors () const;  ; Double_t * GetAreas () const;  ; Double_t * GetAreasErrors () const;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &a1, Double_t &a1Err, Double_t &a2, Double_t &a2Err);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; Double_t * GetPositions () const;  ; Double_t * GetPositionsErrors () const;  ; void GetSigma (Double_t &sigma, Double_t &sigmaErr);  This function gets the sigma parameter and its error. ;  ; void GetTailParameters (Double_t &t, Double_t &tErr, Double_t &b, Double_t &bErr, Double_t &s, Double_t &sErr);  This function gets the tail parameters and their errors. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following f",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:3574,Availability,error,error,3574,"1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumFit (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) ;  ;  TSpectrumFit (void);  Default constructor. ;  ;  ~TSpectrumFit () override;  Destructor. ;  ; void FitAwmi (Double_t *source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t *source);  This function fits the source spectrum. ;  ; Double_t * GetAmplitudes () const;  ; Double_t * GetAmplitudesErrors () const;  ; Double_t * GetAreas () const;  ; Double_t * GetAreasErrors () const;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &a1, Double_t &a1Err, Double_t &a2, Double_t &a2Err);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; Double_t * GetPositions () const;  ; Double_t * GetPositionsErrors () const;  ; void GetSigma (Double_t &sigma, Double_t &sigmaErr);  This function gets the sigma parameter and its error. ;  ; void GetTailParameters (Double_t &t, Double_t &tErr, Double_t &b, Double_t &bErr, Double_t &s, Double_t &sErr);  This function gets the tail parameters and their errors. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following fitting parameters: ;  ; void SetPeakParameters (Double_t sigma, Bool_t fixSigma, const Double_t *positionInit, const Bool_t *fixPosition, const Double_t *ampInit, const Bool_t *fixAmp);  This function sets the following fitting parameters of peaks: ;  ; void SetTailParameters (Double",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:3748,Availability,error,errors,3748,"it (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) ;  ;  TSpectrumFit (void);  Default constructor. ;  ;  ~TSpectrumFit () override;  Destructor. ;  ; void FitAwmi (Double_t *source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t *source);  This function fits the source spectrum. ;  ; Double_t * GetAmplitudes () const;  ; Double_t * GetAmplitudesErrors () const;  ; Double_t * GetAreas () const;  ; Double_t * GetAreasErrors () const;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &a1, Double_t &a1Err, Double_t &a2, Double_t &a2Err);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; Double_t * GetPositions () const;  ; Double_t * GetPositionsErrors () const;  ; void GetSigma (Double_t &sigma, Double_t &sigmaErr);  This function gets the sigma parameter and its error. ;  ; void GetTailParameters (Double_t &t, Double_t &tErr, Double_t &b, Double_t &bErr, Double_t &s, Double_t &sErr);  This function gets the tail parameters and their errors. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following fitting parameters: ;  ; void SetPeakParameters (Double_t sigma, Bool_t fixSigma, const Double_t *positionInit, const Bool_t *fixPosition, const Double_t *ampInit, const Bool_t *fixAmp);  This function sets the following fitting parameters of peaks: ;  ; void SetTailParameters (Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS);  This function sets the following fitting parameters of tails of peaks. ;  ; void Streamer (TBuffer &) override;  Str",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:7880,Availability,error,error,7880,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:7969,Availability,error,error,7969,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:8124,Availability,error,error,8124,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:8421,Availability,error,error,8421,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:12505,Availability,error,error,12505,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:15303,Availability,error,error,15303,"erivative of background according to a1. ;  ; Double_t Dera2 (Double_t i);  Derivative of background according to a2. ;  ; Double_t Deramp (Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b);  This function calculates derivative of peak shape function (see manual) according to amplitude of peak. ;  ; Double_t Derb (Int_t num_of_fitted_peaks, Double_t i, const Double_t *parameter, Double_t sigma, Double_t t, Double_t b);  This function calculates derivative of peaks shape function (see manual) according to slope b. ;  ; Double_t Derderi0 (Double_t i, Double_t amp, Double_t i0, Double_t sigma);  This function calculates second derivative of peak shape function (see manual) according to peak position. ;  ; Double_t Derdersigma (Int_t num_of_fitted_peaks, Double_t i, const Double_t *parameter, Double_t sigma);  This function calculates second derivative of peaks shape function (see manual) according to sigma of peaks. ;  ; Double_t Derfc (Double_t x);  This function calculates derivative of error function of x. ;  ; Double_t Deri0 (Double_t i, Double_t amp, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b);  This function calculates derivative of peak shape function (see manual) according to peak position. ;  ; Double_t Derpa (Double_t sigma, Double_t t, Double_t b);  This function calculates derivative of the area of peak according to its amplitude. ;  ; Double_t Derpb (Double_t a, Double_t sigma, Double_t t, Double_t b);  This function calculates derivative of the area of peak according to b parameter. ;  ; Double_t Derpsigma (Double_t a, Double_t t, Double_t b);  This function calculates derivative of the area of peak according to sigma of peaks. ;  ; Double_t Derpt (Double_t a, Double_t sigma, Double_t b);  This function calculates derivative of the area of peak according to t parameter. ;  ; Double_t Ders (Int_t num_of_fitted_peaks, Double_t i, const Double_t *parameter, Double_t sigma);  This function calculates derivative o",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:17622,Availability,error,error,17622," *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:17859,Availability,error,error,17859," *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:18096,Availability,error,error,18096," *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:18646,Availability,error,errors,18646," *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:18867,Availability,error,errors,18867," *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:18965,Availability,error,error,18965," *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:20721,Availability,error,errors,20721," * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fSCalc;  calculated value of s parameter ;  ; Double_t fSErr;  error value of s parameter ;  ; Double_t fSigmaCalc;  calculated value of sigma parameter ;  ; Double_t fSigmaErr;  error value of sigma parameter ;  ; Double_t fSigmaInit;  initial value of sigma parameter ;  ; Double_t fSInit;  initial value of s parameter (relative amplitude of step), for details see html manual and references ;  ; Int_t fStatisticType;  type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ;  ;",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:21039,Availability,error,error,21039,"ons in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fSCalc;  calculated value of s parameter ;  ; Double_t fSErr;  error value of s parameter ;  ; Double_t fSigmaCalc;  calculated value of sigma parameter ;  ; Double_t fSigmaErr;  error value of sigma parameter ;  ; Double_t fSigmaInit;  initial value of sigma parameter ;  ; Double_t fSInit;  initial value of s parameter (relative amplitude of step), for details see html manual and references ;  ; Int_t fStatisticType;  type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ;  ; Double_t fTCalc;  calculated value of t parameter ;  ; Double_t fTErr;  error value of t parameter ;  ; Double_t fTInit;  initial value of t parameter (relative amplitude of tail), for details see html manual and references ;  ; Int_t fXmax;  last fitted channel ;  ; Int_t fXmin;  first fitted channel ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumFit.h>. Inheritance diagram for TSpectrumFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ;",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:21155,Availability,error,error,21155,"ons in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fSCalc;  calculated value of s parameter ;  ; Double_t fSErr;  error value of s parameter ;  ; Double_t fSigmaCalc;  calculated value of sigma parameter ;  ; Double_t fSigmaErr;  error value of sigma parameter ;  ; Double_t fSigmaInit;  initial value of sigma parameter ;  ; Double_t fSInit;  initial value of s parameter (relative amplitude of step), for details see html manual and references ;  ; Int_t fStatisticType;  type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ;  ; Double_t fTCalc;  calculated value of t parameter ;  ; Double_t fTErr;  error value of t parameter ;  ; Double_t fTInit;  initial value of t parameter (relative amplitude of tail), for details see html manual and references ;  ; Int_t fXmax;  last fitted channel ;  ; Int_t fXmin;  first fitted channel ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumFit.h>. Inheritance diagram for TSpectrumFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ;",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:21711,Availability,error,error,21711,"ons in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fSCalc;  calculated value of s parameter ;  ; Double_t fSErr;  error value of s parameter ;  ; Double_t fSigmaCalc;  calculated value of sigma parameter ;  ; Double_t fSigmaErr;  error value of sigma parameter ;  ; Double_t fSigmaInit;  initial value of sigma parameter ;  ; Double_t fSInit;  initial value of s parameter (relative amplitude of step), for details see html manual and references ;  ; Int_t fStatisticType;  type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ;  ; Double_t fTCalc;  calculated value of t parameter ;  ; Double_t fTErr;  error value of t parameter ;  ; Double_t fTInit;  initial value of t parameter (relative amplitude of tail), for details see html manual and references ;  ; Int_t fXmax;  last fitted channel ;  ; Int_t fXmin;  first fitted channel ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumFit.h>. Inheritance diagram for TSpectrumFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ;",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:26804,Availability,error,error,26804,"trumFit.cxx. ◆ Derderi0(). Double_t TSpectrumFit::Derderi0 ; (; Double_t ; i, . Double_t ; amp, . Double_t ; i0, . Double_t ; sigma . ). protected . This function calculates second derivative of peak shape function (see manual) according to peak position. ; Function parameters:; i-channel; amp-amplitude of peak; i0-position of peak; sigma-width of peak . Definition at line 305 of file TSpectrumFit.cxx. ◆ Derdersigma(). Double_t TSpectrumFit::Derdersigma ; (; Int_t ; num_of_fitted_peaks, . Double_t ; i, . const Double_t * ; parameter, . Double_t ; sigma . ). protected . This function calculates second derivative of peaks shape function (see manual) according to sigma of peaks. ; Function parameters:; num_of_fitted_peaks-number of fitted peaks; i-channel; parameter-array of peaks parameters (amplitudes and positions); sigma-sigma of peak . Definition at line 378 of file TSpectrumFit.cxx. ◆ Derfc(). Double_t TSpectrumFit::Derfc ; (; Double_t ; x). protected . This function calculates derivative of error function of x. ; Definition at line 202 of file TSpectrumFit.cxx. ◆ Deri0(). Double_t TSpectrumFit::Deri0 ; (; Double_t ; i, . Double_t ; amp, . Double_t ; i0, . Double_t ; sigma, . Double_t ; t, . Double_t ; s, . Double_t ; b . ). protected . This function calculates derivative of peak shape function (see manual) according to peak position. ; Function parameters:; i-channel; amp-amplitude of peak; i0-position of peak; sigma-sigma of peak; t, s-relative amplitudes; b-slope . Definition at line 268 of file TSpectrumFit.cxx. ◆ Derpa(). Double_t TSpectrumFit::Derpa ; (; Double_t ; sigma, . Double_t ; t, . Double_t ; b . ). protected . This function calculates derivative of the area of peak according to its amplitude. ; Function parameters:; sigma-sigma of peak; t-relative amplitudes; b-slope . Definition at line 594 of file TSpectrumFit.cxx. ◆ Derpb(). Double_t TSpectrumFit::Derpb ; (; Double_t ; a, . Double_t ; sigma, . Double_t ; t, . Double_t ; b . ). protected . This f",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:42632,Availability,error,errors,42632,"kerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1);; }; TSpectrumFit::FitStiefelvoid FitStiefel(Double_t *source)This function fits the source spectrum.Definition TSpectrumFit.cxx:1859. Definition at line 1859 of file TSpectrumFit.cxx. ◆ GetAmplitudes(). Double_t * TSpectrumFit::GetAmplitudes ; (; ); const. inline . Definition at line 116 of file TSpectrumFit.h. ◆ GetAmplitudesErrors(). Double_t * TSpectrumFit::GetAmplitudesErrors ; (; ); const. inline . Definition at line 117 of file TSpectrumFit.h. ◆ GetAreas(). Double_t * TSpectrumFit::GetAreas ; (; ); const. inline . Definition at line 118 of file TSpectrumFit.h. ◆ GetAreasErrors(). Double_t * TSpectrumFit::GetAreasErrors ; (; ); const. inline . Definition at line 119 of file TSpectrumFit.h. ◆ GetBackgroundParameters(). void TSpectrumFit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; a1, . Double_t & ; a1Err, . Double_t & ; a2, . Double_t & ; a2Err . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; a1 - gets the fitted value of a1 parameter; a1Err - gets error value of a1 parameter; a2 - gets the fitted value of a2 parameter; a2Err - gets error value of a2 parameter . Definition at line 2742 of file TSpectrumFit.cxx. ◆ GetChi(). Double_t TSpectrumFit::GetChi ; (; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:42699,Availability,error,error,42699,".Definition TSpectrumFit.cxx:1859. Definition at line 1859 of file TSpectrumFit.cxx. ◆ GetAmplitudes(). Double_t * TSpectrumFit::GetAmplitudes ; (; ); const. inline . Definition at line 116 of file TSpectrumFit.h. ◆ GetAmplitudesErrors(). Double_t * TSpectrumFit::GetAmplitudesErrors ; (; ); const. inline . Definition at line 117 of file TSpectrumFit.h. ◆ GetAreas(). Double_t * TSpectrumFit::GetAreas ; (; ); const. inline . Definition at line 118 of file TSpectrumFit.h. ◆ GetAreasErrors(). Double_t * TSpectrumFit::GetAreasErrors ; (; ); const. inline . Definition at line 119 of file TSpectrumFit.h. ◆ GetBackgroundParameters(). void TSpectrumFit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; a1, . Double_t & ; a1Err, . Double_t & ; a2, . Double_t & ; a2Err . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; a1 - gets the fitted value of a1 parameter; a1Err - gets error value of a1 parameter; a2 - gets the fitted value of a2 parameter; a2Err - gets error value of a2 parameter . Definition at line 2742 of file TSpectrumFit.cxx. ◆ GetChi(). Double_t TSpectrumFit::GetChi ; (; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr,",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:42785,Availability,error,error,42785,".Definition TSpectrumFit.cxx:1859. Definition at line 1859 of file TSpectrumFit.cxx. ◆ GetAmplitudes(). Double_t * TSpectrumFit::GetAmplitudes ; (; ); const. inline . Definition at line 116 of file TSpectrumFit.h. ◆ GetAmplitudesErrors(). Double_t * TSpectrumFit::GetAmplitudesErrors ; (; ); const. inline . Definition at line 117 of file TSpectrumFit.h. ◆ GetAreas(). Double_t * TSpectrumFit::GetAreas ; (; ); const. inline . Definition at line 118 of file TSpectrumFit.h. ◆ GetAreasErrors(). Double_t * TSpectrumFit::GetAreasErrors ; (; ); const. inline . Definition at line 119 of file TSpectrumFit.h. ◆ GetBackgroundParameters(). void TSpectrumFit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; a1, . Double_t & ; a1Err, . Double_t & ; a2, . Double_t & ; a2Err . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; a1 - gets the fitted value of a1 parameter; a1Err - gets error value of a1 parameter; a2 - gets the fitted value of a2 parameter; a2Err - gets error value of a2 parameter . Definition at line 2742 of file TSpectrumFit.cxx. ◆ GetChi(). Double_t TSpectrumFit::GetChi ; (; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr,",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:42871,Availability,error,error,42871,".Definition TSpectrumFit.cxx:1859. Definition at line 1859 of file TSpectrumFit.cxx. ◆ GetAmplitudes(). Double_t * TSpectrumFit::GetAmplitudes ; (; ); const. inline . Definition at line 116 of file TSpectrumFit.h. ◆ GetAmplitudesErrors(). Double_t * TSpectrumFit::GetAmplitudesErrors ; (; ); const. inline . Definition at line 117 of file TSpectrumFit.h. ◆ GetAreas(). Double_t * TSpectrumFit::GetAreas ; (; ); const. inline . Definition at line 118 of file TSpectrumFit.h. ◆ GetAreasErrors(). Double_t * TSpectrumFit::GetAreasErrors ; (; ); const. inline . Definition at line 119 of file TSpectrumFit.h. ◆ GetBackgroundParameters(). void TSpectrumFit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; a1, . Double_t & ; a1Err, . Double_t & ; a2, . Double_t & ; a2Err . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; a1 - gets the fitted value of a1 parameter; a1Err - gets error value of a1 parameter; a2 - gets the fitted value of a2 parameter; a2Err - gets error value of a2 parameter . Definition at line 2742 of file TSpectrumFit.cxx. ◆ GetChi(). Double_t TSpectrumFit::GetChi ; (; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr,",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:43473,Availability,error,error,43473,"Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; a1, . Double_t & ; a1Err, . Double_t & ; a2, . Double_t & ; a2Err . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; a1 - gets the fitted value of a1 parameter; a1Err - gets error value of a1 parameter; a2 - gets the fitted value of a2 parameter; a2Err - gets error value of a2 parameter . Definition at line 2742 of file TSpectrumFit.cxx. ◆ GetChi(). Double_t TSpectrumFit::GetChi ; (; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr, . Double_t & ; s, . Double_t & ; sErr . ). This function gets the tail parameters and their errors. . t - gets the fitted value of t parameter; tErr - gets error value of t parameter; b - gets the fitted value of b parameter; bErr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protecte",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:43548,Availability,error,error,43548,", . Double_t & ; a2, . Double_t & ; a2Err . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; a1 - gets the fitted value of a1 parameter; a1Err - gets error value of a1 parameter; a2 - gets the fitted value of a2 parameter; a2Err - gets error value of a2 parameter . Definition at line 2742 of file TSpectrumFit.cxx. ◆ GetChi(). Double_t TSpectrumFit::GetChi ; (; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr, . Double_t & ; s, . Double_t & ; sErr . ). This function gets the tail parameters and their errors. . t - gets the fitted value of t parameter; tErr - gets error value of t parameter; b - gets the fitted value of b parameter; bErr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . Power function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBac",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:43864,Availability,error,errors,43864,"f a2 parameter; a2Err - gets error value of a2 parameter . Definition at line 2742 of file TSpectrumFit.cxx. ◆ GetChi(). Double_t TSpectrumFit::GetChi ; (; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr, . Double_t & ; s, . Double_t & ; sErr . ). This function gets the tail parameters and their errors. . t - gets the fitted value of t parameter; tErr - gets error value of t parameter; b - gets the fitted value of b parameter; bErr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . Power function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBackgroundParameters(). void TSpectrumFit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; a1Init, . Bool_t ; fixA1, . Double_t ; a2Init, . Bool_t ; fixA2 . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is e",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:43928,Availability,error,error,43928,"; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr, . Double_t & ; s, . Double_t & ; sErr . ). This function gets the tail parameters and their errors. . t - gets the fitted value of t parameter; tErr - gets error value of t parameter; b - gets the fitted value of b parameter; bErr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . Power function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBackgroundParameters(). void TSpectrumFit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; a1Init, . Bool_t ; fixA1, . Double_t ; a2Init, . Bool_t ; fixA2 . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:44010,Availability,error,error,44010,"; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr, . Double_t & ; s, . Double_t & ; sErr . ). This function gets the tail parameters and their errors. . t - gets the fitted value of t parameter; tErr - gets error value of t parameter; b - gets the fitted value of b parameter; bErr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . Power function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBackgroundParameters(). void TSpectrumFit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; a1Init, . Bool_t ; fixA1, . Double_t ; a2Init, . Bool_t ; fixA2 . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:44092,Availability,error,error,44092,"; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of file TSpectrumFit.cxx. ◆ GetTailParameters(). void TSpectrumFit::GetTailParameters ; (; Double_t & ; t, . Double_t & ; tErr, . Double_t & ; b, . Double_t & ; bErr, . Double_t & ; s, . Double_t & ; sErr . ). This function gets the tail parameters and their errors. . t - gets the fitted value of t parameter; tErr - gets error value of t parameter; b - gets the fitted value of b parameter; bErr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . Power function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBackgroundParameters(). void TSpectrumFit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; a1Init, . Bool_t ; fixA1, . Double_t ; a2Init, . Bool_t ; fixA2 . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:49687,Availability,error,error,49687,"uations. ; The matrix a should have a dimension size*(size+4) The calling function should fill in the matrix, the column size should contain vector y (right side of the system of equations). The result is placed into size+1 column of the matrix. according to sigma of peaks.; Function parameters:; a-matrix with dimension size*(size+4); size-number of rows of the matrix . Definition at line 1723 of file TSpectrumFit.cxx. ◆ Streamer(). void TSpectrumFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrumFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 131 of file TSpectrumFit.h. Member Data Documentation. ◆ fA0Calc. Double_t TSpectrumFit::fA0Calc. protected . calculated value of background a0 parameter ; Definition at line 51 of file TSpectrumFit.h. ◆ fA0Err. Double_t TSpectrumFit::fA0Err. protected . error value of background a0 parameter ; Definition at line 52 of file TSpectrumFit.h. ◆ fA0Init. Double_t TSpectrumFit::fA0Init. protected . initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 50 of file TSpectrumFit.h. ◆ fA1Calc. Double_t TSpectrumFit::fA1Calc. protected . calculated value of background a1 parameter ; Definition at line 54 of file TSpectrumFit.h. ◆ fA1Err. Double_t TSpectrumFit::fA1Err. protected . error value of background a1 parameter ; Definition at line 55 of file TSpectrumFit.h. ◆ fA1Init. Double_t TSpectrumFit::fA1Init. protected . initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 53 of file TSpectrumFit.h. ◆ fA2Calc. Double_t TSpectrumFit::fA2Calc. protected . calculated value of background a2 parameter ; Definition at line 57 of file TSpectrumFit.h. ◆ fA2Err. Double_t TSpectrumFit::fA2Err. protected . error value of background a2 parameter ; Definition at line 58 of file TSpectrumFit.h. ◆ fA2Init",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:50160,Availability,error,error,50160,"ffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrumFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 131 of file TSpectrumFit.h. Member Data Documentation. ◆ fA0Calc. Double_t TSpectrumFit::fA0Calc. protected . calculated value of background a0 parameter ; Definition at line 51 of file TSpectrumFit.h. ◆ fA0Err. Double_t TSpectrumFit::fA0Err. protected . error value of background a0 parameter ; Definition at line 52 of file TSpectrumFit.h. ◆ fA0Init. Double_t TSpectrumFit::fA0Init. protected . initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 50 of file TSpectrumFit.h. ◆ fA1Calc. Double_t TSpectrumFit::fA1Calc. protected . calculated value of background a1 parameter ; Definition at line 54 of file TSpectrumFit.h. ◆ fA1Err. Double_t TSpectrumFit::fA1Err. protected . error value of background a1 parameter ; Definition at line 55 of file TSpectrumFit.h. ◆ fA1Init. Double_t TSpectrumFit::fA1Init. protected . initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 53 of file TSpectrumFit.h. ◆ fA2Calc. Double_t TSpectrumFit::fA2Calc. protected . calculated value of background a2 parameter ; Definition at line 57 of file TSpectrumFit.h. ◆ fA2Err. Double_t TSpectrumFit::fA2Err. protected . error value of background a2 parameter ; Definition at line 58 of file TSpectrumFit.h. ◆ fA2Init. Double_t TSpectrumFit::fA2Init. protected . initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 56 of file TSpectrumFit.h. ◆ fAlpha. Double_t TSpectrumFit::fAlpha. protected . convergence coefficient, input parameter, it should be positive number and <=1, for details see references ; Definition at line 28 of file TSpectrumFit.h. ◆ fAlphaOptim. Int_t TSpectrumFit::fAlphaOptim. protected . optimization of convergence ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:50633,Availability,error,error,50633," protected . error value of background a0 parameter ; Definition at line 52 of file TSpectrumFit.h. ◆ fA0Init. Double_t TSpectrumFit::fA0Init. protected . initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 50 of file TSpectrumFit.h. ◆ fA1Calc. Double_t TSpectrumFit::fA1Calc. protected . calculated value of background a1 parameter ; Definition at line 54 of file TSpectrumFit.h. ◆ fA1Err. Double_t TSpectrumFit::fA1Err. protected . error value of background a1 parameter ; Definition at line 55 of file TSpectrumFit.h. ◆ fA1Init. Double_t TSpectrumFit::fA1Init. protected . initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 53 of file TSpectrumFit.h. ◆ fA2Calc. Double_t TSpectrumFit::fA2Calc. protected . calculated value of background a2 parameter ; Definition at line 57 of file TSpectrumFit.h. ◆ fA2Err. Double_t TSpectrumFit::fA2Err. protected . error value of background a2 parameter ; Definition at line 58 of file TSpectrumFit.h. ◆ fA2Init. Double_t TSpectrumFit::fA2Init. protected . initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 56 of file TSpectrumFit.h. ◆ fAlpha. Double_t TSpectrumFit::fAlpha. protected . convergence coefficient, input parameter, it should be positive number and <=1, for details see references ; Definition at line 28 of file TSpectrumFit.h. ◆ fAlphaOptim. Int_t TSpectrumFit::fAlphaOptim. protected . optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrumFit.h. ◆ fAmpCalc. Double_t* TSpectrumFit::fAmpCalc. protected . [fNPeaks] array of calculated values of fitted amplitudes, output parameters ; Definition at line 34 of file TSpectrumFit.h. ◆ fAmpErr. Double_t* TSpectrumFit::fAmpErr. protected . [fNPeaks] array of amplitude errors ; Definition at line 35 of file TSpectrumFit.h. ◆ fAmpInit. Double_t* TSpectrumFit::fAmp",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:51580,Availability,error,errors,51580,"ouble_t TSpectrumFit::fA2Err. protected . error value of background a2 parameter ; Definition at line 58 of file TSpectrumFit.h. ◆ fA2Init. Double_t TSpectrumFit::fA2Init. protected . initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 56 of file TSpectrumFit.h. ◆ fAlpha. Double_t TSpectrumFit::fAlpha. protected . convergence coefficient, input parameter, it should be positive number and <=1, for details see references ; Definition at line 28 of file TSpectrumFit.h. ◆ fAlphaOptim. Int_t TSpectrumFit::fAlphaOptim. protected . optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrumFit.h. ◆ fAmpCalc. Double_t* TSpectrumFit::fAmpCalc. protected . [fNPeaks] array of calculated values of fitted amplitudes, output parameters ; Definition at line 34 of file TSpectrumFit.h. ◆ fAmpErr. Double_t* TSpectrumFit::fAmpErr. protected . [fNPeaks] array of amplitude errors ; Definition at line 35 of file TSpectrumFit.h. ◆ fAmpInit. Double_t* TSpectrumFit::fAmpInit. protected . [fNPeaks] array of initial values of peaks amplitudes, input parameters ; Definition at line 33 of file TSpectrumFit.h. ◆ fArea. Double_t* TSpectrumFit::fArea. protected . [fNPeaks] array of calculated areas of peaks ; Definition at line 36 of file TSpectrumFit.h. ◆ fAreaErr. Double_t* TSpectrumFit::fAreaErr. protected . [fNPeaks] array of errors of peak areas ; Definition at line 37 of file TSpectrumFit.h. ◆ fBCalc. Double_t TSpectrumFit::fBCalc. protected . calculated value of b parameter ; Definition at line 45 of file TSpectrumFit.h. ◆ fBErr. Double_t TSpectrumFit::fBErr. protected . error value of b parameter ; Definition at line 46 of file TSpectrumFit.h. ◆ fBInit. Double_t TSpectrumFit::fBInit. protected . initial value of b parameter (slope), for details see html manual and references ; Definition at line 44 of file TSpectrumFit.h. ◆ fChi. Double_t TSpectrumFit::fChi. protected",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:52035,Availability,error,errors,52035,"erences ; Definition at line 28 of file TSpectrumFit.h. ◆ fAlphaOptim. Int_t TSpectrumFit::fAlphaOptim. protected . optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrumFit.h. ◆ fAmpCalc. Double_t* TSpectrumFit::fAmpCalc. protected . [fNPeaks] array of calculated values of fitted amplitudes, output parameters ; Definition at line 34 of file TSpectrumFit.h. ◆ fAmpErr. Double_t* TSpectrumFit::fAmpErr. protected . [fNPeaks] array of amplitude errors ; Definition at line 35 of file TSpectrumFit.h. ◆ fAmpInit. Double_t* TSpectrumFit::fAmpInit. protected . [fNPeaks] array of initial values of peaks amplitudes, input parameters ; Definition at line 33 of file TSpectrumFit.h. ◆ fArea. Double_t* TSpectrumFit::fArea. protected . [fNPeaks] array of calculated areas of peaks ; Definition at line 36 of file TSpectrumFit.h. ◆ fAreaErr. Double_t* TSpectrumFit::fAreaErr. protected . [fNPeaks] array of errors of peak areas ; Definition at line 37 of file TSpectrumFit.h. ◆ fBCalc. Double_t TSpectrumFit::fBCalc. protected . calculated value of b parameter ; Definition at line 45 of file TSpectrumFit.h. ◆ fBErr. Double_t TSpectrumFit::fBErr. protected . error value of b parameter ; Definition at line 46 of file TSpectrumFit.h. ◆ fBInit. Double_t TSpectrumFit::fBInit. protected . initial value of b parameter (slope), for details see html manual and references ; Definition at line 44 of file TSpectrumFit.h. ◆ fChi. Double_t TSpectrumFit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrumFit.h. ◆ fFitTaylor. Int_t TSpectrumFit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:52288,Availability,error,error,52288," Double_t* TSpectrumFit::fAmpCalc. protected . [fNPeaks] array of calculated values of fitted amplitudes, output parameters ; Definition at line 34 of file TSpectrumFit.h. ◆ fAmpErr. Double_t* TSpectrumFit::fAmpErr. protected . [fNPeaks] array of amplitude errors ; Definition at line 35 of file TSpectrumFit.h. ◆ fAmpInit. Double_t* TSpectrumFit::fAmpInit. protected . [fNPeaks] array of initial values of peaks amplitudes, input parameters ; Definition at line 33 of file TSpectrumFit.h. ◆ fArea. Double_t* TSpectrumFit::fArea. protected . [fNPeaks] array of calculated areas of peaks ; Definition at line 36 of file TSpectrumFit.h. ◆ fAreaErr. Double_t* TSpectrumFit::fAreaErr. protected . [fNPeaks] array of errors of peak areas ; Definition at line 37 of file TSpectrumFit.h. ◆ fBCalc. Double_t TSpectrumFit::fBCalc. protected . calculated value of b parameter ; Definition at line 45 of file TSpectrumFit.h. ◆ fBErr. Double_t TSpectrumFit::fBErr. protected . error value of b parameter ; Definition at line 46 of file TSpectrumFit.h. ◆ fBInit. Double_t TSpectrumFit::fBInit. protected . initial value of b parameter (slope), for details see html manual and references ; Definition at line 44 of file TSpectrumFit.h. ◆ fChi. Double_t TSpectrumFit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrumFit.h. ◆ fFitTaylor. Int_t TSpectrumFit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFi",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:55322,Availability,error,errors,55322,"pectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 20 of file TSpectrumFit.h. ◆ fNumberIterations. Int_t TSpectrumFit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 21 of file TSpectrumFit.h. ◆ fPositionCalc. Double_t* TSpectrumFit::fPositionCalc. protected . [fNPeaks] array of calculated values of fitted positions, output parameters ; Definition at line 31 of file TSpectrumFit.h. ◆ fPositionErr. Double_t* TSpectrumFit::fPositionErr. protected . [fNPeaks] array of position errors ; Definition at line 32 of file TSpectrumFit.h. ◆ fPositionInit. Double_t* TSpectrumFit::fPositionInit. protected . [fNPeaks] array of initial values of peaks positions, input parameters ; Definition at line 30 of file TSpectrumFit.h. ◆ fPower. Int_t TSpectrumFit::fPower. protected . possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ; Definition at line 26 of file TSpectrumFit.h. ◆ fSCalc. Double_t TSpectrumFit::fSCalc. protected . calculated value of s parameter ; Definition at line 48 of file TSpectrumFit.h. ◆ fSErr. Double_t TSpectrumFit::fSErr. protected . error value of s parameter ; Definition at line 49 of file TSpectrumFit.h. ◆ fSigmaCalc. Double_t TSpectrumFit::fSigmaCalc. protected . calculated value of sigma parameter ; Definition at line 39 of file TSpectrumFit.h. ◆ fSigmaErr. Double_t TSpectrumFit::fSigmaErr. protected . error value of sigma parameter ; Definition at line 40 of file TSpectrumFit.h. ◆ fSigmaInit. Doubl",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:55957,Availability,error,error,55957,"finition at line 21 of file TSpectrumFit.h. ◆ fPositionCalc. Double_t* TSpectrumFit::fPositionCalc. protected . [fNPeaks] array of calculated values of fitted positions, output parameters ; Definition at line 31 of file TSpectrumFit.h. ◆ fPositionErr. Double_t* TSpectrumFit::fPositionErr. protected . [fNPeaks] array of position errors ; Definition at line 32 of file TSpectrumFit.h. ◆ fPositionInit. Double_t* TSpectrumFit::fPositionInit. protected . [fNPeaks] array of initial values of peaks positions, input parameters ; Definition at line 30 of file TSpectrumFit.h. ◆ fPower. Int_t TSpectrumFit::fPower. protected . possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ; Definition at line 26 of file TSpectrumFit.h. ◆ fSCalc. Double_t TSpectrumFit::fSCalc. protected . calculated value of s parameter ; Definition at line 48 of file TSpectrumFit.h. ◆ fSErr. Double_t TSpectrumFit::fSErr. protected . error value of s parameter ; Definition at line 49 of file TSpectrumFit.h. ◆ fSigmaCalc. Double_t TSpectrumFit::fSigmaCalc. protected . calculated value of sigma parameter ; Definition at line 39 of file TSpectrumFit.h. ◆ fSigmaErr. Double_t TSpectrumFit::fSigmaErr. protected . error value of sigma parameter ; Definition at line 40 of file TSpectrumFit.h. ◆ fSigmaInit. Double_t TSpectrumFit::fSigmaInit. protected . initial value of sigma parameter ; Definition at line 38 of file TSpectrumFit.h. ◆ fSInit. Double_t TSpectrumFit::fSInit. protected . initial value of s parameter (relative amplitude of step), for details see html manual and references ; Definition at line 47 of file TSpectrumFit.h. ◆ fStatisticType. Int_t TSpectrumFit::fStatisticType. protected . type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:56236,Availability,error,error,56236,"tionErr. protected . [fNPeaks] array of position errors ; Definition at line 32 of file TSpectrumFit.h. ◆ fPositionInit. Double_t* TSpectrumFit::fPositionInit. protected . [fNPeaks] array of initial values of peaks positions, input parameters ; Definition at line 30 of file TSpectrumFit.h. ◆ fPower. Int_t TSpectrumFit::fPower. protected . possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ; Definition at line 26 of file TSpectrumFit.h. ◆ fSCalc. Double_t TSpectrumFit::fSCalc. protected . calculated value of s parameter ; Definition at line 48 of file TSpectrumFit.h. ◆ fSErr. Double_t TSpectrumFit::fSErr. protected . error value of s parameter ; Definition at line 49 of file TSpectrumFit.h. ◆ fSigmaCalc. Double_t TSpectrumFit::fSigmaCalc. protected . calculated value of sigma parameter ; Definition at line 39 of file TSpectrumFit.h. ◆ fSigmaErr. Double_t TSpectrumFit::fSigmaErr. protected . error value of sigma parameter ; Definition at line 40 of file TSpectrumFit.h. ◆ fSigmaInit. Double_t TSpectrumFit::fSigmaInit. protected . initial value of sigma parameter ; Definition at line 38 of file TSpectrumFit.h. ◆ fSInit. Double_t TSpectrumFit::fSInit. protected . initial value of s parameter (relative amplitude of step), for details see html manual and references ; Definition at line 47 of file TSpectrumFit.h. ◆ fStatisticType. Int_t TSpectrumFit::fStatisticType. protected . type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrumFit.h. ◆ fTCalc. Double_t TSpectrumFit::fTCalc. protected . calculated value of t parameter ; Definition at line 42 of file TSpectrumFit.h. ◆ fTErr. Double_t TSpectrumFit::fTErr. protected . error value of t parameter ; Definition at line 43 of file TSpectrumFit.h. ◆ fTIn",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:57193,Availability,error,error,57193,"49 of file TSpectrumFit.h. ◆ fSigmaCalc. Double_t TSpectrumFit::fSigmaCalc. protected . calculated value of sigma parameter ; Definition at line 39 of file TSpectrumFit.h. ◆ fSigmaErr. Double_t TSpectrumFit::fSigmaErr. protected . error value of sigma parameter ; Definition at line 40 of file TSpectrumFit.h. ◆ fSigmaInit. Double_t TSpectrumFit::fSigmaInit. protected . initial value of sigma parameter ; Definition at line 38 of file TSpectrumFit.h. ◆ fSInit. Double_t TSpectrumFit::fSInit. protected . initial value of s parameter (relative amplitude of step), for details see html manual and references ; Definition at line 47 of file TSpectrumFit.h. ◆ fStatisticType. Int_t TSpectrumFit::fStatisticType. protected . type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrumFit.h. ◆ fTCalc. Double_t TSpectrumFit::fTCalc. protected . calculated value of t parameter ; Definition at line 42 of file TSpectrumFit.h. ◆ fTErr. Double_t TSpectrumFit::fTErr. protected . error value of t parameter ; Definition at line 43 of file TSpectrumFit.h. ◆ fTInit. Double_t TSpectrumFit::fTInit. protected . initial value of t parameter (relative amplitude of tail), for details see html manual and references ; Definition at line 41 of file TSpectrumFit.h. ◆ fXmax. Int_t TSpectrumFit::fXmax. protected . last fitted channel ; Definition at line 23 of file TSpectrumFit.h. ◆ fXmin. Int_t TSpectrumFit::fXmin. protected . first fitted channel ; Definition at line 22 of file TSpectrumFit.h. Libraries for TSpectrumFit:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrumFit.h; hist/spectrum/src/TSpectrumFit.cxx. TSpectrumFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:4125,Energy Efficiency,power,power,4125,"dParameters (Double_t &a0, Double_t &a0Err, Double_t &a1, Double_t &a1Err, Double_t &a2, Double_t &a2Err);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; Double_t * GetPositions () const;  ; Double_t * GetPositionsErrors () const;  ; void GetSigma (Double_t &sigma, Double_t &sigmaErr);  This function gets the sigma parameter and its error. ;  ; void GetTailParameters (Double_t &t, Double_t &tErr, Double_t &b, Double_t &bErr, Double_t &s, Double_t &sErr);  This function gets the tail parameters and their errors. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following fitting parameters: ;  ; void SetPeakParameters (Double_t sigma, Bool_t fixSigma, const Double_t *positionInit, const Bool_t *fixPosition, const Double_t *ampInit, const Bool_t *fixAmp);  This function sets the following fitting parameters of peaks: ;  ; void SetTailParameters (Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS);  This function sets the following fitting parameters of tails of peaks. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  M",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:23027,Energy Efficiency,allocate,allocates,23027,"Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumFit.h>. Inheritance diagram for TSpectrumFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ; kFitPower2 ; kFitPower4 ; kFitPower6 ; kFitPower8 ; kFitPower10 ; kFitPower12 ; kFitTaylorOrderFirst ; kFitTaylorOrderSecond ; kFitNumRegulCycles . Definition at line 70 of file TSpectrumFit.h. Constructor & Destructor Documentation. ◆ TSpectrumFit() [1/2]. TSpectrumFit::TSpectrumFit ; (; void ; ). Default constructor. ; Definition at line 37 of file TSpectrumFit.cxx. ◆ TSpectrumFit() [2/2]. TSpectrumFit::TSpectrumFit ; (; Int_t ; numberPeaks). numberPeaks: number of fitted peaks (must be greater than zero) ; the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class.; Shape function of the fitted peaks is. where a represents vector of fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes T, S and slope B). ; Definition at line 103 of file TSpectrumFit.cxx. ◆ ~TSpectrumFit(). TSpectrumFit::~TSpectrumFit ; (; ). override . Destructor. ; Definition at line 162 of file TSpectrumFit.cxx. Member Function Documentation. ◆ Area(). Double_t TSpectrumFit::Area ; (; Double_t ; a, . Double_t ; sigma, . Double_t ; t, . Double_t ; b . ). protected . This function calculates area of a peak Function parameters: . a-amplitude of the peak; sigma-sigma of peak; t-relative amplitude; b-slope . Definition at line 571 of file TSpectrumFit.cxx. ◆ Class(). static TClass * TSpectrumFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name()",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:37743,Energy Efficiency,power,power,37743,"ct named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space.Definition TPolyMarker.h:31; TSpectrumFitAdvanced 1-dimensional spectra fitting functions.Definition TSpectrumFit.h:18; TSpectrumFit::SetPeakParametersvoid SetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t *positionInit, const Bool_t *fixPosition, const Double_t *ampInit, const Bool_t *fixAmp)This function sets the following fitting parameters of peaks:Definition TSpectrumFit.cxx:2658; TSpectrumFit::FitAwmivoid FitAwmi(Double_t *source)This function fits the source spectrum.Definition TSpectrumFit.cxx:822; TSpectrumFit::TSpectrumFitTSpectrumFit(void)Default constructor.Definition TSpectrumFit.cxx:37; TSpectrumFit::GetAmplitudesDouble_t * GetAmplitudes() constDefinition TSpectrumFit.h:116; TSpectrumFit::SetFitParametersvoid SetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor)This function sets the following fitting parameters:Definition TSpectrumFit.cxx:2610; TSpectrumFit::kFitTaylorOrderFirst@ kFitTaylorOrderFirstDefinition TSpectrumFit.h:82; TSpectrumFit::kFitAlphaHalving@ kFitAlphaHalvingDefinition TSpectrumFit.h:74; TSpectrumFit::kFitOptimChiCounts@ kFitOptimChiCountsDefinition TSpectrumFit.h:71; TSpectrumFit::kFitPower2@ kFitPower2Definition TSpectrumFit.h:76; TSpectrumFit::GetPositionsDouble_t * GetPositions() constDefinition TSpectrumFit.h:122; TSpectrumAdvanced Spectra Processing.Definition TSpectrum.h:18; TSpectrum::SearchHighResInt_t SearchHighRes(Double_t *source, Double_t *destVector, Int_t ssize, Double_t sigma, Double_t threshold, bool backgroundRemove, Int_t deconIterations, bool markov, Int_t averWindow)One-dimensional high-resolution peak search function.Definition TSpectrum.cxx:2119; TSpectrum::GetPositionXDouble_t * GetPositionX() constDefinition TSpectrum.h:58; bool; double; int. ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:45462,Energy Efficiency,power,power,45462," function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBackgroundParameters(). void TSpectrumFit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; a1Init, . Bool_t ; fixA1, . Double_t ; a2Init, . Bool_t ; fixA2 . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter; fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); a2Init - initial value of a2 parameter; fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit) . Definition at line 2693 of file TSpectrumFit.cxx. ◆ SetFitParameters(). void TSpectrumFit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 2610 of file TSpectrumFit.cxx. ◆ SetPeakParameters(). void TSpectrumFit::SetPeakParameters",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:46088,Energy Efficiency,power,power,46088,"a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter; fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); a2Init - initial value of a2 parameter; fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit) . Definition at line 2693 of file TSpectrumFit.cxx. ◆ SetFitParameters(). void TSpectrumFit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 2610 of file TSpectrumFit.cxx. ◆ SetPeakParameters(). void TSpectrumFit::SetPeakParameters ; (; Double_t ; sigma, . Bool_t ; fixSigma, . const Double_t * ; positionInit, . const Bool_t * ; fixPosition, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp . ). This function sets the following fitting parameters of peaks: . sigma - initial value of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array o",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:494,Integrability,interface,interface,494,". ROOT: TSpectrumFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrumFit Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 1-dimensional spectra fitting functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrumFit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumFit might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class for fitting 1D spectra using AWMI (algorithm without matrix inversion) and conjugate gradient algorithms for symmetrical matrices (Stiefel-Hestens method). AWMI method allows to fit simultaneously 100s up to 1000s peaks. Stiefel method is very stable, it converges faster, but is more time consuming; The algorithms in this class have been published in the following references:; M. Morhac et al.: Efficient fitting algorithms applied to analysis of coincidence gamma-ray spectra. Computer Physics Communications, Vol 172/1 (2005) pp. 19-41.; M. Morhac et al.: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in gamma-ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. . Definition at line 18 of file TSpectrumFit.h. Public Types; enum  { ;   kFitOptimChiCounts =0; , kFitOptimChiFuncValues =1; , kFitOptimMaxLikelihood =2; , kFitAlphaHalving =0; , ;   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  Public ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:635,Integrability,depend,depending,635,". ROOT: TSpectrumFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrumFit Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 1-dimensional spectra fitting functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrumFit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumFit might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class for fitting 1D spectra using AWMI (algorithm without matrix inversion) and conjugate gradient algorithms for symmetrical matrices (Stiefel-Hestens method). AWMI method allows to fit simultaneously 100s up to 1000s peaks. Stiefel method is very stable, it converges faster, but is more time consuming; The algorithms in this class have been published in the following references:; M. Morhac et al.: Efficient fitting algorithms applied to analysis of coincidence gamma-ray spectra. Computer Physics Communications, Vol 172/1 (2005) pp. 19-41.; M. Morhac et al.: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in gamma-ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. . Definition at line 18 of file TSpectrumFit.h. Public Types; enum  { ;   kFitOptimChiCounts =0; , kFitOptimChiFuncValues =1; , kFitOptimMaxLikelihood =2; , kFitAlphaHalving =0; , ;   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  Public ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:7886,Integrability,message,message,7886,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:8427,Integrability,message,message,8427,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:9417,Integrability,message,message,9417,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:12511,Integrability,message,message,12511,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:12884,Integrability,message,message,12884," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:2007,Modifiability,inherit,inherited,2007,"Stiefel method is very stable, it converges faster, but is more time consuming; The algorithms in this class have been published in the following references:; M. Morhac et al.: Efficient fitting algorithms applied to analysis of coincidence gamma-ray spectra. Computer Physics Communications, Vol 172/1 (2005) pp. 19-41.; M. Morhac et al.: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in gamma-ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. . Definition at line 18 of file TSpectrumFit.h. Public Types; enum  { ;   kFitOptimChiCounts =0; , kFitOptimChiFuncValues =1; , kFitOptimMaxLikelihood =2; , kFitAlphaHalving =0; , ;   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumFit (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) ;  ;  TSpectrumFit (void);  Default constructor. ;  ;  ~TSpectrumFit () override;  Destructor. ;  ; void FitAwmi (Double_t *source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t *source);  This function fits the source spectrum. ;  ; Double_t * GetAmplitudes () const;  ; Double_t * GetAmplitudesErr",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:4795,Modifiability,inherit,inherited,4795,"arameters (Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following fitting parameters: ;  ; void SetPeakParameters (Double_t sigma, Bool_t fixSigma, const Double_t *positionInit, const Bool_t *fixPosition, const Double_t *ampInit, const Bool_t *fixAmp);  This function sets the following fitting parameters of peaks: ;  ; void SetTailParameters (Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS);  This function sets the following fitting parameters of tails of peaks. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:6423,Modifiability,inherit,inherited,6423,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:7516,Modifiability,inherit,inheritance,7516,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:9515,Modifiability,inherit,inherits,9515,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:9632,Modifiability,inherit,inherits,9632,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:13385,Modifiability,inherit,inherited,13385,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Double_t Area (Double_t a, Double_t sigma, Double_t t, Double_t b);  This function calculates area of a peak Function parameters: ;  ; Double_t Dera1 (Double_t i);  Derivative of background according to a1. ;  ; Double_t Dera2 (Double_t i);  Derivative of background according to a2. ;  ; Double_t Deramp (Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b);  This fu",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:13595,Modifiability,inherit,inherited,13595,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Double_t Area (Double_t a, Double_t sigma, Double_t t, Double_t b);  This function calculates area of a peak Function parameters: ;  ; Double_t Dera1 (Double_t i);  Derivative of background according to a1. ;  ; Double_t Dera2 (Double_t i);  Derivative of background according to a2. ;  ; Double_t Deramp (Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b);  This fu",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:17331,Modifiability,inherit,inherited,17331,"peaks, Double_t i, const Double_t *parameter, Double_t sigma, Double_t t, Double_t s, Double_t b);  This function calculates derivative of peaks shape function (see manual) according to sigma of peaks. ;  ; Double_t Dert (Int_t num_of_fitted_peaks, Double_t i, const Double_t *parameter, Double_t sigma, Double_t b);  This function calculates derivative of peaks shape function (see manual) according to relative amplitude t. ;  ; Double_t Erfc (Double_t x);  ; Double_t Ourpowl (Double_t a, Int_t pw);  Power function. ;  ; Double_t Shape (Int_t num_of_fitted_peaks, Double_t i, const Double_t *parameter, Double_t sigma, Double_t t, Double_t s, Double_t b, Double_t a0, Double_t a1, Double_t a2);  This function calculates peaks shape function (see manual) Function parameters: ;  ; void StiefelInversion (Double_t **a, Int_t rozmer);  This function calculates solution of the system of linear equations. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOp",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:21969,Modifiability,inherit,inherited,21969,"ons in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fSCalc;  calculated value of s parameter ;  ; Double_t fSErr;  error value of s parameter ;  ; Double_t fSigmaCalc;  calculated value of sigma parameter ;  ; Double_t fSigmaErr;  error value of sigma parameter ;  ; Double_t fSigmaInit;  initial value of sigma parameter ;  ; Double_t fSInit;  initial value of s parameter (relative amplitude of step), for details see html manual and references ;  ; Int_t fStatisticType;  type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ;  ; Double_t fTCalc;  calculated value of t parameter ;  ; Double_t fTErr;  error value of t parameter ;  ; Double_t fTInit;  initial value of t parameter (relative amplitude of tail), for details see html manual and references ;  ; Int_t fXmax;  last fitted channel ;  ; Int_t fXmin;  first fitted channel ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumFit.h>. Inheritance diagram for TSpectrumFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ;",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:22076,Modifiability,inherit,inherited,22076,"alc;  calculated value of sigma parameter ;  ; Double_t fSigmaErr;  error value of sigma parameter ;  ; Double_t fSigmaInit;  initial value of sigma parameter ;  ; Double_t fSInit;  initial value of s parameter (relative amplitude of step), for details see html manual and references ;  ; Int_t fStatisticType;  type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ;  ; Double_t fTCalc;  calculated value of t parameter ;  ; Double_t fTErr;  error value of t parameter ;  ; Double_t fTInit;  initial value of t parameter (relative amplitude of tail), for details see html manual and references ;  ; Int_t fXmax;  last fitted channel ;  ; Int_t fXmin;  first fitted channel ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumFit.h>. Inheritance diagram for TSpectrumFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ; kFitPower2 ; kFitPower4 ; kFitPower6 ; kFitPower8 ; kFitPower10 ; kFitPower12 ; kFitTaylorOrderFirst ; kFitTaylorOrderSecond ; kFitNumRegulCycles . Definition at line 70 of file TSpectrumFit.h. Constructor & Destructor Documentation. ◆ TSpectrumFit() [1/2]. TSpectrumFit::TSpectrumFit ; (; void ; ). Default constructor. ; Definition at line 37 of file TSpectrumFit.cxx. ◆ TSpectrumFit() [2/2]. TSpectrumFit::TSpectrumFit ; (; Int_t ; numberPeaks). numberPeaks: number of fitted peaks (must be greater than zero) ; the constructor allocates arrays for all fitted parameters (peak positions, ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:23123,Modifiability,variab,variables,23123,"Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumFit.h>. Inheritance diagram for TSpectrumFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ; kFitPower2 ; kFitPower4 ; kFitPower6 ; kFitPower8 ; kFitPower10 ; kFitPower12 ; kFitTaylorOrderFirst ; kFitTaylorOrderSecond ; kFitNumRegulCycles . Definition at line 70 of file TSpectrumFit.h. Constructor & Destructor Documentation. ◆ TSpectrumFit() [1/2]. TSpectrumFit::TSpectrumFit ; (; void ; ). Default constructor. ; Definition at line 37 of file TSpectrumFit.cxx. ◆ TSpectrumFit() [2/2]. TSpectrumFit::TSpectrumFit ; (; Int_t ; numberPeaks). numberPeaks: number of fitted peaks (must be greater than zero) ; the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class.; Shape function of the fitted peaks is. where a represents vector of fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes T, S and slope B). ; Definition at line 103 of file TSpectrumFit.cxx. ◆ ~TSpectrumFit(). TSpectrumFit::~TSpectrumFit ; (; ). override . Destructor. ; Definition at line 162 of file TSpectrumFit.cxx. Member Function Documentation. ◆ Area(). Double_t TSpectrumFit::Area ; (; Double_t ; a, . Double_t ; sigma, . Double_t ; t, . Double_t ; b . ). protected . This function calculates area of a peak Function parameters: . a-amplitude of the peak; sigma-sigma of peak; t-relative amplitude; b-slope . Definition at line 571 of file TSpectrumFit.cxx. ◆ Class(). static TClass * TSpectrumFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name()",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:23179,Modifiability,variab,variables,23179,"SpectrumFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFitOptimChiCounts ; kFitOptimChiFuncValues ; kFitOptimMaxLikelihood ; kFitAlphaHalving ; kFitAlphaOptimal ; kFitPower2 ; kFitPower4 ; kFitPower6 ; kFitPower8 ; kFitPower10 ; kFitPower12 ; kFitTaylorOrderFirst ; kFitTaylorOrderSecond ; kFitNumRegulCycles . Definition at line 70 of file TSpectrumFit.h. Constructor & Destructor Documentation. ◆ TSpectrumFit() [1/2]. TSpectrumFit::TSpectrumFit ; (; void ; ). Default constructor. ; Definition at line 37 of file TSpectrumFit.cxx. ◆ TSpectrumFit() [2/2]. TSpectrumFit::TSpectrumFit ; (; Int_t ; numberPeaks). numberPeaks: number of fitted peaks (must be greater than zero) ; the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class.; Shape function of the fitted peaks is. where a represents vector of fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes T, S and slope B). ; Definition at line 103 of file TSpectrumFit.cxx. ◆ ~TSpectrumFit(). TSpectrumFit::~TSpectrumFit ; (; ). override . Destructor. ; Definition at line 162 of file TSpectrumFit.cxx. Member Function Documentation. ◆ Area(). Double_t TSpectrumFit::Area ; (; Double_t ; a, . Double_t ; sigma, . Double_t ; t, . Double_t ; b . ). protected . This function calculates area of a peak Function parameters: . a-amplitude of the peak; sigma-sigma of peak; t-relative amplitude; b-slope . Definition at line 571 of file TSpectrumFit.cxx. ◆ Class(). static TClass * TSpectrumFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSpectrumFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpectrumF",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:18397,Performance,optimiz,optimization,18397," *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:45997,Performance,optimiz,optimization,45997,"a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter; fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); a2Init - initial value of a2 parameter; fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit) . Definition at line 2693 of file TSpectrumFit.cxx. ◆ SetFitParameters(). void TSpectrumFit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 2610 of file TSpectrumFit.cxx. ◆ SetPeakParameters(). void TSpectrumFit::SetPeakParameters ; (; Double_t ; sigma, . Bool_t ; fixSigma, . const Double_t * ; positionInit, . const Bool_t * ; fixPosition, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp . ). This function sets the following fitting parameters of peaks: . sigma - initial value of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array o",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:51174,Performance,optimiz,optimization,51174,"it.h. ◆ fA1Init. Double_t TSpectrumFit::fA1Init. protected . initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 53 of file TSpectrumFit.h. ◆ fA2Calc. Double_t TSpectrumFit::fA2Calc. protected . calculated value of background a2 parameter ; Definition at line 57 of file TSpectrumFit.h. ◆ fA2Err. Double_t TSpectrumFit::fA2Err. protected . error value of background a2 parameter ; Definition at line 58 of file TSpectrumFit.h. ◆ fA2Init. Double_t TSpectrumFit::fA2Init. protected . initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 56 of file TSpectrumFit.h. ◆ fAlpha. Double_t TSpectrumFit::fAlpha. protected . convergence coefficient, input parameter, it should be positive number and <=1, for details see references ; Definition at line 28 of file TSpectrumFit.h. ◆ fAlphaOptim. Int_t TSpectrumFit::fAlphaOptim. protected . optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrumFit.h. ◆ fAmpCalc. Double_t* TSpectrumFit::fAmpCalc. protected . [fNPeaks] array of calculated values of fitted amplitudes, output parameters ; Definition at line 34 of file TSpectrumFit.h. ◆ fAmpErr. Double_t* TSpectrumFit::fAmpErr. protected . [fNPeaks] array of amplitude errors ; Definition at line 35 of file TSpectrumFit.h. ◆ fAmpInit. Double_t* TSpectrumFit::fAmpInit. protected . [fNPeaks] array of initial values of peaks amplitudes, input parameters ; Definition at line 33 of file TSpectrumFit.h. ◆ fArea. Double_t* TSpectrumFit::fArea. protected . [fNPeaks] array of calculated areas of peaks ; Definition at line 36 of file TSpectrumFit.h. ◆ fAreaErr. Double_t* TSpectrumFit::fAreaErr. protected . [fNPeaks] array of errors of peak areas ; Definition at line 37 of file TSpectrumFit.h. ◆ fBCalc. Double_t TSpectrumFit::fBCalc. protected . calculated value of b parameter ; Definition at line 45 of file TSpectrumFit.h. ◆ fB",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:5663,Security,hash,hash,5663," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:19348,Testability,log,logical,19348," Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeak",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:19448,Testability,log,logical,19448,"phaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations; ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:19548,Testability,log,logical,19548,"put parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPosit",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:19670,Testability,log,logical,19670,"fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPos",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:19811,Testability,log,logical,19811,"of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions,",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:19937,Testability,log,logical,19937," ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fi",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:20077,Testability,log,logical,20077,"al and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fSCalc;  calculated value of s parameter ;  ; Double_t fSErr;  error value of s parameter ;  ; Double_t",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:20179,Testability,log,logical,20179,"ylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fSCalc;  calculated value of s parameter ;  ; Double_t fSErr;  error value of s parameter ;  ; Double_t fSigmaCalc;  calculated value of sigma parameter ;  ; Double_t fSigmaErr;  error value of sigma parameter ;  ; Double_t fSigmaI",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:20281,Testability,log,logical,20281,"fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA1;  logical value of a1 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixA2;  logical value of a2 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ;  ; Bool_t fFixB;  logical value of b parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPosition;  [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ;  ; Bool_t fFixS;  logical value of s parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigma;  logical value of sigma parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixT;  logical value of t parameter, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalc;  [fNPeaks] array of calculated values of fitted positions, output parameters ;  ; Double_t * fPositionErr;  [fNPeaks] array of position errors ;  ; Double_t * fPositionInit;  [fNPeaks] array of initial values of peaks positions, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fSCalc;  calculated value of s parameter ;  ; Double_t fSErr;  error value of s parameter ;  ; Double_t fSigmaCalc;  calculated value of sigma parameter ;  ; Double_t fSigmaErr;  error value of sigma parameter ;  ; Double_t fSigmaInit;  initial value of sigma parameter ;  ; Double_t fSInit;  initial value of s parameter (relative a",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:44880,Testability,log,logical,44880,"rr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . Power function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBackgroundParameters(). void TSpectrumFit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; a1Init, . Bool_t ; fixA1, . Double_t ; a2Init, . Bool_t ; fixA2 . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter; fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); a2Init - initial value of a2 parameter; fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit) . Definition at line 2693 of file TSpectrumFit.cxx. ◆ SetFitParameters(). void TSpectrumFit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - opt",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:45007,Testability,log,logical,45007,"rr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . Power function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBackgroundParameters(). void TSpectrumFit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; a1Init, . Bool_t ; fixA1, . Double_t ; a2Init, . Bool_t ; fixA2 . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter; fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); a2Init - initial value of a2 parameter; fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit) . Definition at line 2693 of file TSpectrumFit.cxx. ◆ SetFitParameters(). void TSpectrumFit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - opt",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:45134,Testability,log,logical,45134,"rr - gets error value of b parameter; s - gets the fitted value of s parameter; sErr - gets error value of s parameter . Definition at line 2762 of file TSpectrumFit.cxx. ◆ IsA(). TClass * TSpectrumFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 131 of file TSpectrumFit.h. ◆ Ourpowl(). Double_t TSpectrumFit::Ourpowl ; (; Double_t ; a, . Int_t ; pw . ). protected . Power function. ; Definition at line 676 of file TSpectrumFit.cxx. ◆ SetBackgroundParameters(). void TSpectrumFit::SetBackgroundParameters ; (; Double_t ; a0Init, . Bool_t ; fixA0, . Double_t ; a1Init, . Bool_t ; fixA1, . Double_t ; a2Init, . Bool_t ; fixA2 . ). This function sets the following fitting parameters of background: . a0Init - initial value of a0 parameter (background is estimated as a0+a1*x+a2*x*x); fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); a1Init - initial value of a1 parameter; fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); a2Init - initial value of a2 parameter; fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit) . Definition at line 2693 of file TSpectrumFit.cxx. ◆ SetFitParameters(). void TSpectrumFit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - opt",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:46752,Testability,log,logical,46752," weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 2610 of file TSpectrumFit.cxx. ◆ SetPeakParameters(). void TSpectrumFit::SetPeakParameters ; (; Double_t ; sigma, . Bool_t ; fixSigma, . const Double_t * ; positionInit, . const Bool_t * ; fixPosition, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp . ). This function sets the following fitting parameters of peaks: . sigma - initial value of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array of initial values of peaks positions; fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional . Definition at line 2658 of file TSpectrumFit.cxx. ◆ SetTailParameters(). void TSpectrumFit::SetTailParameters ; (; Double_t ; tInit, . Bool_t ; fixT, . Double_t ; bInit, . Bool_t ; fixB, . Double_t ; sInit, . Bool_t ; fixS . ). This function sets the following fitting parameters of tails of peaks. . tInit - initial value of t parameter; fixT - logical value of t parameter, which allows to fix the parameter (not to fit); bInit - initial value of b parameter; fixB - logical value of b parameter, which allows to fix the parameter (not to fit); sInit - initial value of s parameter; fixS - logical value ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:46916,Testability,log,logical,46916," weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 2610 of file TSpectrumFit.cxx. ◆ SetPeakParameters(). void TSpectrumFit::SetPeakParameters ; (; Double_t ; sigma, . Bool_t ; fixSigma, . const Double_t * ; positionInit, . const Bool_t * ; fixPosition, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp . ). This function sets the following fitting parameters of peaks: . sigma - initial value of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array of initial values of peaks positions; fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional . Definition at line 2658 of file TSpectrumFit.cxx. ◆ SetTailParameters(). void TSpectrumFit::SetTailParameters ; (; Double_t ; tInit, . Bool_t ; fixT, . Double_t ; bInit, . Bool_t ; fixB, . Double_t ; sInit, . Bool_t ; fixS . ). This function sets the following fitting parameters of tails of peaks. . tInit - initial value of t parameter; fixT - logical value of t parameter, which allows to fix the parameter (not to fit); bInit - initial value of b parameter; fixB - logical value of b parameter, which allows to fix the parameter (not to fit); sInit - initial value of s parameter; fixS - logical value ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:47111,Testability,log,logical,47111,"lues kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 2610 of file TSpectrumFit.cxx. ◆ SetPeakParameters(). void TSpectrumFit::SetPeakParameters ; (; Double_t ; sigma, . Bool_t ; fixSigma, . const Double_t * ; positionInit, . const Bool_t * ; fixPosition, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp . ). This function sets the following fitting parameters of peaks: . sigma - initial value of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array of initial values of peaks positions; fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional . Definition at line 2658 of file TSpectrumFit.cxx. ◆ SetTailParameters(). void TSpectrumFit::SetTailParameters ; (; Double_t ; tInit, . Bool_t ; fixT, . Double_t ; bInit, . Bool_t ; fixB, . Double_t ; sInit, . Bool_t ; fixS . ). This function sets the following fitting parameters of tails of peaks. . tInit - initial value of t parameter; fixT - logical value of t parameter, which allows to fix the parameter (not to fit); bInit - initial value of b parameter; fixB - logical value of b parameter, which allows to fix the parameter (not to fit); sInit - initial value of s parameter; fixS - logical value of s parameter, which allows to fix the parameter (not to fit) . Definition at line 2712 of file TSpectrumFit.cxx. ◆ Shape(). Double_t TSpectrumFit::Shape ; (; Int_t ; num_of_fitted_peaks, . Double_t ; i, . const Double_t * ; parameter, . Double_t ; sigma, . Double_t",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:47580,Testability,log,logical,47580,"e of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array of initial values of peaks positions; fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional . Definition at line 2658 of file TSpectrumFit.cxx. ◆ SetTailParameters(). void TSpectrumFit::SetTailParameters ; (; Double_t ; tInit, . Bool_t ; fixT, . Double_t ; bInit, . Bool_t ; fixB, . Double_t ; sInit, . Bool_t ; fixS . ). This function sets the following fitting parameters of tails of peaks. . tInit - initial value of t parameter; fixT - logical value of t parameter, which allows to fix the parameter (not to fit); bInit - initial value of b parameter; fixB - logical value of b parameter, which allows to fix the parameter (not to fit); sInit - initial value of s parameter; fixS - logical value of s parameter, which allows to fix the parameter (not to fit) . Definition at line 2712 of file TSpectrumFit.cxx. ◆ Shape(). Double_t TSpectrumFit::Shape ; (; Int_t ; num_of_fitted_peaks, . Double_t ; i, . const Double_t * ; parameter, . Double_t ; sigma, . Double_t ; t, . Double_t ; s, . Double_t ; b, . Double_t ; a0, . Double_t ; a1, . Double_t ; a2 . ). protected . This function calculates peaks shape function (see manual) Function parameters: . num_of_fitted_peaks-number of fitted peaks; i-channel; parameter-array of peaks parameters (amplitudes and positions); sigma-sigma of peak; t, s-relative amplitudes; b-slope; a0, a1, a2- background coefficients . Definition at line 518 of file TSpectrumFit.cxx. ◆ StiefelInversion(). void TSpectrumFit::StiefelInversion ; (; Double_t ** ; a, . Int_t ; size . ). protected . This function calculates solution of the system of ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:47703,Testability,log,logical,47703,"e of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array of initial values of peaks positions; fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional . Definition at line 2658 of file TSpectrumFit.cxx. ◆ SetTailParameters(). void TSpectrumFit::SetTailParameters ; (; Double_t ; tInit, . Bool_t ; fixT, . Double_t ; bInit, . Bool_t ; fixB, . Double_t ; sInit, . Bool_t ; fixS . ). This function sets the following fitting parameters of tails of peaks. . tInit - initial value of t parameter; fixT - logical value of t parameter, which allows to fix the parameter (not to fit); bInit - initial value of b parameter; fixB - logical value of b parameter, which allows to fix the parameter (not to fit); sInit - initial value of s parameter; fixS - logical value of s parameter, which allows to fix the parameter (not to fit) . Definition at line 2712 of file TSpectrumFit.cxx. ◆ Shape(). Double_t TSpectrumFit::Shape ; (; Int_t ; num_of_fitted_peaks, . Double_t ; i, . const Double_t * ; parameter, . Double_t ; sigma, . Double_t ; t, . Double_t ; s, . Double_t ; b, . Double_t ; a0, . Double_t ; a1, . Double_t ; a2 . ). protected . This function calculates peaks shape function (see manual) Function parameters: . num_of_fitted_peaks-number of fitted peaks; i-channel; parameter-array of peaks parameters (amplitudes and positions); sigma-sigma of peak; t, s-relative amplitudes; b-slope; a0, a1, a2- background coefficients . Definition at line 518 of file TSpectrumFit.cxx. ◆ StiefelInversion(). void TSpectrumFit::StiefelInversion ; (; Double_t ** ; a, . Int_t ; size . ). protected . This function calculates solution of the system of ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:47826,Testability,log,logical,47826,"e of sigma parameter; fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); positionInit - array of initial values of peaks positions; fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional . Definition at line 2658 of file TSpectrumFit.cxx. ◆ SetTailParameters(). void TSpectrumFit::SetTailParameters ; (; Double_t ; tInit, . Bool_t ; fixT, . Double_t ; bInit, . Bool_t ; fixB, . Double_t ; sInit, . Bool_t ; fixS . ). This function sets the following fitting parameters of tails of peaks. . tInit - initial value of t parameter; fixT - logical value of t parameter, which allows to fix the parameter (not to fit); bInit - initial value of b parameter; fixB - logical value of b parameter, which allows to fix the parameter (not to fit); sInit - initial value of s parameter; fixS - logical value of s parameter, which allows to fix the parameter (not to fit) . Definition at line 2712 of file TSpectrumFit.cxx. ◆ Shape(). Double_t TSpectrumFit::Shape ; (; Int_t ; num_of_fitted_peaks, . Double_t ; i, . const Double_t * ; parameter, . Double_t ; sigma, . Double_t ; t, . Double_t ; s, . Double_t ; b, . Double_t ; a0, . Double_t ; a1, . Double_t ; a2 . ). protected . This function calculates peaks shape function (see manual) Function parameters: . num_of_fitted_peaks-number of fitted peaks; i-channel; parameter-array of peaks parameters (amplitudes and positions); sigma-sigma of peak; t, s-relative amplitudes; b-slope; a0, a1, a2- background coefficients . Definition at line 518 of file TSpectrumFit.cxx. ◆ StiefelInversion(). void TSpectrumFit::StiefelInversion ; (; Double_t ** ; a, . Int_t ; size . ). protected . This function calculates solution of the system of ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:52985,Testability,log,logical,52985,"s] array of errors of peak areas ; Definition at line 37 of file TSpectrumFit.h. ◆ fBCalc. Double_t TSpectrumFit::fBCalc. protected . calculated value of b parameter ; Definition at line 45 of file TSpectrumFit.h. ◆ fBErr. Double_t TSpectrumFit::fBErr. protected . error value of b parameter ; Definition at line 46 of file TSpectrumFit.h. ◆ fBInit. Double_t TSpectrumFit::fBInit. protected . initial value of b parameter (slope), for details see html manual and references ; Definition at line 44 of file TSpectrumFit.h. ◆ fChi. Double_t TSpectrumFit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrumFit.h. ◆ fFitTaylor. Int_t TSpectrumFit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:53163,Testability,log,logical,53163," at line 45 of file TSpectrumFit.h. ◆ fBErr. Double_t TSpectrumFit::fBErr. protected . error value of b parameter ; Definition at line 46 of file TSpectrumFit.h. ◆ fBInit. Double_t TSpectrumFit::fBInit. protected . initial value of b parameter (slope), for details see html manual and references ; Definition at line 44 of file TSpectrumFit.h. ◆ fChi. Double_t TSpectrumFit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrumFit.h. ◆ fFitTaylor. Int_t TSpectrumFit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of ",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:53341,Testability,log,logical,53341,"_t TSpectrumFit::fBInit. protected . initial value of b parameter (slope), for details see html manual and references ; Definition at line 44 of file TSpectrumFit.h. ◆ fChi. Double_t TSpectrumFit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrumFit.h. ◆ fFitTaylor. Int_t TSpectrumFit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical valu",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:53541,Testability,log,logical,53541,"pectrumFit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrumFit.h. ◆ fFitTaylor. Int_t TSpectrumFit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:53759,Testability,log,logical,53759," kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Defi",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:53968,Testability,log,logical,53968,"l value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 20 of file TSpectrumFit.h. ◆ fNumberIterations. Int_t TSpectrumFit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; D",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:54185,Testability,log,logical,54185,"eter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 20 of file TSpectrumFit.h. ◆ fNumberIterations. Int_t TSpectrumFit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 21 of file TSpectrumFit.h. ◆ fPositionCalc. Double_t* TSpectrumFit::fPositionCalc. protected . [fNPeaks] array of calculated values of fitted positions, output parameters ; Definition at line 31 of file TSpectrumFi",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:54368,Testability,log,logical,54368,"ot to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 20 of file TSpectrumFit.h. ◆ fNumberIterations. Int_t TSpectrumFit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 21 of file TSpectrumFit.h. ◆ fPositionCalc. Double_t* TSpectrumFit::fPositionCalc. protected . [fNPeaks] array of calculated values of fitted positions, output parameters ; Definition at line 31 of file TSpectrumFit.h. ◆ fPositionErr. Double_t* TSpectrumFit::fPositionErr. protected . [fNPeaks] array of position errors ; Definition at line 32 of file TSpectrumFit.h. ◆ fPositionInit. Double_t* TSpe",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumFit.html:54547,Testability,log,logical,54547,"e amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 20 of file TSpectrumFit.h. ◆ fNumberIterations. Int_t TSpectrumFit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 21 of file TSpectrumFit.h. ◆ fPositionCalc. Double_t* TSpectrumFit::fPositionCalc. protected . [fNPeaks] array of calculated values of fitted positions, output parameters ; Definition at line 31 of file TSpectrumFit.h. ◆ fPositionErr. Double_t* TSpectrumFit::fPositionErr. protected . [fNPeaks] array of position errors ; Definition at line 32 of file TSpectrumFit.h. ◆ fPositionInit. Double_t* TSpectrumFit::fPositionInit. protected . [fNPeaks] array of initial values of peaks positions, input parameters ; Definition at line 30 of file TSpectrumFit.h. ◆ fPower. Int_t TSpec",MatchSource.WIKI,doc/master/classTSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html
https://root.cern/doc/master/classTSpectrumTransform.html:7318,Availability,error,error,7318,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:7407,Availability,error,error,7407,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:7562,Availability,error,error,7562,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:7859,Availability,error,error,7859,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:11943,Availability,error,error,11943,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:1451,Energy Efficiency,adapt,adaptive,1451,"y interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:1644,Energy Efficiency,adapt,adaptive,1644,"nding on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:1794,Energy Efficiency,adapt,adaptive,1794,"imating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIs",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:16855,Energy Efficiency,power,power,16855,"nlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumTransform.h>. Inheritance diagram for TSpectrumTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTransformWalshHaar ; kTransformCosWalsh ; kTransformCosHaar ; kTransformSinWalsh ; kTransformSinHaar ; kTransformForward ; kTransformInverse . Definition at line 31 of file TSpectrumTransform.h. Constructor & Destructor Documentation. ◆ TSpectrumTransform() [1/2]. TSpectrumTransform::TSpectrumTransform ; (; ). default constructor ; Definition at line 40 of file TSpectrumTransform.cxx. ◆ TSpectrumTransform() [2/2]. TSpectrumTransform::TSpectrumTransform ; (; Int_t ; size). the constructor creates TSpectrumTransform object. ; Its size must be > than zero and must be power of 2. It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ; Definition at line 56 of file TSpectrumTransform.cxx. ◆ ~TSpectrumTransform(). TSpectrumTransform::~TSpectrumTransform ; (; ). override . Destructor. ; Definition at line 85 of file TSpectrumTransform.cxx. Member Function Documentation. ◆ BitReverse(). void TSpectrumTransform::BitReverse ; (; Double_t * ; working_space, . Int_t ; num . ). protected . This function carries out bit-reverse reordering of data Function parameters: . working_space-pointer to vector of processed data; num-length of processed data . Definition at line 227 of file TSpectrumTransform.cxx. ◆ BitReverseHaar(). void TSpectrumTransform::BitReverseHaar ; (; Double_t * ; working_space, . Int_t ; shift, . Int_t ; num, . Int_t ; start . ). protected . This function carries out bit-reverse reordering for Haar transform Function parameters: . working_space-pointer to vector of p",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:30696,Energy Efficiency,adapt,adaptive,30696,"fficients.; destVector-pointer to the vector of dest data, its length should be size except for direct FOURIER, FOUR-WALSH, FOUR-HAAR. These need 2*size length to store real and imaginary coefficients. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include <TSpectrumTransform>; void Transform() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Transformed spectrum using Cosine transform"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra/TSpectrum.root"");; h=(",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:30894,Energy Efficiency,adapt,adaptive,30894," length to store real and imaginary coefficients. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include <TSpectrumTransform>; void Transform() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Transformed spectrum using Cosine transform"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra/TSpectrum.root"");; h=(TH1F*) f->Get(""transform1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindOb",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:31049,Energy Efficiency,adapt,adaptive,31049,"nsforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include <TSpectrumTransform>; void Transform() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Transformed spectrum using Cosine transform"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra/TSpectrum.root"");; h=(TH1F*) f->Get(""transform1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; if (!Transform1) Transform1 = new TCanvas(""Transform"",""Transform1"",10,10,1000,700);; TSpectrum *s = new",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:517,Integrability,interface,interface,517,". ROOT: TSpectrumTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrumTransform Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 1-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrumTransform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2;",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:658,Integrability,depend,depending,658,". ROOT: TSpectrumTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrumTransform Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 1-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrumTransform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2;",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:7324,Integrability,message,message,7324,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:7865,Integrability,message,message,7865,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:8855,Integrability,message,message,8855,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:11949,Integrability,message,message,11949,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:12322,Integrability,message,message,12322," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:946,Modifiability,enhance,enhancement,946,". ROOT: TSpectrumTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrumTransform Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 1-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrumTransform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2;",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:1348,Modifiability,enhance,enhancement,1348,"y » Advanced spectra processing classes. ; Advanced 1-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrumTransform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TOb",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:1451,Modifiability,adapt,adaptive,1451,"y interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:1644,Modifiability,adapt,adaptive,1644,"nding on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:1794,Modifiability,adapt,adaptive,1794,"imating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIs",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:2334,Modifiability,inherit,inherited,2334,"994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumTransform ();  default constructor ;  ;  TSpectrumTransform (Int_t size);  the constructor creates TSpectrumTransform object. ;  ;  ~TSpectrumTransform () override;  Destructor. ;  ; void Enhance (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; TCl",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:3566,Modifiability,enhance,enhanceCoeff,3566,"  kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumTransform ();  default constructor ;  ;  TSpectrumTransform (Int_t size);  the constructor creates TSpectrumTransform object. ;  ;  ~TSpectrumTransform () override;  Destructor. ;  ; void Enhance (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObj",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:3605,Modifiability,enhance,enhancement,3605,"  kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumTransform ();  default constructor ;  ;  TSpectrumTransform (Int_t size);  the constructor creates TSpectrumTransform object. ;  ;  ~TSpectrumTransform () override;  Destructor. ;  ; void Enhance (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObj",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:3806,Modifiability,enhance,enhancement,3806,"  kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumTransform ();  default constructor ;  ;  TSpectrumTransform (Int_t size);  the constructor creates TSpectrumTransform object. ;  ;  ~TSpectrumTransform () override;  Destructor. ;  ; void Enhance (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObj",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:4233,Modifiability,inherit,inherited,4233," ; void FilterZonal (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:5861,Modifiability,inherit,inherited,5861,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:6954,Modifiability,inherit,inheritance,6954,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:8953,Modifiability,inherit,inherits,8953,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:9070,Modifiability,inherit,inherits,9070,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:12823,Modifiability,inherit,inherited,12823,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void BitReverse (Double_t *working_space, Int_t num);  This function carries out bit-reverse reordering of data Function parameters: ;  ; void BitReverseHaar (Double_t *working_space, Int_t shift, Int_t num, Int_t start);  This function carries out bit-reverse reordering for Haar transform Function parameters: ;  ; void Fourier (Double_t *working_space, Int_t num, Int_t hartley, Int_t dire",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:13033,Modifiability,inherit,inherited,13033,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void BitReverse (Double_t *working_space, Int_t num);  This function carries out bit-reverse reordering of data Function parameters: ;  ; void BitReverseHaar (Double_t *working_space, Int_t shift, Int_t num, Int_t start);  This function carries out bit-reverse reordering for Haar transform Function parameters: ;  ; void Fourier (Double_t *working_space, Int_t num, Int_t hartley, Int_t dire",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:14743,Modifiability,inherit,inherited,14743,";  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void BitReverse (Double_t *working_space, Int_t num);  This function carries out bit-reverse reordering of data Function parameters: ;  ; void BitReverseHaar (Double_t *working_space, Int_t shift, Int_t num, Int_t start);  This function carries out bit-reverse reordering for Haar transform Function parameters: ;  ; void Fourier (Double_t *working_space, Int_t num, Int_t hartley, Int_t direction, Int_t zt_clear);  This function calculates Fourier based transform of a part of data Function parameters: ;  ; Int_t GeneralExe (Double_t *working_space, Int_t zt_clear, Int_t num, Int_t degree, Int_t type);  This function calculates generalized (mixed) transforms of different degrees Function parameters: ;  ; Int_t GeneralInv (Double_t *working_space, Int_t num, Int_t degree, Int_t type);  This function calculates inverse generalized (mixed) transforms Function parameters: ;  ; void Haar (Double_t *working_space, Int_t num, Int_t direction);  This function calculates Haar transform of a part of data Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data Function parameters: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication c",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:15230,Modifiability,enhance,enhanced,15230,"This function calculates inverse generalized (mixed) transforms Function parameters: ;  ; void Haar (Double_t *working_space, Int_t num, Int_t direction);  This function calculates Haar transform of a part of data Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data Function parameters: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSize;  length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel of filtered or enhanced region ;  ; Int_t fXmin;  first channel of filtered or enhanced region ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumTransform.h>. Inheritance diagram for TSpectrumTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTransformWalshHaar ; kTransformCosWalsh ; kTransformCosHa",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:15590,Modifiability,enhance,enhanced,15590,"This function calculates inverse generalized (mixed) transforms Function parameters: ;  ; void Haar (Double_t *working_space, Int_t num, Int_t direction);  This function calculates Haar transform of a part of data Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data Function parameters: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSize;  length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel of filtered or enhanced region ;  ; Int_t fXmin;  first channel of filtered or enhanced region ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumTransform.h>. Inheritance diagram for TSpectrumTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTransformWalshHaar ; kTransformCosWalsh ; kTransformCosHa",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:15654,Modifiability,enhance,enhanced,15654,"This function calculates inverse generalized (mixed) transforms Function parameters: ;  ; void Haar (Double_t *working_space, Int_t num, Int_t direction);  This function calculates Haar transform of a part of data Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data Function parameters: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSize;  length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel of filtered or enhanced region ;  ; Int_t fXmin;  first channel of filtered or enhanced region ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumTransform.h>. Inheritance diagram for TSpectrumTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTransformWalshHaar ; kTransformCosWalsh ; kTransformCosHa",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:15697,Modifiability,inherit,inherited,15697,"This function calculates inverse generalized (mixed) transforms Function parameters: ;  ; void Haar (Double_t *working_space, Int_t num, Int_t direction);  This function calculates Haar transform of a part of data Function parameters: ;  ; void Walsh (Double_t *working_space, Int_t num);  This function calculates Walsh transform of a part of data Function parameters: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSize;  length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel of filtered or enhanced region ;  ; Int_t fXmin;  first channel of filtered or enhanced region ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumTransform.h>. Inheritance diagram for TSpectrumTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTransformWalshHaar ; kTransformCosWalsh ; kTransformCosHa",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:15804,Modifiability,inherit,inherited,15804,"ation, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDegree;  degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ;  ; Int_t fDirection;  forward or inverse transform ;  ; Double_t fEnhanceCoeff;  multiplication coefficient applied in enhanced region; ;  ; Double_t fFilterCoeff;  value set in the filtered region ;  ; Int_t fSize;  length of transformed data ;  ; Int_t fTransformType;  type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ;  ; Int_t fXmax;  last channel of filtered or enhanced region ;  ; Int_t fXmin;  first channel of filtered or enhanced region ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpectrumTransform.h>. Inheritance diagram for TSpectrumTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkTransformHaar ; kTransformWalsh ; kTransformCos ; kTransformSin ; kTransformFourier ; kTransformHartley ; kTransformFourierWalsh ; kTransformFourierHaar ; kTransformWalshHaar ; kTransformCosWalsh ; kTransformCosHaar ; kTransformSinWalsh ; kTransformSinHaar ; kTransformForward ; kTransformInverse . Definition at line 31 of file TSpectrumTransform.h. Constructor & Destructor Documentation. ◆ TSpectrumTransform() [1/2]. TSpectrumTransform::TSpectrumTransform ; (; ). default constructor ; Definition at line 40 of file TSpectrumTransform.cxx. ◆ TSpectrumTransform() [2/2]. TSpectrumTransform::TSpectrumTransform ; (; Int_t ; size). the constructor creates TSpectrumTransform object. ; I",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:19516,Modifiability,enhance,enhanced,19516,"ration ; Definition at line 71 of file TSpectrumTransform.h. ◆ Enhance(). void TSpectrumTransform::Enhance ; (; const Double_t * ; source, . Double_t * ; destVector . ). This function transforms the source spectrum. ; The calling program should fill in input parameters. Then it multiplies transformed coefficients in the given region (fXmin, fXmax) by the given fEnhanceCoeff and transforms it back Processed data are written into dest spectrum.; Function parameters:; source-pointer to the vector of source spectrum, its length should be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR transform. These need 2*size length to supply real and imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These need 2*size length to store real and imaginary coefficients. Example - script Enhance.c:. Fig. 1 Original spectrum (black line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024 were multiplied by 2); Script:; Example to illustrate Enhance function (class TSpectrumTransform). To execute this example, do:; root > .x Enhance.C; void Enhance() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra/TSpectrum.root"");; h=(TH1F*) f->Get(""transform1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; if (!Transform1) Transform1 = new TCanvas(""Transform"",""Transform1"",10,10,1000,700);; h->SetAxisRange(700,1024);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; TSpectrumTransform *t = new TSpectrumTransform(4096);; t->SetTransformType(t->kTransformCos,0);; t->SetRegion(0, 1024);; t->SetEnhanceCoeff(2);; t->",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:21931,Modifiability,enhance,enhancement,21931,"nition Rtypes.h:66; destOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t destDefinition TGWin32VirtualXProxy.cxx:164; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; gROOT#define gROOTDefinition TROOT.h:406; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TSpectrumTransformAdvanced 1-dimensional orthogonal transform functions.Definition TSpectrumTransform.h:18; TSpectrumTransform::SetRegionvoid SetRegion(Int_t xmin, Int_t xmax)This function sets the filtering or enhancement region:Definition TSpectrumTransform.cxx:2264; TSpectrumTransform::kTransformCos@ kTransformCosDefinition TSpectrumTransform.h:34; TSpectrumTransform::Enhancevoid Enhance(const Double_t *source, Double_t *destVector)This function transforms the source spectrum.Definition TSpectrumTransform.cxx:1779; TSpectrumTransform::SetEnhanceCoeffvoid SetEnhanceCoeff(Double_t enhanceCoeff)This function sets the enhancement coefficient:Definition TSpectrumTransform.cxx:2300; TSpectrumTransform::TSpectrumTransformTSpectrumTransform()default constructorDefinition TSpectrumTransform.cxx:40; TSpectrumTransform::SetTransformTypevoid SetTransformType(Int_t transType, Int_t degree)This function sets the following parameters for transform:Definition TSpectrumTransform.cxx:2237; TSpectrumAdvanced Spectra Processing.Definition TSpectrum.h:18; double; int. Definition at line 1779 of file TSpectrumTransform.cxx. ◆ FilterZonal(). void TSpectrumTransform::FilterZonal ; (;",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:22309,Modifiability,enhance,enhanceCoeff,22309," TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TSpectrumTransformAdvanced 1-dimensional orthogonal transform functions.Definition TSpectrumTransform.h:18; TSpectrumTransform::SetRegionvoid SetRegion(Int_t xmin, Int_t xmax)This function sets the filtering or enhancement region:Definition TSpectrumTransform.cxx:2264; TSpectrumTransform::kTransformCos@ kTransformCosDefinition TSpectrumTransform.h:34; TSpectrumTransform::Enhancevoid Enhance(const Double_t *source, Double_t *destVector)This function transforms the source spectrum.Definition TSpectrumTransform.cxx:1779; TSpectrumTransform::SetEnhanceCoeffvoid SetEnhanceCoeff(Double_t enhanceCoeff)This function sets the enhancement coefficient:Definition TSpectrumTransform.cxx:2300; TSpectrumTransform::TSpectrumTransformTSpectrumTransform()default constructorDefinition TSpectrumTransform.cxx:40; TSpectrumTransform::SetTransformTypevoid SetTransformType(Int_t transType, Int_t degree)This function sets the following parameters for transform:Definition TSpectrumTransform.cxx:2237; TSpectrumAdvanced Spectra Processing.Definition TSpectrum.h:18; double; int. Definition at line 1779 of file TSpectrumTransform.cxx. ◆ FilterZonal(). void TSpectrumTransform::FilterZonal ; (; const Double_t * ; source, . Double_t * ; destVector . ). This function transforms the source spectrum. ; The calling program should fill in input parameters. Then it sets transformed coefficients in the given region (fXmin, fXmax) to the given fFilterCoeff and transforms it back. Filtered data are written into dest spectrum.; Function parameters:; source-pointer to the vector of source spectrum, its length shou",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:22345,Modifiability,enhance,enhancement,22345," TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TSpectrumTransformAdvanced 1-dimensional orthogonal transform functions.Definition TSpectrumTransform.h:18; TSpectrumTransform::SetRegionvoid SetRegion(Int_t xmin, Int_t xmax)This function sets the filtering or enhancement region:Definition TSpectrumTransform.cxx:2264; TSpectrumTransform::kTransformCos@ kTransformCosDefinition TSpectrumTransform.h:34; TSpectrumTransform::Enhancevoid Enhance(const Double_t *source, Double_t *destVector)This function transforms the source spectrum.Definition TSpectrumTransform.cxx:1779; TSpectrumTransform::SetEnhanceCoeffvoid SetEnhanceCoeff(Double_t enhanceCoeff)This function sets the enhancement coefficient:Definition TSpectrumTransform.cxx:2300; TSpectrumTransform::TSpectrumTransformTSpectrumTransform()default constructorDefinition TSpectrumTransform.cxx:40; TSpectrumTransform::SetTransformTypevoid SetTransformType(Int_t transType, Int_t degree)This function sets the following parameters for transform:Definition TSpectrumTransform.cxx:2237; TSpectrumAdvanced Spectra Processing.Definition TSpectrum.h:18; double; int. Definition at line 1779 of file TSpectrumTransform.cxx. ◆ FilterZonal(). void TSpectrumTransform::FilterZonal ; (; const Double_t * ; source, . Double_t * ; destVector . ). This function transforms the source spectrum. ; The calling program should fill in input parameters. Then it sets transformed coefficients in the given region (fXmin, fXmax) to the given fFilterCoeff and transforms it back. Filtered data are written into dest spectrum.; Function parameters:; source-pointer to the vector of source spectrum, its length shou",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:27591,Modifiability,enhance,enhanceCoeff,27591,"-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 547 of file TSpectrumTransform.cxx. ◆ Haar(). void TSpectrumTransform::Haar ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 96 of file TSpectrumTransform.cxx. ◆ IsA(). TClass * TSpectrumTransform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 71 of file TSpectrumTransform.h. ◆ SetDirection(). void TSpectrumTransform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2278 of file TSpectrumTransform.cxx. ◆ SetEnhanceCoeff(). void TSpectrumTransform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2300 of file TSpectrumTransform.cxx. ◆ SetFilterCoeff(). void TSpectrumTransform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2291 of file TSpectrumTransform.cxx. ◆ SetRegion(). void TSpectrumTransform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax . ). This function sets the filtering or enhancement region: . xmin, xmax . Definition at line 2264 of file TSpectrumTransform.cxx. ◆ SetTransformType(). void TSpectrumTransform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transfo",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:27629,Modifiability,enhance,enhancement,27629,"rm (see manual) . Definition at line 547 of file TSpectrumTransform.cxx. ◆ Haar(). void TSpectrumTransform::Haar ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 96 of file TSpectrumTransform.cxx. ◆ IsA(). TClass * TSpectrumTransform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 71 of file TSpectrumTransform.h. ◆ SetDirection(). void TSpectrumTransform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2278 of file TSpectrumTransform.cxx. ◆ SetEnhanceCoeff(). void TSpectrumTransform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2300 of file TSpectrumTransform.cxx. ◆ SetFilterCoeff(). void TSpectrumTransform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2291 of file TSpectrumTransform.cxx. ◆ SetRegion(). void TSpectrumTransform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax . ). This function sets the filtering or enhancement region: . xmin, xmax . Definition at line 2264 of file TSpectrumTransform.cxx. ◆ SetTransformType(). void TSpectrumTransform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sin",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:27656,Modifiability,enhance,enhanceCoeff,27656,"aar(). void TSpectrumTransform::Haar ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 96 of file TSpectrumTransform.cxx. ◆ IsA(). TClass * TSpectrumTransform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 71 of file TSpectrumTransform.h. ◆ SetDirection(). void TSpectrumTransform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2278 of file TSpectrumTransform.cxx. ◆ SetEnhanceCoeff(). void TSpectrumTransform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2300 of file TSpectrumTransform.cxx. ◆ SetFilterCoeff(). void TSpectrumTransform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2291 of file TSpectrumTransform.cxx. ◆ SetRegion(). void TSpectrumTransform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax . ). This function sets the filtering or enhancement region: . xmin, xmax . Definition at line 2264 of file TSpectrumTransform.cxx. ◆ SetTransformType(). void TSpectrumTransform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, C",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:27695,Modifiability,enhance,enhanced,27695,"aar(). void TSpectrumTransform::Haar ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 96 of file TSpectrumTransform.cxx. ◆ IsA(). TClass * TSpectrumTransform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 71 of file TSpectrumTransform.h. ◆ SetDirection(). void TSpectrumTransform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2278 of file TSpectrumTransform.cxx. ◆ SetEnhanceCoeff(). void TSpectrumTransform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2300 of file TSpectrumTransform.cxx. ◆ SetFilterCoeff(). void TSpectrumTransform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2291 of file TSpectrumTransform.cxx. ◆ SetRegion(). void TSpectrumTransform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax . ). This function sets the filtering or enhancement region: . xmin, xmax . Definition at line 2264 of file TSpectrumTransform.cxx. ◆ SetTransformType(). void TSpectrumTransform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, C",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:27776,Modifiability,enhance,enhancement,27776,"Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 96 of file TSpectrumTransform.cxx. ◆ IsA(). TClass * TSpectrumTransform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 71 of file TSpectrumTransform.h. ◆ SetDirection(). void TSpectrumTransform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2278 of file TSpectrumTransform.cxx. ◆ SetEnhanceCoeff(). void TSpectrumTransform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2300 of file TSpectrumTransform.cxx. ◆ SetFilterCoeff(). void TSpectrumTransform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2291 of file TSpectrumTransform.cxx. ◆ SetRegion(). void TSpectrumTransform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax . ). This function sets the filtering or enhancement region: . xmin, xmax . Definition at line 2264 of file TSpectrumTransform.cxx. ◆ SetTransformType(). void TSpectrumTransform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); degree - degree of mixed transform,",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:28313,Modifiability,enhance,enhancement,28313,"). void TSpectrumTransform::SetDirection ; (; Int_t ; direction). This function sets the direction of the transform: . direction (forward or inverse) . Definition at line 2278 of file TSpectrumTransform.cxx. ◆ SetEnhanceCoeff(). void TSpectrumTransform::SetEnhanceCoeff ; (; Double_t ; enhanceCoeff). This function sets the enhancement coefficient: . enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. . Definition at line 2300 of file TSpectrumTransform.cxx. ◆ SetFilterCoeff(). void TSpectrumTransform::SetFilterCoeff ; (; Double_t ; filterCoeff). This function sets the filter coefficient: . filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. . Definition at line 2291 of file TSpectrumTransform.cxx. ◆ SetRegion(). void TSpectrumTransform::SetRegion ; (; Int_t ; xmin, . Int_t ; xmax . ). This function sets the filtering or enhancement region: . xmin, xmax . Definition at line 2264 of file TSpectrumTransform.cxx. ◆ SetTransformType(). void TSpectrumTransform::SetTransformType ; (; Int_t ; transType, . Int_t ; degree . ). This function sets the following parameters for transform: . transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms . Definition at line 2237 of file TSpectrumTransform.cxx. ◆ Streamer(). void TSpectrumTransform::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrumTransform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file TSpectrumTransform.h. ◆ Transform(). void TSpe",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:30244,Modifiability,enhance,enhance,30244,"al ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file TSpectrumTransform.h. ◆ Transform(). void TSpectrumTransform::Transform ; (; const Double_t * ; source, . Double_t * ; destVector . ). This function transforms the source spectrum. ; The calling program should fill in input parameters. Transformed data are written into dest spectrum.; Function parameters:; source-pointer to the vector of source spectrum, its length should be size except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transform. These need 2*size length to supply real and imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be size except for direct FOURIER, FOUR-WALSH, FOUR-HAAR. These need 2*size length to store real and imaginary coefficients. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ra",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:30463,Modifiability,enhance,enhancement,30463,"transforms the source spectrum. ; The calling program should fill in input parameters. Transformed data are written into dest spectrum.; Function parameters:; source-pointer to the vector of source spectrum, its length should be size except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transform. These need 2*size length to supply real and imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be size except for direct FOURIER, FOUR-WALSH, FOUR-HAAR. These need 2*size length to store real and imaginary coefficients. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:30586,Modifiability,enhance,enhancement,30586,"vector of source spectrum, its length should be size except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transform. These need 2*size length to supply real and imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be size except for direct FOURIER, FOUR-WALSH, FOUR-HAAR. These need 2*size length to store real and imaginary coefficients. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include <TSpectrumTransform>; void Transform() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:30696,Modifiability,adapt,adaptive,30696,"fficients.; destVector-pointer to the vector of dest data, its length should be size except for direct FOURIER, FOUR-WALSH, FOUR-HAAR. These need 2*size length to store real and imaginary coefficients. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include <TSpectrumTransform>; void Transform() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Transformed spectrum using Cosine transform"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra/TSpectrum.root"");; h=(",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:30894,Modifiability,adapt,adaptive,30894," length to store real and imaginary coefficients. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include <TSpectrumTransform>; void Transform() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Transformed spectrum using Cosine transform"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra/TSpectrum.root"");; h=(TH1F*) f->Get(""transform1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindOb",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:31049,Modifiability,adapt,adaptive,31049,"nsforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include <TSpectrumTransform>; void Transform() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Transformed spectrum using Cosine transform"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra/TSpectrum.root"");; h=(TH1F*) f->Get(""transform1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; if (!Transform1) Transform1 = new TCanvas(""Transform"",""Transform1"",10,10,1000,700);; TSpectrum *s = new",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:33666,Modifiability,enhance,enhanced,33666,"Forward@ kTransformForwardDefinition TSpectrumTransform.h:45. Definition at line 741 of file TSpectrumTransform.cxx. ◆ Walsh(). void TSpectrumTransform::Walsh ; (; Double_t * ; working_space, . Int_t ; num . ). protected . This function calculates Walsh transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data . Definition at line 174 of file TSpectrumTransform.cxx. Member Data Documentation. ◆ fDegree. Int_t TSpectrumTransform::fDegree. protected . degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ; Definition at line 23 of file TSpectrumTransform.h. ◆ fDirection. Int_t TSpectrumTransform::fDirection. protected . forward or inverse transform ; Definition at line 24 of file TSpectrumTransform.h. ◆ fEnhanceCoeff. Double_t TSpectrumTransform::fEnhanceCoeff. protected . multiplication coefficient applied in enhanced region; ; Definition at line 28 of file TSpectrumTransform.h. ◆ fFilterCoeff. Double_t TSpectrumTransform::fFilterCoeff. protected . value set in the filtered region ; Definition at line 27 of file TSpectrumTransform.h. ◆ fSize. Int_t TSpectrumTransform::fSize. protected . length of transformed data ; Definition at line 21 of file TSpectrumTransform.h. ◆ fTransformType. Int_t TSpectrumTransform::fTransformType. protected . type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ; Definition at line 22 of file TSpectrumTransform.h. ◆ fXmax. Int_t TSpectrumTransform::fXmax. protected . last channel of filtered or enhanced region ; Definition at line 26 of file TSpectrumTransform.h. ◆ fXmin. Int_t TSpectrumTransform::fXmin. protected . first channel of filtered or enhanced region ; Definition at line 25 of file TSpectrumTransform.h. Libraries for TSpectrumTransform:. [legend]; The documentati",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:34398,Modifiability,enhance,enhanced,34398," a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data . Definition at line 174 of file TSpectrumTransform.cxx. Member Data Documentation. ◆ fDegree. Int_t TSpectrumTransform::fDegree. protected . degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ; Definition at line 23 of file TSpectrumTransform.h. ◆ fDirection. Int_t TSpectrumTransform::fDirection. protected . forward or inverse transform ; Definition at line 24 of file TSpectrumTransform.h. ◆ fEnhanceCoeff. Double_t TSpectrumTransform::fEnhanceCoeff. protected . multiplication coefficient applied in enhanced region; ; Definition at line 28 of file TSpectrumTransform.h. ◆ fFilterCoeff. Double_t TSpectrumTransform::fFilterCoeff. protected . value set in the filtered region ; Definition at line 27 of file TSpectrumTransform.h. ◆ fSize. Int_t TSpectrumTransform::fSize. protected . length of transformed data ; Definition at line 21 of file TSpectrumTransform.h. ◆ fTransformType. Int_t TSpectrumTransform::fTransformType. protected . type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ; Definition at line 22 of file TSpectrumTransform.h. ◆ fXmax. Int_t TSpectrumTransform::fXmax. protected . last channel of filtered or enhanced region ; Definition at line 26 of file TSpectrumTransform.h. ◆ fXmin. Int_t TSpectrumTransform::fXmin. protected . first channel of filtered or enhanced region ; Definition at line 25 of file TSpectrumTransform.h. Libraries for TSpectrumTransform:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrumTransform.h; hist/spectrum/src/TSpectrumTransform.cxx. TSpectrumTransform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:34551,Modifiability,enhance,enhanced,34551," a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data . Definition at line 174 of file TSpectrumTransform.cxx. Member Data Documentation. ◆ fDegree. Int_t TSpectrumTransform::fDegree. protected . degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms ; Definition at line 23 of file TSpectrumTransform.h. ◆ fDirection. Int_t TSpectrumTransform::fDirection. protected . forward or inverse transform ; Definition at line 24 of file TSpectrumTransform.h. ◆ fEnhanceCoeff. Double_t TSpectrumTransform::fEnhanceCoeff. protected . multiplication coefficient applied in enhanced region; ; Definition at line 28 of file TSpectrumTransform.h. ◆ fFilterCoeff. Double_t TSpectrumTransform::fFilterCoeff. protected . value set in the filtered region ; Definition at line 27 of file TSpectrumTransform.h. ◆ fSize. Int_t TSpectrumTransform::fSize. protected . length of transformed data ; Definition at line 21 of file TSpectrumTransform.h. ◆ fTransformType. Int_t TSpectrumTransform::fTransformType. protected . type of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar) ; Definition at line 22 of file TSpectrumTransform.h. ◆ fXmax. Int_t TSpectrumTransform::fXmax. protected . last channel of filtered or enhanced region ; Definition at line 26 of file TSpectrumTransform.h. ◆ fXmin. Int_t TSpectrumTransform::fXmin. protected . first channel of filtered or enhanced region ; Definition at line 25 of file TSpectrumTransform.h. Libraries for TSpectrumTransform:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrumTransform.h; hist/spectrum/src/TSpectrumTransform.cxx. TSpectrumTransform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:5101,Security,hash,hash,5101,"; void Transform (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSpectrumTransform.html:26037,Usability,clear,clear,26037,"ion transforms the source spectrum.Definition TSpectrumTransform.cxx:1269. Definition at line 1269 of file TSpectrumTransform.cxx. ◆ Fourier(). void TSpectrumTransform::Fourier ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; hartley, . Int_t ; direction, . Int_t ; zt_clear . ). protected . This function calculates Fourier based transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; hartley-1 if it is Hartley transform, 0 otherwise; direction-forward or inverse transform . Definition at line 265 of file TSpectrumTransform.cxx. ◆ GeneralExe(). int TSpectrumTransform::GeneralExe ; (; Double_t * ; working_space, . Int_t ; zt_clear, . Int_t ; num, . Int_t ; degree, . Int_t ; type . ). protected . This function calculates generalized (mixed) transforms of different degrees Function parameters: . working_space-pointer to vector of transformed data; zt_clear-flag to clear imaginary data before staring; num-length of processed data; degree-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 431 of file TSpectrumTransform.cxx. ◆ GeneralInv(). int TSpectrumTransform::GeneralInv ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; degree, . Int_t ; type . ). protected . This function calculates inverse generalized (mixed) transforms Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; degree-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 547 of file TSpectrumTransform.cxx. ◆ Haar(). void TSpectrumTransform::Haar ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 96 of file TSpectrumTrans",MatchSource.WIKI,doc/master/classTSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html
https://root.cern/doc/master/classTSPHE.html:5889,Availability,error,error,5889," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:5978,Availability,error,error,5978,"owser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:6133,Availability,error,error,6133,"/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:6430,Availability,error,error,6430,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:10401,Availability,error,error,10401,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:16086,Energy Efficiency,allocate,allocate,16086,"tat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t faX;  ; Float_t faY;  ; Float_t faZ;  ; Float_t fPhimax;  ; Float_t fPhimin;  ; Float_t fRmax;  ; Float_t fRmin;  ; Float_t fThemax;  ; Float_t fThemin;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWid",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:5895,Integrability,message,message,5895," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:6436,Integrability,message,message,6436,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:7426,Integrability,message,message,7426,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:10407,Integrability,message,message,10407,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:10780,Integrability,message,message,10780," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:2126,Modifiability,inherit,inherited,2126,";  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a PSPHE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetPhimax () const;  ; virtual Float_t GetPhimin () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; virtual Float_t GetThemax () const;  ; virtual Float_t GetThemin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1.0);  ; virtual void SetEllipse (const Float_t *factors);  Set ellipse. ;  ; virtual void SetNumberOfDivisions (Int_t p);  Set number of divisions. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Shape default destructor. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TShape & operator= (const TShape &);  assignment operator ;  ; void Paint (Option_t *option="""") override;  This method is used only when a shape is painted outside a TNode. ;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; virtual void SetVisibility (Int_t vis);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:2993,Modifiability,inherit,inherited,2993," called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Shape default destructor. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TShape & operator= (const TShape &);  assignment operator ;  ; void Paint (Option_t *option="""") override;  This method is used only when a shape is painted outside a TNode. ;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; virtual void SetVisibility (Int_t vis);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:4546,Modifiability,inherit,inherited,4546,"  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class in",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:5525,Modifiability,inherit,inheritance,5525,"Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:7524,Modifiability,inherit,inherits,7524,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:7641,Modifiability,inherit,inherits,7641,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:11087,Modifiability,inherit,inherited,11087,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:12592,Modifiability,inherit,inherited,12592,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:13847,Modifiability,inherit,inherited,13847,"new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TShape; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; sta",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:14192,Modifiability,inherit,inherited,14192,"m out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TShape; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:14402,Modifiability,inherit,inherited,14402,"m out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TShape; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:14612,Modifiability,inherit,inherited,14612,"m out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TShape; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:15130,Modifiability,inherit,inherited,15130," from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *f",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:15342,Modifiability,inherit,inherited,15342," from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *f",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:15554,Modifiability,inherit,inherited,15554," from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *f",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:15941,Modifiability,inherit,inherited,15941,"tat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t faX;  ; Float_t faY;  ; Float_t faZ;  ; Float_t fPhimax;  ; Float_t fPhimin;  ; Float_t fRmax;  ; Float_t fRmin;  ; Float_t fThemax;  ; Float_t fThemin;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWid",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:16320,Modifiability,inherit,inherited,16320," * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t faX;  ; Float_t faY;  ; Float_t faZ;  ; Float_t fPhimax;  ; Float_t fPhimin;  ; Float_t fRmax;  ; Float_t fRmin;  ; Float_t fThemax;  ; Float_t fThemin;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Private Attributes; Float_t fAspectRatio;  number of sections ;  ; Double_t * fCoTab;  Table of sin(fPhimin) .... sin(Phi) ;  ; Double_t * fCoThetaTab;  Table of cos(fPhimin) .... cos(Phi) ;  ; Int_t fNdi",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:16711,Modifiability,inherit,inherited,16711," Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t faX;  ; Float_t faY;  ; Float_t faZ;  ; Float_t fPhimax;  ; Float_t fPhimin;  ; Float_t fRmax;  ; Float_t fRmin;  ; Float_t fThemax;  ; Float_t fThemin;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Private Attributes; Float_t fAspectRatio;  number of sections ;  ; Double_t * fCoTab;  Table of sin(fPhimin) .... sin(Phi) ;  ; Double_t * fCoThetaTab;  Table of cos(fPhimin) .... cos(Phi) ;  ; Int_t fNdiv;  Table of sin(gThemin) .... cos(Theta) ;  ; Int_t fNz;  ; Double_t * fSiTab;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwri",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:16822,Modifiability,inherit,inherited,16822," Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t faX;  ; Float_t faY;  ; Float_t faZ;  ; Float_t fPhimax;  ; Float_t fPhimin;  ; Float_t fRmax;  ; Float_t fRmin;  ; Float_t fThemax;  ; Float_t fThemin;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Private Attributes; Float_t fAspectRatio;  number of sections ;  ; Double_t * fCoTab;  Table of sin(fPhimin) .... sin(Phi) ;  ; Double_t * fCoThetaTab;  Table of cos(fPhimin) .... cos(Phi) ;  ; Int_t fNdiv;  Table of sin(gThemin) .... cos(Theta) ;  ; Int_t fNz;  ; Double_t * fSiTab;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwri",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:16904,Modifiability,inherit,inherited,16904," Protected Member Functions; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create SPHE points. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t faX;  ; Float_t faY;  ; Float_t faZ;  ; Float_t fPhimax;  ; Float_t fPhimin;  ; Float_t fRmax;  ; Float_t fRmin;  ; Float_t fThemax;  ; Float_t fThemin;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Private Attributes; Float_t fAspectRatio;  number of sections ;  ; Double_t * fCoTab;  Table of sin(fPhimin) .... sin(Phi) ;  ; Double_t * fCoThetaTab;  Table of cos(fPhimin) .... cos(Phi) ;  ; Int_t fNdiv;  Table of sin(gThemin) .... cos(Theta) ;  ; Int_t fNz;  ; Double_t * fSiTab;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwri",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:17065,Modifiability,inherit,inherited,17065," to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t faX;  ; Float_t faY;  ; Float_t faZ;  ; Float_t fPhimax;  ; Float_t fPhimin;  ; Float_t fRmax;  ; Float_t fRmin;  ; Float_t fThemax;  ; Float_t fThemin;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Private Attributes; Float_t fAspectRatio;  number of sections ;  ; Double_t * fCoTab;  Table of sin(fPhimin) .... sin(Phi) ;  ; Double_t * fCoThetaTab;  Table of cos(fPhimin) .... cos(Phi) ;  ; Int_t fNdiv;  Table of sin(gThemin) .... cos(Theta) ;  ; Int_t fNz;  ; Double_t * fSiTab;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:17507,Modifiability,inherit,inherited,17507,"  ; Float_t fPhimax;  ; Float_t fPhimin;  ; Float_t fRmax;  ; Float_t fRmin;  ; Float_t fThemax;  ; Float_t fThemin;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Private Attributes; Float_t fAspectRatio;  number of sections ;  ; Double_t * fCoTab;  Table of sin(fPhimin) .... sin(Phi) ;  ; Double_t * fCoThetaTab;  Table of cos(fPhimin) .... cos(Phi) ;  ; Int_t fNdiv;  Table of sin(gThemin) .... cos(Theta) ;  ; Int_t fNz;  ; Double_t * fSiTab;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSPHE.h>. Inheritance diagram for TSPHE:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSPHE() [1/3]. TSPHE::TSPHE ; (; ). SPHE shape default constructor. ; Definition at line 44 of file TSPHE.cxx. ◆ TSPHE() [2/3]. TSPHE::TSPHE ; (; const char * ; ",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:18148,Modifiability,inherit,inherited,18148,";  . Private Attributes; Float_t fAspectRatio;  number of sections ;  ; Double_t * fCoTab;  Table of sin(fPhimin) .... sin(Phi) ;  ; Double_t * fCoThetaTab;  Table of cos(fPhimin) .... cos(Phi) ;  ; Int_t fNdiv;  Table of sin(gThemin) .... cos(Theta) ;  ; Int_t fNz;  ; Double_t * fSiTab;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSPHE.h>. Inheritance diagram for TSPHE:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSPHE() [1/3]. TSPHE::TSPHE ; (; ). SPHE shape default constructor. ; Definition at line 44 of file TSPHE.cxx. ◆ TSPHE() [2/3]. TSPHE::TSPHE ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmin, . Float_t ; rmax, . Float_t ; themin, . Float_t ; themax, . Float_t ; phimin, . Float_t ; phimax . ). SPHE shape normal constructor. ; Definition at line 64 of file TSPHE.cxx. ◆ TSPHE() [3/3]. TSPHE::TSPHE ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmax . ). SPHE shape ""simplified"" constructor. ; Definition at line 89 of file TSPHE.cxx. ◆ ~TSPHE(). TSPHE::~TSPHE ; (; ). override . SPHE shape default destructor. ; Definition at line 113 of file TSPHE.cxx. Member Function Docum",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:3861,Security,hash,hash,3861,"NVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely a",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:829,Usability,simpl,simplified,829,". ROOT: TSPHE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TSPHE Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A Sphere. ; It has 9 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: minimum radius; rmax: maximum radius; themin: theta min; themax: theta max; phimin: phi min; phimax: phi max. ROOT color indx = max(i-i0,j-j0); ; Definition at line 28 of file TSPHE.h. Public Member Functions;  TSPHE ();  SPHE shape default constructor. ;  ;  TSPHE (const char *name, const char *title, const char *material, Float_t rmax);  SPHE shape ""simplified"" constructor. ;  ;  TSPHE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax);  SPHE shape normal constructor. ;  ;  ~TSPHE () override;  SPHE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a PSPHE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetPhimax () const;  ; virtual Float_t GetPhimin () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; virtual Float_t GetThemax () const;  ; virtual Float_t GetThemin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1.0);  ; virtual void SetEllipse (const Float_t *factors);  Set ellipse. ;  ; virtual void SetNumberOfDivisions (Int_t p);  Set number of divisions. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) over",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSPHE.html:18962,Usability,simpl,simplified,18962," (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSPHE.h>. Inheritance diagram for TSPHE:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSPHE() [1/3]. TSPHE::TSPHE ; (; ). SPHE shape default constructor. ; Definition at line 44 of file TSPHE.cxx. ◆ TSPHE() [2/3]. TSPHE::TSPHE ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmin, . Float_t ; rmax, . Float_t ; themin, . Float_t ; themax, . Float_t ; phimin, . Float_t ; phimax . ). SPHE shape normal constructor. ; Definition at line 64 of file TSPHE.cxx. ◆ TSPHE() [3/3]. TSPHE::TSPHE ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmax . ). SPHE shape ""simplified"" constructor. ; Definition at line 89 of file TSPHE.cxx. ◆ ~TSPHE(). TSPHE::~TSPHE ; (; ). override . SPHE shape default destructor. ; Definition at line 113 of file TSPHE.cxx. Member Function Documentation. ◆ Class(). static TClass * TSPHE::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSPHE::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSPHE::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 73 of file TSPHE.h. ◆ DeclFileName(). static const char * TSPHE::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 73 of file TSPHE.h. ◆ DistancetoPrimitive(). Int_t TSPHE::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a PSPHE. ; Compute the closest distance of approach from point px,py to each computed outline poi",MatchSource.WIKI,doc/master/classTSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSPHE.html
https://root.cern/doc/master/classTSpider.html:573,Availability,avail,available,573,". ROOT: TSpider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSpider Class Reference. ; Spider class. ; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as many polar axes as selected data members. For each of them, it draws on the axis the position of the present event between the min and max of the data member. Two modes are available:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default co",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:779,Availability,avail,available,779,". ROOT: TSpider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSpider Class Reference. ; Spider class. ; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as many polar axes as selected data members. For each of them, it draws on the axis the position of the present event between the min and max of the data member. Two modes are available:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default co",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:7265,Availability,error,error,7265," this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:7354,Availability,error,error,7354,"value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const cha",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:7509,Availability,error,error,7509,";  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTime",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:7686,Availability,error,error,7686,"const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:12137,Availability,error,error,12137," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFil",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:7271,Integrability,message,message,7271," this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:7692,Integrability,message,message,7692,"const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:8894,Integrability,message,message,8894,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:12143,Integrability,message,message,12143," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFil",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:12516,Integrability,message,message,12516," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttribu",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:897,Modifiability,variab,variables,897,". ROOT: TSpider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSpider Class Reference. ; Spider class. ; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as many polar axes as selected data members. For each of them, it draws on the axis the position of the present event between the min and max of the data member. Two modes are available:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default co",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:1784,Modifiability,variab,variables,1784,"e spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default constructor.Definition TSpider.cxx:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41. Definition at line 40 of file TSpider.h. Public Member Functions;  TSpider ();  Default constructor. ;  ;  TSpider (TTree *tree, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=0, Long64_t firstentry=0);  Normal constructor. ;  ;  ~TSpider () override;  Destructor. ;  ; void AddSuperposed (TSpider *sp);  Allow to superpose several spider views. ;  ; void AddVariable (const char *varexp);  Add a variable to the plot from its expression. ;  ; void DeleteVariable (const char *varexp);  Delete a variable from its expression. ;  ; Int_t D",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:2622,Modifiability,variab,variable,2622," is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default constructor.Definition TSpider.cxx:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41. Definition at line 40 of file TSpider.h. Public Member Functions;  TSpider ();  Default constructor. ;  ;  TSpider (TTree *tree, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=0, Long64_t firstentry=0);  Normal constructor. ;  ;  ~TSpider () override;  Destructor. ;  ; void AddSuperposed (TSpider *sp);  Allow to superpose several spider views. ;  ; void AddVariable (const char *varexp);  Add a variable to the plot from its expression. ;  ; void DeleteVariable (const char *varexp);  Delete a variable from its expression. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute the distance to the spider. ;  ; void Draw (Option_t *options="""") override;  Draw the spider. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute the corresponding event. ;  ; Color_t GetAverageFillColor () const;  Get the Fill Color of the average. ;  ; Style_t GetAverageFillStyle () const;  Get the FillStyle of the average. ;  ; Color_t GetAverageLineColor () const;  Get the LineColor of the average. ;  ; Style_t GetAverageLineStyle () const;  Get the LineStyle of the average. ;  ; Width_t GetAverageLineWidth () const;  Get the LineWidth of the average. ;  ; Long64_t GetCurrentEntry () const;  ; bool GetDisplayAverage () const;  ; Long64_t GetEntriesToProcess (Long64_t firstentry, Long64_t nentries) const;  return the number of entries to be processed this fu",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:2721,Modifiability,variab,variable,2721,"...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default constructor.Definition TSpider.cxx:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41. Definition at line 40 of file TSpider.h. Public Member Functions;  TSpider ();  Default constructor. ;  ;  TSpider (TTree *tree, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=0, Long64_t firstentry=0);  Normal constructor. ;  ;  ~TSpider () override;  Destructor. ;  ; void AddSuperposed (TSpider *sp);  Allow to superpose several spider views. ;  ; void AddVariable (const char *varexp);  Add a variable to the plot from its expression. ;  ; void DeleteVariable (const char *varexp);  Delete a variable from its expression. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute the distance to the spider. ;  ; void Draw (Option_t *options="""") override;  Draw the spider. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute the corresponding event. ;  ; Color_t GetAverageFillColor () const;  Get the Fill Color of the average. ;  ; Style_t GetAverageFillStyle () const;  Get the FillStyle of the average. ;  ; Color_t GetAverageLineColor () const;  Get the LineColor of the average. ;  ; Style_t GetAverageLineStyle () const;  Get the LineStyle of the average. ;  ; Width_t GetAverageLineWidth () const;  Get the LineWidth of the average. ;  ; Long64_t GetCurrentEntry () const;  ; bool GetDisplayAverage () const;  ; Long64_t GetEntriesToProcess (Long64_t firstentry, Long64_t nentries) const;  return the number of entries to be processed this function checks that nentries is not bigger than the number of entries in the Tree or in the",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:5444,Modifiability,variab,variables,5444,"verage. ;  ; void SetAverageLineStyle (Style_t sty);  Set the LineStyle of the average. ;  ; void SetAverageLineWidth (Width_t wid);  Set the LineWidth of the average. ;  ; void SetDisplayAverage (bool disp);  Display or not the average. ;  ; void SetFillColor (Color_t col) override;  Set fill color. ;  ; void SetFillStyle (Style_t sty) override;  Set fill style. ;  ; void SetLineColor (Color_t col) override;  Set lin color. ;  ; void SetLineStyle (Style_t sty) override;  Set line style. ;  ; void SetLineWidth (Width_t wid) override;  Set line width. ;  ; void SetNdivRadial (Int_t div);  Set number of radial divisions. ;  ; void SetNx (UInt_t nx);  Set the X number of sub pads. ;  ; void SetNy (UInt_t ny);  Set the Y number of sub pads. ;  ; void SetSegmentDisplay (bool seg);  Set the segment display or not. ;  ; void SetSelectionExpression (const char *selexp);  Compile selection expression if there is one. ;  ; void SetShowRange (bool showrange);  ; void SetVariablesExpression (const char *varexp);  Compile the variables expression from the given string varexp. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuperposeTo (TSpider *sp);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:5702,Modifiability,inherit,inherited,5702,"tFillColor (Color_t col) override;  Set fill color. ;  ; void SetFillStyle (Style_t sty) override;  Set fill style. ;  ; void SetLineColor (Color_t col) override;  Set lin color. ;  ; void SetLineStyle (Style_t sty) override;  Set line style. ;  ; void SetLineWidth (Width_t wid) override;  Set line width. ;  ; void SetNdivRadial (Int_t div);  Set number of radial divisions. ;  ; void SetNx (UInt_t nx);  Set the X number of sub pads. ;  ; void SetNy (UInt_t ny);  Set the Y number of sub pads. ;  ; void SetSegmentDisplay (bool seg);  Set the segment display or not. ;  ; void SetSelectionExpression (const char *selexp);  Compile selection expression if there is one. ;  ; void SetShowRange (bool showrange);  ; void SetVariablesExpression (const char *varexp);  Compile the variables expression from the given string varexp. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuperposeTo (TSpider *sp);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (cons",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:6901,Modifiability,inherit,inheritance,6901,"method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:8992,Modifiability,inherit,inherits,8992,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:9109,Modifiability,inherit,inherits,9109,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:12823,Modifiability,inherit,inherited,12823,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:13928,Modifiability,inherit,inherited,13928,"t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ stat",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:15417,Modifiability,inherit,inherited,15417,"n the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DrawPoly (Option_t *options);  Paint the polygon representing the curr",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:15935,Modifiability,inherit,inherited,15935,rent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DrawPoly (Option_t *options);  Paint the polygon representing the current entry. ;  ; void DrawPolyAverage (Option_t *options);  Paint the Polygon representing the average value of the variables. ;  ; void DrawSlices (Option_t *options);  Draw the slices of the segment plot. ;  ; void DrawSlicesAverage (Option_t *options);  Draw the slices representing the average for the segment plot. ;  ; Int_t FindTextAlign (Double_t theta);  Find the alignement rule to apply for TText::SetTextAlign(Short_t). ;  ; Double_t FindTextAngle (Double_t theta);  Determine the orientation of the polar labels according to their angle. ;  ; void InitArrays (Int_t newsize);  Check if the arrays size is enough and reallocate them if not. ;  ; void InitVariables (Long64_,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:16147,Modifiability,inherit,inherited,16147,rent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DrawPoly (Option_t *options);  Paint the polygon representing the current entry. ;  ; void DrawPolyAverage (Option_t *options);  Paint the Polygon representing the average value of the variables. ;  ; void DrawSlices (Option_t *options);  Draw the slices of the segment plot. ;  ; void DrawSlicesAverage (Option_t *options);  Draw the slices representing the average for the segment plot. ;  ; Int_t FindTextAlign (Double_t theta);  Find the alignement rule to apply for TText::SetTextAlign(Short_t). ;  ; Double_t FindTextAngle (Double_t theta);  Determine the orientation of the polar labels according to their angle. ;  ; void InitArrays (Int_t newsize);  Check if the arrays size is enough and reallocate them if not. ;  ; void InitVariables (Long64_,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:16543,Modifiability,variab,variables,16543,"_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DrawPoly (Option_t *options);  Paint the polygon representing the current entry. ;  ; void DrawPolyAverage (Option_t *options);  Paint the Polygon representing the average value of the variables. ;  ; void DrawSlices (Option_t *options);  Draw the slices of the segment plot. ;  ; void DrawSlicesAverage (Option_t *options);  Draw the slices representing the average for the segment plot. ;  ; Int_t FindTextAlign (Double_t theta);  Find the alignement rule to apply for TText::SetTextAlign(Short_t). ;  ; Double_t FindTextAngle (Double_t theta);  Determine the orientation of the polar labels according to their angle. ;  ; void InitArrays (Int_t newsize);  Check if the arrays size is enough and reallocate them if not. ;  ; void InitVariables (Long64_t firstentry, Long64_t nentries);  Browse the tree to set the min, max and average value of each variable of fVar. ;  ; void SetCurrentEntries ();  Set the current selected entries. ;  ; void SyncFormulas ();  Create a TreeFormulaManager to coordinate the formulas. ;  ; void UpdateView ();  Update the polylines or the arcs for the current entries. ;  . Private Attributes; bool fAng",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:17209,Modifiability,variab,variable,17209,"ited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DrawPoly (Option_t *options);  Paint the polygon representing the current entry. ;  ; void DrawPolyAverage (Option_t *options);  Paint the Polygon representing the average value of the variables. ;  ; void DrawSlices (Option_t *options);  Draw the slices of the segment plot. ;  ; void DrawSlicesAverage (Option_t *options);  Draw the slices representing the average for the segment plot. ;  ; Int_t FindTextAlign (Double_t theta);  Find the alignement rule to apply for TText::SetTextAlign(Short_t). ;  ; Double_t FindTextAngle (Double_t theta);  Determine the orientation of the polar labels according to their angle. ;  ; void InitArrays (Int_t newsize);  Check if the arrays size is enough and reallocate them if not. ;  ; void InitVariables (Long64_t firstentry, Long64_t nentries);  Browse the tree to set the min, max and average value of each variable of fVar. ;  ; void SetCurrentEntries ();  Set the current selected entries. ;  ; void SyncFormulas ();  Create a TreeFormulaManager to coordinate the formulas. ;  ; void UpdateView ();  Update the polylines or the arcs for the current entries. ;  . Private Attributes; bool fAngularLabels;  True if the labels are oriented according to their axis. ;  ; Int_t fArraySize;  Actual size of the arrays. ;  ; Double_t * fAve;  [fNcols] Average value of each variable. ;  ; TPolyLine * fAveragePoly;  Polygon representing the average variables value. ;  ; TArc ** fAverageSlices;  ! Average slices. ;  ; TCanvas * fCanvas;  ! Pointer to the mother pad. ;  ; Long64_t * fCurrentEntries;  ![fNx*fNy] current selected entries; ;  ; bool fDisplayAverage;  Display or not the average. ;  ; Long64_t fEntry;  Present entry number in fTree. ;  ; Long64_t fFirstEntry;  First entry. ;  ; bool fForceDim;  Force dimension. ;  ; TList * fFormulas;  Li",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:17671,Modifiability,variab,variable,17671,"SlicesAverage (Option_t *options);  Draw the slices representing the average for the segment plot. ;  ; Int_t FindTextAlign (Double_t theta);  Find the alignement rule to apply for TText::SetTextAlign(Short_t). ;  ; Double_t FindTextAngle (Double_t theta);  Determine the orientation of the polar labels according to their angle. ;  ; void InitArrays (Int_t newsize);  Check if the arrays size is enough and reallocate them if not. ;  ; void InitVariables (Long64_t firstentry, Long64_t nentries);  Browse the tree to set the min, max and average value of each variable of fVar. ;  ; void SetCurrentEntries ();  Set the current selected entries. ;  ; void SyncFormulas ();  Create a TreeFormulaManager to coordinate the formulas. ;  ; void UpdateView ();  Update the polylines or the arcs for the current entries. ;  . Private Attributes; bool fAngularLabels;  True if the labels are oriented according to their axis. ;  ; Int_t fArraySize;  Actual size of the arrays. ;  ; Double_t * fAve;  [fNcols] Average value of each variable. ;  ; TPolyLine * fAveragePoly;  Polygon representing the average variables value. ;  ; TArc ** fAverageSlices;  ! Average slices. ;  ; TCanvas * fCanvas;  ! Pointer to the mother pad. ;  ; Long64_t * fCurrentEntries;  ![fNx*fNy] current selected entries; ;  ; bool fDisplayAverage;  Display or not the average. ;  ; Long64_t fEntry;  Present entry number in fTree. ;  ; Long64_t fFirstEntry;  First entry. ;  ; bool fForceDim;  Force dimension. ;  ; TList * fFormulas;  List of all formulas to represent. ;  ; TList * fInput;  Used for fSelector. ;  ; TTreeFormulaManager * fManager;  Coordinator for the formulas. ;  ; Double_t * fMax;  [fNcols] Maximum value of the variables. ;  ; Double_t * fMin;  [fNcols] Minimum value of the variables. ;  ; UInt_t fNcols;  Number of variables. ;  ; Long64_t fNentries;  Number of entries. ;  ; UInt_t fNx;  Number of horizontal spider plots. ;  ; UInt_t fNy;  Number of vertical spider plots. ;  ; TGraphPolargram * fPolargram",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:17746,Modifiability,variab,variables,17746,"age for the segment plot. ;  ; Int_t FindTextAlign (Double_t theta);  Find the alignement rule to apply for TText::SetTextAlign(Short_t). ;  ; Double_t FindTextAngle (Double_t theta);  Determine the orientation of the polar labels according to their angle. ;  ; void InitArrays (Int_t newsize);  Check if the arrays size is enough and reallocate them if not. ;  ; void InitVariables (Long64_t firstentry, Long64_t nentries);  Browse the tree to set the min, max and average value of each variable of fVar. ;  ; void SetCurrentEntries ();  Set the current selected entries. ;  ; void SyncFormulas ();  Create a TreeFormulaManager to coordinate the formulas. ;  ; void UpdateView ();  Update the polylines or the arcs for the current entries. ;  . Private Attributes; bool fAngularLabels;  True if the labels are oriented according to their axis. ;  ; Int_t fArraySize;  Actual size of the arrays. ;  ; Double_t * fAve;  [fNcols] Average value of each variable. ;  ; TPolyLine * fAveragePoly;  Polygon representing the average variables value. ;  ; TArc ** fAverageSlices;  ! Average slices. ;  ; TCanvas * fCanvas;  ! Pointer to the mother pad. ;  ; Long64_t * fCurrentEntries;  ![fNx*fNy] current selected entries; ;  ; bool fDisplayAverage;  Display or not the average. ;  ; Long64_t fEntry;  Present entry number in fTree. ;  ; Long64_t fFirstEntry;  First entry. ;  ; bool fForceDim;  Force dimension. ;  ; TList * fFormulas;  List of all formulas to represent. ;  ; TList * fInput;  Used for fSelector. ;  ; TTreeFormulaManager * fManager;  Coordinator for the formulas. ;  ; Double_t * fMax;  [fNcols] Maximum value of the variables. ;  ; Double_t * fMin;  [fNcols] Minimum value of the variables. ;  ; UInt_t fNcols;  Number of variables. ;  ; Long64_t fNentries;  Number of entries. ;  ; UInt_t fNx;  Number of horizontal spider plots. ;  ; UInt_t fNy;  Number of vertical spider plots. ;  ; TGraphPolargram * fPolargram;  Polar graph. ;  ; TList * fPolyList;  Polygons representing the variab",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:18349,Modifiability,variab,variables,18349,"e a TreeFormulaManager to coordinate the formulas. ;  ; void UpdateView ();  Update the polylines or the arcs for the current entries. ;  . Private Attributes; bool fAngularLabels;  True if the labels are oriented according to their axis. ;  ; Int_t fArraySize;  Actual size of the arrays. ;  ; Double_t * fAve;  [fNcols] Average value of each variable. ;  ; TPolyLine * fAveragePoly;  Polygon representing the average variables value. ;  ; TArc ** fAverageSlices;  ! Average slices. ;  ; TCanvas * fCanvas;  ! Pointer to the mother pad. ;  ; Long64_t * fCurrentEntries;  ![fNx*fNy] current selected entries; ;  ; bool fDisplayAverage;  Display or not the average. ;  ; Long64_t fEntry;  Present entry number in fTree. ;  ; Long64_t fFirstEntry;  First entry. ;  ; bool fForceDim;  Force dimension. ;  ; TList * fFormulas;  List of all formulas to represent. ;  ; TList * fInput;  Used for fSelector. ;  ; TTreeFormulaManager * fManager;  Coordinator for the formulas. ;  ; Double_t * fMax;  [fNcols] Maximum value of the variables. ;  ; Double_t * fMin;  [fNcols] Minimum value of the variables. ;  ; UInt_t fNcols;  Number of variables. ;  ; Long64_t fNentries;  Number of entries. ;  ; UInt_t fNx;  Number of horizontal spider plots. ;  ; UInt_t fNy;  Number of vertical spider plots. ;  ; TGraphPolargram * fPolargram;  Polar graph. ;  ; TList * fPolyList;  Polygons representing the variables. ;  ; bool fSegmentDisplay;  True if displaying a segment plot. ;  ; TTreeFormula * fSelect;  Selection condition. ;  ; TSelectorDraw * fSelector;  ! Selector. ;  ; bool fShowRange;  Show range of variables or not. ;  ; TList * fSuperposed;  Superposed spider plots. ;  ; TTree * fTree;  Pointer to the TTree to represent. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = ",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:18413,Modifiability,variab,variables,18413,"ateView ();  Update the polylines or the arcs for the current entries. ;  . Private Attributes; bool fAngularLabels;  True if the labels are oriented according to their axis. ;  ; Int_t fArraySize;  Actual size of the arrays. ;  ; Double_t * fAve;  [fNcols] Average value of each variable. ;  ; TPolyLine * fAveragePoly;  Polygon representing the average variables value. ;  ; TArc ** fAverageSlices;  ! Average slices. ;  ; TCanvas * fCanvas;  ! Pointer to the mother pad. ;  ; Long64_t * fCurrentEntries;  ![fNx*fNy] current selected entries; ;  ; bool fDisplayAverage;  Display or not the average. ;  ; Long64_t fEntry;  Present entry number in fTree. ;  ; Long64_t fFirstEntry;  First entry. ;  ; bool fForceDim;  Force dimension. ;  ; TList * fFormulas;  List of all formulas to represent. ;  ; TList * fInput;  Used for fSelector. ;  ; TTreeFormulaManager * fManager;  Coordinator for the formulas. ;  ; Double_t * fMax;  [fNcols] Maximum value of the variables. ;  ; Double_t * fMin;  [fNcols] Minimum value of the variables. ;  ; UInt_t fNcols;  Number of variables. ;  ; Long64_t fNentries;  Number of entries. ;  ; UInt_t fNx;  Number of horizontal spider plots. ;  ; UInt_t fNy;  Number of vertical spider plots. ;  ; TGraphPolargram * fPolargram;  Polar graph. ;  ; TList * fPolyList;  Polygons representing the variables. ;  ; bool fSegmentDisplay;  True if displaying a segment plot. ;  ; TTreeFormula * fSelect;  Selection condition. ;  ; TSelectorDraw * fSelector;  ! Selector. ;  ; bool fShowRange;  Show range of variables or not. ;  ; TList * fSuperposed;  Superposed spider plots. ;  ; TTree * fTree;  Pointer to the TTree to represent. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  E",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:18455,Modifiability,variab,variables,18455," current entries. ;  . Private Attributes; bool fAngularLabels;  True if the labels are oriented according to their axis. ;  ; Int_t fArraySize;  Actual size of the arrays. ;  ; Double_t * fAve;  [fNcols] Average value of each variable. ;  ; TPolyLine * fAveragePoly;  Polygon representing the average variables value. ;  ; TArc ** fAverageSlices;  ! Average slices. ;  ; TCanvas * fCanvas;  ! Pointer to the mother pad. ;  ; Long64_t * fCurrentEntries;  ![fNx*fNy] current selected entries; ;  ; bool fDisplayAverage;  Display or not the average. ;  ; Long64_t fEntry;  Present entry number in fTree. ;  ; Long64_t fFirstEntry;  First entry. ;  ; bool fForceDim;  Force dimension. ;  ; TList * fFormulas;  List of all formulas to represent. ;  ; TList * fInput;  Used for fSelector. ;  ; TTreeFormulaManager * fManager;  Coordinator for the formulas. ;  ; Double_t * fMax;  [fNcols] Maximum value of the variables. ;  ; Double_t * fMin;  [fNcols] Minimum value of the variables. ;  ; UInt_t fNcols;  Number of variables. ;  ; Long64_t fNentries;  Number of entries. ;  ; UInt_t fNx;  Number of horizontal spider plots. ;  ; UInt_t fNy;  Number of vertical spider plots. ;  ; TGraphPolargram * fPolargram;  Polar graph. ;  ; TList * fPolyList;  Polygons representing the variables. ;  ; bool fSegmentDisplay;  True if displaying a segment plot. ;  ; TTreeFormula * fSelect;  Selection condition. ;  ; TSelectorDraw * fSelector;  ! Selector. ;  ; bool fShowRange;  Show range of variables or not. ;  ; TList * fSuperposed;  Superposed spider plots. ;  ; TTree * fTree;  Pointer to the TTree to represent. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 ))",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:18715,Modifiability,variab,variables,18715,"e * fAveragePoly;  Polygon representing the average variables value. ;  ; TArc ** fAverageSlices;  ! Average slices. ;  ; TCanvas * fCanvas;  ! Pointer to the mother pad. ;  ; Long64_t * fCurrentEntries;  ![fNx*fNy] current selected entries; ;  ; bool fDisplayAverage;  Display or not the average. ;  ; Long64_t fEntry;  Present entry number in fTree. ;  ; Long64_t fFirstEntry;  First entry. ;  ; bool fForceDim;  Force dimension. ;  ; TList * fFormulas;  List of all formulas to represent. ;  ; TList * fInput;  Used for fSelector. ;  ; TTreeFormulaManager * fManager;  Coordinator for the formulas. ;  ; Double_t * fMax;  [fNcols] Maximum value of the variables. ;  ; Double_t * fMin;  [fNcols] Minimum value of the variables. ;  ; UInt_t fNcols;  Number of variables. ;  ; Long64_t fNentries;  Number of entries. ;  ; UInt_t fNx;  Number of horizontal spider plots. ;  ; UInt_t fNy;  Number of vertical spider plots. ;  ; TGraphPolargram * fPolargram;  Polar graph. ;  ; TList * fPolyList;  Polygons representing the variables. ;  ; bool fSegmentDisplay;  True if displaying a segment plot. ;  ; TTreeFormula * fSelect;  Selection condition. ;  ; TSelectorDraw * fSelector;  ! Selector. ;  ; bool fShowRange;  Show range of variables or not. ;  ; TList * fSuperposed;  Superposed spider plots. ;  ; TTree * fTree;  Pointer to the TTree to represent. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:18922,Modifiability,variab,variables,18922,"urrent selected entries; ;  ; bool fDisplayAverage;  Display or not the average. ;  ; Long64_t fEntry;  Present entry number in fTree. ;  ; Long64_t fFirstEntry;  First entry. ;  ; bool fForceDim;  Force dimension. ;  ; TList * fFormulas;  List of all formulas to represent. ;  ; TList * fInput;  Used for fSelector. ;  ; TTreeFormulaManager * fManager;  Coordinator for the formulas. ;  ; Double_t * fMax;  [fNcols] Maximum value of the variables. ;  ; Double_t * fMin;  [fNcols] Minimum value of the variables. ;  ; UInt_t fNcols;  Number of variables. ;  ; Long64_t fNentries;  Number of entries. ;  ; UInt_t fNx;  Number of horizontal spider plots. ;  ; UInt_t fNy;  Number of vertical spider plots. ;  ; TGraphPolargram * fPolargram;  Polar graph. ;  ; TList * fPolyList;  Polygons representing the variables. ;  ; bool fSegmentDisplay;  True if displaying a segment plot. ;  ; TTreeFormula * fSelect;  Selection condition. ;  ; TSelectorDraw * fSelector;  ! Selector. ;  ; bool fShowRange;  Show range of variables or not. ;  ; TList * fSuperposed;  Superposed spider plots. ;  ; TTree * fTree;  Pointer to the TTree to represent. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *locati",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:19097,Modifiability,inherit,inherited,19097,"all formulas to represent. ;  ; TList * fInput;  Used for fSelector. ;  ; TTreeFormulaManager * fManager;  Coordinator for the formulas. ;  ; Double_t * fMax;  [fNcols] Maximum value of the variables. ;  ; Double_t * fMin;  [fNcols] Minimum value of the variables. ;  ; UInt_t fNcols;  Number of variables. ;  ; Long64_t fNentries;  Number of entries. ;  ; UInt_t fNx;  Number of horizontal spider plots. ;  ; UInt_t fNy;  Number of vertical spider plots. ;  ; TGraphPolargram * fPolargram;  Polar graph. ;  ; TList * fPolyList;  Polygons representing the variables. ;  ; bool fSegmentDisplay;  True if displaying a segment plot. ;  ; TTreeFormula * fSelect;  Selection condition. ;  ; TSelectorDraw * fSelector;  ! Selector. ;  ; bool fShowRange;  Show range of variables or not. ;  ; TList * fSuperposed;  Superposed spider plots. ;  ; TTree * fTree;  Pointer to the TTree to represent. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protec",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:19738,Modifiability,inherit,inherited,19738,"orDraw * fSelector;  ! Selector. ;  ; bool fShowRange;  Show range of variables or not. ;  ; TList * fSuperposed;  Superposed spider plots. ;  ; TTree * fTree;  Pointer to the TTree to represent. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TSpider.h>. Inheritance diagram for TSpider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpider() [1/2]. TSpider::TSpider ; (; ). Default constructor. ; Definition at line 76 of file TSpider.cxx. ◆ TSpider() [2/2]. TSpider::TSpider ; (; TTree * ; tree, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = 0, . Long64_t ; firstentry = 0 . ). Normal constructor. ; Options are:; ""av",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:19837,Modifiability,inherit,inherited,19837,"orDraw * fSelector;  ! Selector. ;  ; bool fShowRange;  Show range of variables or not. ;  ; TList * fSuperposed;  Superposed spider plots. ;  ; TTree * fTree;  Pointer to the TTree to represent. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TSpider.h>. Inheritance diagram for TSpider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpider() [1/2]. TSpider::TSpider ; (; ). Default constructor. ; Definition at line 76 of file TSpider.cxx. ◆ TSpider() [2/2]. TSpider::TSpider ; (; TTree * ; tree, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = 0, . Long64_t ; firstentry = 0 . ). Normal constructor. ; Options are:; ""av",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:20042,Modifiability,inherit,inherited,20042," ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TSpider.h>. Inheritance diagram for TSpider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpider() [1/2]. TSpider::TSpider ; (; ). Default constructor. ; Definition at line 76 of file TSpider.cxx. ◆ TSpider() [2/2]. TSpider::TSpider ; (; TTree * ; tree, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = 0, . Long64_t ; firstentry = 0 . ). Normal constructor. ; Options are:; ""average""; ""showrange""; ""segment"" . Definition at line 114 of file TSpider.cxx. ◆ ~TSpider(). TSpider::~TSpider ; (; ). override . Destructor. ; Definition at line 174 of file TSpider.cxx. Member Fu",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:20175,Modifiability,inherit,inherited,20175,"ombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TSpider.h>. Inheritance diagram for TSpider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpider() [1/2]. TSpider::TSpider ; (; ). Default constructor. ; Definition at line 76 of file TSpider.cxx. ◆ TSpider() [2/2]. TSpider::TSpider ; (; TTree * ; tree, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = 0, . Long64_t ; firstentry = 0 . ). Normal constructor. ; Options are:; ""average""; ""showrange""; ""segment"" . Definition at line 114 of file TSpider.cxx. ◆ ~TSpider(). TSpider::~TSpider ; (; ). override . Destructor. ; Definition at line 174 of file TSpider.cxx. Member Function Documentation. ◆ AddSuperposed(). void TSpider::AddSuperposed ; (; TSpider * ; sp). Allow to superpose several spider views. ; Definiti",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:21304,Modifiability,variab,variable,21304,"e <TSpider.h>. Inheritance diagram for TSpider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpider() [1/2]. TSpider::TSpider ; (; ). Default constructor. ; Definition at line 76 of file TSpider.cxx. ◆ TSpider() [2/2]. TSpider::TSpider ; (; TTree * ; tree, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = 0, . Long64_t ; firstentry = 0 . ). Normal constructor. ; Options are:; ""average""; ""showrange""; ""segment"" . Definition at line 114 of file TSpider.cxx. ◆ ~TSpider(). TSpider::~TSpider ; (; ). override . Destructor. ; Definition at line 174 of file TSpider.cxx. Member Function Documentation. ◆ AddSuperposed(). void TSpider::AddSuperposed ; (; TSpider * ; sp). Allow to superpose several spider views. ; Definition at line 206 of file TSpider.cxx. ◆ AddVariable(). void TSpider::AddVariable ; (; const char * ; varexp). Add a variable to the plot from its expression. ; Definition at line 215 of file TSpider.cxx. ◆ Class(). static TClass * TSpider::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSpider::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpider::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 131 of file TSpider.h. ◆ DeclFileName(). static const char * TSpider::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 131 of file TSpider.h. ◆ DeleteVariable(). void TSpider::DeleteVariable ; (; const char * ; varexp). Delete a variable from its expression. ; Definition at line 353 of file TSpider.cxx. ◆ DistancetoPrimitive(). Int_t TSpider::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute the distance to the spider. ; Reimplemented from TObject.; Definition at line 439 of file",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:22035,Modifiability,variab,variable,22035,"r Function Documentation. ◆ AddSuperposed(). void TSpider::AddSuperposed ; (; TSpider * ; sp). Allow to superpose several spider views. ; Definition at line 206 of file TSpider.cxx. ◆ AddVariable(). void TSpider::AddVariable ; (; const char * ; varexp). Add a variable to the plot from its expression. ; Definition at line 215 of file TSpider.cxx. ◆ Class(). static TClass * TSpider::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSpider::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSpider::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 131 of file TSpider.h. ◆ DeclFileName(). static const char * TSpider::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 131 of file TSpider.h. ◆ DeleteVariable(). void TSpider::DeleteVariable ; (; const char * ; varexp). Delete a variable from its expression. ; Definition at line 353 of file TSpider.cxx. ◆ DistancetoPrimitive(). Int_t TSpider::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute the distance to the spider. ; Reimplemented from TObject.; Definition at line 439 of file TSpider.cxx. ◆ Draw(). void TSpider::Draw ; (; Option_t * ; options = """"). overridevirtual . Draw the spider. ; Reimplemented from TObject.; Definition at line 454 of file TSpider.cxx. ◆ DrawPoly(). void TSpider::DrawPoly ; (; Option_t * ; options). private . Paint the polygon representing the current entry. ; Definition at line 530 of file TSpider.cxx. ◆ DrawPolyAverage(). void TSpider::DrawPolyAverage ; (; Option_t * ; options). private . Paint the Polygon representing the average value of the variables. ; Definition at line 492 of file TSpider.cxx. ◆ DrawSlices(). void TSpider::DrawSlices ; (; Option_t * ; options). private . Draw the slices of the segment plot. ; Definition at line 560 of file TSpider.cxx. ◆ D",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:22823,Modifiability,variab,variables,22823," * TSpider::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 131 of file TSpider.h. ◆ DeleteVariable(). void TSpider::DeleteVariable ; (; const char * ; varexp). Delete a variable from its expression. ; Definition at line 353 of file TSpider.cxx. ◆ DistancetoPrimitive(). Int_t TSpider::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute the distance to the spider. ; Reimplemented from TObject.; Definition at line 439 of file TSpider.cxx. ◆ Draw(). void TSpider::Draw ; (; Option_t * ; options = """"). overridevirtual . Draw the spider. ; Reimplemented from TObject.; Definition at line 454 of file TSpider.cxx. ◆ DrawPoly(). void TSpider::DrawPoly ; (; Option_t * ; options). private . Paint the polygon representing the current entry. ; Definition at line 530 of file TSpider.cxx. ◆ DrawPolyAverage(). void TSpider::DrawPolyAverage ; (; Option_t * ; options). private . Paint the Polygon representing the average value of the variables. ; Definition at line 492 of file TSpider.cxx. ◆ DrawSlices(). void TSpider::DrawSlices ; (; Option_t * ; options). private . Draw the slices of the segment plot. ; Definition at line 560 of file TSpider.cxx. ◆ DrawSlicesAverage(). void TSpider::DrawSlicesAverage ; (; Option_t * ; options). private . Draw the slices representing the average for the segment plot. ; Definition at line 586 of file TSpider.cxx. ◆ ExecuteEvent(). void TSpider::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute the corresponding event. ; Reimplemented from TObject.; Definition at line 667 of file TSpider.cxx. ◆ FindTextAlign(). Int_t TSpider::FindTextAlign ; (; Double_t ; theta). private . Find the alignement rule to apply for TText::SetTextAlign(Short_t). ; Definition at line 676 of file TSpider.cxx. ◆ FindTextAngle(). Double_t TSpider::FindTextAngle ; (; Double_t ; theta). private . Determine the orientation of the polar labels accord",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:26521,Modifiability,variab,variable,26521,"ine . Definition at line 104 of file TSpider.h. ◆ GotoEntry(). void TSpider::GotoEntry ; (; Long64_t ; e). Go to a specified entry. ; Definition at line 744 of file TSpider.cxx. ◆ GotoFollowing(). void TSpider::GotoFollowing ; (; ). Go to the next entry. ; Definition at line 774 of file TSpider.cxx. ◆ GotoNext(). void TSpider::GotoNext ; (; ). Go to the next entries. ; Definition at line 754 of file TSpider.cxx. ◆ GotoPreceding(). void TSpider::GotoPreceding ; (; ). Go to the last entry. ; Definition at line 784 of file TSpider.cxx. ◆ GotoPrevious(). void TSpider::GotoPrevious ; (; ). Go to the previous entries. ; Definition at line 764 of file TSpider.cxx. ◆ InitArrays(). void TSpider::InitArrays ; (; Int_t ; newsize). private . Check if the arrays size is enough and reallocate them if not. ; Definition at line 794 of file TSpider.cxx. ◆ InitVariables(). void TSpider::InitVariables ; (; Long64_t ; firstentry, . Long64_t ; nentries . ). private . Browse the tree to set the min, max and average value of each variable of fVar. ; Definition at line 832 of file TSpider.cxx. ◆ IsA(). TClass * TSpider::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 131 of file TSpider.h. ◆ Paint(). void TSpider::Paint ; (; Option_t * ; options). overridevirtual . Paint the spider. ; Reimplemented from TObject.; Definition at line 918 of file TSpider.cxx. ◆ SetAverageFillColor(). void TSpider::SetAverageFillColor ; (; Color_t ; col). Set the Fill Color of the average. ; Definition at line 1001 of file TSpider.cxx. ◆ SetAverageFillStyle(). void TSpider::SetAverageFillStyle ; (; Style_t ; sty). Set the FillStyle of the average. ; Definition at line 1013 of file TSpider.cxx. ◆ SetAverageLineColor(). void TSpider::SetAverageLineColor ; (; Color_t ; col). Set the LineColor of the average. ; Definition at line 977 of file TSpider.cxx. ◆ SetAverageLineStyle(). void TSpider::SetAverageLineStyle ; (; Style_t ; sty",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:29892,Modifiability,variab,variables,29892,file TSpider.cxx. ◆ SetNdivRadial(). void TSpider::SetNdivRadial ; (; Int_t ; div). Set number of radial divisions. ; Definition at line 1217 of file TSpider.cxx. ◆ SetNx(). void TSpider::SetNx ; (; UInt_t ; nx). Set the X number of sub pads. ; Definition at line 1226 of file TSpider.cxx. ◆ SetNy(). void TSpider::SetNy ; (; UInt_t ; ny). Set the Y number of sub pads. ; Definition at line 1303 of file TSpider.cxx. ◆ SetSegmentDisplay(). void TSpider::SetSegmentDisplay ; (; bool ; seg). Set the segment display or not. ; Definition at line 1380 of file TSpider.cxx. ◆ SetSelectionExpression(). void TSpider::SetSelectionExpression ; (; const char * ; selexp). Compile selection expression if there is one. ; Definition at line 1471 of file TSpider.cxx. ◆ SetShowRange(). void TSpider::SetShowRange ; (; bool ; showrange). inline . Definition at line 128 of file TSpider.h. ◆ SetVariablesExpression(). void TSpider::SetVariablesExpression ; (; const char * ; varexp). Compile the variables expression from the given string varexp. ; Definition at line 1484 of file TSpider.cxx. ◆ Streamer(). void TSpider::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSpider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 131 of file TSpider.h. ◆ SuperposeTo(). void TSpider::SuperposeTo ; (; TSpider * ; sp). inline . Definition at line 129 of file TSpider.h. ◆ SyncFormulas(). void TSpider::SyncFormulas ; (; ). private . Create a TreeFormulaManager to coordinate the formulas. ; Definition at line 1522 of file TSpider.cxx. ◆ UpdateView(). void TSpider::UpdateView ; (; ). private . Update the polylines or the arcs for the current entries. ; Definition at line 1554 of file TSpider.cxx. Member Data Documentation. ◆ fAngularLabels. bool TSpider::fAngularLabels. private . True if the labels are oriented according to their axis. ; Definition at line 65 of file TSpide,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:31111,Modifiability,variab,variable,31111,ect. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSpider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 131 of file TSpider.h. ◆ SuperposeTo(). void TSpider::SuperposeTo ; (; TSpider * ; sp). inline . Definition at line 129 of file TSpider.h. ◆ SyncFormulas(). void TSpider::SyncFormulas ; (; ). private . Create a TreeFormulaManager to coordinate the formulas. ; Definition at line 1522 of file TSpider.cxx. ◆ UpdateView(). void TSpider::UpdateView ; (; ). private . Update the polylines or the arcs for the current entries. ; Definition at line 1554 of file TSpider.cxx. Member Data Documentation. ◆ fAngularLabels. bool TSpider::fAngularLabels. private . True if the labels are oriented according to their axis. ; Definition at line 65 of file TSpider.h. ◆ fArraySize. Int_t TSpider::fArraySize. private . Actual size of the arrays. ; Definition at line 45 of file TSpider.h. ◆ fAve. Double_t* TSpider::fAve. private . [fNcols] Average value of each variable. ; Definition at line 50 of file TSpider.h. ◆ fAveragePoly. TPolyLine* TSpider::fAveragePoly. private . Polygon representing the average variables value. ; Definition at line 55 of file TSpider.h. ◆ fAverageSlices. TArc** TSpider::fAverageSlices. private . ! Average slices. ; Definition at line 56 of file TSpider.h. ◆ fCanvas. TCanvas* TSpider::fCanvas. private . ! Pointer to the mother pad. ; Definition at line 57 of file TSpider.h. ◆ fCurrentEntries. Long64_t* TSpider::fCurrentEntries. private . ![fNx*fNy] current selected entries; ; Definition at line 49 of file TSpider.h. ◆ fDisplayAverage. bool TSpider::fDisplayAverage. private . Display or not the average. ; Definition at line 66 of file TSpider.h. ◆ fEntry. Long64_t TSpider::fEntry. private . Present entry number in fTree. ; Definition at line 46 of file TSpider.h. ◆ fFirstEntry. Long64_t TSpider::fFirstEntry. private . First entry. ; Definition at line 48 of file TSpider.h. ◆ fForceDim. bool TSpider::fForceD,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:31257,Modifiability,variab,variables,31257,ition at line 131 of file TSpider.h. ◆ SuperposeTo(). void TSpider::SuperposeTo ; (; TSpider * ; sp). inline . Definition at line 129 of file TSpider.h. ◆ SyncFormulas(). void TSpider::SyncFormulas ; (; ). private . Create a TreeFormulaManager to coordinate the formulas. ; Definition at line 1522 of file TSpider.cxx. ◆ UpdateView(). void TSpider::UpdateView ; (; ). private . Update the polylines or the arcs for the current entries. ; Definition at line 1554 of file TSpider.cxx. Member Data Documentation. ◆ fAngularLabels. bool TSpider::fAngularLabels. private . True if the labels are oriented according to their axis. ; Definition at line 65 of file TSpider.h. ◆ fArraySize. Int_t TSpider::fArraySize. private . Actual size of the arrays. ; Definition at line 45 of file TSpider.h. ◆ fAve. Double_t* TSpider::fAve. private . [fNcols] Average value of each variable. ; Definition at line 50 of file TSpider.h. ◆ fAveragePoly. TPolyLine* TSpider::fAveragePoly. private . Polygon representing the average variables value. ; Definition at line 55 of file TSpider.h. ◆ fAverageSlices. TArc** TSpider::fAverageSlices. private . ! Average slices. ; Definition at line 56 of file TSpider.h. ◆ fCanvas. TCanvas* TSpider::fCanvas. private . ! Pointer to the mother pad. ; Definition at line 57 of file TSpider.h. ◆ fCurrentEntries. Long64_t* TSpider::fCurrentEntries. private . ![fNx*fNy] current selected entries; ; Definition at line 49 of file TSpider.h. ◆ fDisplayAverage. bool TSpider::fDisplayAverage. private . Display or not the average. ; Definition at line 66 of file TSpider.h. ◆ fEntry. Long64_t TSpider::fEntry. private . Present entry number in fTree. ; Definition at line 46 of file TSpider.h. ◆ fFirstEntry. Long64_t TSpider::fFirstEntry. private . First entry. ; Definition at line 48 of file TSpider.h. ◆ fForceDim. bool TSpider::fForceDim. private . Force dimension. ; Definition at line 67 of file TSpider.h. ◆ fFormulas. TList* TSpider::fFormulas. private . List of all formulas to ,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:32617,Modifiability,variab,variables,32617,tries. private . ![fNx*fNy] current selected entries; ; Definition at line 49 of file TSpider.h. ◆ fDisplayAverage. bool TSpider::fDisplayAverage. private . Display or not the average. ; Definition at line 66 of file TSpider.h. ◆ fEntry. Long64_t TSpider::fEntry. private . Present entry number in fTree. ; Definition at line 46 of file TSpider.h. ◆ fFirstEntry. Long64_t TSpider::fFirstEntry. private . First entry. ; Definition at line 48 of file TSpider.h. ◆ fForceDim. bool TSpider::fForceDim. private . Force dimension. ; Definition at line 67 of file TSpider.h. ◆ fFormulas. TList* TSpider::fFormulas. private . List of all formulas to represent. ; Definition at line 58 of file TSpider.h. ◆ fInput. TList* TSpider::fInput. private . Used for fSelector. ; Definition at line 59 of file TSpider.h. ◆ fManager. TTreeFormulaManager* TSpider::fManager. private . Coordinator for the formulas. ; Definition at line 60 of file TSpider.h. ◆ fMax. Double_t* TSpider::fMax. private . [fNcols] Maximum value of the variables. ; Definition at line 51 of file TSpider.h. ◆ fMin. Double_t* TSpider::fMin. private . [fNcols] Minimum value of the variables. ; Definition at line 52 of file TSpider.h. ◆ fNcols. UInt_t TSpider::fNcols. private . Number of variables. ; Definition at line 44 of file TSpider.h. ◆ fNentries. Long64_t TSpider::fNentries. private . Number of entries. ; Definition at line 47 of file TSpider.h. ◆ fNx. UInt_t TSpider::fNx. private . Number of horizontal spider plots. ; Definition at line 42 of file TSpider.h. ◆ fNy. UInt_t TSpider::fNy. private . Number of vertical spider plots. ; Definition at line 43 of file TSpider.h. ◆ fPolargram. TGraphPolargram* TSpider::fPolargram. private . Polar graph. ; Definition at line 61 of file TSpider.h. ◆ fPolyList. TList* TSpider::fPolyList. private . Polygons representing the variables. ; Definition at line 62 of file TSpider.h. ◆ fSegmentDisplay. bool TSpider::fSegmentDisplay. private . True if displaying a segment plot. ; Definition a,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:32744,Modifiability,variab,variables,32744,r::fDisplayAverage. private . Display or not the average. ; Definition at line 66 of file TSpider.h. ◆ fEntry. Long64_t TSpider::fEntry. private . Present entry number in fTree. ; Definition at line 46 of file TSpider.h. ◆ fFirstEntry. Long64_t TSpider::fFirstEntry. private . First entry. ; Definition at line 48 of file TSpider.h. ◆ fForceDim. bool TSpider::fForceDim. private . Force dimension. ; Definition at line 67 of file TSpider.h. ◆ fFormulas. TList* TSpider::fFormulas. private . List of all formulas to represent. ; Definition at line 58 of file TSpider.h. ◆ fInput. TList* TSpider::fInput. private . Used for fSelector. ; Definition at line 59 of file TSpider.h. ◆ fManager. TTreeFormulaManager* TSpider::fManager. private . Coordinator for the formulas. ; Definition at line 60 of file TSpider.h. ◆ fMax. Double_t* TSpider::fMax. private . [fNcols] Maximum value of the variables. ; Definition at line 51 of file TSpider.h. ◆ fMin. Double_t* TSpider::fMin. private . [fNcols] Minimum value of the variables. ; Definition at line 52 of file TSpider.h. ◆ fNcols. UInt_t TSpider::fNcols. private . Number of variables. ; Definition at line 44 of file TSpider.h. ◆ fNentries. Long64_t TSpider::fNentries. private . Number of entries. ; Definition at line 47 of file TSpider.h. ◆ fNx. UInt_t TSpider::fNx. private . Number of horizontal spider plots. ; Definition at line 42 of file TSpider.h. ◆ fNy. UInt_t TSpider::fNy. private . Number of vertical spider plots. ; Definition at line 43 of file TSpider.h. ◆ fPolargram. TGraphPolargram* TSpider::fPolargram. private . Polar graph. ; Definition at line 61 of file TSpider.h. ◆ fPolyList. TList* TSpider::fPolyList. private . Polygons representing the variables. ; Definition at line 62 of file TSpider.h. ◆ fSegmentDisplay. bool TSpider::fSegmentDisplay. private . True if displaying a segment plot. ; Definition at line 68 of file TSpider.h. ◆ fSelect. TTreeFormula* TSpider::fSelect. private . Selection condition. ; Definition at line 63 ,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:32852,Modifiability,variab,variables,32852,t TSpider::fEntry. private . Present entry number in fTree. ; Definition at line 46 of file TSpider.h. ◆ fFirstEntry. Long64_t TSpider::fFirstEntry. private . First entry. ; Definition at line 48 of file TSpider.h. ◆ fForceDim. bool TSpider::fForceDim. private . Force dimension. ; Definition at line 67 of file TSpider.h. ◆ fFormulas. TList* TSpider::fFormulas. private . List of all formulas to represent. ; Definition at line 58 of file TSpider.h. ◆ fInput. TList* TSpider::fInput. private . Used for fSelector. ; Definition at line 59 of file TSpider.h. ◆ fManager. TTreeFormulaManager* TSpider::fManager. private . Coordinator for the formulas. ; Definition at line 60 of file TSpider.h. ◆ fMax. Double_t* TSpider::fMax. private . [fNcols] Maximum value of the variables. ; Definition at line 51 of file TSpider.h. ◆ fMin. Double_t* TSpider::fMin. private . [fNcols] Minimum value of the variables. ; Definition at line 52 of file TSpider.h. ◆ fNcols. UInt_t TSpider::fNcols. private . Number of variables. ; Definition at line 44 of file TSpider.h. ◆ fNentries. Long64_t TSpider::fNentries. private . Number of entries. ; Definition at line 47 of file TSpider.h. ◆ fNx. UInt_t TSpider::fNx. private . Number of horizontal spider plots. ; Definition at line 42 of file TSpider.h. ◆ fNy. UInt_t TSpider::fNy. private . Number of vertical spider plots. ; Definition at line 43 of file TSpider.h. ◆ fPolargram. TGraphPolargram* TSpider::fPolargram. private . Polar graph. ; Definition at line 61 of file TSpider.h. ◆ fPolyList. TList* TSpider::fPolyList. private . Polygons representing the variables. ; Definition at line 62 of file TSpider.h. ◆ fSegmentDisplay. bool TSpider::fSegmentDisplay. private . True if displaying a segment plot. ; Definition at line 68 of file TSpider.h. ◆ fSelect. TTreeFormula* TSpider::fSelect. private . Selection condition. ; Definition at line 63 of file TSpider.h. ◆ fSelector. TSelectorDraw* TSpider::fSelector. private . ! Selector. ; Definition at line 64 of fi,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:33444,Modifiability,variab,variables,33444,nager* TSpider::fManager. private . Coordinator for the formulas. ; Definition at line 60 of file TSpider.h. ◆ fMax. Double_t* TSpider::fMax. private . [fNcols] Maximum value of the variables. ; Definition at line 51 of file TSpider.h. ◆ fMin. Double_t* TSpider::fMin. private . [fNcols] Minimum value of the variables. ; Definition at line 52 of file TSpider.h. ◆ fNcols. UInt_t TSpider::fNcols. private . Number of variables. ; Definition at line 44 of file TSpider.h. ◆ fNentries. Long64_t TSpider::fNentries. private . Number of entries. ; Definition at line 47 of file TSpider.h. ◆ fNx. UInt_t TSpider::fNx. private . Number of horizontal spider plots. ; Definition at line 42 of file TSpider.h. ◆ fNy. UInt_t TSpider::fNy. private . Number of vertical spider plots. ; Definition at line 43 of file TSpider.h. ◆ fPolargram. TGraphPolargram* TSpider::fPolargram. private . Polar graph. ; Definition at line 61 of file TSpider.h. ◆ fPolyList. TList* TSpider::fPolyList. private . Polygons representing the variables. ; Definition at line 62 of file TSpider.h. ◆ fSegmentDisplay. bool TSpider::fSegmentDisplay. private . True if displaying a segment plot. ; Definition at line 68 of file TSpider.h. ◆ fSelect. TTreeFormula* TSpider::fSelect. private . Selection condition. ; Definition at line 63 of file TSpider.h. ◆ fSelector. TSelectorDraw* TSpider::fSelector. private . ! Selector. ; Definition at line 64 of file TSpider.h. ◆ fShowRange. bool TSpider::fShowRange. private . Show range of variables or not. ; Definition at line 69 of file TSpider.h. ◆ fSuperposed. TList* TSpider::fSuperposed. private . Superposed spider plots. ; Definition at line 53 of file TSpider.h. ◆ fTree. TTree* TSpider::fTree. private . Pointer to the TTree to represent. ; Definition at line 54 of file TSpider.h. Libraries for TSpider:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TSpider.h; tree/treeviewer/src/TSpider.cxx. TSpider. ROOT master - Referenc,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:33930,Modifiability,variab,variables,33930,ine 60 of file TSpider.h. ◆ fMax. Double_t* TSpider::fMax. private . [fNcols] Maximum value of the variables. ; Definition at line 51 of file TSpider.h. ◆ fMin. Double_t* TSpider::fMin. private . [fNcols] Minimum value of the variables. ; Definition at line 52 of file TSpider.h. ◆ fNcols. UInt_t TSpider::fNcols. private . Number of variables. ; Definition at line 44 of file TSpider.h. ◆ fNentries. Long64_t TSpider::fNentries. private . Number of entries. ; Definition at line 47 of file TSpider.h. ◆ fNx. UInt_t TSpider::fNx. private . Number of horizontal spider plots. ; Definition at line 42 of file TSpider.h. ◆ fNy. UInt_t TSpider::fNy. private . Number of vertical spider plots. ; Definition at line 43 of file TSpider.h. ◆ fPolargram. TGraphPolargram* TSpider::fPolargram. private . Polar graph. ; Definition at line 61 of file TSpider.h. ◆ fPolyList. TList* TSpider::fPolyList. private . Polygons representing the variables. ; Definition at line 62 of file TSpider.h. ◆ fSegmentDisplay. bool TSpider::fSegmentDisplay. private . True if displaying a segment plot. ; Definition at line 68 of file TSpider.h. ◆ fSelect. TTreeFormula* TSpider::fSelect. private . Selection condition. ; Definition at line 63 of file TSpider.h. ◆ fSelector. TSelectorDraw* TSpider::fSelector. private . ! Selector. ; Definition at line 64 of file TSpider.h. ◆ fShowRange. bool TSpider::fShowRange. private . Show range of variables or not. ; Definition at line 69 of file TSpider.h. ◆ fSuperposed. TList* TSpider::fSuperposed. private . Superposed spider plots. ; Definition at line 53 of file TSpider.h. ◆ fTree. TTree* TSpider::fTree. private . Pointer to the TTree to represent. ; Definition at line 54 of file TSpider.h. Libraries for TSpider:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TSpider.h; tree/treeviewer/src/TSpider.cxx. TSpider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:8623,Security,hash,hash,8623," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:1246,Testability,log,log,1246,"bers ; TSpider Class Reference. ; Spider class. ; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as many polar axes as selected data members. For each of them, it draws on the axis the position of the present event between the min and max of the data member. Two modes are available:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default constructor.Definition TSpider.cxx:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41. Definition at line 40 of file TSpider.h. Public Member Functions;  TSpider",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:1257,Testability,log,log,1257,"bers ; TSpider Class Reference. ; Spider class. ; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as many polar axes as selected data members. For each of them, it draws on the axis the position of the present event between the min and max of the data member. Two modes are available:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default constructor.Definition TSpider.cxx:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41. Definition at line 40 of file TSpider.h. Public Member Functions;  TSpider",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:846,Usability,simpl,simply,846,". ROOT: TSpider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSpider Class Reference. ; Spider class. ; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as many polar axes as selected data members. For each of them, it draws on the axis the position of the present event between the min and max of the data member. Two modes are available:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default co",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpider.html:1741,Usability,simpl,simple,1741,"e spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default constructor.Definition TSpider.cxx:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41. Definition at line 40 of file TSpider.h. Public Member Functions;  TSpider ();  Default constructor. ;  ;  TSpider (TTree *tree, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=0, Long64_t firstentry=0);  Normal constructor. ;  ;  ~TSpider () override;  Destructor. ;  ; void AddSuperposed (TSpider *sp);  Allow to superpose several spider views. ;  ; void AddVariable (const char *varexp);  Add a variable to the plot from its expression. ;  ; void DeleteVariable (const char *varexp);  Delete a variable from its expression. ;  ; Int_t D",MatchSource.WIKI,doc/master/classTSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpider.html
https://root.cern/doc/master/classTSpline.html:4607,Availability,error,error,4607,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:4696,Availability,error,error,4696,"t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:4851,Availability,error,error,4851,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this obj",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:5028,Availability,error,error,5028,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:8867,Availability,error,error,8867,"] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:22804,Availability,avail,available,22804," Reimplemented from TObject.; Definition at line 131 of file TSpline.cxx. ◆ SaveAs(). void TSpline::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. inlineoverridevirtual . Save this object in the file specified by filename. . if ""filename"" contains "".root"" the object is saved in filename as root binary file.; if ""filename"" contains "".xml"" the object is saved in filename as a xml ascii file.; if ""filename"" contains "".cc"" the object is saved in filename as C code independant from ROOT. The code is generated via SavePrimitive(). Specific code should be implemented in each object to handle this option. Like in TF1::SavePrimitive().; otherwise the object is written to filename as a CINT/C++ script. The C++ code to rebuild this object is generated via SavePrimitive(). The ""option"" parameter is passed to SavePrimitive. By default it is an empty string. It can be used to specify the Draw option in the code generated by SavePrimitive.; The function is available via the object context menu. . Reimplemented from TObject.; Reimplemented in TSpline3, and TSpline5.; Definition at line 66 of file TSpline.h. ◆ SetNpx(). void TSpline::SetNpx ; (; Int_t ; n). inline . Definition at line 67 of file TSpline.h. ◆ Streamer(). void TSpline::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline. ; Reimplemented from TNamed.; Reimplemented in TMVA::TSpline1, TMVA::TSpline2, TSpline3, and TSpline5.; Definition at line 231 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TSpline.h. Member Data Documentation. ◆ fDelta. Double_t TSpline::fDelta = -1. protected . Distance between equidistant knots. ; Definition at line 33 of file TSpline.h. ◆ fGraph. TGraph* TSpline::fGraph = nullptr. protected . Graph for drawing the knots. ; Definition at line 39 of file TSpline.h. ◆ fHistogram. TH1F* TSpline::fHistogram = nullptr. protec",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:4613,Integrability,message,message,4613,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:5034,Integrability,message,message,5034,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:6024,Integrability,message,message,6024,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:8873,Integrability,message,message,8873,"] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:9246,Integrability,message,message,9246,"his object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:1720,Modifiability,inherit,inherited,1720,"Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; virtual Double_t Eval (Double_t x) const =0;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual void GetKnot (Int_t i, Double_t &x, Double_t &y) const =0;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SaveAs (const char *="""", Option_t *="""") const override;  Save this object in the file specified by filename. ;  ; void SetNpx (Int_t n);  ; void Streamer (TBuffer &) override;  Stream an object of class TSpline. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:3348,Modifiability,inherit,inherited,3348,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * Dra",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:4243,Modifiability,inherit,inheritance,4243,"ject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:6122,Modifiability,inherit,inherits,6122,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:6239,Modifiability,inherit,inherits,6239,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:9553,Modifiability,inherit,inherited,9553,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:11058,Modifiability,inherit,inherited,11058,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:12313,Modifiability,inherit,inherited,12313,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:13927,Modifiability,inherit,inherited,13927,"ual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:14137,Modifiability,inherit,inherited,14137,"ual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:14655,Modifiability,inherit,inherited,14655,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TSpline (const TSpline &);  Copy constructor. ;  ; virtual void BuildCoeff ()=0;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:14867,Modifiability,inherit,inherited,14867,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TSpline (const TSpline &);  Copy constructor. ;  ; virtual void BuildCoeff ()=0;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:15079,Modifiability,inherit,inherited,15079,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TSpline (const TSpline &);  Copy constructor. ;  ; virtual void BuildCoeff ()=0;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for ",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:15789,Modifiability,inherit,inherited,15789," Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TSpline (const TSpline &);  Copy constructor. ;  ; virtual void BuildCoeff ()=0;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attrib",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:16478,Modifiability,inherit,inherited,16478,"tyle with line width 1 for the given style. ;  . Protected Member Functions;  TSpline (const TSpline &);  Copy constructor. ;  ; virtual void BuildCoeff ()=0;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUU",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:16560,Modifiability,inherit,inherited,16560,"tyle with line width 1 for the given style. ;  . Protected Member Functions;  TSpline (const TSpline &);  Copy constructor. ;  ; virtual void BuildCoeff ()=0;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUU",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:16721,Modifiability,inherit,inherited,16721,"ignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:16854,Modifiability,inherit,inherited,16854,"st char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline:. This browser is not able to show SVG: try Firefox, Chrom",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:17048,Modifiability,inherit,inherited,17048,"nots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpline() [1/3]. TSpline::TSpline ; (; const TSpline & ; sp). protected . Copy constructor. ; Definition at line 41 of file TSpline.cxx. ◆ TSpline() [2/3]. T",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:17689,Modifiability,inherit,inherited,17689,"tributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpline() [1/3]. TSpline::TSpline ; (; const TSpline & ; sp). protected . Copy constructor. ; Definition at line 41 of file TSpline.cxx. ◆ TSpline() [2/3]. TSpline::TSpline ; (; ). inline . Definition at line 47 of file TSpline.h. ◆ TSpline() [3/3]. TSpline::TSpline ; (; const char * ; title, . Double_t ; delta, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; np, . Bool_t ; step . ). inline . Definition at line 48 of file TSpline.h. ◆ ~TSpline(). TSpline::~TSpline ; (; ). override . Destructor. ; Definition at line 60 of file TSpline.cxx. Member Function Documentation. ◆ BuildCoeff(). virtual void TSpline::BuildCoeff ; (; ). protectedpure virtual . Implemented in TSpline3, TSpline5, TMVA::TSpline1, and TMVA::TSpline2. ◆ Class(). static TClass * TSp",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline.html:2588,Security,hash,hash,2588," override;  Stream an object of class TSpline. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline.html
https://root.cern/doc/master/classTSpline3.html:7119,Availability,error,error,7119,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:7208,Availability,error,error,7208,"t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:7363,Availability,error,error,7363,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this obj",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:7540,Availability,error,error,7540,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:11241,Availability,error,error,11241,"id * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:7125,Integrability,message,message,7125,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:7546,Integrability,message,message,7546,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:8536,Integrability,message,message,8536,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:11247,Integrability,message,message,11247,"id * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:11620,Integrability,message,message,11620,"contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:3303,Modifiability,inherit,inherited,3303,"_t &x, Double_t &y, Double_t &b, Double_t &c, Double_t &d) const;  ; void GetKnot (Int_t i, Double_t &x, Double_t &y) const override;  ; TClass * IsA () const override;  ; TSpline3 & operator= (const TSpline3 &);  Assignment operator. ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this spline as a C++ function that can be executed without ROOT the name of the function is the name of the file up to the ""."" if any. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set point number i. ;  ; virtual void SetPointCoeff (Int_t i, Double_t b, Double_t c, Double_t d);  Set point coefficient number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TSpline3. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSpline;  TSpline ();  ;  TSpline (const char *title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step);  ;  ~TSpline () override;  Destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a spline. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SetNpx (Int_t n);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &n",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:4232,Modifiability,inherit,inherited,4232,"ffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSpline;  TSpline ();  ;  TSpline (const char *title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step);  ;  ~TSpline () override;  Destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a spline. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SetNpx (Int_t n);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:5860,Modifiability,inherit,inherited,5860,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * Dra",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:6755,Modifiability,inherit,inheritance,6755,"ject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:8634,Modifiability,inherit,inherits,8634,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:8751,Modifiability,inherit,inherits,8751,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:11927,Modifiability,inherit,inherited,11927,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:13432,Modifiability,inherit,inherited,13432,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:14687,Modifiability,inherit,inherited,14687,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:16354,Modifiability,inherit,inherited,16354,"rker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Test ();  Test method for TSpline5. ;  ;  Static Public Member Functions inherited from TSpline; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * D",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:16565,Modifiability,inherit,inherited,16565,"rker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Test ();  Test method for TSpline5. ;  ;  Static Public Member Functions inherited from TSpline; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * D",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:16775,Modifiability,inherit,inherited,16775,"rker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Test ();  Test method for TSpline5. ;  ;  Static Public Member Functions inherited from TSpline; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * D",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:17293,Modifiability,inherit,inherited,17293,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BuildCoeff () override;  Build coefficients. ;  ; void SetCond (const char *opt);  Check the boundary conditions. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:17505,Modifiability,inherit,inherited,17505,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BuildCoeff () override;  Build coefficients. ;  ; void SetCond (const char *opt);  Check the boundary conditions. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:17717,Modifiability,inherit,inherited,17717,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BuildCoeff () override;  Build coefficients. ;  ; void SetCond (const char *opt);  Check the boundary conditions. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:18400,Modifiability,inherit,inherited,18400,"Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BuildCoeff () override;  Build coefficients. ;  ; void SetCond (const char *opt);  Check the boundary conditions. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBegCond = -1;  0=no beg cond, 1=first derivative, 2=second derivative ;  ; Int_t fEndCond = -1;  0=no end cond, 1=first derivative, 2=second derivative ;  ; TSplinePoly3 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ; Double_t fValBeg = 0.;  Initial value of first or second derivative. ;  ; Double_t fValEnd = 0.;  End value of first or second derivative. ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:18570,Modifiability,inherit,inherited,18570,"Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BuildCoeff () override;  Build coefficients. ;  ; void SetCond (const char *opt);  Check the boundary conditions. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBegCond = -1;  0=no beg cond, 1=first derivative, 2=second derivative ;  ; Int_t fEndCond = -1;  0=no end cond, 1=first derivative, 2=second derivative ;  ; TSplinePoly3 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ; Double_t fValBeg = 0.;  Initial value of first or second derivative. ;  ; Double_t fValEnd = 0.;  End value of first or second derivative. ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  M",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:19175,Modifiability,inherit,inherited,19175,"ne width 1 for the given style. ;  . Protected Member Functions; void BuildCoeff () override;  Build coefficients. ;  ; void SetCond (const char *opt);  Check the boundary conditions. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBegCond = -1;  0=no beg cond, 1=first derivative, 2=second derivative ;  ; Int_t fEndCond = -1;  0=no end cond, 1=first derivative, 2=second derivative ;  ; TSplinePoly3 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ; Double_t fValBeg = 0.;  Initial value of first or second derivative. ;  ; Double_t fValEnd = 0.;  End value of first or second derivative. ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerSt",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:19683,Modifiability,inherit,inherited,19683,"eZombie ();  . Protected Attributes; Int_t fBegCond = -1;  0=no beg cond, 1=first derivative, 2=second derivative ;  ; Int_t fEndCond = -1;  0=no end cond, 1=first derivative, 2=second derivative ;  ; TSplinePoly3 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ; Double_t fValBeg = 0.;  Initial value of first or second derivative. ;  ; Double_t fValEnd = 0.;  End value of first or second derivative. ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUU",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:19765,Modifiability,inherit,inherited,19765,"eZombie ();  . Protected Attributes; Int_t fBegCond = -1;  0=no beg cond, 1=first derivative, 2=second derivative ;  ; Int_t fEndCond = -1;  0=no end cond, 1=first derivative, 2=second derivative ;  ; TSplinePoly3 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ; Double_t fValBeg = 0.;  Initial value of first or second derivative. ;  ; Double_t fValEnd = 0.;  End value of first or second derivative. ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUU",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:19926,Modifiability,inherit,inherited,19926,"inePoly3 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ; Double_t fValBeg = 0.;  Initial value of first or second derivative. ;  ; Double_t fValEnd = 0.;  End value of first or second derivative. ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:20059,Modifiability,inherit,inherited,20059,". ;  ; Double_t fValEnd = 0.;  End value of first or second derivative. ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline3:. This browser is not able to show SVG: try Firefox, Chro",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:20253,Modifiability,inherit,inherited,20253,"nots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpline3() [1/8]. TSpline3::TSpline3 ; (; ). inline . Definition at line 194 of file TSpline.h. ◆ TSpline3() [2/8]. TSpline3::TSpline3 ; (; const char * ; t",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:20894,Modifiability,inherit,inherited,20894,"tributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpline3() [1/8]. TSpline3::TSpline3 ; (; ). inline . Definition at line 194 of file TSpline.h. ◆ TSpline3() [2/8]. TSpline3::TSpline3 ; (; const char * ; title, . Double_t ; x[], . Double_t ; y[], . Int_t ; n, . const char * ; opt = nullptr, . Double_t ; valbeg = 0, . Double_t ; valend = 0 . ). Third spline creator given an array of arbitrary knots in increasing abscissa order and possibly end point conditions. ; Definition at line 358 of file TSpline.cxx. ◆ TSpline3() [3/8]. TSpline3::TSpline3 ; (; const char * ; title, . Double_t ; xmin, . Double_t ; xmax, . Double_t ; y[], . Int_t ; n, . const char * ; opt = nullptr, . Double_t ; valbeg = 0, . Double_t ; valend = 0 . ). Third spline creator given an array of arbitrary function values on equidi",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:29729,Modifiability,variab,variables,29729,"; opt). protected . Check the boundary conditions. ; Definition at line 574 of file TSpline.cxx. ◆ SetPoint(). void TSpline3::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y . ). virtual . Set point number i. ; Definition at line 995 of file TSpline.cxx. ◆ SetPointCoeff(). void TSpline3::SetPointCoeff ; (; Int_t ; i, . Double_t ; b, . Double_t ; c, . Double_t ; d . ). virtual . Set point coefficient number i. ; Definition at line 1005 of file TSpline.cxx. ◆ Streamer(). void TSpline3::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline3. ; Reimplemented from TSpline.; Definition at line 1173 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TSpline.h. ◆ Test(). void TSpline3::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 2 always for third spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients.; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; mTMarker mDefinition textangle.C:8; test of TSpline3 with non equidistant knots and equidistant knots follows. ; Definition at line 613 of file TSpline.cxx. Member Data Documentation. ◆ fBegCond. Int_t TSpline3::fBegCond = -1. protected . 0=no beg cond, 1=first derivative, 2=second derivative ; Definition at line 187 of file TSpline.h. ◆ fEndCond. Int_t TSpline3::fEndCond = -1. protected . 0=no end cond, 1=first derivative, 2=second derivative ; Definition at line 188 of file TSpline.h. ◆ fPoly. TSplinePoly3* TSpline3::fPoly = nullptr. ",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:29772,Modifiability,variab,variables,29772," ; Definition at line 574 of file TSpline.cxx. ◆ SetPoint(). void TSpline3::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y . ). virtual . Set point number i. ; Definition at line 995 of file TSpline.cxx. ◆ SetPointCoeff(). void TSpline3::SetPointCoeff ; (; Int_t ; i, . Double_t ; b, . Double_t ; c, . Double_t ; d . ). virtual . Set point coefficient number i. ; Definition at line 1005 of file TSpline.cxx. ◆ Streamer(). void TSpline3::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline3. ; Reimplemented from TSpline.; Definition at line 1173 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TSpline.h. ◆ Test(). void TSpline3::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 2 always for third spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients.; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; mTMarker mDefinition textangle.C:8; test of TSpline3 with non equidistant knots and equidistant knots follows. ; Definition at line 613 of file TSpline.cxx. Member Data Documentation. ◆ fBegCond. Int_t TSpline3::fBegCond = -1. protected . 0=no beg cond, 1=first derivative, 2=second derivative ; Definition at line 187 of file TSpline.h. ◆ fEndCond. Int_t TSpline3::fEndCond = -1. protected . 0=no end cond, 1=first derivative, 2=second derivative ; Definition at line 188 of file TSpline.h. ◆ fPoly. TSplinePoly3* TSpline3::fPoly = nullptr. protected . [fNp] Array of polynomial terms ; Defi",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:5100,Security,hash,hash,5100," current attributes. ;  ; void SetNpx (Int_t n);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:30205,Testability,test,test,30205," overridevirtual . Stream an object of class TSpline3. ; Reimplemented from TSpline.; Definition at line 1173 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TSpline.h. ◆ Test(). void TSpline3::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 2 always for third spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients.; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; mTMarker mDefinition textangle.C:8; test of TSpline3 with non equidistant knots and equidistant knots follows. ; Definition at line 613 of file TSpline.cxx. Member Data Documentation. ◆ fBegCond. Int_t TSpline3::fBegCond = -1. protected . 0=no beg cond, 1=first derivative, 2=second derivative ; Definition at line 187 of file TSpline.h. ◆ fEndCond. Int_t TSpline3::fEndCond = -1. protected . 0=no end cond, 1=first derivative, 2=second derivative ; Definition at line 188 of file TSpline.h. ◆ fPoly. TSplinePoly3* TSpline3::fPoly = nullptr. protected . [fNp] Array of polynomial terms ; Definition at line 184 of file TSpline.h. ◆ fValBeg. Double_t TSpline3::fValBeg = 0. protected . Initial value of first or second derivative. ; Definition at line 185 of file TSpline.h. ◆ fValEnd. Double_t TSpline3::fValEnd = 0. protected . End value of first or second derivative. ; Definition at line 186 of file TSpline.h. Libraries for TSpline3:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TSpline.h; hist/hist/src/TSpline.c",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline3.html:23842,Usability,guid,guide,23842,"t line 445 of file TSpline.cxx. ◆ TSpline3() [6/8]. TSpline3::TSpline3 ; (; const char * ; title, . const TGraph * ; g, . const char * ; opt = nullptr, . Double_t ; valbeg = 0, . Double_t ; valend = 0 . ). Third spline creator given a TGraph with abscissa in increasing order and possibly end point conditions. ; Definition at line 479 of file TSpline.cxx. ◆ TSpline3() [7/8]. TSpline3::TSpline3 ; (; const TH1 * ; h, . const char * ; opt = nullptr, . Double_t ; valbeg = 0, . Double_t ; valend = 0 . ). Third spline creator given a TH1. ; Definition at line 510 of file TSpline.cxx. ◆ TSpline3() [8/8]. TSpline3::TSpline3 ; (; const TSpline3 & ; sp3). Copy constructor. ; Definition at line 538 of file TSpline.cxx. ◆ ~TSpline3(). TSpline3::~TSpline3 ; (; ). inlineoverride . Definition at line 219 of file TSpline.h. Member Function Documentation. ◆ BuildCoeff(). void TSpline3::BuildCoeff ; (; void ; ). overrideprotectedvirtual . Build coefficients. ; subroutine cubspl ( tau, c, n, ibcbeg, ibcend ); from * a practical guide to splines * by c. de boor; ************************ input ***************************; n = number of data points. assumed to be .ge. 2.; (tau(i), c(1,i), i=1,...,n) = abscissae and ordinates of the; data points. tau is assumed to be strictly increasing.; ibcbeg, ibcend = boundary condition indicators, and; c(2,1), c(2,n) = boundary condition information. specifically,; ibcbeg = 0 means no boundary condition at tau(1) is given.; in this case, the not-a-knot condition is used, i.e. the; jump in the third derivative across tau(2) is forced to; zero, thus the first and the second cubic polynomial pieces; are made to coincide.); ibcbeg = 1 means that the slope at tau(1) is made to equal; c(2,1), supplied by input.; ibcbeg = 2 means that the second derivative at tau(1) is; made to equal c(2,1), supplied by input.; ibcend = 0, 1, or 2 has analogous meaning concerning the; boundary condition at tau(n), with the additional infor-; mation taken from c(2,n).; *******",MatchSource.WIKI,doc/master/classTSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline3.html
https://root.cern/doc/master/classTSpline5.html:7454,Availability,error,error,7454,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:7543,Availability,error,error,7543,"t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:7698,Availability,error,error,7698,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this obj",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:7875,Availability,error,error,7875,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:11576,Availability,error,error,11576,"id * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:25931,Deployability,continuous,continuous,25931," 1983, p. 258-259. TSpline5 computes the coefficients of a quintic natural quintic spli; s(x) with knots x(i) interpolating there to given function values:; s(x(i)) = y(i) for i = 1,2, ..., n.; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; in each interval (x(i),x(i+1)) the spline function s(xx) is a polynomial of fifth degree: s(xx) = ((((f(i)*p+e(i))*p+d(i))*p+c(i))*p+b(i))*p+y(i) (*); = ((((-f(i)*q+e(i+1))*q-d(i+1))*q+c(i+1))*q-b(i+1))*q+y(i+1); d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; e#define e(i)Definition RSha256.hxx:103; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; qfloat * qDefinition THbookFile.cxx:89; where p = xx - x(i) and q = x(i+1) - xx. (note the first subscript in the second expression.) the different polynomials are pieced together so that s(x) and its derivatives up to s"""" are continuous. input:; n number of data points, (at least three, i.e. n > 2); x(1:n) the strictly increasing or decreasing sequence of; knots. the spacing must be such that the fifth power; of x(i+1) - x(i) can be formed without overflow or; underflow of exponents.; y(1:n) the prescribed function values at the knots.; ; output:; b,c,d,e,f the computed spline coefficients as in (*).; (1:n) specifically; b(i) = s'(x(i)), c(i) = s""(x(i))/2, d(i) = s""'(x(i))/6,; e(i) = s""""(x(i))/24, f(i) = s""""'(x(i))/120.; f(n) is neither used nor altered. the five arrays; b,c,d,e,f must always be distinct.; ; option:; it is possible to specify values for the first and second; derivatives of the spline function at arbitrarily many knots.; this is done by relaxing the requirement that the sequence of; knots be strictly increasing or decreasing. specifically:; if x(j) = x(j+1) then s(x(j)) = y(j) and s'(x(j)) = y(j+1),; if x(j) = x(j+1) = x(j+2) then in addition s""(x(j)",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:26111,Energy Efficiency,power,power,26111," x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; in each interval (x(i),x(i+1)) the spline function s(xx) is a polynomial of fifth degree: s(xx) = ((((f(i)*p+e(i))*p+d(i))*p+c(i))*p+b(i))*p+y(i) (*); = ((((-f(i)*q+e(i+1))*q-d(i+1))*q+c(i+1))*q-b(i+1))*q+y(i+1); d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; e#define e(i)Definition RSha256.hxx:103; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; qfloat * qDefinition THbookFile.cxx:89; where p = xx - x(i) and q = x(i+1) - xx. (note the first subscript in the second expression.) the different polynomials are pieced together so that s(x) and its derivatives up to s"""" are continuous. input:; n number of data points, (at least three, i.e. n > 2); x(1:n) the strictly increasing or decreasing sequence of; knots. the spacing must be such that the fifth power; of x(i+1) - x(i) can be formed without overflow or; underflow of exponents.; y(1:n) the prescribed function values at the knots.; ; output:; b,c,d,e,f the computed spline coefficients as in (*).; (1:n) specifically; b(i) = s'(x(i)), c(i) = s""(x(i))/2, d(i) = s""'(x(i))/6,; e(i) = s""""(x(i))/24, f(i) = s""""'(x(i))/120.; f(n) is neither used nor altered. the five arrays; b,c,d,e,f must always be distinct.; ; option:; it is possible to specify values for the first and second; derivatives of the spline function at arbitrarily many knots.; this is done by relaxing the requirement that the sequence of; knots be strictly increasing or decreasing. specifically:; if x(j) = x(j+1) then s(x(j)) = y(j) and s'(x(j)) = y(j+1),; if x(j) = x(j+1) = x(j+2) then in addition s""(x(j)) = y(j+2).; note that s""""(x) is discontinuous at a double knot and, in; addition, s""'(x) is discontinuous at a triple knot. the; subroutine assigns y(i) to y(i+1) in these cases and also to; y(i+2) at a triple knot. the representation (*) rem",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:7460,Integrability,message,message,7460,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:7881,Integrability,message,message,7881,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:8871,Integrability,message,message,8871,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:11582,Integrability,message,message,11582,"id * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:11955,Integrability,message,message,11955,"contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:3638,Modifiability,inherit,inherited,3638,"le_t &d, Double_t &e, Double_t &f) const;  ; void GetKnot (Int_t i, Double_t &x, Double_t &y) const override;  ; TClass * IsA () const override;  ; TSpline5 & operator= (const TSpline5 &);  Assignment operator. ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this spline as a C++ function that can be executed without ROOT the name of the function is the name of the file up to the ""."" if any. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set point number i. ;  ; virtual void SetPointCoeff (Int_t i, Double_t b, Double_t c, Double_t d, Double_t e, Double_t f);  Set point coefficient number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TSpline5. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSpline;  TSpline ();  ;  TSpline (const char *title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step);  ;  ~TSpline () override;  Destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a spline. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SetNpx (Int_t n);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &n",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:4567,Modifiability,inherit,inherited,4567,"ffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSpline;  TSpline ();  ;  TSpline (const char *title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step);  ;  ~TSpline () override;  Destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a spline. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SetNpx (Int_t n);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:6195,Modifiability,inherit,inherited,6195,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * Dra",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:7090,Modifiability,inherit,inheritance,7090,"ject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ;",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:8969,Modifiability,inherit,inherits,8969,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:9086,Modifiability,inherit,inherits,9086,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:12262,Modifiability,inherit,inherited,12262,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:13767,Modifiability,inherit,inherited,13767,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:15022,Modifiability,inherit,inherited,15022,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:16689,Modifiability,inherit,inherited,16689,"rker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Test ();  Test method for TSpline5. ;  ;  Static Public Member Functions inherited from TSpline; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * D",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:16900,Modifiability,inherit,inherited,16900,"rker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Test ();  Test method for TSpline5. ;  ;  Static Public Member Functions inherited from TSpline; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * D",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:17110,Modifiability,inherit,inherited,17110,"rker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Test ();  Test method for TSpline5. ;  ;  Static Public Member Functions inherited from TSpline; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * D",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:17628,Modifiability,inherit,inherited,17628,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BoundaryConditions (const char *opt, Int_t &beg, Int_t &end, const char *&cb1, const char *&ce1, const char *&cb2, const char *&ce2);  Check the boundary conditions and the amount of extra double knots needed. ;  ; void BuildCoeff () override;  Algorithm 600, collected algorithms from acm. ;  ; void SetBoundaries (Double_t b1, Double_t e1, Double_t b2, Double_t e2, const char *cb1, const char *ce1, const char *cb2, const char *ce2);  Set the boundary conditions at double/triple",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:17840,Modifiability,inherit,inherited,17840,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BoundaryConditions (const char *opt, Int_t &beg, Int_t &end, const char *&cb1, const char *&ce1, const char *&cb2, const char *&ce2);  Check the boundary conditions and the amount of extra double knots needed. ;  ; void BuildCoeff () override;  Algorithm 600, collected algorithms from acm. ;  ; void SetBoundaries (Double_t b1, Double_t e1, Double_t b2, Double_t e2, const char *cb1, const char *ce1, const char *cb2, const char *ce2);  Set the boundary conditions at double/triple",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:18052,Modifiability,inherit,inherited,18052,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BoundaryConditions (const char *opt, Int_t &beg, Int_t &end, const char *&cb1, const char *&ce1, const char *&cb2, const char *&ce2);  Check the boundary conditions and the amount of extra double knots needed. ;  ; void BuildCoeff () override;  Algorithm 600, collected algorithms from acm. ;  ; void SetBoundaries (Double_t b1, Double_t e1, Double_t b2, Double_t e2, const char *cb1, const char *ce1, const char *cb2, const char *ce2);  Set the boundary conditions at double/triple",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:19111,Modifiability,inherit,inherited,19111,"lass_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BoundaryConditions (const char *opt, Int_t &beg, Int_t &end, const char *&cb1, const char *&ce1, const char *&cb2, const char *&ce2);  Check the boundary conditions and the amount of extra double knots needed. ;  ; void BuildCoeff () override;  Algorithm 600, collected algorithms from acm. ;  ; void SetBoundaries (Double_t b1, Double_t e1, Double_t b2, Double_t e2, const char *cb1, const char *ce1, const char *cb2, const char *ce2);  Set the boundary conditions at double/triple knots. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSplinePoly5 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TS",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:19281,Modifiability,inherit,inherited,19281," the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; void BoundaryConditions (const char *opt, Int_t &beg, Int_t &end, const char *&cb1, const char *&ce1, const char *&cb2, const char *&ce2);  Check the boundary conditions and the amount of extra double knots needed. ;  ; void BuildCoeff () override;  Algorithm 600, collected algorithms from acm. ;  ; void SetBoundaries (Double_t b1, Double_t e1, Double_t b2, Double_t e2, const char *cb1, const char *ce1, const char *cb2, const char *ce2);  Set the boundary conditions at double/triple knots. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSplinePoly5 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited fr",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:19578,Modifiability,inherit,inherited,19578,"style. ;  . Protected Member Functions; void BoundaryConditions (const char *opt, Int_t &beg, Int_t &end, const char *&cb1, const char *&ce1, const char *&cb2, const char *&ce2);  Check the boundary conditions and the amount of extra double knots needed. ;  ; void BuildCoeff () override;  Algorithm 600, collected algorithms from acm. ;  ; void SetBoundaries (Double_t b1, Double_t e1, Double_t b2, Double_t e2, const char *cb1, const char *ce1, const char *cb2, const char *ce2);  Set the boundary conditions at double/triple knots. ;  ;  Protected Member Functions inherited from TSpline;  TSpline (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSplinePoly5 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMark",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:20086,Modifiability,inherit,inherited,20086,"ne (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSplinePoly5 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUU",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:20168,Modifiability,inherit,inherited,20168,"ne (const TSpline &);  Copy constructor. ;  ; TSpline & operator= (const TSpline &);  Assignment operator. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSplinePoly5 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUU",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:20329,Modifiability,inherit,inherited,20329,"ar *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TSplinePoly5 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:20462,Modifiability,inherit,inherited,20462,"butes; TSplinePoly5 * fPoly = nullptr;  [fNp] Array of polynomial terms ;  ;  Protected Attributes inherited from TSpline; Double_t fDelta = -1.;  Distance between equidistant knots. ;  ; TGraph * fGraph = nullptr;  Graph for drawing the knots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline5:. This browser is not able to show SVG: try Firefox, Chro",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:20656,Modifiability,inherit,inherited,20656,"nots. ;  ; TH1F * fHistogram = nullptr;  Temporary histogram. ;  ; Bool_t fKstep = kFALSE;  True of equidistant knots. ;  ; Int_t fNp = 0;  Number of knots. ;  ; Int_t fNpx = 100;  Number of points used for graphical representation. ;  ; Double_t fXmax = 0.;  Maximum value of abscissa. ;  ; Double_t fXmin = 0.;  Minimum value of abscissa. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline5:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpline5() [1/8]. TSpline5::TSpline5 ; (; ). inline . Definition at line 250 of file TSpline.h. ◆ TSpline5() [2/8]. TSpline5::TSpline5 ; (; const char * ; t",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:21297,Modifiability,inherit,inherited,21297,"tributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSpline.h>. Inheritance diagram for TSpline5:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSpline5() [1/8]. TSpline5::TSpline5 ; (; ). inline . Definition at line 250 of file TSpline.h. ◆ TSpline5() [2/8]. TSpline5::TSpline5 ; (; const char * ; title, . Double_t ; x[], . Double_t ; y[], . Int_t ; n, . const char * ; opt = nullptr, . Double_t ; b1 = 0, . Double_t ; e1 = 0, . Double_t ; b2 = 0, . Double_t ; e2 = 0 . ). Quintic natural spline creator given an array of arbitrary knots in increasing abscissa order and possibly end point conditions. ; Definition at line 1213 of file TSpline.cxx. ◆ TSpline5() [3/8]. TSpline5::TSpline5 ; (; const char * ; title, . Double_t ; xmin, . Double_t ; xmax, . Double_t ; y[], . Int_t ; n, . const char * ; opt = nullptr, . Double_t ; b1 = 0, . Double_t ; e1 = 0, . Double_t ; b2 = 0, . Double_t ; e2 = 0 ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:31530,Modifiability,variab,variables,31530,"/triple knots. ; Definition at line 1478 of file TSpline.cxx. ◆ SetPoint(). void TSpline5::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y . ). virtual . Set point number i. ; Definition at line 1806 of file TSpline.cxx. ◆ SetPointCoeff(). void TSpline5::SetPointCoeff ; (; Int_t ; i, . Double_t ; b, . Double_t ; c, . Double_t ; d, . Double_t ; e, . Double_t ; f . ). virtual . Set point coefficient number i. ; Definition at line 1817 of file TSpline.cxx. ◆ Streamer(). void TSpline5::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline5. ; Reimplemented from TSpline.; Definition at line 2488 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline5::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 296 of file TSpline.h. ◆ Test(). void TSpline5::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients.; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; mTMarker mDefinition textangle.C:8; test of TSpline5 with non equidistant knots and equidistant knots follows. ; Definition at line 2083 of file TSpline.cxx. Member Data Documentation. ◆ fPoly. TSpli",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:31573,Modifiability,variab,variables,31573,"Spline.cxx. ◆ SetPoint(). void TSpline5::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y . ). virtual . Set point number i. ; Definition at line 1806 of file TSpline.cxx. ◆ SetPointCoeff(). void TSpline5::SetPointCoeff ; (; Int_t ; i, . Double_t ; b, . Double_t ; c, . Double_t ; d, . Double_t ; e, . Double_t ; f . ). virtual . Set point coefficient number i. ; Definition at line 1817 of file TSpline.cxx. ◆ Streamer(). void TSpline5::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline5. ; Reimplemented from TSpline.; Definition at line 2488 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline5::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 296 of file TSpline.h. ◆ Test(). void TSpline5::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients.; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; mTMarker mDefinition textangle.C:8; test of TSpline5 with non equidistant knots and equidistant knots follows. ; Definition at line 2083 of file TSpline.cxx. Member Data Documentation. ◆ fPoly. TSplinePoly5* TSpline5::fPoly = nullptr. protected . [f",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:5435,Security,hash,hash,5435," current attributes. ;  ; void SetNpx (Int_t n);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSpline5.html:32349,Testability,test,test,32349,"fficient number i. ; Definition at line 1817 of file TSpline.cxx. ◆ Streamer(). void TSpline5::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline5. ; Reimplemented from TSpline.; Definition at line 2488 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline5::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 296 of file TSpline.h. ◆ Test(). void TSpline5::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients.; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; mTMarker mDefinition textangle.C:8; test of TSpline5 with non equidistant knots and equidistant knots follows. ; Definition at line 2083 of file TSpline.cxx. Member Data Documentation. ◆ fPoly. TSplinePoly5* TSpline5::fPoly = nullptr. protected . [fNp] Array of polynomial terms ; Definition at line 240 of file TSpline.h. Libraries for TSpline5:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TSpline.h; hist/hist/src/TSpline.cxx. TSpline5. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTSpline5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSpline5.html
https://root.cern/doc/master/classTSplinePoly.html:2702,Availability,error,error,2702,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTSplinePoly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSplinePoly.html
https://root.cern/doc/master/classTSplinePoly.html:2791,Availability,error,error,2791,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTSplinePoly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSplinePoly.html
https://root.cern/doc/master/classTSplinePoly.html:2946,Availability,error,error,2946,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTSplinePoly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSplinePoly.html
https://root.cern/doc/master/classTSplinePoly.html:3243,Availability,error,error,3243,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTSplinePoly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSplinePoly.html
https://root.cern/doc/master/classTSplinePoly.html:7807,Availability,error,error,7807," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTSplinePoly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTSplinePoly.html
